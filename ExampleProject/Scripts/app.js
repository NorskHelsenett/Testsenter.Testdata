!function(e){function r(e,r,o){return 4===arguments.length?t.apply(this,arguments):void n(e,{declarative:!0,deps:r,declare:o})}function t(e,r,t,o){n(e,{declarative:!1,deps:r,executingRequire:t,execute:o})}function n(e,r){r.name=e,e in v||(v[e]=r),r.normalizedDeps=r.deps}function o(e,r){if(r[e.groupIndex]=r[e.groupIndex]||[],-1==g.call(r[e.groupIndex],e)){r[e.groupIndex].push(e);for(var t=0,n=e.normalizedDeps.length;n>t;t++){var a=e.normalizedDeps[t],u=v[a];if(u&&!u.evaluated){var d=e.groupIndex+(u.declarative!=e.declarative);if(void 0===u.groupIndex||u.groupIndex<d){if(void 0!==u.groupIndex&&(r[u.groupIndex].splice(g.call(r[u.groupIndex],u),1),0==r[u.groupIndex].length))throw new TypeError("Mixed dependency cycle detected");u.groupIndex=d}o(u,r)}}}}function a(e){var r=v[e];r.groupIndex=0;var t=[];o(r,t);for(var n=!!r.declarative==t.length%2,a=t.length-1;a>=0;a--){for(var u=t[a],i=0;i<u.length;i++){var s=u[i];n?d(s):l(s)}n=!n}}function u(e){return y[e]||(y[e]={name:e,dependencies:[],exports:{},importers:[]})}function d(r){if(!r.module){var t=r.module=u(r.name),n=r.module.exports,o=r.declare.call(e,function(e,r){if(t.locked=!0,"object"==typeof e)for(var o in e)n[o]=e[o];else n[e]=r;for(var a=0,u=t.importers.length;u>a;a++){var d=t.importers[a];if(!d.locked)for(var i=0;i<d.dependencies.length;++i)d.dependencies[i]===t&&d.setters[i](n)}return t.locked=!1,r},{id:r.name});t.setters=o.setters,t.execute=o.execute;for(var a=0,i=r.normalizedDeps.length;i>a;a++){var l,s=r.normalizedDeps[a],c=v[s],f=y[s];f?l=f.exports:c&&!c.declarative?l=c.esModule:c?(d(c),f=c.module,l=f.exports):l=p(s),f&&f.importers?(f.importers.push(t),t.dependencies.push(f)):t.dependencies.push(null),t.setters[a]&&t.setters[a](l)}}}function i(e){var r,t=v[e];if(t)t.declarative?f(e,[]):t.evaluated||l(t),r=t.module.exports;else if(r=p(e),!r)throw new Error("Unable to load dependency "+e+".");return(!t||t.declarative)&&r&&r.__useDefault?r["default"]:r}function l(r){if(!r.module){var t={},n=r.module={exports:t,id:r.name};if(!r.executingRequire)for(var o=0,a=r.normalizedDeps.length;a>o;o++){var u=r.normalizedDeps[o],d=v[u];d&&l(d)}r.evaluated=!0;var c=r.execute.call(e,function(e){for(var t=0,n=r.deps.length;n>t;t++)if(r.deps[t]==e)return i(r.normalizedDeps[t]);throw new TypeError("Module "+e+" not declared as a dependency.")},t,n);void 0!==typeof c&&(n.exports=c),t=n.exports,t&&t.__esModule?r.esModule=t:r.esModule=s(t)}}function s(r){var t={};if(("object"==typeof r||"function"==typeof r)&&r!==e)if(m)for(var n in r)"default"!==n&&c(t,r,n);else{var o=r&&r.hasOwnProperty;for(var n in r)"default"===n||o&&!r.hasOwnProperty(n)||(t[n]=r[n])}return t["default"]=r,x(t,"__useDefault",{value:!0}),t}function c(e,r,t){try{var n;(n=Object.getOwnPropertyDescriptor(r,t))&&x(e,t,n)}catch(o){return e[t]=r[t],!1}}function f(r,t){var n=v[r];if(n&&!n.evaluated&&n.declarative){t.push(r);for(var o=0,a=n.normalizedDeps.length;a>o;o++){var u=n.normalizedDeps[o];-1==g.call(t,u)&&(v[u]?f(u,t):p(u))}n.evaluated||(n.evaluated=!0,n.module.execute.call(e))}}function p(e){if(I[e])return I[e];if("@node/"==e.substr(0,6))return I[e]=s(D(e.substr(6)));var r=v[e];if(!r)throw"Module "+e+" not present.";return a(e),f(e,[]),v[e]=void 0,r.declarative&&x(r.module.exports,"__esModule",{value:!0}),I[e]=r.declarative?r.module.exports:r.esModule}var v={},g=Array.prototype.indexOf||function(e){for(var r=0,t=this.length;t>r;r++)if(this[r]===e)return r;return-1},m=!0;try{Object.getOwnPropertyDescriptor({a:0},"a")}catch(h){m=!1}var x;!function(){try{Object.defineProperty({},"a",{})&&(x=Object.defineProperty)}catch(e){x=function(e,r,t){try{e[r]=t.value||t.get.call(e)}catch(n){}}}}();var y={},D="undefined"!=typeof System&&System._nodeRequire||"undefined"!=typeof require&&require.resolve&&"undefined"!=typeof process&&require,I={"@empty":{}};return function(e,n,o,a){return function(u){u(function(u){for(var d={_nodeRequire:D,register:r,registerDynamic:t,get:p,set:function(e,r){I[e]=r},newModule:function(e){return e}},i=0;i<n.length;i++)(function(e,r){r&&r.__esModule?I[e]=r:I[e]=s(r)})(n[i],arguments[i]);a(d);var l=p(e[0]);if(e.length>1)for(var i=1;i<e.length;i++)p(e[i]);return o?l["default"]:l})}}}("undefined"!=typeof self?self:global)

(["App/main.js"], [], true, function($__System) {
var require = this.require, exports = this.exports, module = this.module;
!function(e){function n(e,n){e=e.replace(l,"");var r=e.match(u),t=(r[1].split(",")[n]||"require").replace(s,""),i=p[t]||(p[t]=new RegExp(a+t+f,"g"));i.lastIndex=0;for(var o,c=[];o=i.exec(e);)c.push(o[2]||o[3]);return c}function r(e,n,t,o){if("object"==typeof e&&!(e instanceof Array))return r.apply(null,Array.prototype.splice.call(arguments,1,arguments.length-1));if("string"==typeof e&&"function"==typeof n&&(e=[e]),!(e instanceof Array)){if("string"==typeof e){var l=i.get(e);return l.__useDefault?l["default"]:l}throw new TypeError("Invalid require")}for(var a=[],f=0;f<e.length;f++)a.push(i["import"](e[f],o));Promise.all(a).then(function(e){n&&n.apply(null,e)},t)}function t(t,l,a){"string"!=typeof t&&(a=l,l=t,t=null),l instanceof Array||(a=l,l=["require","exports","module"].splice(0,a.length)),"function"!=typeof a&&(a=function(e){return function(){return e}}(a)),void 0===l[l.length-1]&&l.pop();var f,u,s;-1!=(f=o.call(l,"require"))&&(l.splice(f,1),t||(l=l.concat(n(a.toString(),f)))),-1!=(u=o.call(l,"exports"))&&l.splice(u,1),-1!=(s=o.call(l,"module"))&&l.splice(s,1);var p={name:t,deps:l,execute:function(n,t,o){for(var p=[],c=0;c<l.length;c++)p.push(n(l[c]));o.uri=o.id,o.config=function(){},-1!=s&&p.splice(s,0,o),-1!=u&&p.splice(u,0,t),-1!=f&&p.splice(f,0,function(e,t,l){return"string"==typeof e&&"function"!=typeof t?n(e):r.call(i,e,t,l,o.id)});var d=a.apply(-1==u?e:t,p);return"undefined"==typeof d&&o&&(d=o.exports),"undefined"!=typeof d?d:void 0}};if(t)c.anonDefine||c.isBundle?c.anonDefine&&c.anonDefine.name&&(c.anonDefine=null):c.anonDefine=p,c.isBundle=!0,i.registerDynamic(p.name,p.deps,!1,p.execute);else{if(c.anonDefine&&!c.anonDefine.name)throw new Error("Multiple anonymous defines in module "+t);c.anonDefine=p}}var i=$__System,o=Array.prototype.indexOf||function(e){for(var n=0,r=this.length;r>n;n++)if(this[n]===e)return n;return-1},l=/(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/gm,a="(?:^|[^$_a-zA-Z\\xA0-\\uFFFF.])",f="\\s*\\(\\s*(\"([^\"]+)\"|'([^']+)')\\s*\\)",u=/\(([^\)]*)\)/,s=/^\s+|\s+$/g,p={};t.amd={};var c={isBundle:!1,anonDefine:null};i.amdDefine=t,i.amdRequire=r}("undefined"!=typeof self?self:global);
(function() {
var define = $__System.amdDefine;
(function(global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) : typeof define === 'function' && define.amd ? define("npm:@angular/compiler/bundles/compiler.umd.js", ["exports", "npm:@angular/core/bundles/core.umd.js"], factory) : (factory((global.ng = global.ng || {}, global.ng.compiler = global.ng.compiler || {}), global.ng.core));
}(this, function(exports, _angular_core) {
  'use strict';
  var VERSION = new _angular_core.Version('2.4.2');
  var TextAst = (function() {
    function TextAst(value, ngContentIndex, sourceSpan) {
      this.value = value;
      this.ngContentIndex = ngContentIndex;
      this.sourceSpan = sourceSpan;
    }
    TextAst.prototype.visit = function(visitor, context) {
      return visitor.visitText(this, context);
    };
    return TextAst;
  }());
  var BoundTextAst = (function() {
    function BoundTextAst(value, ngContentIndex, sourceSpan) {
      this.value = value;
      this.ngContentIndex = ngContentIndex;
      this.sourceSpan = sourceSpan;
    }
    BoundTextAst.prototype.visit = function(visitor, context) {
      return visitor.visitBoundText(this, context);
    };
    return BoundTextAst;
  }());
  var AttrAst = (function() {
    function AttrAst(name, value, sourceSpan) {
      this.name = name;
      this.value = value;
      this.sourceSpan = sourceSpan;
    }
    AttrAst.prototype.visit = function(visitor, context) {
      return visitor.visitAttr(this, context);
    };
    return AttrAst;
  }());
  var BoundElementPropertyAst = (function() {
    function BoundElementPropertyAst(name, type, securityContext, needsRuntimeSecurityContext, value, unit, sourceSpan) {
      this.name = name;
      this.type = type;
      this.securityContext = securityContext;
      this.needsRuntimeSecurityContext = needsRuntimeSecurityContext;
      this.value = value;
      this.unit = unit;
      this.sourceSpan = sourceSpan;
    }
    BoundElementPropertyAst.prototype.visit = function(visitor, context) {
      return visitor.visitElementProperty(this, context);
    };
    Object.defineProperty(BoundElementPropertyAst.prototype, "isAnimation", {
      get: function() {
        return this.type === PropertyBindingType.Animation;
      },
      enumerable: true,
      configurable: true
    });
    return BoundElementPropertyAst;
  }());
  var BoundEventAst = (function() {
    function BoundEventAst(name, target, phase, handler, sourceSpan) {
      this.name = name;
      this.target = target;
      this.phase = phase;
      this.handler = handler;
      this.sourceSpan = sourceSpan;
    }
    BoundEventAst.calcFullName = function(name, target, phase) {
      if (target) {
        return target + ":" + name;
      } else if (phase) {
        return "@" + name + "." + phase;
      } else {
        return name;
      }
    };
    BoundEventAst.prototype.visit = function(visitor, context) {
      return visitor.visitEvent(this, context);
    };
    Object.defineProperty(BoundEventAst.prototype, "fullName", {
      get: function() {
        return BoundEventAst.calcFullName(this.name, this.target, this.phase);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(BoundEventAst.prototype, "isAnimation", {
      get: function() {
        return !!this.phase;
      },
      enumerable: true,
      configurable: true
    });
    return BoundEventAst;
  }());
  var ReferenceAst = (function() {
    function ReferenceAst(name, value, sourceSpan) {
      this.name = name;
      this.value = value;
      this.sourceSpan = sourceSpan;
    }
    ReferenceAst.prototype.visit = function(visitor, context) {
      return visitor.visitReference(this, context);
    };
    return ReferenceAst;
  }());
  var VariableAst = (function() {
    function VariableAst(name, value, sourceSpan) {
      this.name = name;
      this.value = value;
      this.sourceSpan = sourceSpan;
    }
    VariableAst.prototype.visit = function(visitor, context) {
      return visitor.visitVariable(this, context);
    };
    return VariableAst;
  }());
  var ElementAst = (function() {
    function ElementAst(name, attrs, inputs, outputs, references, directives, providers, hasViewContainer, children, ngContentIndex, sourceSpan, endSourceSpan) {
      this.name = name;
      this.attrs = attrs;
      this.inputs = inputs;
      this.outputs = outputs;
      this.references = references;
      this.directives = directives;
      this.providers = providers;
      this.hasViewContainer = hasViewContainer;
      this.children = children;
      this.ngContentIndex = ngContentIndex;
      this.sourceSpan = sourceSpan;
      this.endSourceSpan = endSourceSpan;
    }
    ElementAst.prototype.visit = function(visitor, context) {
      return visitor.visitElement(this, context);
    };
    return ElementAst;
  }());
  var EmbeddedTemplateAst = (function() {
    function EmbeddedTemplateAst(attrs, outputs, references, variables, directives, providers, hasViewContainer, children, ngContentIndex, sourceSpan) {
      this.attrs = attrs;
      this.outputs = outputs;
      this.references = references;
      this.variables = variables;
      this.directives = directives;
      this.providers = providers;
      this.hasViewContainer = hasViewContainer;
      this.children = children;
      this.ngContentIndex = ngContentIndex;
      this.sourceSpan = sourceSpan;
    }
    EmbeddedTemplateAst.prototype.visit = function(visitor, context) {
      return visitor.visitEmbeddedTemplate(this, context);
    };
    return EmbeddedTemplateAst;
  }());
  var BoundDirectivePropertyAst = (function() {
    function BoundDirectivePropertyAst(directiveName, templateName, value, sourceSpan) {
      this.directiveName = directiveName;
      this.templateName = templateName;
      this.value = value;
      this.sourceSpan = sourceSpan;
    }
    BoundDirectivePropertyAst.prototype.visit = function(visitor, context) {
      return visitor.visitDirectiveProperty(this, context);
    };
    return BoundDirectivePropertyAst;
  }());
  var DirectiveAst = (function() {
    function DirectiveAst(directive, inputs, hostProperties, hostEvents, sourceSpan) {
      this.directive = directive;
      this.inputs = inputs;
      this.hostProperties = hostProperties;
      this.hostEvents = hostEvents;
      this.sourceSpan = sourceSpan;
    }
    DirectiveAst.prototype.visit = function(visitor, context) {
      return visitor.visitDirective(this, context);
    };
    return DirectiveAst;
  }());
  var ProviderAst = (function() {
    function ProviderAst(token, multiProvider, eager, providers, providerType, lifecycleHooks, sourceSpan) {
      this.token = token;
      this.multiProvider = multiProvider;
      this.eager = eager;
      this.providers = providers;
      this.providerType = providerType;
      this.lifecycleHooks = lifecycleHooks;
      this.sourceSpan = sourceSpan;
    }
    ProviderAst.prototype.visit = function(visitor, context) {
      return null;
    };
    return ProviderAst;
  }());
  var ProviderAstType = {};
  ProviderAstType.PublicService = 0;
  ProviderAstType.PrivateService = 1;
  ProviderAstType.Component = 2;
  ProviderAstType.Directive = 3;
  ProviderAstType.Builtin = 4;
  ProviderAstType[ProviderAstType.PublicService] = "PublicService";
  ProviderAstType[ProviderAstType.PrivateService] = "PrivateService";
  ProviderAstType[ProviderAstType.Component] = "Component";
  ProviderAstType[ProviderAstType.Directive] = "Directive";
  ProviderAstType[ProviderAstType.Builtin] = "Builtin";
  var NgContentAst = (function() {
    function NgContentAst(index, ngContentIndex, sourceSpan) {
      this.index = index;
      this.ngContentIndex = ngContentIndex;
      this.sourceSpan = sourceSpan;
    }
    NgContentAst.prototype.visit = function(visitor, context) {
      return visitor.visitNgContent(this, context);
    };
    return NgContentAst;
  }());
  var PropertyBindingType = {};
  PropertyBindingType.Property = 0;
  PropertyBindingType.Attribute = 1;
  PropertyBindingType.Class = 2;
  PropertyBindingType.Style = 3;
  PropertyBindingType.Animation = 4;
  PropertyBindingType[PropertyBindingType.Property] = "Property";
  PropertyBindingType[PropertyBindingType.Attribute] = "Attribute";
  PropertyBindingType[PropertyBindingType.Class] = "Class";
  PropertyBindingType[PropertyBindingType.Style] = "Style";
  PropertyBindingType[PropertyBindingType.Animation] = "Animation";
  function templateVisitAll(visitor, asts, context) {
    if (context === void 0) {
      context = null;
    }
    var result = [];
    var visit = visitor.visit ? function(ast) {
      return visitor.visit(ast, context) || ast.visit(visitor, context);
    } : function(ast) {
      return ast.visit(visitor, context);
    };
    asts.forEach(function(ast) {
      var astResult = visit(ast);
      if (astResult) {
        result.push(astResult);
      }
    });
    return result;
  }
  var StaticSymbol = (function() {
    function StaticSymbol(filePath, name, members) {
      this.filePath = filePath;
      this.name = name;
      this.members = members;
    }
    return StaticSymbol;
  }());
  var StaticSymbolCache = (function() {
    function StaticSymbolCache() {
      this.cache = new Map();
    }
    StaticSymbolCache.prototype.get = function(declarationFile, name, members) {
      members = members || [];
      var memberSuffix = members.length ? "." + members.join('.') : '';
      var key = "\"" + declarationFile + "\"." + name + memberSuffix;
      var result = this.cache.get(key);
      if (!result) {
        result = new StaticSymbol(declarationFile, name, members);
        this.cache.set(key, result);
      }
      return result;
    };
    return StaticSymbolCache;
  }());
  function isPresent(obj) {
    return obj != null;
  }
  function isBlank(obj) {
    return obj == null;
  }
  var STRING_MAP_PROTO = Object.getPrototypeOf({});
  function isStrictStringMap(obj) {
    return typeof obj === 'object' && obj !== null && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;
  }
  function stringify(token) {
    if (typeof token === 'string') {
      return token;
    }
    if (token == null) {
      return '' + token;
    }
    if (token.overriddenName) {
      return "" + token.overriddenName;
    }
    if (token.name) {
      return "" + token.name;
    }
    var res = token.toString();
    var newLineIndex = res.indexOf('\n');
    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
  }
  var NumberWrapper = (function() {
    function NumberWrapper() {}
    NumberWrapper.parseIntAutoRadix = function(text) {
      var result = parseInt(text);
      if (isNaN(result)) {
        throw new Error('Invalid integer literal when parsing ' + text);
      }
      return result;
    };
    NumberWrapper.isNumeric = function(value) {
      return !isNaN(value - parseFloat(value));
    };
    return NumberWrapper;
  }());
  function isJsObject(o) {
    return o !== null && (typeof o === 'function' || typeof o === 'object');
  }
  function isPrimitive(obj) {
    return !isJsObject(obj);
  }
  function escapeRegExp(s) {
    return s.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
  }
  var StringMapWrapper = (function() {
    function StringMapWrapper() {}
    StringMapWrapper.merge = function(m1, m2) {
      var m = {};
      for (var _i = 0,
          _a = Object.keys(m1); _i < _a.length; _i++) {
        var k = _a[_i];
        m[k] = m1[k];
      }
      for (var _b = 0,
          _c = Object.keys(m2); _b < _c.length; _b++) {
        var k = _c[_b];
        m[k] = m2[k];
      }
      return m;
    };
    StringMapWrapper.equals = function(m1, m2) {
      var k1 = Object.keys(m1);
      var k2 = Object.keys(m2);
      if (k1.length != k2.length) {
        return false;
      }
      for (var i = 0; i < k1.length; i++) {
        var key = k1[i];
        if (m1[key] !== m2[key]) {
          return false;
        }
      }
      return true;
    };
    return StringMapWrapper;
  }());
  var ListWrapper = (function() {
    function ListWrapper() {}
    ListWrapper.findLast = function(arr, condition) {
      for (var i = arr.length - 1; i >= 0; i--) {
        if (condition(arr[i])) {
          return arr[i];
        }
      }
      return null;
    };
    ListWrapper.removeAll = function(list, items) {
      for (var i = 0; i < items.length; ++i) {
        var index = list.indexOf(items[i]);
        if (index > -1) {
          list.splice(index, 1);
        }
      }
    };
    ListWrapper.remove = function(list, el) {
      var index = list.indexOf(el);
      if (index > -1) {
        list.splice(index, 1);
        return true;
      }
      return false;
    };
    ListWrapper.equals = function(a, b) {
      if (a.length != b.length)
        return false;
      for (var i = 0; i < a.length; ++i) {
        if (a[i] !== b[i])
          return false;
      }
      return true;
    };
    ListWrapper.flatten = function(list) {
      return list.reduce(function(flat, item) {
        var flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item;
        return ((flat)).concat(flatItem);
      }, []);
    };
    return ListWrapper;
  }());
  var isDefaultChangeDetectionStrategy = _angular_core.__core_private__.isDefaultChangeDetectionStrategy;
  var ChangeDetectorStatus = _angular_core.__core_private__.ChangeDetectorStatus;
  var LifecycleHooks = _angular_core.__core_private__.LifecycleHooks;
  var LIFECYCLE_HOOKS_VALUES = _angular_core.__core_private__.LIFECYCLE_HOOKS_VALUES;
  var ReflectorReader = _angular_core.__core_private__.ReflectorReader;
  var ViewContainer = _angular_core.__core_private__.ViewContainer;
  var CodegenComponentFactoryResolver = _angular_core.__core_private__.CodegenComponentFactoryResolver;
  var ComponentRef_ = _angular_core.__core_private__.ComponentRef_;
  var AppView = _angular_core.__core_private__.AppView;
  var DebugAppView = _angular_core.__core_private__.DebugAppView;
  var NgModuleInjector = _angular_core.__core_private__.NgModuleInjector;
  var registerModuleFactory = _angular_core.__core_private__.registerModuleFactory;
  var ViewType = _angular_core.__core_private__.ViewType;
  var view_utils = _angular_core.__core_private__.view_utils;
  var DebugContext = _angular_core.__core_private__.DebugContext;
  var StaticNodeDebugInfo = _angular_core.__core_private__.StaticNodeDebugInfo;
  var devModeEqual = _angular_core.__core_private__.devModeEqual;
  var UNINITIALIZED = _angular_core.__core_private__.UNINITIALIZED;
  var ValueUnwrapper = _angular_core.__core_private__.ValueUnwrapper;
  var TemplateRef_ = _angular_core.__core_private__.TemplateRef_;
  var Console = _angular_core.__core_private__.Console;
  var reflector = _angular_core.__core_private__.reflector;
  var Reflector = _angular_core.__core_private__.Reflector;
  var ReflectionCapabilities = _angular_core.__core_private__.ReflectionCapabilities;
  var NoOpAnimationPlayer = _angular_core.__core_private__.NoOpAnimationPlayer;
  var AnimationSequencePlayer = _angular_core.__core_private__.AnimationSequencePlayer;
  var AnimationGroupPlayer = _angular_core.__core_private__.AnimationGroupPlayer;
  var AnimationKeyframe = _angular_core.__core_private__.AnimationKeyframe;
  var AnimationStyles = _angular_core.__core_private__.AnimationStyles;
  var ANY_STATE = _angular_core.__core_private__.ANY_STATE;
  var DEFAULT_STATE = _angular_core.__core_private__.DEFAULT_STATE;
  var EMPTY_STATE = _angular_core.__core_private__.EMPTY_STATE;
  var FILL_STYLE_FLAG = _angular_core.__core_private__.FILL_STYLE_FLAG;
  var prepareFinalAnimationStyles = _angular_core.__core_private__.prepareFinalAnimationStyles;
  var balanceAnimationKeyframes = _angular_core.__core_private__.balanceAnimationKeyframes;
  var clearStyles = _angular_core.__core_private__.clearStyles;
  var collectAndResolveStyles = _angular_core.__core_private__.collectAndResolveStyles;
  var renderStyles = _angular_core.__core_private__.renderStyles;
  var ComponentStillLoadingError = _angular_core.__core_private__.ComponentStillLoadingError;
  var AnimationTransition = _angular_core.__core_private__.AnimationTransition;
  var TagContentType = {};
  TagContentType.RAW_TEXT = 0;
  TagContentType.ESCAPABLE_RAW_TEXT = 1;
  TagContentType.PARSABLE_DATA = 2;
  TagContentType[TagContentType.RAW_TEXT] = "RAW_TEXT";
  TagContentType[TagContentType.ESCAPABLE_RAW_TEXT] = "ESCAPABLE_RAW_TEXT";
  TagContentType[TagContentType.PARSABLE_DATA] = "PARSABLE_DATA";
  function splitNsName(elementName) {
    if (elementName[0] != ':') {
      return [null, elementName];
    }
    var colonIndex = elementName.indexOf(':', 1);
    if (colonIndex == -1) {
      throw new Error("Unsupported format \"" + elementName + "\" expecting \":namespace:name\"");
    }
    return [elementName.slice(1, colonIndex), elementName.slice(colonIndex + 1)];
  }
  function getNsPrefix(fullName) {
    return fullName === null ? null : splitNsName(fullName)[0];
  }
  function mergeNsAndName(prefix, localName) {
    return prefix ? ":" + prefix + ":" + localName : localName;
  }
  var NAMED_ENTITIES = {
    'Aacute': '\u00C1',
    'aacute': '\u00E1',
    'Acirc': '\u00C2',
    'acirc': '\u00E2',
    'acute': '\u00B4',
    'AElig': '\u00C6',
    'aelig': '\u00E6',
    'Agrave': '\u00C0',
    'agrave': '\u00E0',
    'alefsym': '\u2135',
    'Alpha': '\u0391',
    'alpha': '\u03B1',
    'amp': '&',
    'and': '\u2227',
    'ang': '\u2220',
    'apos': '\u0027',
    'Aring': '\u00C5',
    'aring': '\u00E5',
    'asymp': '\u2248',
    'Atilde': '\u00C3',
    'atilde': '\u00E3',
    'Auml': '\u00C4',
    'auml': '\u00E4',
    'bdquo': '\u201E',
    'Beta': '\u0392',
    'beta': '\u03B2',
    'brvbar': '\u00A6',
    'bull': '\u2022',
    'cap': '\u2229',
    'Ccedil': '\u00C7',
    'ccedil': '\u00E7',
    'cedil': '\u00B8',
    'cent': '\u00A2',
    'Chi': '\u03A7',
    'chi': '\u03C7',
    'circ': '\u02C6',
    'clubs': '\u2663',
    'cong': '\u2245',
    'copy': '\u00A9',
    'crarr': '\u21B5',
    'cup': '\u222A',
    'curren': '\u00A4',
    'dagger': '\u2020',
    'Dagger': '\u2021',
    'darr': '\u2193',
    'dArr': '\u21D3',
    'deg': '\u00B0',
    'Delta': '\u0394',
    'delta': '\u03B4',
    'diams': '\u2666',
    'divide': '\u00F7',
    'Eacute': '\u00C9',
    'eacute': '\u00E9',
    'Ecirc': '\u00CA',
    'ecirc': '\u00EA',
    'Egrave': '\u00C8',
    'egrave': '\u00E8',
    'empty': '\u2205',
    'emsp': '\u2003',
    'ensp': '\u2002',
    'Epsilon': '\u0395',
    'epsilon': '\u03B5',
    'equiv': '\u2261',
    'Eta': '\u0397',
    'eta': '\u03B7',
    'ETH': '\u00D0',
    'eth': '\u00F0',
    'Euml': '\u00CB',
    'euml': '\u00EB',
    'euro': '\u20AC',
    'exist': '\u2203',
    'fnof': '\u0192',
    'forall': '\u2200',
    'frac12': '\u00BD',
    'frac14': '\u00BC',
    'frac34': '\u00BE',
    'frasl': '\u2044',
    'Gamma': '\u0393',
    'gamma': '\u03B3',
    'ge': '\u2265',
    'gt': '>',
    'harr': '\u2194',
    'hArr': '\u21D4',
    'hearts': '\u2665',
    'hellip': '\u2026',
    'Iacute': '\u00CD',
    'iacute': '\u00ED',
    'Icirc': '\u00CE',
    'icirc': '\u00EE',
    'iexcl': '\u00A1',
    'Igrave': '\u00CC',
    'igrave': '\u00EC',
    'image': '\u2111',
    'infin': '\u221E',
    'int': '\u222B',
    'Iota': '\u0399',
    'iota': '\u03B9',
    'iquest': '\u00BF',
    'isin': '\u2208',
    'Iuml': '\u00CF',
    'iuml': '\u00EF',
    'Kappa': '\u039A',
    'kappa': '\u03BA',
    'Lambda': '\u039B',
    'lambda': '\u03BB',
    'lang': '\u27E8',
    'laquo': '\u00AB',
    'larr': '\u2190',
    'lArr': '\u21D0',
    'lceil': '\u2308',
    'ldquo': '\u201C',
    'le': '\u2264',
    'lfloor': '\u230A',
    'lowast': '\u2217',
    'loz': '\u25CA',
    'lrm': '\u200E',
    'lsaquo': '\u2039',
    'lsquo': '\u2018',
    'lt': '<',
    'macr': '\u00AF',
    'mdash': '\u2014',
    'micro': '\u00B5',
    'middot': '\u00B7',
    'minus': '\u2212',
    'Mu': '\u039C',
    'mu': '\u03BC',
    'nabla': '\u2207',
    'nbsp': '\u00A0',
    'ndash': '\u2013',
    'ne': '\u2260',
    'ni': '\u220B',
    'not': '\u00AC',
    'notin': '\u2209',
    'nsub': '\u2284',
    'Ntilde': '\u00D1',
    'ntilde': '\u00F1',
    'Nu': '\u039D',
    'nu': '\u03BD',
    'Oacute': '\u00D3',
    'oacute': '\u00F3',
    'Ocirc': '\u00D4',
    'ocirc': '\u00F4',
    'OElig': '\u0152',
    'oelig': '\u0153',
    'Ograve': '\u00D2',
    'ograve': '\u00F2',
    'oline': '\u203E',
    'Omega': '\u03A9',
    'omega': '\u03C9',
    'Omicron': '\u039F',
    'omicron': '\u03BF',
    'oplus': '\u2295',
    'or': '\u2228',
    'ordf': '\u00AA',
    'ordm': '\u00BA',
    'Oslash': '\u00D8',
    'oslash': '\u00F8',
    'Otilde': '\u00D5',
    'otilde': '\u00F5',
    'otimes': '\u2297',
    'Ouml': '\u00D6',
    'ouml': '\u00F6',
    'para': '\u00B6',
    'permil': '\u2030',
    'perp': '\u22A5',
    'Phi': '\u03A6',
    'phi': '\u03C6',
    'Pi': '\u03A0',
    'pi': '\u03C0',
    'piv': '\u03D6',
    'plusmn': '\u00B1',
    'pound': '\u00A3',
    'prime': '\u2032',
    'Prime': '\u2033',
    'prod': '\u220F',
    'prop': '\u221D',
    'Psi': '\u03A8',
    'psi': '\u03C8',
    'quot': '\u0022',
    'radic': '\u221A',
    'rang': '\u27E9',
    'raquo': '\u00BB',
    'rarr': '\u2192',
    'rArr': '\u21D2',
    'rceil': '\u2309',
    'rdquo': '\u201D',
    'real': '\u211C',
    'reg': '\u00AE',
    'rfloor': '\u230B',
    'Rho': '\u03A1',
    'rho': '\u03C1',
    'rlm': '\u200F',
    'rsaquo': '\u203A',
    'rsquo': '\u2019',
    'sbquo': '\u201A',
    'Scaron': '\u0160',
    'scaron': '\u0161',
    'sdot': '\u22C5',
    'sect': '\u00A7',
    'shy': '\u00AD',
    'Sigma': '\u03A3',
    'sigma': '\u03C3',
    'sigmaf': '\u03C2',
    'sim': '\u223C',
    'spades': '\u2660',
    'sub': '\u2282',
    'sube': '\u2286',
    'sum': '\u2211',
    'sup': '\u2283',
    'sup1': '\u00B9',
    'sup2': '\u00B2',
    'sup3': '\u00B3',
    'supe': '\u2287',
    'szlig': '\u00DF',
    'Tau': '\u03A4',
    'tau': '\u03C4',
    'there4': '\u2234',
    'Theta': '\u0398',
    'theta': '\u03B8',
    'thetasym': '\u03D1',
    'thinsp': '\u2009',
    'THORN': '\u00DE',
    'thorn': '\u00FE',
    'tilde': '\u02DC',
    'times': '\u00D7',
    'trade': '\u2122',
    'Uacute': '\u00DA',
    'uacute': '\u00FA',
    'uarr': '\u2191',
    'uArr': '\u21D1',
    'Ucirc': '\u00DB',
    'ucirc': '\u00FB',
    'Ugrave': '\u00D9',
    'ugrave': '\u00F9',
    'uml': '\u00A8',
    'upsih': '\u03D2',
    'Upsilon': '\u03A5',
    'upsilon': '\u03C5',
    'Uuml': '\u00DC',
    'uuml': '\u00FC',
    'weierp': '\u2118',
    'Xi': '\u039E',
    'xi': '\u03BE',
    'Yacute': '\u00DD',
    'yacute': '\u00FD',
    'yen': '\u00A5',
    'yuml': '\u00FF',
    'Yuml': '\u0178',
    'Zeta': '\u0396',
    'zeta': '\u03B6',
    'zwj': '\u200D',
    'zwnj': '\u200C'
  };
  var HtmlTagDefinition = (function() {
    function HtmlTagDefinition(_a) {
      var _this = this;
      var _b = _a === void 0 ? {} : _a,
          closedByChildren = _b.closedByChildren,
          requiredParents = _b.requiredParents,
          implicitNamespacePrefix = _b.implicitNamespacePrefix,
          _c = _b.contentType,
          contentType = _c === void 0 ? TagContentType.PARSABLE_DATA : _c,
          _d = _b.closedByParent,
          closedByParent = _d === void 0 ? false : _d,
          _e = _b.isVoid,
          isVoid = _e === void 0 ? false : _e,
          _f = _b.ignoreFirstLf,
          ignoreFirstLf = _f === void 0 ? false : _f;
      this.closedByChildren = {};
      this.closedByParent = false;
      this.canSelfClose = false;
      if (closedByChildren && closedByChildren.length > 0) {
        closedByChildren.forEach(function(tagName) {
          return _this.closedByChildren[tagName] = true;
        });
      }
      this.isVoid = isVoid;
      this.closedByParent = closedByParent || isVoid;
      if (requiredParents && requiredParents.length > 0) {
        this.requiredParents = {};
        this.parentToAdd = requiredParents[0];
        requiredParents.forEach(function(tagName) {
          return _this.requiredParents[tagName] = true;
        });
      }
      this.implicitNamespacePrefix = implicitNamespacePrefix;
      this.contentType = contentType;
      this.ignoreFirstLf = ignoreFirstLf;
    }
    HtmlTagDefinition.prototype.requireExtraParent = function(currentParent) {
      if (!this.requiredParents) {
        return false;
      }
      if (!currentParent) {
        return true;
      }
      var lcParent = currentParent.toLowerCase();
      return this.requiredParents[lcParent] != true && lcParent != 'template';
    };
    HtmlTagDefinition.prototype.isClosedByChild = function(name) {
      return this.isVoid || name.toLowerCase() in this.closedByChildren;
    };
    return HtmlTagDefinition;
  }());
  var TAG_DEFINITIONS = {
    'base': new HtmlTagDefinition({isVoid: true}),
    'meta': new HtmlTagDefinition({isVoid: true}),
    'area': new HtmlTagDefinition({isVoid: true}),
    'embed': new HtmlTagDefinition({isVoid: true}),
    'link': new HtmlTagDefinition({isVoid: true}),
    'img': new HtmlTagDefinition({isVoid: true}),
    'input': new HtmlTagDefinition({isVoid: true}),
    'param': new HtmlTagDefinition({isVoid: true}),
    'hr': new HtmlTagDefinition({isVoid: true}),
    'br': new HtmlTagDefinition({isVoid: true}),
    'source': new HtmlTagDefinition({isVoid: true}),
    'track': new HtmlTagDefinition({isVoid: true}),
    'wbr': new HtmlTagDefinition({isVoid: true}),
    'p': new HtmlTagDefinition({
      closedByChildren: ['address', 'article', 'aside', 'blockquote', 'div', 'dl', 'fieldset', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr', 'main', 'nav', 'ol', 'p', 'pre', 'section', 'table', 'ul'],
      closedByParent: true
    }),
    'thead': new HtmlTagDefinition({closedByChildren: ['tbody', 'tfoot']}),
    'tbody': new HtmlTagDefinition({
      closedByChildren: ['tbody', 'tfoot'],
      closedByParent: true
    }),
    'tfoot': new HtmlTagDefinition({
      closedByChildren: ['tbody'],
      closedByParent: true
    }),
    'tr': new HtmlTagDefinition({
      closedByChildren: ['tr'],
      requiredParents: ['tbody', 'tfoot', 'thead'],
      closedByParent: true
    }),
    'td': new HtmlTagDefinition({
      closedByChildren: ['td', 'th'],
      closedByParent: true
    }),
    'th': new HtmlTagDefinition({
      closedByChildren: ['td', 'th'],
      closedByParent: true
    }),
    'col': new HtmlTagDefinition({
      requiredParents: ['colgroup'],
      isVoid: true
    }),
    'svg': new HtmlTagDefinition({implicitNamespacePrefix: 'svg'}),
    'math': new HtmlTagDefinition({implicitNamespacePrefix: 'math'}),
    'li': new HtmlTagDefinition({
      closedByChildren: ['li'],
      closedByParent: true
    }),
    'dt': new HtmlTagDefinition({closedByChildren: ['dt', 'dd']}),
    'dd': new HtmlTagDefinition({
      closedByChildren: ['dt', 'dd'],
      closedByParent: true
    }),
    'rb': new HtmlTagDefinition({
      closedByChildren: ['rb', 'rt', 'rtc', 'rp'],
      closedByParent: true
    }),
    'rt': new HtmlTagDefinition({
      closedByChildren: ['rb', 'rt', 'rtc', 'rp'],
      closedByParent: true
    }),
    'rtc': new HtmlTagDefinition({
      closedByChildren: ['rb', 'rtc', 'rp'],
      closedByParent: true
    }),
    'rp': new HtmlTagDefinition({
      closedByChildren: ['rb', 'rt', 'rtc', 'rp'],
      closedByParent: true
    }),
    'optgroup': new HtmlTagDefinition({
      closedByChildren: ['optgroup'],
      closedByParent: true
    }),
    'option': new HtmlTagDefinition({
      closedByChildren: ['option', 'optgroup'],
      closedByParent: true
    }),
    'pre': new HtmlTagDefinition({ignoreFirstLf: true}),
    'listing': new HtmlTagDefinition({ignoreFirstLf: true}),
    'style': new HtmlTagDefinition({contentType: TagContentType.RAW_TEXT}),
    'script': new HtmlTagDefinition({contentType: TagContentType.RAW_TEXT}),
    'title': new HtmlTagDefinition({contentType: TagContentType.ESCAPABLE_RAW_TEXT}),
    'textarea': new HtmlTagDefinition({
      contentType: TagContentType.ESCAPABLE_RAW_TEXT,
      ignoreFirstLf: true
    })
  };
  var _DEFAULT_TAG_DEFINITION = new HtmlTagDefinition();
  function getHtmlTagDefinition(tagName) {
    return TAG_DEFINITIONS[tagName.toLowerCase()] || _DEFAULT_TAG_DEFINITION;
  }
  var _SELECTOR_REGEXP = new RegExp('(\\:not\\()|' + '([-\\w]+)|' + '(?:\\.([-\\w]+))|' + '(?:\\[([.-\\w*]+)(?:=([^\\]]*))?\\])|' + '(\\))|' + '(\\s*,\\s*)', 'g');
  var CssSelector = (function() {
    function CssSelector() {
      this.element = null;
      this.classNames = [];
      this.attrs = [];
      this.notSelectors = [];
    }
    CssSelector.parse = function(selector) {
      var results = [];
      var _addResult = function(res, cssSel) {
        if (cssSel.notSelectors.length > 0 && !cssSel.element && cssSel.classNames.length == 0 && cssSel.attrs.length == 0) {
          cssSel.element = '*';
        }
        res.push(cssSel);
      };
      var cssSelector = new CssSelector();
      var match;
      var current = cssSelector;
      var inNot = false;
      _SELECTOR_REGEXP.lastIndex = 0;
      while (match = _SELECTOR_REGEXP.exec(selector)) {
        if (match[1]) {
          if (inNot) {
            throw new Error('Nesting :not is not allowed in a selector');
          }
          inNot = true;
          current = new CssSelector();
          cssSelector.notSelectors.push(current);
        }
        if (match[2]) {
          current.setElement(match[2]);
        }
        if (match[3]) {
          current.addClassName(match[3]);
        }
        if (match[4]) {
          current.addAttribute(match[4], match[5]);
        }
        if (match[6]) {
          inNot = false;
          current = cssSelector;
        }
        if (match[7]) {
          if (inNot) {
            throw new Error('Multiple selectors in :not are not supported');
          }
          _addResult(results, cssSelector);
          cssSelector = current = new CssSelector();
        }
      }
      _addResult(results, cssSelector);
      return results;
    };
    CssSelector.prototype.isElementSelector = function() {
      return this.hasElementSelector() && this.classNames.length == 0 && this.attrs.length == 0 && this.notSelectors.length === 0;
    };
    CssSelector.prototype.hasElementSelector = function() {
      return !!this.element;
    };
    CssSelector.prototype.setElement = function(element) {
      if (element === void 0) {
        element = null;
      }
      this.element = element;
    };
    CssSelector.prototype.getMatchingElementTemplate = function() {
      var tagName = this.element || 'div';
      var classAttr = this.classNames.length > 0 ? " class=\"" + this.classNames.join(' ') + "\"" : '';
      var attrs = '';
      for (var i = 0; i < this.attrs.length; i += 2) {
        var attrName = this.attrs[i];
        var attrValue = this.attrs[i + 1] !== '' ? "=\"" + this.attrs[i + 1] + "\"" : '';
        attrs += " " + attrName + attrValue;
      }
      return getHtmlTagDefinition(tagName).isVoid ? "<" + tagName + classAttr + attrs + "/>" : "<" + tagName + classAttr + attrs + "></" + tagName + ">";
    };
    CssSelector.prototype.addAttribute = function(name, value) {
      if (value === void 0) {
        value = '';
      }
      this.attrs.push(name, value && value.toLowerCase() || '');
    };
    CssSelector.prototype.addClassName = function(name) {
      this.classNames.push(name.toLowerCase());
    };
    CssSelector.prototype.toString = function() {
      var res = this.element || '';
      if (this.classNames) {
        this.classNames.forEach(function(klass) {
          return res += "." + klass;
        });
      }
      if (this.attrs) {
        for (var i = 0; i < this.attrs.length; i += 2) {
          var name_1 = this.attrs[i];
          var value = this.attrs[i + 1];
          res += "[" + name_1 + (value ? '=' + value : '') + "]";
        }
      }
      this.notSelectors.forEach(function(notSelector) {
        return res += ":not(" + notSelector + ")";
      });
      return res;
    };
    return CssSelector;
  }());
  var SelectorMatcher = (function() {
    function SelectorMatcher() {
      this._elementMap = new Map();
      this._elementPartialMap = new Map();
      this._classMap = new Map();
      this._classPartialMap = new Map();
      this._attrValueMap = new Map();
      this._attrValuePartialMap = new Map();
      this._listContexts = [];
    }
    SelectorMatcher.createNotMatcher = function(notSelectors) {
      var notMatcher = new SelectorMatcher();
      notMatcher.addSelectables(notSelectors, null);
      return notMatcher;
    };
    SelectorMatcher.prototype.addSelectables = function(cssSelectors, callbackCtxt) {
      var listContext = null;
      if (cssSelectors.length > 1) {
        listContext = new SelectorListContext(cssSelectors);
        this._listContexts.push(listContext);
      }
      for (var i = 0; i < cssSelectors.length; i++) {
        this._addSelectable(cssSelectors[i], callbackCtxt, listContext);
      }
    };
    SelectorMatcher.prototype._addSelectable = function(cssSelector, callbackCtxt, listContext) {
      var matcher = this;
      var element = cssSelector.element;
      var classNames = cssSelector.classNames;
      var attrs = cssSelector.attrs;
      var selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);
      if (element) {
        var isTerminal = attrs.length === 0 && classNames.length === 0;
        if (isTerminal) {
          this._addTerminal(matcher._elementMap, element, selectable);
        } else {
          matcher = this._addPartial(matcher._elementPartialMap, element);
        }
      }
      if (classNames) {
        for (var i = 0; i < classNames.length; i++) {
          var isTerminal = attrs.length === 0 && i === classNames.length - 1;
          var className = classNames[i];
          if (isTerminal) {
            this._addTerminal(matcher._classMap, className, selectable);
          } else {
            matcher = this._addPartial(matcher._classPartialMap, className);
          }
        }
      }
      if (attrs) {
        for (var i = 0; i < attrs.length; i += 2) {
          var isTerminal = i === attrs.length - 2;
          var name_2 = attrs[i];
          var value = attrs[i + 1];
          if (isTerminal) {
            var terminalMap = matcher._attrValueMap;
            var terminalValuesMap = terminalMap.get(name_2);
            if (!terminalValuesMap) {
              terminalValuesMap = new Map();
              terminalMap.set(name_2, terminalValuesMap);
            }
            this._addTerminal(terminalValuesMap, value, selectable);
          } else {
            var partialMap = matcher._attrValuePartialMap;
            var partialValuesMap = partialMap.get(name_2);
            if (!partialValuesMap) {
              partialValuesMap = new Map();
              partialMap.set(name_2, partialValuesMap);
            }
            matcher = this._addPartial(partialValuesMap, value);
          }
        }
      }
    };
    SelectorMatcher.prototype._addTerminal = function(map, name, selectable) {
      var terminalList = map.get(name);
      if (!terminalList) {
        terminalList = [];
        map.set(name, terminalList);
      }
      terminalList.push(selectable);
    };
    SelectorMatcher.prototype._addPartial = function(map, name) {
      var matcher = map.get(name);
      if (!matcher) {
        matcher = new SelectorMatcher();
        map.set(name, matcher);
      }
      return matcher;
    };
    SelectorMatcher.prototype.match = function(cssSelector, matchedCallback) {
      var result = false;
      var element = cssSelector.element;
      var classNames = cssSelector.classNames;
      var attrs = cssSelector.attrs;
      for (var i = 0; i < this._listContexts.length; i++) {
        this._listContexts[i].alreadyMatched = false;
      }
      result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;
      result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) || result;
      if (classNames) {
        for (var i = 0; i < classNames.length; i++) {
          var className = classNames[i];
          result = this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;
          result = this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) || result;
        }
      }
      if (attrs) {
        for (var i = 0; i < attrs.length; i += 2) {
          var name_3 = attrs[i];
          var value = attrs[i + 1];
          var terminalValuesMap = this._attrValueMap.get(name_3);
          if (value) {
            result = this._matchTerminal(terminalValuesMap, '', cssSelector, matchedCallback) || result;
          }
          result = this._matchTerminal(terminalValuesMap, value, cssSelector, matchedCallback) || result;
          var partialValuesMap = this._attrValuePartialMap.get(name_3);
          if (value) {
            result = this._matchPartial(partialValuesMap, '', cssSelector, matchedCallback) || result;
          }
          result = this._matchPartial(partialValuesMap, value, cssSelector, matchedCallback) || result;
        }
      }
      return result;
    };
    SelectorMatcher.prototype._matchTerminal = function(map, name, cssSelector, matchedCallback) {
      if (!map || typeof name !== 'string') {
        return false;
      }
      var selectables = map.get(name) || [];
      var starSelectables = map.get('*');
      if (starSelectables) {
        selectables = selectables.concat(starSelectables);
      }
      if (selectables.length === 0) {
        return false;
      }
      var selectable;
      var result = false;
      for (var i = 0; i < selectables.length; i++) {
        selectable = selectables[i];
        result = selectable.finalize(cssSelector, matchedCallback) || result;
      }
      return result;
    };
    SelectorMatcher.prototype._matchPartial = function(map, name, cssSelector, matchedCallback) {
      if (!map || typeof name !== 'string') {
        return false;
      }
      var nestedSelector = map.get(name);
      if (!nestedSelector) {
        return false;
      }
      return nestedSelector.match(cssSelector, matchedCallback);
    };
    return SelectorMatcher;
  }());
  var SelectorListContext = (function() {
    function SelectorListContext(selectors) {
      this.selectors = selectors;
      this.alreadyMatched = false;
    }
    return SelectorListContext;
  }());
  var SelectorContext = (function() {
    function SelectorContext(selector, cbContext, listContext) {
      this.selector = selector;
      this.cbContext = cbContext;
      this.listContext = listContext;
      this.notSelectors = selector.notSelectors;
    }
    SelectorContext.prototype.finalize = function(cssSelector, callback) {
      var result = true;
      if (this.notSelectors.length > 0 && (!this.listContext || !this.listContext.alreadyMatched)) {
        var notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);
        result = !notMatcher.match(cssSelector, null);
      }
      if (result && callback && (!this.listContext || !this.listContext.alreadyMatched)) {
        if (this.listContext) {
          this.listContext.alreadyMatched = true;
        }
        callback(this.selector, this.cbContext);
      }
      return result;
    };
    return SelectorContext;
  }());
  var __extends$3 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var BaseError = (function(_super) {
    __extends$3(BaseError, _super);
    function BaseError(message) {
      _super.call(this, message);
      var nativeError = new Error(message);
      this._nativeError = nativeError;
    }
    Object.defineProperty(BaseError.prototype, "message", {
      get: function() {
        return this._nativeError.message;
      },
      set: function(message) {
        this._nativeError.message = message;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(BaseError.prototype, "name", {
      get: function() {
        return this._nativeError.name;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(BaseError.prototype, "stack", {
      get: function() {
        return ((this._nativeError)).stack;
      },
      set: function(value) {
        ((this._nativeError)).stack = value;
      },
      enumerable: true,
      configurable: true
    });
    BaseError.prototype.toString = function() {
      return this._nativeError.toString();
    };
    return BaseError;
  }(Error));
  var WrappedError = (function(_super) {
    __extends$3(WrappedError, _super);
    function WrappedError(message, error) {
      _super.call(this, message + " caused by: " + (error instanceof Error ? error.message : error));
      this.originalError = error;
    }
    Object.defineProperty(WrappedError.prototype, "stack", {
      get: function() {
        return (((this.originalError instanceof Error ? this.originalError : this._nativeError))).stack;
      },
      enumerable: true,
      configurable: true
    });
    return WrappedError;
  }(BaseError));
  var __extends$2 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var MODULE_SUFFIX = '';
  var DASH_CASE_REGEXP = /-+([a-z0-9])/g;
  function dashCaseToCamelCase(input) {
    return input.replace(DASH_CASE_REGEXP, function() {
      var m = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        m[_i - 0] = arguments[_i];
      }
      return m[1].toUpperCase();
    });
  }
  function splitAtColon(input, defaultValues) {
    return _splitAt(input, ':', defaultValues);
  }
  function splitAtPeriod(input, defaultValues) {
    return _splitAt(input, '.', defaultValues);
  }
  function _splitAt(input, character, defaultValues) {
    var characterIndex = input.indexOf(character);
    if (characterIndex == -1)
      return defaultValues;
    return [input.slice(0, characterIndex).trim(), input.slice(characterIndex + 1).trim()];
  }
  function visitValue(value, visitor, context) {
    if (Array.isArray(value)) {
      return visitor.visitArray((value), context);
    }
    if (isStrictStringMap(value)) {
      return visitor.visitStringMap((value), context);
    }
    if (value == null || isPrimitive(value)) {
      return visitor.visitPrimitive(value, context);
    }
    return visitor.visitOther(value, context);
  }
  var ValueTransformer = (function() {
    function ValueTransformer() {}
    ValueTransformer.prototype.visitArray = function(arr, context) {
      var _this = this;
      return arr.map(function(value) {
        return visitValue(value, _this, context);
      });
    };
    ValueTransformer.prototype.visitStringMap = function(map, context) {
      var _this = this;
      var result = {};
      Object.keys(map).forEach(function(key) {
        result[key] = visitValue(map[key], _this, context);
      });
      return result;
    };
    ValueTransformer.prototype.visitPrimitive = function(value, context) {
      return value;
    };
    ValueTransformer.prototype.visitOther = function(value, context) {
      return value;
    };
    return ValueTransformer;
  }());
  var SyncAsyncResult = (function() {
    function SyncAsyncResult(syncResult, asyncResult) {
      if (asyncResult === void 0) {
        asyncResult = null;
      }
      this.syncResult = syncResult;
      this.asyncResult = asyncResult;
      if (!asyncResult) {
        this.asyncResult = Promise.resolve(syncResult);
      }
    }
    return SyncAsyncResult;
  }());
  var SyntaxError = (function(_super) {
    __extends$2(SyntaxError, _super);
    function SyntaxError() {
      _super.apply(this, arguments);
    }
    return SyntaxError;
  }(BaseError));
  var __extends$1 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var HOST_REG_EXP = /^(?:(?:\[([^\]]+)\])|(?:\(([^\)]+)\)))|(\@[-\w]+)$/;
  var CompileAnimationEntryMetadata = (function() {
    function CompileAnimationEntryMetadata(name, definitions) {
      if (name === void 0) {
        name = null;
      }
      if (definitions === void 0) {
        definitions = null;
      }
      this.name = name;
      this.definitions = definitions;
    }
    return CompileAnimationEntryMetadata;
  }());
  var CompileAnimationStateMetadata = (function() {
    function CompileAnimationStateMetadata() {}
    return CompileAnimationStateMetadata;
  }());
  var CompileAnimationStateDeclarationMetadata = (function(_super) {
    __extends$1(CompileAnimationStateDeclarationMetadata, _super);
    function CompileAnimationStateDeclarationMetadata(stateNameExpr, styles) {
      _super.call(this);
      this.stateNameExpr = stateNameExpr;
      this.styles = styles;
    }
    return CompileAnimationStateDeclarationMetadata;
  }(CompileAnimationStateMetadata));
  var CompileAnimationStateTransitionMetadata = (function(_super) {
    __extends$1(CompileAnimationStateTransitionMetadata, _super);
    function CompileAnimationStateTransitionMetadata(stateChangeExpr, steps) {
      _super.call(this);
      this.stateChangeExpr = stateChangeExpr;
      this.steps = steps;
    }
    return CompileAnimationStateTransitionMetadata;
  }(CompileAnimationStateMetadata));
  var CompileAnimationMetadata = (function() {
    function CompileAnimationMetadata() {}
    return CompileAnimationMetadata;
  }());
  var CompileAnimationKeyframesSequenceMetadata = (function(_super) {
    __extends$1(CompileAnimationKeyframesSequenceMetadata, _super);
    function CompileAnimationKeyframesSequenceMetadata(steps) {
      if (steps === void 0) {
        steps = [];
      }
      _super.call(this);
      this.steps = steps;
    }
    return CompileAnimationKeyframesSequenceMetadata;
  }(CompileAnimationMetadata));
  var CompileAnimationStyleMetadata = (function(_super) {
    __extends$1(CompileAnimationStyleMetadata, _super);
    function CompileAnimationStyleMetadata(offset, styles) {
      if (styles === void 0) {
        styles = null;
      }
      _super.call(this);
      this.offset = offset;
      this.styles = styles;
    }
    return CompileAnimationStyleMetadata;
  }(CompileAnimationMetadata));
  var CompileAnimationAnimateMetadata = (function(_super) {
    __extends$1(CompileAnimationAnimateMetadata, _super);
    function CompileAnimationAnimateMetadata(timings, styles) {
      if (timings === void 0) {
        timings = 0;
      }
      if (styles === void 0) {
        styles = null;
      }
      _super.call(this);
      this.timings = timings;
      this.styles = styles;
    }
    return CompileAnimationAnimateMetadata;
  }(CompileAnimationMetadata));
  var CompileAnimationWithStepsMetadata = (function(_super) {
    __extends$1(CompileAnimationWithStepsMetadata, _super);
    function CompileAnimationWithStepsMetadata(steps) {
      if (steps === void 0) {
        steps = null;
      }
      _super.call(this);
      this.steps = steps;
    }
    return CompileAnimationWithStepsMetadata;
  }(CompileAnimationMetadata));
  var CompileAnimationSequenceMetadata = (function(_super) {
    __extends$1(CompileAnimationSequenceMetadata, _super);
    function CompileAnimationSequenceMetadata(steps) {
      if (steps === void 0) {
        steps = null;
      }
      _super.call(this, steps);
    }
    return CompileAnimationSequenceMetadata;
  }(CompileAnimationWithStepsMetadata));
  var CompileAnimationGroupMetadata = (function(_super) {
    __extends$1(CompileAnimationGroupMetadata, _super);
    function CompileAnimationGroupMetadata(steps) {
      if (steps === void 0) {
        steps = null;
      }
      _super.call(this, steps);
    }
    return CompileAnimationGroupMetadata;
  }(CompileAnimationWithStepsMetadata));
  function _sanitizeIdentifier(name) {
    return name.replace(/\W/g, '_');
  }
  var _anonymousTypeIndex = 0;
  function identifierName(compileIdentifier) {
    if (!compileIdentifier || !compileIdentifier.reference) {
      return null;
    }
    var ref = compileIdentifier.reference;
    if (ref instanceof StaticSymbol) {
      return ref.name;
    }
    if (ref['__anonymousType']) {
      return ref['__anonymousType'];
    }
    var identifier = stringify(ref);
    if (identifier.indexOf('(') >= 0) {
      identifier = "anonymous_" + _anonymousTypeIndex++;
      ref['__anonymousType'] = identifier;
    } else {
      identifier = _sanitizeIdentifier(identifier);
    }
    return identifier;
  }
  function identifierModuleUrl(compileIdentifier) {
    var ref = compileIdentifier.reference;
    if (ref instanceof StaticSymbol) {
      return ref.filePath;
    }
    return reflector.importUri(ref);
  }
  var CompileSummaryKind = {};
  CompileSummaryKind.Pipe = 0;
  CompileSummaryKind.Directive = 1;
  CompileSummaryKind.NgModule = 2;
  CompileSummaryKind.Injectable = 3;
  CompileSummaryKind[CompileSummaryKind.Pipe] = "Pipe";
  CompileSummaryKind[CompileSummaryKind.Directive] = "Directive";
  CompileSummaryKind[CompileSummaryKind.NgModule] = "NgModule";
  CompileSummaryKind[CompileSummaryKind.Injectable] = "Injectable";
  function tokenName(token) {
    return isPresent(token.value) ? _sanitizeIdentifier(token.value) : identifierName(token.identifier);
  }
  function tokenReference(token) {
    if (isPresent(token.identifier)) {
      return token.identifier.reference;
    } else {
      return token.value;
    }
  }
  var CompileStylesheetMetadata = (function() {
    function CompileStylesheetMetadata(_a) {
      var _b = _a === void 0 ? {} : _a,
          moduleUrl = _b.moduleUrl,
          styles = _b.styles,
          styleUrls = _b.styleUrls;
      this.moduleUrl = moduleUrl;
      this.styles = _normalizeArray(styles);
      this.styleUrls = _normalizeArray(styleUrls);
    }
    return CompileStylesheetMetadata;
  }());
  var CompileTemplateMetadata = (function() {
    function CompileTemplateMetadata(_a) {
      var _b = _a === void 0 ? {} : _a,
          encapsulation = _b.encapsulation,
          template = _b.template,
          templateUrl = _b.templateUrl,
          styles = _b.styles,
          styleUrls = _b.styleUrls,
          externalStylesheets = _b.externalStylesheets,
          animations = _b.animations,
          ngContentSelectors = _b.ngContentSelectors,
          interpolation = _b.interpolation;
      this.encapsulation = encapsulation;
      this.template = template;
      this.templateUrl = templateUrl;
      this.styles = _normalizeArray(styles);
      this.styleUrls = _normalizeArray(styleUrls);
      this.externalStylesheets = _normalizeArray(externalStylesheets);
      this.animations = animations ? ListWrapper.flatten(animations) : [];
      this.ngContentSelectors = ngContentSelectors || [];
      if (interpolation && interpolation.length != 2) {
        throw new Error("'interpolation' should have a start and an end symbol.");
      }
      this.interpolation = interpolation;
    }
    CompileTemplateMetadata.prototype.toSummary = function() {
      return {
        animations: this.animations.map(function(anim) {
          return anim.name;
        }),
        ngContentSelectors: this.ngContentSelectors,
        encapsulation: this.encapsulation
      };
    };
    return CompileTemplateMetadata;
  }());
  var CompileDirectiveMetadata = (function() {
    function CompileDirectiveMetadata(_a) {
      var _b = _a === void 0 ? {} : _a,
          isHost = _b.isHost,
          type = _b.type,
          isComponent = _b.isComponent,
          selector = _b.selector,
          exportAs = _b.exportAs,
          changeDetection = _b.changeDetection,
          inputs = _b.inputs,
          outputs = _b.outputs,
          hostListeners = _b.hostListeners,
          hostProperties = _b.hostProperties,
          hostAttributes = _b.hostAttributes,
          providers = _b.providers,
          viewProviders = _b.viewProviders,
          queries = _b.queries,
          viewQueries = _b.viewQueries,
          entryComponents = _b.entryComponents,
          template = _b.template;
      this.isHost = !!isHost;
      this.type = type;
      this.isComponent = isComponent;
      this.selector = selector;
      this.exportAs = exportAs;
      this.changeDetection = changeDetection;
      this.inputs = inputs;
      this.outputs = outputs;
      this.hostListeners = hostListeners;
      this.hostProperties = hostProperties;
      this.hostAttributes = hostAttributes;
      this.providers = _normalizeArray(providers);
      this.viewProviders = _normalizeArray(viewProviders);
      this.queries = _normalizeArray(queries);
      this.viewQueries = _normalizeArray(viewQueries);
      this.entryComponents = _normalizeArray(entryComponents);
      this.template = template;
    }
    CompileDirectiveMetadata.create = function(_a) {
      var _b = _a === void 0 ? {} : _a,
          isHost = _b.isHost,
          type = _b.type,
          isComponent = _b.isComponent,
          selector = _b.selector,
          exportAs = _b.exportAs,
          changeDetection = _b.changeDetection,
          inputs = _b.inputs,
          outputs = _b.outputs,
          host = _b.host,
          providers = _b.providers,
          viewProviders = _b.viewProviders,
          queries = _b.queries,
          viewQueries = _b.viewQueries,
          entryComponents = _b.entryComponents,
          template = _b.template;
      var hostListeners = {};
      var hostProperties = {};
      var hostAttributes = {};
      if (isPresent(host)) {
        Object.keys(host).forEach(function(key) {
          var value = host[key];
          var matches = key.match(HOST_REG_EXP);
          if (matches === null) {
            hostAttributes[key] = value;
          } else if (isPresent(matches[1])) {
            hostProperties[matches[1]] = value;
          } else if (isPresent(matches[2])) {
            hostListeners[matches[2]] = value;
          }
        });
      }
      var inputsMap = {};
      if (isPresent(inputs)) {
        inputs.forEach(function(bindConfig) {
          var parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);
          inputsMap[parts[0]] = parts[1];
        });
      }
      var outputsMap = {};
      if (isPresent(outputs)) {
        outputs.forEach(function(bindConfig) {
          var parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);
          outputsMap[parts[0]] = parts[1];
        });
      }
      return new CompileDirectiveMetadata({
        isHost: isHost,
        type: type,
        isComponent: !!isComponent,
        selector: selector,
        exportAs: exportAs,
        changeDetection: changeDetection,
        inputs: inputsMap,
        outputs: outputsMap,
        hostListeners: hostListeners,
        hostProperties: hostProperties,
        hostAttributes: hostAttributes,
        providers: providers,
        viewProviders: viewProviders,
        queries: queries,
        viewQueries: viewQueries,
        entryComponents: entryComponents,
        template: template
      });
    };
    CompileDirectiveMetadata.prototype.toSummary = function() {
      return {
        summaryKind: CompileSummaryKind.Directive,
        type: this.type,
        isComponent: this.isComponent,
        selector: this.selector,
        exportAs: this.exportAs,
        inputs: this.inputs,
        outputs: this.outputs,
        hostListeners: this.hostListeners,
        hostProperties: this.hostProperties,
        hostAttributes: this.hostAttributes,
        providers: this.providers,
        viewProviders: this.viewProviders,
        queries: this.queries,
        entryComponents: this.entryComponents,
        changeDetection: this.changeDetection,
        template: this.template && this.template.toSummary()
      };
    };
    return CompileDirectiveMetadata;
  }());
  function createHostComponentMeta(typeReference, compMeta) {
    var template = CssSelector.parse(compMeta.selector)[0].getMatchingElementTemplate();
    return CompileDirectiveMetadata.create({
      isHost: true,
      type: {
        reference: typeReference,
        diDeps: [],
        lifecycleHooks: []
      },
      template: new CompileTemplateMetadata({
        encapsulation: _angular_core.ViewEncapsulation.None,
        template: template,
        templateUrl: '',
        styles: [],
        styleUrls: [],
        ngContentSelectors: [],
        animations: []
      }),
      changeDetection: _angular_core.ChangeDetectionStrategy.Default,
      inputs: [],
      outputs: [],
      host: {},
      isComponent: true,
      selector: '*',
      providers: [],
      viewProviders: [],
      queries: [],
      viewQueries: []
    });
  }
  var CompilePipeMetadata = (function() {
    function CompilePipeMetadata(_a) {
      var _b = _a === void 0 ? {} : _a,
          type = _b.type,
          name = _b.name,
          pure = _b.pure;
      this.type = type;
      this.name = name;
      this.pure = !!pure;
    }
    CompilePipeMetadata.prototype.toSummary = function() {
      return {
        summaryKind: CompileSummaryKind.Pipe,
        type: this.type,
        name: this.name,
        pure: this.pure
      };
    };
    return CompilePipeMetadata;
  }());
  var CompileNgModuleMetadata = (function() {
    function CompileNgModuleMetadata(_a) {
      var _b = _a === void 0 ? {} : _a,
          type = _b.type,
          providers = _b.providers,
          declaredDirectives = _b.declaredDirectives,
          exportedDirectives = _b.exportedDirectives,
          declaredPipes = _b.declaredPipes,
          exportedPipes = _b.exportedPipes,
          entryComponents = _b.entryComponents,
          bootstrapComponents = _b.bootstrapComponents,
          importedModules = _b.importedModules,
          exportedModules = _b.exportedModules,
          schemas = _b.schemas,
          transitiveModule = _b.transitiveModule,
          id = _b.id;
      this.type = type;
      this.declaredDirectives = _normalizeArray(declaredDirectives);
      this.exportedDirectives = _normalizeArray(exportedDirectives);
      this.declaredPipes = _normalizeArray(declaredPipes);
      this.exportedPipes = _normalizeArray(exportedPipes);
      this.providers = _normalizeArray(providers);
      this.entryComponents = _normalizeArray(entryComponents);
      this.bootstrapComponents = _normalizeArray(bootstrapComponents);
      this.importedModules = _normalizeArray(importedModules);
      this.exportedModules = _normalizeArray(exportedModules);
      this.schemas = _normalizeArray(schemas);
      this.id = id;
      this.transitiveModule = transitiveModule;
    }
    CompileNgModuleMetadata.prototype.toSummary = function() {
      return {
        summaryKind: CompileSummaryKind.NgModule,
        type: this.type,
        entryComponents: this.transitiveModule.entryComponents,
        providers: this.transitiveModule.providers,
        modules: this.transitiveModule.modules,
        exportedDirectives: this.transitiveModule.exportedDirectives,
        exportedPipes: this.transitiveModule.exportedPipes
      };
    };
    return CompileNgModuleMetadata;
  }());
  var TransitiveCompileNgModuleMetadata = (function() {
    function TransitiveCompileNgModuleMetadata() {
      this.directivesSet = new Set();
      this.directives = [];
      this.exportedDirectivesSet = new Set();
      this.exportedDirectives = [];
      this.pipesSet = new Set();
      this.pipes = [];
      this.exportedPipesSet = new Set();
      this.exportedPipes = [];
      this.modulesSet = new Set();
      this.modules = [];
      this.entryComponentsSet = new Set();
      this.entryComponents = [];
      this.providers = [];
    }
    TransitiveCompileNgModuleMetadata.prototype.addProvider = function(provider, module) {
      this.providers.push({
        provider: provider,
        module: module
      });
    };
    TransitiveCompileNgModuleMetadata.prototype.addDirective = function(id) {
      if (!this.directivesSet.has(id.reference)) {
        this.directivesSet.add(id.reference);
        this.directives.push(id);
      }
    };
    TransitiveCompileNgModuleMetadata.prototype.addExportedDirective = function(id) {
      if (!this.exportedDirectivesSet.has(id.reference)) {
        this.exportedDirectivesSet.add(id.reference);
        this.exportedDirectives.push(id);
      }
    };
    TransitiveCompileNgModuleMetadata.prototype.addPipe = function(id) {
      if (!this.pipesSet.has(id.reference)) {
        this.pipesSet.add(id.reference);
        this.pipes.push(id);
      }
    };
    TransitiveCompileNgModuleMetadata.prototype.addExportedPipe = function(id) {
      if (!this.exportedPipesSet.has(id.reference)) {
        this.exportedPipesSet.add(id.reference);
        this.exportedPipes.push(id);
      }
    };
    TransitiveCompileNgModuleMetadata.prototype.addModule = function(id) {
      if (!this.modulesSet.has(id.reference)) {
        this.modulesSet.add(id.reference);
        this.modules.push(id);
      }
    };
    TransitiveCompileNgModuleMetadata.prototype.addEntryComponent = function(id) {
      if (!this.entryComponentsSet.has(id.reference)) {
        this.entryComponentsSet.add(id.reference);
        this.entryComponents.push(id);
      }
    };
    return TransitiveCompileNgModuleMetadata;
  }());
  function _normalizeArray(obj) {
    return obj || [];
  }
  var ProviderMeta = (function() {
    function ProviderMeta(token, _a) {
      var useClass = _a.useClass,
          useValue = _a.useValue,
          useExisting = _a.useExisting,
          useFactory = _a.useFactory,
          deps = _a.deps,
          multi = _a.multi;
      this.token = token;
      this.useClass = useClass;
      this.useValue = useValue;
      this.useExisting = useExisting;
      this.useFactory = useFactory;
      this.dependencies = deps;
      this.multi = !!multi;
    }
    return ProviderMeta;
  }());
  var $EOF = 0;
  var $TAB = 9;
  var $LF = 10;
  var $VTAB = 11;
  var $FF = 12;
  var $CR = 13;
  var $SPACE = 32;
  var $BANG = 33;
  var $DQ = 34;
  var $HASH = 35;
  var $$ = 36;
  var $PERCENT = 37;
  var $AMPERSAND = 38;
  var $SQ = 39;
  var $LPAREN = 40;
  var $RPAREN = 41;
  var $STAR = 42;
  var $PLUS = 43;
  var $COMMA = 44;
  var $MINUS = 45;
  var $PERIOD = 46;
  var $SLASH = 47;
  var $COLON = 58;
  var $SEMICOLON = 59;
  var $LT = 60;
  var $EQ = 61;
  var $GT = 62;
  var $QUESTION = 63;
  var $0 = 48;
  var $9 = 57;
  var $A = 65;
  var $E = 69;
  var $F = 70;
  var $X = 88;
  var $Z = 90;
  var $LBRACKET = 91;
  var $BACKSLASH = 92;
  var $RBRACKET = 93;
  var $CARET = 94;
  var $_ = 95;
  var $a = 97;
  var $e = 101;
  var $f = 102;
  var $n = 110;
  var $r = 114;
  var $t = 116;
  var $u = 117;
  var $v = 118;
  var $x = 120;
  var $z = 122;
  var $LBRACE = 123;
  var $BAR = 124;
  var $RBRACE = 125;
  var $NBSP = 160;
  var $BT = 96;
  function isWhitespace(code) {
    return (code >= $TAB && code <= $SPACE) || (code == $NBSP);
  }
  function isDigit(code) {
    return $0 <= code && code <= $9;
  }
  function isAsciiLetter(code) {
    return code >= $a && code <= $z || code >= $A && code <= $Z;
  }
  function isAsciiHexDigit(code) {
    return code >= $a && code <= $f || code >= $A && code <= $F || isDigit(code);
  }
  function CompilerInjectable() {
    return function(x) {
      return x;
    };
  }
  function assertArrayOfStrings(identifier, value) {
    if (!_angular_core.isDevMode() || isBlank(value)) {
      return;
    }
    if (!Array.isArray(value)) {
      throw new Error("Expected '" + identifier + "' to be an array of strings.");
    }
    for (var i = 0; i < value.length; i += 1) {
      if (typeof value[i] !== 'string') {
        throw new Error("Expected '" + identifier + "' to be an array of strings.");
      }
    }
  }
  var INTERPOLATION_BLACKLIST_REGEXPS = [/^\s*$/, /[<>]/, /^[{}]$/, /&(#|[a-z])/i, /^\/\//];
  function assertInterpolationSymbols(identifier, value) {
    if (isPresent(value) && !(Array.isArray(value) && value.length == 2)) {
      throw new Error("Expected '" + identifier + "' to be an array, [start, end].");
    } else if (_angular_core.isDevMode() && !isBlank(value)) {
      var start_1 = (value[0]);
      var end_1 = (value[1]);
      INTERPOLATION_BLACKLIST_REGEXPS.forEach(function(regexp) {
        if (regexp.test(start_1) || regexp.test(end_1)) {
          throw new Error("['" + start_1 + "', '" + end_1 + "'] contains unusable interpolation symbol.");
        }
      });
    }
  }
  var InterpolationConfig = (function() {
    function InterpolationConfig(start, end) {
      this.start = start;
      this.end = end;
    }
    InterpolationConfig.fromArray = function(markers) {
      if (!markers) {
        return DEFAULT_INTERPOLATION_CONFIG;
      }
      assertInterpolationSymbols('interpolation', markers);
      return new InterpolationConfig(markers[0], markers[1]);
    };
    ;
    return InterpolationConfig;
  }());
  var DEFAULT_INTERPOLATION_CONFIG = new InterpolationConfig('{{', '}}');
  var __extends$4 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var ParserError = (function() {
    function ParserError(message, input, errLocation, ctxLocation) {
      this.input = input;
      this.errLocation = errLocation;
      this.ctxLocation = ctxLocation;
      this.message = "Parser Error: " + message + " " + errLocation + " [" + input + "] in " + ctxLocation;
    }
    return ParserError;
  }());
  var ParseSpan = (function() {
    function ParseSpan(start, end) {
      this.start = start;
      this.end = end;
    }
    return ParseSpan;
  }());
  var AST = (function() {
    function AST(span) {
      this.span = span;
    }
    AST.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return null;
    };
    AST.prototype.toString = function() {
      return 'AST';
    };
    return AST;
  }());
  var Quote = (function(_super) {
    __extends$4(Quote, _super);
    function Quote(span, prefix, uninterpretedExpression, location) {
      _super.call(this, span);
      this.prefix = prefix;
      this.uninterpretedExpression = uninterpretedExpression;
      this.location = location;
    }
    Quote.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitQuote(this, context);
    };
    Quote.prototype.toString = function() {
      return 'Quote';
    };
    return Quote;
  }(AST));
  var EmptyExpr = (function(_super) {
    __extends$4(EmptyExpr, _super);
    function EmptyExpr() {
      _super.apply(this, arguments);
    }
    EmptyExpr.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
    };
    return EmptyExpr;
  }(AST));
  var ImplicitReceiver = (function(_super) {
    __extends$4(ImplicitReceiver, _super);
    function ImplicitReceiver() {
      _super.apply(this, arguments);
    }
    ImplicitReceiver.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitImplicitReceiver(this, context);
    };
    return ImplicitReceiver;
  }(AST));
  var Chain = (function(_super) {
    __extends$4(Chain, _super);
    function Chain(span, expressions) {
      _super.call(this, span);
      this.expressions = expressions;
    }
    Chain.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitChain(this, context);
    };
    return Chain;
  }(AST));
  var Conditional = (function(_super) {
    __extends$4(Conditional, _super);
    function Conditional(span, condition, trueExp, falseExp) {
      _super.call(this, span);
      this.condition = condition;
      this.trueExp = trueExp;
      this.falseExp = falseExp;
    }
    Conditional.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitConditional(this, context);
    };
    return Conditional;
  }(AST));
  var PropertyRead = (function(_super) {
    __extends$4(PropertyRead, _super);
    function PropertyRead(span, receiver, name) {
      _super.call(this, span);
      this.receiver = receiver;
      this.name = name;
    }
    PropertyRead.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitPropertyRead(this, context);
    };
    return PropertyRead;
  }(AST));
  var PropertyWrite = (function(_super) {
    __extends$4(PropertyWrite, _super);
    function PropertyWrite(span, receiver, name, value) {
      _super.call(this, span);
      this.receiver = receiver;
      this.name = name;
      this.value = value;
    }
    PropertyWrite.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitPropertyWrite(this, context);
    };
    return PropertyWrite;
  }(AST));
  var SafePropertyRead = (function(_super) {
    __extends$4(SafePropertyRead, _super);
    function SafePropertyRead(span, receiver, name) {
      _super.call(this, span);
      this.receiver = receiver;
      this.name = name;
    }
    SafePropertyRead.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitSafePropertyRead(this, context);
    };
    return SafePropertyRead;
  }(AST));
  var KeyedRead = (function(_super) {
    __extends$4(KeyedRead, _super);
    function KeyedRead(span, obj, key) {
      _super.call(this, span);
      this.obj = obj;
      this.key = key;
    }
    KeyedRead.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitKeyedRead(this, context);
    };
    return KeyedRead;
  }(AST));
  var KeyedWrite = (function(_super) {
    __extends$4(KeyedWrite, _super);
    function KeyedWrite(span, obj, key, value) {
      _super.call(this, span);
      this.obj = obj;
      this.key = key;
      this.value = value;
    }
    KeyedWrite.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitKeyedWrite(this, context);
    };
    return KeyedWrite;
  }(AST));
  var BindingPipe = (function(_super) {
    __extends$4(BindingPipe, _super);
    function BindingPipe(span, exp, name, args) {
      _super.call(this, span);
      this.exp = exp;
      this.name = name;
      this.args = args;
    }
    BindingPipe.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitPipe(this, context);
    };
    return BindingPipe;
  }(AST));
  var LiteralPrimitive = (function(_super) {
    __extends$4(LiteralPrimitive, _super);
    function LiteralPrimitive(span, value) {
      _super.call(this, span);
      this.value = value;
    }
    LiteralPrimitive.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitLiteralPrimitive(this, context);
    };
    return LiteralPrimitive;
  }(AST));
  var LiteralArray = (function(_super) {
    __extends$4(LiteralArray, _super);
    function LiteralArray(span, expressions) {
      _super.call(this, span);
      this.expressions = expressions;
    }
    LiteralArray.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitLiteralArray(this, context);
    };
    return LiteralArray;
  }(AST));
  var LiteralMap = (function(_super) {
    __extends$4(LiteralMap, _super);
    function LiteralMap(span, keys, values) {
      _super.call(this, span);
      this.keys = keys;
      this.values = values;
    }
    LiteralMap.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitLiteralMap(this, context);
    };
    return LiteralMap;
  }(AST));
  var Interpolation = (function(_super) {
    __extends$4(Interpolation, _super);
    function Interpolation(span, strings, expressions) {
      _super.call(this, span);
      this.strings = strings;
      this.expressions = expressions;
    }
    Interpolation.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitInterpolation(this, context);
    };
    return Interpolation;
  }(AST));
  var Binary = (function(_super) {
    __extends$4(Binary, _super);
    function Binary(span, operation, left, right) {
      _super.call(this, span);
      this.operation = operation;
      this.left = left;
      this.right = right;
    }
    Binary.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitBinary(this, context);
    };
    return Binary;
  }(AST));
  var PrefixNot = (function(_super) {
    __extends$4(PrefixNot, _super);
    function PrefixNot(span, expression) {
      _super.call(this, span);
      this.expression = expression;
    }
    PrefixNot.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitPrefixNot(this, context);
    };
    return PrefixNot;
  }(AST));
  var MethodCall = (function(_super) {
    __extends$4(MethodCall, _super);
    function MethodCall(span, receiver, name, args) {
      _super.call(this, span);
      this.receiver = receiver;
      this.name = name;
      this.args = args;
    }
    MethodCall.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitMethodCall(this, context);
    };
    return MethodCall;
  }(AST));
  var SafeMethodCall = (function(_super) {
    __extends$4(SafeMethodCall, _super);
    function SafeMethodCall(span, receiver, name, args) {
      _super.call(this, span);
      this.receiver = receiver;
      this.name = name;
      this.args = args;
    }
    SafeMethodCall.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitSafeMethodCall(this, context);
    };
    return SafeMethodCall;
  }(AST));
  var FunctionCall = (function(_super) {
    __extends$4(FunctionCall, _super);
    function FunctionCall(span, target, args) {
      _super.call(this, span);
      this.target = target;
      this.args = args;
    }
    FunctionCall.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitFunctionCall(this, context);
    };
    return FunctionCall;
  }(AST));
  var ASTWithSource = (function(_super) {
    __extends$4(ASTWithSource, _super);
    function ASTWithSource(ast, source, location, errors) {
      _super.call(this, new ParseSpan(0, isBlank(source) ? 0 : source.length));
      this.ast = ast;
      this.source = source;
      this.location = location;
      this.errors = errors;
    }
    ASTWithSource.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return this.ast.visit(visitor, context);
    };
    ASTWithSource.prototype.toString = function() {
      return this.source + " in " + this.location;
    };
    return ASTWithSource;
  }(AST));
  var TemplateBinding = (function() {
    function TemplateBinding(span, key, keyIsVar, name, expression) {
      this.span = span;
      this.key = key;
      this.keyIsVar = keyIsVar;
      this.name = name;
      this.expression = expression;
    }
    return TemplateBinding;
  }());
  var RecursiveAstVisitor = (function() {
    function RecursiveAstVisitor() {}
    RecursiveAstVisitor.prototype.visitBinary = function(ast, context) {
      ast.left.visit(this);
      ast.right.visit(this);
      return null;
    };
    RecursiveAstVisitor.prototype.visitChain = function(ast, context) {
      return this.visitAll(ast.expressions, context);
    };
    RecursiveAstVisitor.prototype.visitConditional = function(ast, context) {
      ast.condition.visit(this);
      ast.trueExp.visit(this);
      ast.falseExp.visit(this);
      return null;
    };
    RecursiveAstVisitor.prototype.visitPipe = function(ast, context) {
      ast.exp.visit(this);
      this.visitAll(ast.args, context);
      return null;
    };
    RecursiveAstVisitor.prototype.visitFunctionCall = function(ast, context) {
      ast.target.visit(this);
      this.visitAll(ast.args, context);
      return null;
    };
    RecursiveAstVisitor.prototype.visitImplicitReceiver = function(ast, context) {
      return null;
    };
    RecursiveAstVisitor.prototype.visitInterpolation = function(ast, context) {
      return this.visitAll(ast.expressions, context);
    };
    RecursiveAstVisitor.prototype.visitKeyedRead = function(ast, context) {
      ast.obj.visit(this);
      ast.key.visit(this);
      return null;
    };
    RecursiveAstVisitor.prototype.visitKeyedWrite = function(ast, context) {
      ast.obj.visit(this);
      ast.key.visit(this);
      ast.value.visit(this);
      return null;
    };
    RecursiveAstVisitor.prototype.visitLiteralArray = function(ast, context) {
      return this.visitAll(ast.expressions, context);
    };
    RecursiveAstVisitor.prototype.visitLiteralMap = function(ast, context) {
      return this.visitAll(ast.values, context);
    };
    RecursiveAstVisitor.prototype.visitLiteralPrimitive = function(ast, context) {
      return null;
    };
    RecursiveAstVisitor.prototype.visitMethodCall = function(ast, context) {
      ast.receiver.visit(this);
      return this.visitAll(ast.args, context);
    };
    RecursiveAstVisitor.prototype.visitPrefixNot = function(ast, context) {
      ast.expression.visit(this);
      return null;
    };
    RecursiveAstVisitor.prototype.visitPropertyRead = function(ast, context) {
      ast.receiver.visit(this);
      return null;
    };
    RecursiveAstVisitor.prototype.visitPropertyWrite = function(ast, context) {
      ast.receiver.visit(this);
      ast.value.visit(this);
      return null;
    };
    RecursiveAstVisitor.prototype.visitSafePropertyRead = function(ast, context) {
      ast.receiver.visit(this);
      return null;
    };
    RecursiveAstVisitor.prototype.visitSafeMethodCall = function(ast, context) {
      ast.receiver.visit(this);
      return this.visitAll(ast.args, context);
    };
    RecursiveAstVisitor.prototype.visitAll = function(asts, context) {
      var _this = this;
      asts.forEach(function(ast) {
        return ast.visit(_this, context);
      });
      return null;
    };
    RecursiveAstVisitor.prototype.visitQuote = function(ast, context) {
      return null;
    };
    return RecursiveAstVisitor;
  }());
  var __decorate$2 = (this && this.__decorate) || function(decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __metadata$2 = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var TokenType = {};
  TokenType.Character = 0;
  TokenType.Identifier = 1;
  TokenType.Keyword = 2;
  TokenType.String = 3;
  TokenType.Operator = 4;
  TokenType.Number = 5;
  TokenType.Error = 6;
  TokenType[TokenType.Character] = "Character";
  TokenType[TokenType.Identifier] = "Identifier";
  TokenType[TokenType.Keyword] = "Keyword";
  TokenType[TokenType.String] = "String";
  TokenType[TokenType.Operator] = "Operator";
  TokenType[TokenType.Number] = "Number";
  TokenType[TokenType.Error] = "Error";
  var KEYWORDS = ['var', 'let', 'null', 'undefined', 'true', 'false', 'if', 'else', 'this'];
  var Lexer = (function() {
    function Lexer() {}
    Lexer.prototype.tokenize = function(text) {
      var scanner = new _Scanner(text);
      var tokens = [];
      var token = scanner.scanToken();
      while (token != null) {
        tokens.push(token);
        token = scanner.scanToken();
      }
      return tokens;
    };
    Lexer = __decorate$2([CompilerInjectable(), __metadata$2('design:paramtypes', [])], Lexer);
    return Lexer;
  }());
  var Token = (function() {
    function Token(index, type, numValue, strValue) {
      this.index = index;
      this.type = type;
      this.numValue = numValue;
      this.strValue = strValue;
    }
    Token.prototype.isCharacter = function(code) {
      return this.type == TokenType.Character && this.numValue == code;
    };
    Token.prototype.isNumber = function() {
      return this.type == TokenType.Number;
    };
    Token.prototype.isString = function() {
      return this.type == TokenType.String;
    };
    Token.prototype.isOperator = function(operater) {
      return this.type == TokenType.Operator && this.strValue == operater;
    };
    Token.prototype.isIdentifier = function() {
      return this.type == TokenType.Identifier;
    };
    Token.prototype.isKeyword = function() {
      return this.type == TokenType.Keyword;
    };
    Token.prototype.isKeywordLet = function() {
      return this.type == TokenType.Keyword && this.strValue == 'let';
    };
    Token.prototype.isKeywordNull = function() {
      return this.type == TokenType.Keyword && this.strValue == 'null';
    };
    Token.prototype.isKeywordUndefined = function() {
      return this.type == TokenType.Keyword && this.strValue == 'undefined';
    };
    Token.prototype.isKeywordTrue = function() {
      return this.type == TokenType.Keyword && this.strValue == 'true';
    };
    Token.prototype.isKeywordFalse = function() {
      return this.type == TokenType.Keyword && this.strValue == 'false';
    };
    Token.prototype.isKeywordThis = function() {
      return this.type == TokenType.Keyword && this.strValue == 'this';
    };
    Token.prototype.isError = function() {
      return this.type == TokenType.Error;
    };
    Token.prototype.toNumber = function() {
      return this.type == TokenType.Number ? this.numValue : -1;
    };
    Token.prototype.toString = function() {
      switch (this.type) {
        case TokenType.Character:
        case TokenType.Identifier:
        case TokenType.Keyword:
        case TokenType.Operator:
        case TokenType.String:
        case TokenType.Error:
          return this.strValue;
        case TokenType.Number:
          return this.numValue.toString();
        default:
          return null;
      }
    };
    return Token;
  }());
  function newCharacterToken(index, code) {
    return new Token(index, TokenType.Character, code, String.fromCharCode(code));
  }
  function newIdentifierToken(index, text) {
    return new Token(index, TokenType.Identifier, 0, text);
  }
  function newKeywordToken(index, text) {
    return new Token(index, TokenType.Keyword, 0, text);
  }
  function newOperatorToken(index, text) {
    return new Token(index, TokenType.Operator, 0, text);
  }
  function newStringToken(index, text) {
    return new Token(index, TokenType.String, 0, text);
  }
  function newNumberToken(index, n) {
    return new Token(index, TokenType.Number, n, '');
  }
  function newErrorToken(index, message) {
    return new Token(index, TokenType.Error, 0, message);
  }
  var EOF = new Token(-1, TokenType.Character, 0, '');
  var _Scanner = (function() {
    function _Scanner(input) {
      this.input = input;
      this.peek = 0;
      this.index = -1;
      this.length = input.length;
      this.advance();
    }
    _Scanner.prototype.advance = function() {
      this.peek = ++this.index >= this.length ? $EOF : this.input.charCodeAt(this.index);
    };
    _Scanner.prototype.scanToken = function() {
      var input = this.input,
          length = this.length;
      var peek = this.peek,
          index = this.index;
      while (peek <= $SPACE) {
        if (++index >= length) {
          peek = $EOF;
          break;
        } else {
          peek = input.charCodeAt(index);
        }
      }
      this.peek = peek;
      this.index = index;
      if (index >= length) {
        return null;
      }
      if (isIdentifierStart(peek))
        return this.scanIdentifier();
      if (isDigit(peek))
        return this.scanNumber(index);
      var start = index;
      switch (peek) {
        case $PERIOD:
          this.advance();
          return isDigit(this.peek) ? this.scanNumber(start) : newCharacterToken(start, $PERIOD);
        case $LPAREN:
        case $RPAREN:
        case $LBRACE:
        case $RBRACE:
        case $LBRACKET:
        case $RBRACKET:
        case $COMMA:
        case $COLON:
        case $SEMICOLON:
          return this.scanCharacter(start, peek);
        case $SQ:
        case $DQ:
          return this.scanString();
        case $HASH:
        case $PLUS:
        case $MINUS:
        case $STAR:
        case $SLASH:
        case $PERCENT:
        case $CARET:
          return this.scanOperator(start, String.fromCharCode(peek));
        case $QUESTION:
          return this.scanComplexOperator(start, '?', $PERIOD, '.');
        case $LT:
        case $GT:
          return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, '=');
        case $BANG:
        case $EQ:
          return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, '=', $EQ, '=');
        case $AMPERSAND:
          return this.scanComplexOperator(start, '&', $AMPERSAND, '&');
        case $BAR:
          return this.scanComplexOperator(start, '|', $BAR, '|');
        case $NBSP:
          while (isWhitespace(this.peek))
            this.advance();
          return this.scanToken();
      }
      this.advance();
      return this.error("Unexpected character [" + String.fromCharCode(peek) + "]", 0);
    };
    _Scanner.prototype.scanCharacter = function(start, code) {
      this.advance();
      return newCharacterToken(start, code);
    };
    _Scanner.prototype.scanOperator = function(start, str) {
      this.advance();
      return newOperatorToken(start, str);
    };
    _Scanner.prototype.scanComplexOperator = function(start, one, twoCode, two, threeCode, three) {
      this.advance();
      var str = one;
      if (this.peek == twoCode) {
        this.advance();
        str += two;
      }
      if (isPresent(threeCode) && this.peek == threeCode) {
        this.advance();
        str += three;
      }
      return newOperatorToken(start, str);
    };
    _Scanner.prototype.scanIdentifier = function() {
      var start = this.index;
      this.advance();
      while (isIdentifierPart(this.peek))
        this.advance();
      var str = this.input.substring(start, this.index);
      return KEYWORDS.indexOf(str) > -1 ? newKeywordToken(start, str) : newIdentifierToken(start, str);
    };
    _Scanner.prototype.scanNumber = function(start) {
      var simple = (this.index === start);
      this.advance();
      while (true) {
        if (isDigit(this.peek)) {} else if (this.peek == $PERIOD) {
          simple = false;
        } else if (isExponentStart(this.peek)) {
          this.advance();
          if (isExponentSign(this.peek))
            this.advance();
          if (!isDigit(this.peek))
            return this.error('Invalid exponent', -1);
          simple = false;
        } else {
          break;
        }
        this.advance();
      }
      var str = this.input.substring(start, this.index);
      var value = simple ? NumberWrapper.parseIntAutoRadix(str) : parseFloat(str);
      return newNumberToken(start, value);
    };
    _Scanner.prototype.scanString = function() {
      var start = this.index;
      var quote = this.peek;
      this.advance();
      var buffer = '';
      var marker = this.index;
      var input = this.input;
      while (this.peek != quote) {
        if (this.peek == $BACKSLASH) {
          buffer += input.substring(marker, this.index);
          this.advance();
          var unescapedCode = void 0;
          if (this.peek == $u) {
            var hex = input.substring(this.index + 1, this.index + 5);
            if (/^[0-9a-f]+$/i.test(hex)) {
              unescapedCode = parseInt(hex, 16);
            } else {
              return this.error("Invalid unicode escape [\\u" + hex + "]", 0);
            }
            for (var i = 0; i < 5; i++) {
              this.advance();
            }
          } else {
            unescapedCode = unescape(this.peek);
            this.advance();
          }
          buffer += String.fromCharCode(unescapedCode);
          marker = this.index;
        } else if (this.peek == $EOF) {
          return this.error('Unterminated quote', 0);
        } else {
          this.advance();
        }
      }
      var last = input.substring(marker, this.index);
      this.advance();
      return newStringToken(start, buffer + last);
    };
    _Scanner.prototype.error = function(message, offset) {
      var position = this.index + offset;
      return newErrorToken(position, "Lexer Error: " + message + " at column " + position + " in expression [" + this.input + "]");
    };
    return _Scanner;
  }());
  function isIdentifierStart(code) {
    return ($a <= code && code <= $z) || ($A <= code && code <= $Z) || (code == $_) || (code == $$);
  }
  function isIdentifier(input) {
    if (input.length == 0)
      return false;
    var scanner = new _Scanner(input);
    if (!isIdentifierStart(scanner.peek))
      return false;
    scanner.advance();
    while (scanner.peek !== $EOF) {
      if (!isIdentifierPart(scanner.peek))
        return false;
      scanner.advance();
    }
    return true;
  }
  function isIdentifierPart(code) {
    return isAsciiLetter(code) || isDigit(code) || (code == $_) || (code == $$);
  }
  function isExponentStart(code) {
    return code == $e || code == $E;
  }
  function isExponentSign(code) {
    return code == $MINUS || code == $PLUS;
  }
  function isQuote(code) {
    return code === $SQ || code === $DQ || code === $BT;
  }
  function unescape(code) {
    switch (code) {
      case $n:
        return $LF;
      case $f:
        return $FF;
      case $r:
        return $CR;
      case $t:
        return $TAB;
      case $v:
        return $VTAB;
      default:
        return code;
    }
  }
  var __decorate$1 = (this && this.__decorate) || function(decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __metadata$1 = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var SplitInterpolation = (function() {
    function SplitInterpolation(strings, expressions, offsets) {
      this.strings = strings;
      this.expressions = expressions;
      this.offsets = offsets;
    }
    return SplitInterpolation;
  }());
  var TemplateBindingParseResult = (function() {
    function TemplateBindingParseResult(templateBindings, warnings, errors) {
      this.templateBindings = templateBindings;
      this.warnings = warnings;
      this.errors = errors;
    }
    return TemplateBindingParseResult;
  }());
  function _createInterpolateRegExp(config) {
    var pattern = escapeRegExp(config.start) + '([\\s\\S]*?)' + escapeRegExp(config.end);
    return new RegExp(pattern, 'g');
  }
  var Parser = (function() {
    function Parser(_lexer) {
      this._lexer = _lexer;
      this.errors = [];
    }
    Parser.prototype.parseAction = function(input, location, interpolationConfig) {
      if (interpolationConfig === void 0) {
        interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
      }
      this._checkNoInterpolation(input, location, interpolationConfig);
      var sourceToLex = this._stripComments(input);
      var tokens = this._lexer.tokenize(this._stripComments(input));
      var ast = new _ParseAST(input, location, tokens, sourceToLex.length, true, this.errors, input.length - sourceToLex.length).parseChain();
      return new ASTWithSource(ast, input, location, this.errors);
    };
    Parser.prototype.parseBinding = function(input, location, interpolationConfig) {
      if (interpolationConfig === void 0) {
        interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
      }
      var ast = this._parseBindingAst(input, location, interpolationConfig);
      return new ASTWithSource(ast, input, location, this.errors);
    };
    Parser.prototype.parseSimpleBinding = function(input, location, interpolationConfig) {
      if (interpolationConfig === void 0) {
        interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
      }
      var ast = this._parseBindingAst(input, location, interpolationConfig);
      var errors = SimpleExpressionChecker.check(ast);
      if (errors.length > 0) {
        this._reportError("Host binding expression cannot contain " + errors.join(' '), input, location);
      }
      return new ASTWithSource(ast, input, location, this.errors);
    };
    Parser.prototype._reportError = function(message, input, errLocation, ctxLocation) {
      this.errors.push(new ParserError(message, input, errLocation, ctxLocation));
    };
    Parser.prototype._parseBindingAst = function(input, location, interpolationConfig) {
      var quote = this._parseQuote(input, location);
      if (isPresent(quote)) {
        return quote;
      }
      this._checkNoInterpolation(input, location, interpolationConfig);
      var sourceToLex = this._stripComments(input);
      var tokens = this._lexer.tokenize(sourceToLex);
      return new _ParseAST(input, location, tokens, sourceToLex.length, false, this.errors, input.length - sourceToLex.length).parseChain();
    };
    Parser.prototype._parseQuote = function(input, location) {
      if (isBlank(input))
        return null;
      var prefixSeparatorIndex = input.indexOf(':');
      if (prefixSeparatorIndex == -1)
        return null;
      var prefix = input.substring(0, prefixSeparatorIndex).trim();
      if (!isIdentifier(prefix))
        return null;
      var uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);
      return new Quote(new ParseSpan(0, input.length), prefix, uninterpretedExpression, location);
    };
    Parser.prototype.parseTemplateBindings = function(prefixToken, input, location) {
      var tokens = this._lexer.tokenize(input);
      if (prefixToken) {
        var prefixTokens = this._lexer.tokenize(prefixToken).map(function(t) {
          t.index = 0;
          return t;
        });
        tokens.unshift.apply(tokens, prefixTokens);
      }
      return new _ParseAST(input, location, tokens, input.length, false, this.errors, 0).parseTemplateBindings();
    };
    Parser.prototype.parseInterpolation = function(input, location, interpolationConfig) {
      if (interpolationConfig === void 0) {
        interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
      }
      var split = this.splitInterpolation(input, location, interpolationConfig);
      if (split == null)
        return null;
      var expressions = [];
      for (var i = 0; i < split.expressions.length; ++i) {
        var expressionText = split.expressions[i];
        var sourceToLex = this._stripComments(expressionText);
        var tokens = this._lexer.tokenize(this._stripComments(split.expressions[i]));
        var ast = new _ParseAST(input, location, tokens, sourceToLex.length, false, this.errors, split.offsets[i] + (expressionText.length - sourceToLex.length)).parseChain();
        expressions.push(ast);
      }
      return new ASTWithSource(new Interpolation(new ParseSpan(0, isBlank(input) ? 0 : input.length), split.strings, expressions), input, location, this.errors);
    };
    Parser.prototype.splitInterpolation = function(input, location, interpolationConfig) {
      if (interpolationConfig === void 0) {
        interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
      }
      var regexp = _createInterpolateRegExp(interpolationConfig);
      var parts = input.split(regexp);
      if (parts.length <= 1) {
        return null;
      }
      var strings = [];
      var expressions = [];
      var offsets = [];
      var offset = 0;
      for (var i = 0; i < parts.length; i++) {
        var part = parts[i];
        if (i % 2 === 0) {
          strings.push(part);
          offset += part.length;
        } else if (part.trim().length > 0) {
          offset += interpolationConfig.start.length;
          expressions.push(part);
          offsets.push(offset);
          offset += part.length + interpolationConfig.end.length;
        } else {
          this._reportError('Blank expressions are not allowed in interpolated strings', input, "at column " + this._findInterpolationErrorColumn(parts, i, interpolationConfig) + " in", location);
          expressions.push('$implict');
          offsets.push(offset);
        }
      }
      return new SplitInterpolation(strings, expressions, offsets);
    };
    Parser.prototype.wrapLiteralPrimitive = function(input, location) {
      return new ASTWithSource(new LiteralPrimitive(new ParseSpan(0, isBlank(input) ? 0 : input.length), input), input, location, this.errors);
    };
    Parser.prototype._stripComments = function(input) {
      var i = this._commentStart(input);
      return isPresent(i) ? input.substring(0, i).trim() : input;
    };
    Parser.prototype._commentStart = function(input) {
      var outerQuote = null;
      for (var i = 0; i < input.length - 1; i++) {
        var char = input.charCodeAt(i);
        var nextChar = input.charCodeAt(i + 1);
        if (char === $SLASH && nextChar == $SLASH && isBlank(outerQuote))
          return i;
        if (outerQuote === char) {
          outerQuote = null;
        } else if (isBlank(outerQuote) && isQuote(char)) {
          outerQuote = char;
        }
      }
      return null;
    };
    Parser.prototype._checkNoInterpolation = function(input, location, interpolationConfig) {
      var regexp = _createInterpolateRegExp(interpolationConfig);
      var parts = input.split(regexp);
      if (parts.length > 1) {
        this._reportError("Got interpolation (" + interpolationConfig.start + interpolationConfig.end + ") where expression was expected", input, "at column " + this._findInterpolationErrorColumn(parts, 1, interpolationConfig) + " in", location);
      }
    };
    Parser.prototype._findInterpolationErrorColumn = function(parts, partInErrIdx, interpolationConfig) {
      var errLocation = '';
      for (var j = 0; j < partInErrIdx; j++) {
        errLocation += j % 2 === 0 ? parts[j] : "" + interpolationConfig.start + parts[j] + interpolationConfig.end;
      }
      return errLocation.length;
    };
    Parser = __decorate$1([CompilerInjectable(), __metadata$1('design:paramtypes', [Lexer])], Parser);
    return Parser;
  }());
  var _ParseAST = (function() {
    function _ParseAST(input, location, tokens, inputLength, parseAction, errors, offset) {
      this.input = input;
      this.location = location;
      this.tokens = tokens;
      this.inputLength = inputLength;
      this.parseAction = parseAction;
      this.errors = errors;
      this.offset = offset;
      this.rparensExpected = 0;
      this.rbracketsExpected = 0;
      this.rbracesExpected = 0;
      this.index = 0;
    }
    _ParseAST.prototype.peek = function(offset) {
      var i = this.index + offset;
      return i < this.tokens.length ? this.tokens[i] : EOF;
    };
    Object.defineProperty(_ParseAST.prototype, "next", {
      get: function() {
        return this.peek(0);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(_ParseAST.prototype, "inputIndex", {
      get: function() {
        return (this.index < this.tokens.length) ? this.next.index + this.offset : this.inputLength + this.offset;
      },
      enumerable: true,
      configurable: true
    });
    _ParseAST.prototype.span = function(start) {
      return new ParseSpan(start, this.inputIndex);
    };
    _ParseAST.prototype.advance = function() {
      this.index++;
    };
    _ParseAST.prototype.optionalCharacter = function(code) {
      if (this.next.isCharacter(code)) {
        this.advance();
        return true;
      } else {
        return false;
      }
    };
    _ParseAST.prototype.peekKeywordLet = function() {
      return this.next.isKeywordLet();
    };
    _ParseAST.prototype.expectCharacter = function(code) {
      if (this.optionalCharacter(code))
        return;
      this.error("Missing expected " + String.fromCharCode(code));
    };
    _ParseAST.prototype.optionalOperator = function(op) {
      if (this.next.isOperator(op)) {
        this.advance();
        return true;
      } else {
        return false;
      }
    };
    _ParseAST.prototype.expectOperator = function(operator) {
      if (this.optionalOperator(operator))
        return;
      this.error("Missing expected operator " + operator);
    };
    _ParseAST.prototype.expectIdentifierOrKeyword = function() {
      var n = this.next;
      if (!n.isIdentifier() && !n.isKeyword()) {
        this.error("Unexpected token " + n + ", expected identifier or keyword");
        return '';
      }
      this.advance();
      return n.toString();
    };
    _ParseAST.prototype.expectIdentifierOrKeywordOrString = function() {
      var n = this.next;
      if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {
        this.error("Unexpected token " + n + ", expected identifier, keyword, or string");
        return '';
      }
      this.advance();
      return n.toString();
    };
    _ParseAST.prototype.parseChain = function() {
      var exprs = [];
      var start = this.inputIndex;
      while (this.index < this.tokens.length) {
        var expr = this.parsePipe();
        exprs.push(expr);
        if (this.optionalCharacter($SEMICOLON)) {
          if (!this.parseAction) {
            this.error('Binding expression cannot contain chained expression');
          }
          while (this.optionalCharacter($SEMICOLON)) {}
        } else if (this.index < this.tokens.length) {
          this.error("Unexpected token '" + this.next + "'");
        }
      }
      if (exprs.length == 0)
        return new EmptyExpr(this.span(start));
      if (exprs.length == 1)
        return exprs[0];
      return new Chain(this.span(start), exprs);
    };
    _ParseAST.prototype.parsePipe = function() {
      var result = this.parseExpression();
      if (this.optionalOperator('|')) {
        if (this.parseAction) {
          this.error('Cannot have a pipe in an action expression');
        }
        do {
          var name_1 = this.expectIdentifierOrKeyword();
          var args = [];
          while (this.optionalCharacter($COLON)) {
            args.push(this.parseExpression());
          }
          result = new BindingPipe(this.span(result.span.start), result, name_1, args);
        } while (this.optionalOperator('|'));
      }
      return result;
    };
    _ParseAST.prototype.parseExpression = function() {
      return this.parseConditional();
    };
    _ParseAST.prototype.parseConditional = function() {
      var start = this.inputIndex;
      var result = this.parseLogicalOr();
      if (this.optionalOperator('?')) {
        var yes = this.parsePipe();
        var no = void 0;
        if (!this.optionalCharacter($COLON)) {
          var end = this.inputIndex;
          var expression = this.input.substring(start, end);
          this.error("Conditional expression " + expression + " requires all 3 expressions");
          no = new EmptyExpr(this.span(start));
        } else {
          no = this.parsePipe();
        }
        return new Conditional(this.span(start), result, yes, no);
      } else {
        return result;
      }
    };
    _ParseAST.prototype.parseLogicalOr = function() {
      var result = this.parseLogicalAnd();
      while (this.optionalOperator('||')) {
        var right = this.parseLogicalAnd();
        result = new Binary(this.span(result.span.start), '||', result, right);
      }
      return result;
    };
    _ParseAST.prototype.parseLogicalAnd = function() {
      var result = this.parseEquality();
      while (this.optionalOperator('&&')) {
        var right = this.parseEquality();
        result = new Binary(this.span(result.span.start), '&&', result, right);
      }
      return result;
    };
    _ParseAST.prototype.parseEquality = function() {
      var result = this.parseRelational();
      while (this.next.type == TokenType.Operator) {
        var operator = this.next.strValue;
        switch (operator) {
          case '==':
          case '===':
          case '!=':
          case '!==':
            this.advance();
            var right = this.parseRelational();
            result = new Binary(this.span(result.span.start), operator, result, right);
            continue;
        }
        break;
      }
      return result;
    };
    _ParseAST.prototype.parseRelational = function() {
      var result = this.parseAdditive();
      while (this.next.type == TokenType.Operator) {
        var operator = this.next.strValue;
        switch (operator) {
          case '<':
          case '>':
          case '<=':
          case '>=':
            this.advance();
            var right = this.parseAdditive();
            result = new Binary(this.span(result.span.start), operator, result, right);
            continue;
        }
        break;
      }
      return result;
    };
    _ParseAST.prototype.parseAdditive = function() {
      var result = this.parseMultiplicative();
      while (this.next.type == TokenType.Operator) {
        var operator = this.next.strValue;
        switch (operator) {
          case '+':
          case '-':
            this.advance();
            var right = this.parseMultiplicative();
            result = new Binary(this.span(result.span.start), operator, result, right);
            continue;
        }
        break;
      }
      return result;
    };
    _ParseAST.prototype.parseMultiplicative = function() {
      var result = this.parsePrefix();
      while (this.next.type == TokenType.Operator) {
        var operator = this.next.strValue;
        switch (operator) {
          case '*':
          case '%':
          case '/':
            this.advance();
            var right = this.parsePrefix();
            result = new Binary(this.span(result.span.start), operator, result, right);
            continue;
        }
        break;
      }
      return result;
    };
    _ParseAST.prototype.parsePrefix = function() {
      if (this.next.type == TokenType.Operator) {
        var start = this.inputIndex;
        var operator = this.next.strValue;
        var result = void 0;
        switch (operator) {
          case '+':
            this.advance();
            return this.parsePrefix();
          case '-':
            this.advance();
            result = this.parsePrefix();
            return new Binary(this.span(start), operator, new LiteralPrimitive(new ParseSpan(start, start), 0), result);
          case '!':
            this.advance();
            result = this.parsePrefix();
            return new PrefixNot(this.span(start), result);
        }
      }
      return this.parseCallChain();
    };
    _ParseAST.prototype.parseCallChain = function() {
      var result = this.parsePrimary();
      while (true) {
        if (this.optionalCharacter($PERIOD)) {
          result = this.parseAccessMemberOrMethodCall(result, false);
        } else if (this.optionalOperator('?.')) {
          result = this.parseAccessMemberOrMethodCall(result, true);
        } else if (this.optionalCharacter($LBRACKET)) {
          this.rbracketsExpected++;
          var key = this.parsePipe();
          this.rbracketsExpected--;
          this.expectCharacter($RBRACKET);
          if (this.optionalOperator('=')) {
            var value = this.parseConditional();
            result = new KeyedWrite(this.span(result.span.start), result, key, value);
          } else {
            result = new KeyedRead(this.span(result.span.start), result, key);
          }
        } else if (this.optionalCharacter($LPAREN)) {
          this.rparensExpected++;
          var args = this.parseCallArguments();
          this.rparensExpected--;
          this.expectCharacter($RPAREN);
          result = new FunctionCall(this.span(result.span.start), result, args);
        } else {
          return result;
        }
      }
    };
    _ParseAST.prototype.parsePrimary = function() {
      var start = this.inputIndex;
      if (this.optionalCharacter($LPAREN)) {
        this.rparensExpected++;
        var result = this.parsePipe();
        this.rparensExpected--;
        this.expectCharacter($RPAREN);
        return result;
      } else if (this.next.isKeywordNull()) {
        this.advance();
        return new LiteralPrimitive(this.span(start), null);
      } else if (this.next.isKeywordUndefined()) {
        this.advance();
        return new LiteralPrimitive(this.span(start), void 0);
      } else if (this.next.isKeywordTrue()) {
        this.advance();
        return new LiteralPrimitive(this.span(start), true);
      } else if (this.next.isKeywordFalse()) {
        this.advance();
        return new LiteralPrimitive(this.span(start), false);
      } else if (this.next.isKeywordThis()) {
        this.advance();
        return new ImplicitReceiver(this.span(start));
      } else if (this.optionalCharacter($LBRACKET)) {
        this.rbracketsExpected++;
        var elements = this.parseExpressionList($RBRACKET);
        this.rbracketsExpected--;
        this.expectCharacter($RBRACKET);
        return new LiteralArray(this.span(start), elements);
      } else if (this.next.isCharacter($LBRACE)) {
        return this.parseLiteralMap();
      } else if (this.next.isIdentifier()) {
        return this.parseAccessMemberOrMethodCall(new ImplicitReceiver(this.span(start)), false);
      } else if (this.next.isNumber()) {
        var value = this.next.toNumber();
        this.advance();
        return new LiteralPrimitive(this.span(start), value);
      } else if (this.next.isString()) {
        var literalValue = this.next.toString();
        this.advance();
        return new LiteralPrimitive(this.span(start), literalValue);
      } else if (this.index >= this.tokens.length) {
        this.error("Unexpected end of expression: " + this.input);
        return new EmptyExpr(this.span(start));
      } else {
        this.error("Unexpected token " + this.next);
        return new EmptyExpr(this.span(start));
      }
    };
    _ParseAST.prototype.parseExpressionList = function(terminator) {
      var result = [];
      if (!this.next.isCharacter(terminator)) {
        do {
          result.push(this.parsePipe());
        } while (this.optionalCharacter($COMMA));
      }
      return result;
    };
    _ParseAST.prototype.parseLiteralMap = function() {
      var keys = [];
      var values = [];
      var start = this.inputIndex;
      this.expectCharacter($LBRACE);
      if (!this.optionalCharacter($RBRACE)) {
        this.rbracesExpected++;
        do {
          var key = this.expectIdentifierOrKeywordOrString();
          keys.push(key);
          this.expectCharacter($COLON);
          values.push(this.parsePipe());
        } while (this.optionalCharacter($COMMA));
        this.rbracesExpected--;
        this.expectCharacter($RBRACE);
      }
      return new LiteralMap(this.span(start), keys, values);
    };
    _ParseAST.prototype.parseAccessMemberOrMethodCall = function(receiver, isSafe) {
      if (isSafe === void 0) {
        isSafe = false;
      }
      var start = receiver.span.start;
      var id = this.expectIdentifierOrKeyword();
      if (this.optionalCharacter($LPAREN)) {
        this.rparensExpected++;
        var args = this.parseCallArguments();
        this.expectCharacter($RPAREN);
        this.rparensExpected--;
        var span = this.span(start);
        return isSafe ? new SafeMethodCall(span, receiver, id, args) : new MethodCall(span, receiver, id, args);
      } else {
        if (isSafe) {
          if (this.optionalOperator('=')) {
            this.error('The \'?.\' operator cannot be used in the assignment');
            return new EmptyExpr(this.span(start));
          } else {
            return new SafePropertyRead(this.span(start), receiver, id);
          }
        } else {
          if (this.optionalOperator('=')) {
            if (!this.parseAction) {
              this.error('Bindings cannot contain assignments');
              return new EmptyExpr(this.span(start));
            }
            var value = this.parseConditional();
            return new PropertyWrite(this.span(start), receiver, id, value);
          } else {
            return new PropertyRead(this.span(start), receiver, id);
          }
        }
      }
    };
    _ParseAST.prototype.parseCallArguments = function() {
      if (this.next.isCharacter($RPAREN))
        return [];
      var positionals = [];
      do {
        positionals.push(this.parsePipe());
      } while (this.optionalCharacter($COMMA));
      return (positionals);
    };
    _ParseAST.prototype.expectTemplateBindingKey = function() {
      var result = '';
      var operatorFound = false;
      do {
        result += this.expectIdentifierOrKeywordOrString();
        operatorFound = this.optionalOperator('-');
        if (operatorFound) {
          result += '-';
        }
      } while (operatorFound);
      return result.toString();
    };
    _ParseAST.prototype.parseTemplateBindings = function() {
      var bindings = [];
      var prefix = null;
      var warnings = [];
      while (this.index < this.tokens.length) {
        var start = this.inputIndex;
        var keyIsVar = this.peekKeywordLet();
        if (keyIsVar) {
          this.advance();
        }
        var key = this.expectTemplateBindingKey();
        if (!keyIsVar) {
          if (prefix == null) {
            prefix = key;
          } else {
            key = prefix + key[0].toUpperCase() + key.substring(1);
          }
        }
        this.optionalCharacter($COLON);
        var name_2 = null;
        var expression = null;
        if (keyIsVar) {
          if (this.optionalOperator('=')) {
            name_2 = this.expectTemplateBindingKey();
          } else {
            name_2 = '\$implicit';
          }
        } else if (this.next !== EOF && !this.peekKeywordLet()) {
          var start_1 = this.inputIndex;
          var ast = this.parsePipe();
          var source = this.input.substring(start_1 - this.offset, this.inputIndex - this.offset);
          expression = new ASTWithSource(ast, source, this.location, this.errors);
        }
        bindings.push(new TemplateBinding(this.span(start), key, keyIsVar, name_2, expression));
        if (!this.optionalCharacter($SEMICOLON)) {
          this.optionalCharacter($COMMA);
        }
      }
      return new TemplateBindingParseResult(bindings, warnings, this.errors);
    };
    _ParseAST.prototype.error = function(message, index) {
      if (index === void 0) {
        index = null;
      }
      this.errors.push(new ParserError(message, this.input, this.locationText(index), this.location));
      this.skip();
    };
    _ParseAST.prototype.locationText = function(index) {
      if (index === void 0) {
        index = null;
      }
      if (isBlank(index))
        index = this.index;
      return (index < this.tokens.length) ? "at column " + (this.tokens[index].index + 1) + " in" : "at the end of the expression";
    };
    _ParseAST.prototype.skip = function() {
      var n = this.next;
      while (this.index < this.tokens.length && !n.isCharacter($SEMICOLON) && (this.rparensExpected <= 0 || !n.isCharacter($RPAREN)) && (this.rbracesExpected <= 0 || !n.isCharacter($RBRACE)) && (this.rbracketsExpected <= 0 || !n.isCharacter($RBRACKET))) {
        if (this.next.isError()) {
          this.errors.push(new ParserError(this.next.toString(), this.input, this.locationText(), this.location));
        }
        this.advance();
        n = this.next;
      }
    };
    return _ParseAST;
  }());
  var SimpleExpressionChecker = (function() {
    function SimpleExpressionChecker() {
      this.errors = [];
    }
    SimpleExpressionChecker.check = function(ast) {
      var s = new SimpleExpressionChecker();
      ast.visit(s);
      return s.errors;
    };
    SimpleExpressionChecker.prototype.visitImplicitReceiver = function(ast, context) {};
    SimpleExpressionChecker.prototype.visitInterpolation = function(ast, context) {};
    SimpleExpressionChecker.prototype.visitLiteralPrimitive = function(ast, context) {};
    SimpleExpressionChecker.prototype.visitPropertyRead = function(ast, context) {};
    SimpleExpressionChecker.prototype.visitPropertyWrite = function(ast, context) {};
    SimpleExpressionChecker.prototype.visitSafePropertyRead = function(ast, context) {};
    SimpleExpressionChecker.prototype.visitMethodCall = function(ast, context) {};
    SimpleExpressionChecker.prototype.visitSafeMethodCall = function(ast, context) {};
    SimpleExpressionChecker.prototype.visitFunctionCall = function(ast, context) {};
    SimpleExpressionChecker.prototype.visitLiteralArray = function(ast, context) {
      this.visitAll(ast.expressions);
    };
    SimpleExpressionChecker.prototype.visitLiteralMap = function(ast, context) {
      this.visitAll(ast.values);
    };
    SimpleExpressionChecker.prototype.visitBinary = function(ast, context) {};
    SimpleExpressionChecker.prototype.visitPrefixNot = function(ast, context) {};
    SimpleExpressionChecker.prototype.visitConditional = function(ast, context) {};
    SimpleExpressionChecker.prototype.visitPipe = function(ast, context) {
      this.errors.push('pipes');
    };
    SimpleExpressionChecker.prototype.visitKeyedRead = function(ast, context) {};
    SimpleExpressionChecker.prototype.visitKeyedWrite = function(ast, context) {};
    SimpleExpressionChecker.prototype.visitAll = function(asts) {
      var _this = this;
      return asts.map(function(node) {
        return node.visit(_this);
      });
    };
    SimpleExpressionChecker.prototype.visitChain = function(ast, context) {};
    SimpleExpressionChecker.prototype.visitQuote = function(ast, context) {};
    return SimpleExpressionChecker;
  }());
  var ParseLocation = (function() {
    function ParseLocation(file, offset, line, col) {
      this.file = file;
      this.offset = offset;
      this.line = line;
      this.col = col;
    }
    ParseLocation.prototype.toString = function() {
      return isPresent(this.offset) ? this.file.url + "@" + this.line + ":" + this.col : this.file.url;
    };
    ParseLocation.prototype.moveBy = function(delta) {
      var source = this.file.content;
      var len = source.length;
      var offset = this.offset;
      var line = this.line;
      var col = this.col;
      while (offset > 0 && delta < 0) {
        offset--;
        delta++;
        var ch = source.charCodeAt(offset);
        if (ch == $LF) {
          line--;
          var priorLine = source.substr(0, offset - 1).lastIndexOf(String.fromCharCode($LF));
          col = priorLine > 0 ? offset - priorLine : offset;
        } else {
          col--;
        }
      }
      while (offset < len && delta > 0) {
        var ch = source.charCodeAt(offset);
        offset++;
        delta--;
        if (ch == $LF) {
          line++;
          col = 0;
        } else {
          col++;
        }
      }
      return new ParseLocation(this.file, offset, line, col);
    };
    return ParseLocation;
  }());
  var ParseSourceFile = (function() {
    function ParseSourceFile(content, url) {
      this.content = content;
      this.url = url;
    }
    return ParseSourceFile;
  }());
  var ParseSourceSpan = (function() {
    function ParseSourceSpan(start, end, details) {
      if (details === void 0) {
        details = null;
      }
      this.start = start;
      this.end = end;
      this.details = details;
    }
    ParseSourceSpan.prototype.toString = function() {
      return this.start.file.content.substring(this.start.offset, this.end.offset);
    };
    return ParseSourceSpan;
  }());
  var ParseErrorLevel = {};
  ParseErrorLevel.WARNING = 0;
  ParseErrorLevel.FATAL = 1;
  ParseErrorLevel[ParseErrorLevel.WARNING] = "WARNING";
  ParseErrorLevel[ParseErrorLevel.FATAL] = "FATAL";
  var ParseError = (function() {
    function ParseError(span, msg, level) {
      if (level === void 0) {
        level = ParseErrorLevel.FATAL;
      }
      this.span = span;
      this.msg = msg;
      this.level = level;
    }
    ParseError.prototype.toString = function() {
      var source = this.span.start.file.content;
      var ctxStart = this.span.start.offset;
      var contextStr = '';
      var details = '';
      if (isPresent(ctxStart)) {
        if (ctxStart > source.length - 1) {
          ctxStart = source.length - 1;
        }
        var ctxEnd = ctxStart;
        var ctxLen = 0;
        var ctxLines = 0;
        while (ctxLen < 100 && ctxStart > 0) {
          ctxStart--;
          ctxLen++;
          if (source[ctxStart] == '\n') {
            if (++ctxLines == 3) {
              break;
            }
          }
        }
        ctxLen = 0;
        ctxLines = 0;
        while (ctxLen < 100 && ctxEnd < source.length - 1) {
          ctxEnd++;
          ctxLen++;
          if (source[ctxEnd] == '\n') {
            if (++ctxLines == 3) {
              break;
            }
          }
        }
        var context = source.substring(ctxStart, this.span.start.offset) + '[ERROR ->]' + source.substring(this.span.start.offset, ctxEnd + 1);
        contextStr = " (\"" + context + "\")";
      }
      if (this.span.details) {
        details = ", " + this.span.details;
      }
      return "" + this.msg + contextStr + ": " + this.span.start + details;
    };
    return ParseError;
  }());
  var Text = (function() {
    function Text(value, sourceSpan) {
      this.value = value;
      this.sourceSpan = sourceSpan;
    }
    Text.prototype.visit = function(visitor, context) {
      return visitor.visitText(this, context);
    };
    return Text;
  }());
  var Expansion = (function() {
    function Expansion(switchValue, type, cases, sourceSpan, switchValueSourceSpan) {
      this.switchValue = switchValue;
      this.type = type;
      this.cases = cases;
      this.sourceSpan = sourceSpan;
      this.switchValueSourceSpan = switchValueSourceSpan;
    }
    Expansion.prototype.visit = function(visitor, context) {
      return visitor.visitExpansion(this, context);
    };
    return Expansion;
  }());
  var ExpansionCase = (function() {
    function ExpansionCase(value, expression, sourceSpan, valueSourceSpan, expSourceSpan) {
      this.value = value;
      this.expression = expression;
      this.sourceSpan = sourceSpan;
      this.valueSourceSpan = valueSourceSpan;
      this.expSourceSpan = expSourceSpan;
    }
    ExpansionCase.prototype.visit = function(visitor, context) {
      return visitor.visitExpansionCase(this, context);
    };
    return ExpansionCase;
  }());
  var Attribute$1 = (function() {
    function Attribute(name, value, sourceSpan, valueSpan) {
      this.name = name;
      this.value = value;
      this.sourceSpan = sourceSpan;
      this.valueSpan = valueSpan;
    }
    Attribute.prototype.visit = function(visitor, context) {
      return visitor.visitAttribute(this, context);
    };
    return Attribute;
  }());
  var Element = (function() {
    function Element(name, attrs, children, sourceSpan, startSourceSpan, endSourceSpan) {
      this.name = name;
      this.attrs = attrs;
      this.children = children;
      this.sourceSpan = sourceSpan;
      this.startSourceSpan = startSourceSpan;
      this.endSourceSpan = endSourceSpan;
    }
    Element.prototype.visit = function(visitor, context) {
      return visitor.visitElement(this, context);
    };
    return Element;
  }());
  var Comment = (function() {
    function Comment(value, sourceSpan) {
      this.value = value;
      this.sourceSpan = sourceSpan;
    }
    Comment.prototype.visit = function(visitor, context) {
      return visitor.visitComment(this, context);
    };
    return Comment;
  }());
  function visitAll(visitor, nodes, context) {
    if (context === void 0) {
      context = null;
    }
    var result = [];
    var visit = visitor.visit ? function(ast) {
      return visitor.visit(ast, context) || ast.visit(visitor, context);
    } : function(ast) {
      return ast.visit(visitor, context);
    };
    nodes.forEach(function(ast) {
      var astResult = visit(ast);
      if (astResult) {
        result.push(astResult);
      }
    });
    return result;
  }
  var __extends$6 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var TokenType$1 = {};
  TokenType$1.TAG_OPEN_START = 0;
  TokenType$1.TAG_OPEN_END = 1;
  TokenType$1.TAG_OPEN_END_VOID = 2;
  TokenType$1.TAG_CLOSE = 3;
  TokenType$1.TEXT = 4;
  TokenType$1.ESCAPABLE_RAW_TEXT = 5;
  TokenType$1.RAW_TEXT = 6;
  TokenType$1.COMMENT_START = 7;
  TokenType$1.COMMENT_END = 8;
  TokenType$1.CDATA_START = 9;
  TokenType$1.CDATA_END = 10;
  TokenType$1.ATTR_NAME = 11;
  TokenType$1.ATTR_VALUE = 12;
  TokenType$1.DOC_TYPE = 13;
  TokenType$1.EXPANSION_FORM_START = 14;
  TokenType$1.EXPANSION_CASE_VALUE = 15;
  TokenType$1.EXPANSION_CASE_EXP_START = 16;
  TokenType$1.EXPANSION_CASE_EXP_END = 17;
  TokenType$1.EXPANSION_FORM_END = 18;
  TokenType$1.EOF = 19;
  TokenType$1[TokenType$1.TAG_OPEN_START] = "TAG_OPEN_START";
  TokenType$1[TokenType$1.TAG_OPEN_END] = "TAG_OPEN_END";
  TokenType$1[TokenType$1.TAG_OPEN_END_VOID] = "TAG_OPEN_END_VOID";
  TokenType$1[TokenType$1.TAG_CLOSE] = "TAG_CLOSE";
  TokenType$1[TokenType$1.TEXT] = "TEXT";
  TokenType$1[TokenType$1.ESCAPABLE_RAW_TEXT] = "ESCAPABLE_RAW_TEXT";
  TokenType$1[TokenType$1.RAW_TEXT] = "RAW_TEXT";
  TokenType$1[TokenType$1.COMMENT_START] = "COMMENT_START";
  TokenType$1[TokenType$1.COMMENT_END] = "COMMENT_END";
  TokenType$1[TokenType$1.CDATA_START] = "CDATA_START";
  TokenType$1[TokenType$1.CDATA_END] = "CDATA_END";
  TokenType$1[TokenType$1.ATTR_NAME] = "ATTR_NAME";
  TokenType$1[TokenType$1.ATTR_VALUE] = "ATTR_VALUE";
  TokenType$1[TokenType$1.DOC_TYPE] = "DOC_TYPE";
  TokenType$1[TokenType$1.EXPANSION_FORM_START] = "EXPANSION_FORM_START";
  TokenType$1[TokenType$1.EXPANSION_CASE_VALUE] = "EXPANSION_CASE_VALUE";
  TokenType$1[TokenType$1.EXPANSION_CASE_EXP_START] = "EXPANSION_CASE_EXP_START";
  TokenType$1[TokenType$1.EXPANSION_CASE_EXP_END] = "EXPANSION_CASE_EXP_END";
  TokenType$1[TokenType$1.EXPANSION_FORM_END] = "EXPANSION_FORM_END";
  TokenType$1[TokenType$1.EOF] = "EOF";
  var Token$1 = (function() {
    function Token(type, parts, sourceSpan) {
      this.type = type;
      this.parts = parts;
      this.sourceSpan = sourceSpan;
    }
    return Token;
  }());
  var TokenError = (function(_super) {
    __extends$6(TokenError, _super);
    function TokenError(errorMsg, tokenType, span) {
      _super.call(this, span, errorMsg);
      this.tokenType = tokenType;
    }
    return TokenError;
  }(ParseError));
  var TokenizeResult = (function() {
    function TokenizeResult(tokens, errors) {
      this.tokens = tokens;
      this.errors = errors;
    }
    return TokenizeResult;
  }());
  function tokenize(source, url, getTagDefinition, tokenizeExpansionForms, interpolationConfig) {
    if (tokenizeExpansionForms === void 0) {
      tokenizeExpansionForms = false;
    }
    if (interpolationConfig === void 0) {
      interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
    }
    return new _Tokenizer(new ParseSourceFile(source, url), getTagDefinition, tokenizeExpansionForms, interpolationConfig).tokenize();
  }
  var _CR_OR_CRLF_REGEXP = /\r\n?/g;
  function _unexpectedCharacterErrorMsg(charCode) {
    var char = charCode === $EOF ? 'EOF' : String.fromCharCode(charCode);
    return "Unexpected character \"" + char + "\"";
  }
  function _unknownEntityErrorMsg(entitySrc) {
    return "Unknown entity \"" + entitySrc + "\" - use the \"&#<decimal>;\" or  \"&#x<hex>;\" syntax";
  }
  var _ControlFlowError = (function() {
    function _ControlFlowError(error) {
      this.error = error;
    }
    return _ControlFlowError;
  }());
  var _Tokenizer = (function() {
    function _Tokenizer(_file, _getTagDefinition, _tokenizeIcu, _interpolationConfig) {
      if (_interpolationConfig === void 0) {
        _interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
      }
      this._file = _file;
      this._getTagDefinition = _getTagDefinition;
      this._tokenizeIcu = _tokenizeIcu;
      this._interpolationConfig = _interpolationConfig;
      this._peek = -1;
      this._nextPeek = -1;
      this._index = -1;
      this._line = 0;
      this._column = -1;
      this._expansionCaseStack = [];
      this._inInterpolation = false;
      this.tokens = [];
      this.errors = [];
      this._input = _file.content;
      this._length = _file.content.length;
      this._advance();
    }
    _Tokenizer.prototype._processCarriageReturns = function(content) {
      return content.replace(_CR_OR_CRLF_REGEXP, '\n');
    };
    _Tokenizer.prototype.tokenize = function() {
      while (this._peek !== $EOF) {
        var start = this._getLocation();
        try {
          if (this._attemptCharCode($LT)) {
            if (this._attemptCharCode($BANG)) {
              if (this._attemptCharCode($LBRACKET)) {
                this._consumeCdata(start);
              } else if (this._attemptCharCode($MINUS)) {
                this._consumeComment(start);
              } else {
                this._consumeDocType(start);
              }
            } else if (this._attemptCharCode($SLASH)) {
              this._consumeTagClose(start);
            } else {
              this._consumeTagOpen(start);
            }
          } else if (!(this._tokenizeIcu && this._tokenizeExpansionForm())) {
            this._consumeText();
          }
        } catch (e) {
          if (e instanceof _ControlFlowError) {
            this.errors.push(e.error);
          } else {
            throw e;
          }
        }
      }
      this._beginToken(TokenType$1.EOF);
      this._endToken([]);
      return new TokenizeResult(mergeTextTokens(this.tokens), this.errors);
    };
    _Tokenizer.prototype._tokenizeExpansionForm = function() {
      if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {
        this._consumeExpansionFormStart();
        return true;
      }
      if (isExpansionCaseStart(this._peek) && this._isInExpansionForm()) {
        this._consumeExpansionCaseStart();
        return true;
      }
      if (this._peek === $RBRACE) {
        if (this._isInExpansionCase()) {
          this._consumeExpansionCaseEnd();
          return true;
        }
        if (this._isInExpansionForm()) {
          this._consumeExpansionFormEnd();
          return true;
        }
      }
      return false;
    };
    _Tokenizer.prototype._getLocation = function() {
      return new ParseLocation(this._file, this._index, this._line, this._column);
    };
    _Tokenizer.prototype._getSpan = function(start, end) {
      if (start === void 0) {
        start = this._getLocation();
      }
      if (end === void 0) {
        end = this._getLocation();
      }
      return new ParseSourceSpan(start, end);
    };
    _Tokenizer.prototype._beginToken = function(type, start) {
      if (start === void 0) {
        start = this._getLocation();
      }
      this._currentTokenStart = start;
      this._currentTokenType = type;
    };
    _Tokenizer.prototype._endToken = function(parts, end) {
      if (end === void 0) {
        end = this._getLocation();
      }
      var token = new Token$1(this._currentTokenType, parts, new ParseSourceSpan(this._currentTokenStart, end));
      this.tokens.push(token);
      this._currentTokenStart = null;
      this._currentTokenType = null;
      return token;
    };
    _Tokenizer.prototype._createError = function(msg, span) {
      if (this._isInExpansionForm()) {
        msg += " (Do you have an unescaped \"{\" in your template? Use \"{{ '{' }}\") to escape it.)";
      }
      var error = new TokenError(msg, this._currentTokenType, span);
      this._currentTokenStart = null;
      this._currentTokenType = null;
      return new _ControlFlowError(error);
    };
    _Tokenizer.prototype._advance = function() {
      if (this._index >= this._length) {
        throw this._createError(_unexpectedCharacterErrorMsg($EOF), this._getSpan());
      }
      if (this._peek === $LF) {
        this._line++;
        this._column = 0;
      } else if (this._peek !== $LF && this._peek !== $CR) {
        this._column++;
      }
      this._index++;
      this._peek = this._index >= this._length ? $EOF : this._input.charCodeAt(this._index);
      this._nextPeek = this._index + 1 >= this._length ? $EOF : this._input.charCodeAt(this._index + 1);
    };
    _Tokenizer.prototype._attemptCharCode = function(charCode) {
      if (this._peek === charCode) {
        this._advance();
        return true;
      }
      return false;
    };
    _Tokenizer.prototype._attemptCharCodeCaseInsensitive = function(charCode) {
      if (compareCharCodeCaseInsensitive(this._peek, charCode)) {
        this._advance();
        return true;
      }
      return false;
    };
    _Tokenizer.prototype._requireCharCode = function(charCode) {
      var location = this._getLocation();
      if (!this._attemptCharCode(charCode)) {
        throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location, location));
      }
    };
    _Tokenizer.prototype._attemptStr = function(chars) {
      var len = chars.length;
      if (this._index + len > this._length) {
        return false;
      }
      var initialPosition = this._savePosition();
      for (var i = 0; i < len; i++) {
        if (!this._attemptCharCode(chars.charCodeAt(i))) {
          this._restorePosition(initialPosition);
          return false;
        }
      }
      return true;
    };
    _Tokenizer.prototype._attemptStrCaseInsensitive = function(chars) {
      for (var i = 0; i < chars.length; i++) {
        if (!this._attemptCharCodeCaseInsensitive(chars.charCodeAt(i))) {
          return false;
        }
      }
      return true;
    };
    _Tokenizer.prototype._requireStr = function(chars) {
      var location = this._getLocation();
      if (!this._attemptStr(chars)) {
        throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location));
      }
    };
    _Tokenizer.prototype._attemptCharCodeUntilFn = function(predicate) {
      while (!predicate(this._peek)) {
        this._advance();
      }
    };
    _Tokenizer.prototype._requireCharCodeUntilFn = function(predicate, len) {
      var start = this._getLocation();
      this._attemptCharCodeUntilFn(predicate);
      if (this._index - start.offset < len) {
        throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(start, start));
      }
    };
    _Tokenizer.prototype._attemptUntilChar = function(char) {
      while (this._peek !== char) {
        this._advance();
      }
    };
    _Tokenizer.prototype._readChar = function(decodeEntities) {
      if (decodeEntities && this._peek === $AMPERSAND) {
        return this._decodeEntity();
      } else {
        var index = this._index;
        this._advance();
        return this._input[index];
      }
    };
    _Tokenizer.prototype._decodeEntity = function() {
      var start = this._getLocation();
      this._advance();
      if (this._attemptCharCode($HASH)) {
        var isHex = this._attemptCharCode($x) || this._attemptCharCode($X);
        var numberStart = this._getLocation().offset;
        this._attemptCharCodeUntilFn(isDigitEntityEnd);
        if (this._peek != $SEMICOLON) {
          throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());
        }
        this._advance();
        var strNum = this._input.substring(numberStart, this._index - 1);
        try {
          var charCode = parseInt(strNum, isHex ? 16 : 10);
          return String.fromCharCode(charCode);
        } catch (e) {
          var entity = this._input.substring(start.offset + 1, this._index - 1);
          throw this._createError(_unknownEntityErrorMsg(entity), this._getSpan(start));
        }
      } else {
        var startPosition = this._savePosition();
        this._attemptCharCodeUntilFn(isNamedEntityEnd);
        if (this._peek != $SEMICOLON) {
          this._restorePosition(startPosition);
          return '&';
        }
        this._advance();
        var name_1 = this._input.substring(start.offset + 1, this._index - 1);
        var char = NAMED_ENTITIES[name_1];
        if (!char) {
          throw this._createError(_unknownEntityErrorMsg(name_1), this._getSpan(start));
        }
        return char;
      }
    };
    _Tokenizer.prototype._consumeRawText = function(decodeEntities, firstCharOfEnd, attemptEndRest) {
      var tagCloseStart;
      var textStart = this._getLocation();
      this._beginToken(decodeEntities ? TokenType$1.ESCAPABLE_RAW_TEXT : TokenType$1.RAW_TEXT, textStart);
      var parts = [];
      while (true) {
        tagCloseStart = this._getLocation();
        if (this._attemptCharCode(firstCharOfEnd) && attemptEndRest()) {
          break;
        }
        if (this._index > tagCloseStart.offset) {
          parts.push(this._input.substring(tagCloseStart.offset, this._index));
        }
        while (this._peek !== firstCharOfEnd) {
          parts.push(this._readChar(decodeEntities));
        }
      }
      return this._endToken([this._processCarriageReturns(parts.join(''))], tagCloseStart);
    };
    _Tokenizer.prototype._consumeComment = function(start) {
      var _this = this;
      this._beginToken(TokenType$1.COMMENT_START, start);
      this._requireCharCode($MINUS);
      this._endToken([]);
      var textToken = this._consumeRawText(false, $MINUS, function() {
        return _this._attemptStr('->');
      });
      this._beginToken(TokenType$1.COMMENT_END, textToken.sourceSpan.end);
      this._endToken([]);
    };
    _Tokenizer.prototype._consumeCdata = function(start) {
      var _this = this;
      this._beginToken(TokenType$1.CDATA_START, start);
      this._requireStr('CDATA[');
      this._endToken([]);
      var textToken = this._consumeRawText(false, $RBRACKET, function() {
        return _this._attemptStr(']>');
      });
      this._beginToken(TokenType$1.CDATA_END, textToken.sourceSpan.end);
      this._endToken([]);
    };
    _Tokenizer.prototype._consumeDocType = function(start) {
      this._beginToken(TokenType$1.DOC_TYPE, start);
      this._attemptUntilChar($GT);
      this._advance();
      this._endToken([this._input.substring(start.offset + 2, this._index - 1)]);
    };
    _Tokenizer.prototype._consumePrefixAndName = function() {
      var nameOrPrefixStart = this._index;
      var prefix = null;
      while (this._peek !== $COLON && !isPrefixEnd(this._peek)) {
        this._advance();
      }
      var nameStart;
      if (this._peek === $COLON) {
        this._advance();
        prefix = this._input.substring(nameOrPrefixStart, this._index - 1);
        nameStart = this._index;
      } else {
        nameStart = nameOrPrefixStart;
      }
      this._requireCharCodeUntilFn(isNameEnd, this._index === nameStart ? 1 : 0);
      var name = this._input.substring(nameStart, this._index);
      return [prefix, name];
    };
    _Tokenizer.prototype._consumeTagOpen = function(start) {
      var savedPos = this._savePosition();
      var tagName;
      var lowercaseTagName;
      try {
        if (!isAsciiLetter(this._peek)) {
          throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());
        }
        var nameStart = this._index;
        this._consumeTagOpenStart(start);
        tagName = this._input.substring(nameStart, this._index);
        lowercaseTagName = tagName.toLowerCase();
        this._attemptCharCodeUntilFn(isNotWhitespace);
        while (this._peek !== $SLASH && this._peek !== $GT) {
          this._consumeAttributeName();
          this._attemptCharCodeUntilFn(isNotWhitespace);
          if (this._attemptCharCode($EQ)) {
            this._attemptCharCodeUntilFn(isNotWhitespace);
            this._consumeAttributeValue();
          }
          this._attemptCharCodeUntilFn(isNotWhitespace);
        }
        this._consumeTagOpenEnd();
      } catch (e) {
        if (e instanceof _ControlFlowError) {
          this._restorePosition(savedPos);
          this._beginToken(TokenType$1.TEXT, start);
          this._endToken(['<']);
          return;
        }
        throw e;
      }
      var contentTokenType = this._getTagDefinition(tagName).contentType;
      if (contentTokenType === TagContentType.RAW_TEXT) {
        this._consumeRawTextWithTagClose(lowercaseTagName, false);
      } else if (contentTokenType === TagContentType.ESCAPABLE_RAW_TEXT) {
        this._consumeRawTextWithTagClose(lowercaseTagName, true);
      }
    };
    _Tokenizer.prototype._consumeRawTextWithTagClose = function(lowercaseTagName, decodeEntities) {
      var _this = this;
      var textToken = this._consumeRawText(decodeEntities, $LT, function() {
        if (!_this._attemptCharCode($SLASH))
          return false;
        _this._attemptCharCodeUntilFn(isNotWhitespace);
        if (!_this._attemptStrCaseInsensitive(lowercaseTagName))
          return false;
        _this._attemptCharCodeUntilFn(isNotWhitespace);
        return _this._attemptCharCode($GT);
      });
      this._beginToken(TokenType$1.TAG_CLOSE, textToken.sourceSpan.end);
      this._endToken([null, lowercaseTagName]);
    };
    _Tokenizer.prototype._consumeTagOpenStart = function(start) {
      this._beginToken(TokenType$1.TAG_OPEN_START, start);
      var parts = this._consumePrefixAndName();
      this._endToken(parts);
    };
    _Tokenizer.prototype._consumeAttributeName = function() {
      this._beginToken(TokenType$1.ATTR_NAME);
      var prefixAndName = this._consumePrefixAndName();
      this._endToken(prefixAndName);
    };
    _Tokenizer.prototype._consumeAttributeValue = function() {
      this._beginToken(TokenType$1.ATTR_VALUE);
      var value;
      if (this._peek === $SQ || this._peek === $DQ) {
        var quoteChar = this._peek;
        this._advance();
        var parts = [];
        while (this._peek !== quoteChar) {
          parts.push(this._readChar(true));
        }
        value = parts.join('');
        this._advance();
      } else {
        var valueStart = this._index;
        this._requireCharCodeUntilFn(isNameEnd, 1);
        value = this._input.substring(valueStart, this._index);
      }
      this._endToken([this._processCarriageReturns(value)]);
    };
    _Tokenizer.prototype._consumeTagOpenEnd = function() {
      var tokenType = this._attemptCharCode($SLASH) ? TokenType$1.TAG_OPEN_END_VOID : TokenType$1.TAG_OPEN_END;
      this._beginToken(tokenType);
      this._requireCharCode($GT);
      this._endToken([]);
    };
    _Tokenizer.prototype._consumeTagClose = function(start) {
      this._beginToken(TokenType$1.TAG_CLOSE, start);
      this._attemptCharCodeUntilFn(isNotWhitespace);
      var prefixAndName = this._consumePrefixAndName();
      this._attemptCharCodeUntilFn(isNotWhitespace);
      this._requireCharCode($GT);
      this._endToken(prefixAndName);
    };
    _Tokenizer.prototype._consumeExpansionFormStart = function() {
      this._beginToken(TokenType$1.EXPANSION_FORM_START, this._getLocation());
      this._requireCharCode($LBRACE);
      this._endToken([]);
      this._expansionCaseStack.push(TokenType$1.EXPANSION_FORM_START);
      this._beginToken(TokenType$1.RAW_TEXT, this._getLocation());
      var condition = this._readUntil($COMMA);
      this._endToken([condition], this._getLocation());
      this._requireCharCode($COMMA);
      this._attemptCharCodeUntilFn(isNotWhitespace);
      this._beginToken(TokenType$1.RAW_TEXT, this._getLocation());
      var type = this._readUntil($COMMA);
      this._endToken([type], this._getLocation());
      this._requireCharCode($COMMA);
      this._attemptCharCodeUntilFn(isNotWhitespace);
    };
    _Tokenizer.prototype._consumeExpansionCaseStart = function() {
      this._beginToken(TokenType$1.EXPANSION_CASE_VALUE, this._getLocation());
      var value = this._readUntil($LBRACE).trim();
      this._endToken([value], this._getLocation());
      this._attemptCharCodeUntilFn(isNotWhitespace);
      this._beginToken(TokenType$1.EXPANSION_CASE_EXP_START, this._getLocation());
      this._requireCharCode($LBRACE);
      this._endToken([], this._getLocation());
      this._attemptCharCodeUntilFn(isNotWhitespace);
      this._expansionCaseStack.push(TokenType$1.EXPANSION_CASE_EXP_START);
    };
    _Tokenizer.prototype._consumeExpansionCaseEnd = function() {
      this._beginToken(TokenType$1.EXPANSION_CASE_EXP_END, this._getLocation());
      this._requireCharCode($RBRACE);
      this._endToken([], this._getLocation());
      this._attemptCharCodeUntilFn(isNotWhitespace);
      this._expansionCaseStack.pop();
    };
    _Tokenizer.prototype._consumeExpansionFormEnd = function() {
      this._beginToken(TokenType$1.EXPANSION_FORM_END, this._getLocation());
      this._requireCharCode($RBRACE);
      this._endToken([]);
      this._expansionCaseStack.pop();
    };
    _Tokenizer.prototype._consumeText = function() {
      var start = this._getLocation();
      this._beginToken(TokenType$1.TEXT, start);
      var parts = [];
      do {
        if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.start)) {
          parts.push(this._interpolationConfig.start);
          this._inInterpolation = true;
        } else if (this._interpolationConfig && this._inInterpolation && this._attemptStr(this._interpolationConfig.end)) {
          parts.push(this._interpolationConfig.end);
          this._inInterpolation = false;
        } else {
          parts.push(this._readChar(true));
        }
      } while (!this._isTextEnd());
      this._endToken([this._processCarriageReturns(parts.join(''))]);
    };
    _Tokenizer.prototype._isTextEnd = function() {
      if (this._peek === $LT || this._peek === $EOF) {
        return true;
      }
      if (this._tokenizeIcu && !this._inInterpolation) {
        if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {
          return true;
        }
        if (this._peek === $RBRACE && this._isInExpansionCase()) {
          return true;
        }
      }
      return false;
    };
    _Tokenizer.prototype._savePosition = function() {
      return [this._peek, this._index, this._column, this._line, this.tokens.length];
    };
    _Tokenizer.prototype._readUntil = function(char) {
      var start = this._index;
      this._attemptUntilChar(char);
      return this._input.substring(start, this._index);
    };
    _Tokenizer.prototype._restorePosition = function(position) {
      this._peek = position[0];
      this._index = position[1];
      this._column = position[2];
      this._line = position[3];
      var nbTokens = position[4];
      if (nbTokens < this.tokens.length) {
        this.tokens = this.tokens.slice(0, nbTokens);
      }
    };
    _Tokenizer.prototype._isInExpansionCase = function() {
      return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === TokenType$1.EXPANSION_CASE_EXP_START;
    };
    _Tokenizer.prototype._isInExpansionForm = function() {
      return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === TokenType$1.EXPANSION_FORM_START;
    };
    return _Tokenizer;
  }());
  function isNotWhitespace(code) {
    return !isWhitespace(code) || code === $EOF;
  }
  function isNameEnd(code) {
    return isWhitespace(code) || code === $GT || code === $SLASH || code === $SQ || code === $DQ || code === $EQ;
  }
  function isPrefixEnd(code) {
    return (code < $a || $z < code) && (code < $A || $Z < code) && (code < $0 || code > $9);
  }
  function isDigitEntityEnd(code) {
    return code == $SEMICOLON || code == $EOF || !isAsciiHexDigit(code);
  }
  function isNamedEntityEnd(code) {
    return code == $SEMICOLON || code == $EOF || !isAsciiLetter(code);
  }
  function isExpansionFormStart(input, offset, interpolationConfig) {
    var isInterpolationStart = interpolationConfig ? input.indexOf(interpolationConfig.start, offset) == offset : false;
    return input.charCodeAt(offset) == $LBRACE && !isInterpolationStart;
  }
  function isExpansionCaseStart(peek) {
    return peek === $EQ || isAsciiLetter(peek);
  }
  function compareCharCodeCaseInsensitive(code1, code2) {
    return toUpperCaseCharCode(code1) == toUpperCaseCharCode(code2);
  }
  function toUpperCaseCharCode(code) {
    return code >= $a && code <= $z ? code - $a + $A : code;
  }
  function mergeTextTokens(srcTokens) {
    var dstTokens = [];
    var lastDstToken;
    for (var i = 0; i < srcTokens.length; i++) {
      var token = srcTokens[i];
      if (lastDstToken && lastDstToken.type == TokenType$1.TEXT && token.type == TokenType$1.TEXT) {
        lastDstToken.parts[0] += token.parts[0];
        lastDstToken.sourceSpan.end = token.sourceSpan.end;
      } else {
        lastDstToken = token;
        dstTokens.push(lastDstToken);
      }
    }
    return dstTokens;
  }
  var __extends$5 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var TreeError = (function(_super) {
    __extends$5(TreeError, _super);
    function TreeError(elementName, span, msg) {
      _super.call(this, span, msg);
      this.elementName = elementName;
    }
    TreeError.create = function(elementName, span, msg) {
      return new TreeError(elementName, span, msg);
    };
    return TreeError;
  }(ParseError));
  var ParseTreeResult = (function() {
    function ParseTreeResult(rootNodes, errors) {
      this.rootNodes = rootNodes;
      this.errors = errors;
    }
    return ParseTreeResult;
  }());
  var Parser$1 = (function() {
    function Parser(getTagDefinition) {
      this.getTagDefinition = getTagDefinition;
    }
    Parser.prototype.parse = function(source, url, parseExpansionForms, interpolationConfig) {
      if (parseExpansionForms === void 0) {
        parseExpansionForms = false;
      }
      if (interpolationConfig === void 0) {
        interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
      }
      var tokensAndErrors = tokenize(source, url, this.getTagDefinition, parseExpansionForms, interpolationConfig);
      var treeAndErrors = new _TreeBuilder(tokensAndErrors.tokens, this.getTagDefinition).build();
      return new ParseTreeResult(treeAndErrors.rootNodes, ((tokensAndErrors.errors)).concat(treeAndErrors.errors));
    };
    return Parser;
  }());
  var _TreeBuilder = (function() {
    function _TreeBuilder(tokens, getTagDefinition) {
      this.tokens = tokens;
      this.getTagDefinition = getTagDefinition;
      this._index = -1;
      this._rootNodes = [];
      this._errors = [];
      this._elementStack = [];
      this._advance();
    }
    _TreeBuilder.prototype.build = function() {
      while (this._peek.type !== TokenType$1.EOF) {
        if (this._peek.type === TokenType$1.TAG_OPEN_START) {
          this._consumeStartTag(this._advance());
        } else if (this._peek.type === TokenType$1.TAG_CLOSE) {
          this._consumeEndTag(this._advance());
        } else if (this._peek.type === TokenType$1.CDATA_START) {
          this._closeVoidElement();
          this._consumeCdata(this._advance());
        } else if (this._peek.type === TokenType$1.COMMENT_START) {
          this._closeVoidElement();
          this._consumeComment(this._advance());
        } else if (this._peek.type === TokenType$1.TEXT || this._peek.type === TokenType$1.RAW_TEXT || this._peek.type === TokenType$1.ESCAPABLE_RAW_TEXT) {
          this._closeVoidElement();
          this._consumeText(this._advance());
        } else if (this._peek.type === TokenType$1.EXPANSION_FORM_START) {
          this._consumeExpansion(this._advance());
        } else {
          this._advance();
        }
      }
      return new ParseTreeResult(this._rootNodes, this._errors);
    };
    _TreeBuilder.prototype._advance = function() {
      var prev = this._peek;
      if (this._index < this.tokens.length - 1) {
        this._index++;
      }
      this._peek = this.tokens[this._index];
      return prev;
    };
    _TreeBuilder.prototype._advanceIf = function(type) {
      if (this._peek.type === type) {
        return this._advance();
      }
      return null;
    };
    _TreeBuilder.prototype._consumeCdata = function(startToken) {
      this._consumeText(this._advance());
      this._advanceIf(TokenType$1.CDATA_END);
    };
    _TreeBuilder.prototype._consumeComment = function(token) {
      var text = this._advanceIf(TokenType$1.RAW_TEXT);
      this._advanceIf(TokenType$1.COMMENT_END);
      var value = isPresent(text) ? text.parts[0].trim() : null;
      this._addToParent(new Comment(value, token.sourceSpan));
    };
    _TreeBuilder.prototype._consumeExpansion = function(token) {
      var switchValue = this._advance();
      var type = this._advance();
      var cases = [];
      while (this._peek.type === TokenType$1.EXPANSION_CASE_VALUE) {
        var expCase = this._parseExpansionCase();
        if (!expCase)
          return;
        cases.push(expCase);
      }
      if (this._peek.type !== TokenType$1.EXPANSION_FORM_END) {
        this._errors.push(TreeError.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '}'."));
        return;
      }
      var sourceSpan = new ParseSourceSpan(token.sourceSpan.start, this._peek.sourceSpan.end);
      this._addToParent(new Expansion(switchValue.parts[0], type.parts[0], cases, sourceSpan, switchValue.sourceSpan));
      this._advance();
    };
    _TreeBuilder.prototype._parseExpansionCase = function() {
      var value = this._advance();
      if (this._peek.type !== TokenType$1.EXPANSION_CASE_EXP_START) {
        this._errors.push(TreeError.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '{'."));
        return null;
      }
      var start = this._advance();
      var exp = this._collectExpansionExpTokens(start);
      if (!exp)
        return null;
      var end = this._advance();
      exp.push(new Token$1(TokenType$1.EOF, [], end.sourceSpan));
      var parsedExp = new _TreeBuilder(exp, this.getTagDefinition).build();
      if (parsedExp.errors.length > 0) {
        this._errors = this._errors.concat((parsedExp.errors));
        return null;
      }
      var sourceSpan = new ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end);
      var expSourceSpan = new ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end);
      return new ExpansionCase(value.parts[0], parsedExp.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan);
    };
    _TreeBuilder.prototype._collectExpansionExpTokens = function(start) {
      var exp = [];
      var expansionFormStack = [TokenType$1.EXPANSION_CASE_EXP_START];
      while (true) {
        if (this._peek.type === TokenType$1.EXPANSION_FORM_START || this._peek.type === TokenType$1.EXPANSION_CASE_EXP_START) {
          expansionFormStack.push(this._peek.type);
        }
        if (this._peek.type === TokenType$1.EXPANSION_CASE_EXP_END) {
          if (lastOnStack(expansionFormStack, TokenType$1.EXPANSION_CASE_EXP_START)) {
            expansionFormStack.pop();
            if (expansionFormStack.length == 0)
              return exp;
          } else {
            this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
            return null;
          }
        }
        if (this._peek.type === TokenType$1.EXPANSION_FORM_END) {
          if (lastOnStack(expansionFormStack, TokenType$1.EXPANSION_FORM_START)) {
            expansionFormStack.pop();
          } else {
            this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
            return null;
          }
        }
        if (this._peek.type === TokenType$1.EOF) {
          this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
          return null;
        }
        exp.push(this._advance());
      }
    };
    _TreeBuilder.prototype._consumeText = function(token) {
      var text = token.parts[0];
      if (text.length > 0 && text[0] == '\n') {
        var parent_1 = this._getParentElement();
        if (isPresent(parent_1) && parent_1.children.length == 0 && this.getTagDefinition(parent_1.name).ignoreFirstLf) {
          text = text.substring(1);
        }
      }
      if (text.length > 0) {
        this._addToParent(new Text(text, token.sourceSpan));
      }
    };
    _TreeBuilder.prototype._closeVoidElement = function() {
      if (this._elementStack.length > 0) {
        var el = this._elementStack[this._elementStack.length - 1];
        if (this.getTagDefinition(el.name).isVoid) {
          this._elementStack.pop();
        }
      }
    };
    _TreeBuilder.prototype._consumeStartTag = function(startTagToken) {
      var prefix = startTagToken.parts[0];
      var name = startTagToken.parts[1];
      var attrs = [];
      while (this._peek.type === TokenType$1.ATTR_NAME) {
        attrs.push(this._consumeAttr(this._advance()));
      }
      var fullName = this._getElementFullName(prefix, name, this._getParentElement());
      var selfClosing = false;
      if (this._peek.type === TokenType$1.TAG_OPEN_END_VOID) {
        this._advance();
        selfClosing = true;
        var tagDef = this.getTagDefinition(fullName);
        if (!(tagDef.canSelfClose || getNsPrefix(fullName) !== null || tagDef.isVoid)) {
          this._errors.push(TreeError.create(fullName, startTagToken.sourceSpan, "Only void and foreign elements can be self closed \"" + startTagToken.parts[1] + "\""));
        }
      } else if (this._peek.type === TokenType$1.TAG_OPEN_END) {
        this._advance();
        selfClosing = false;
      }
      var end = this._peek.sourceSpan.start;
      var span = new ParseSourceSpan(startTagToken.sourceSpan.start, end);
      var el = new Element(fullName, attrs, [], span, span, null);
      this._pushElement(el);
      if (selfClosing) {
        this._popElement(fullName);
        el.endSourceSpan = span;
      }
    };
    _TreeBuilder.prototype._pushElement = function(el) {
      if (this._elementStack.length > 0) {
        var parentEl = this._elementStack[this._elementStack.length - 1];
        if (this.getTagDefinition(parentEl.name).isClosedByChild(el.name)) {
          this._elementStack.pop();
        }
      }
      var tagDef = this.getTagDefinition(el.name);
      var _a = this._getParentElementSkippingContainers(),
          parent = _a.parent,
          container = _a.container;
      if (isPresent(parent) && tagDef.requireExtraParent(parent.name)) {
        var newParent = new Element(tagDef.parentToAdd, [], [], el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
        this._insertBeforeContainer(parent, container, newParent);
      }
      this._addToParent(el);
      this._elementStack.push(el);
    };
    _TreeBuilder.prototype._consumeEndTag = function(endTagToken) {
      var fullName = this._getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getParentElement());
      if (this._getParentElement()) {
        this._getParentElement().endSourceSpan = endTagToken.sourceSpan;
      }
      if (this.getTagDefinition(fullName).isVoid) {
        this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, "Void elements do not have end tags \"" + endTagToken.parts[1] + "\""));
      } else if (!this._popElement(fullName)) {
        this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, "Unexpected closing tag \"" + endTagToken.parts[1] + "\""));
      }
    };
    _TreeBuilder.prototype._popElement = function(fullName) {
      for (var stackIndex = this._elementStack.length - 1; stackIndex >= 0; stackIndex--) {
        var el = this._elementStack[stackIndex];
        if (el.name == fullName) {
          this._elementStack.splice(stackIndex, this._elementStack.length - stackIndex);
          return true;
        }
        if (!this.getTagDefinition(el.name).closedByParent) {
          return false;
        }
      }
      return false;
    };
    _TreeBuilder.prototype._consumeAttr = function(attrName) {
      var fullName = mergeNsAndName(attrName.parts[0], attrName.parts[1]);
      var end = attrName.sourceSpan.end;
      var value = '';
      var valueSpan;
      if (this._peek.type === TokenType$1.ATTR_VALUE) {
        var valueToken = this._advance();
        value = valueToken.parts[0];
        end = valueToken.sourceSpan.end;
        valueSpan = valueToken.sourceSpan;
      }
      return new Attribute$1(fullName, value, new ParseSourceSpan(attrName.sourceSpan.start, end), valueSpan);
    };
    _TreeBuilder.prototype._getParentElement = function() {
      return this._elementStack.length > 0 ? this._elementStack[this._elementStack.length - 1] : null;
    };
    _TreeBuilder.prototype._getParentElementSkippingContainers = function() {
      var container = null;
      for (var i = this._elementStack.length - 1; i >= 0; i--) {
        if (this._elementStack[i].name !== 'ng-container') {
          return {
            parent: this._elementStack[i],
            container: container
          };
        }
        container = this._elementStack[i];
      }
      return {
        parent: this._elementStack[this._elementStack.length - 1],
        container: container
      };
    };
    _TreeBuilder.prototype._addToParent = function(node) {
      var parent = this._getParentElement();
      if (isPresent(parent)) {
        parent.children.push(node);
      } else {
        this._rootNodes.push(node);
      }
    };
    _TreeBuilder.prototype._insertBeforeContainer = function(parent, container, node) {
      if (!container) {
        this._addToParent(node);
        this._elementStack.push(node);
      } else {
        if (parent) {
          var index = parent.children.indexOf(container);
          parent.children[index] = node;
        } else {
          this._rootNodes.push(node);
        }
        node.children.push(container);
        this._elementStack.splice(this._elementStack.indexOf(container), 0, node);
      }
    };
    _TreeBuilder.prototype._getElementFullName = function(prefix, localName, parentElement) {
      if (isBlank(prefix)) {
        prefix = this.getTagDefinition(localName).implicitNamespacePrefix;
        if (isBlank(prefix) && isPresent(parentElement)) {
          prefix = getNsPrefix(parentElement.name);
        }
      }
      return mergeNsAndName(prefix, localName);
    };
    return _TreeBuilder;
  }());
  function lastOnStack(stack, element) {
    return stack.length > 0 && stack[stack.length - 1] === element;
  }
  var Message = (function() {
    function Message(nodes, placeholders, placeholderToMessage, meaning, description) {
      this.nodes = nodes;
      this.placeholders = placeholders;
      this.placeholderToMessage = placeholderToMessage;
      this.meaning = meaning;
      this.description = description;
    }
    return Message;
  }());
  var Text$1 = (function() {
    function Text(value, sourceSpan) {
      this.value = value;
      this.sourceSpan = sourceSpan;
    }
    Text.prototype.visit = function(visitor, context) {
      return visitor.visitText(this, context);
    };
    return Text;
  }());
  var Container = (function() {
    function Container(children, sourceSpan) {
      this.children = children;
      this.sourceSpan = sourceSpan;
    }
    Container.prototype.visit = function(visitor, context) {
      return visitor.visitContainer(this, context);
    };
    return Container;
  }());
  var Icu = (function() {
    function Icu(expression, type, cases, sourceSpan) {
      this.expression = expression;
      this.type = type;
      this.cases = cases;
      this.sourceSpan = sourceSpan;
    }
    Icu.prototype.visit = function(visitor, context) {
      return visitor.visitIcu(this, context);
    };
    return Icu;
  }());
  var TagPlaceholder = (function() {
    function TagPlaceholder(tag, attrs, startName, closeName, children, isVoid, sourceSpan) {
      this.tag = tag;
      this.attrs = attrs;
      this.startName = startName;
      this.closeName = closeName;
      this.children = children;
      this.isVoid = isVoid;
      this.sourceSpan = sourceSpan;
    }
    TagPlaceholder.prototype.visit = function(visitor, context) {
      return visitor.visitTagPlaceholder(this, context);
    };
    return TagPlaceholder;
  }());
  var Placeholder = (function() {
    function Placeholder(value, name, sourceSpan) {
      this.value = value;
      this.name = name;
      this.sourceSpan = sourceSpan;
    }
    Placeholder.prototype.visit = function(visitor, context) {
      return visitor.visitPlaceholder(this, context);
    };
    return Placeholder;
  }());
  var IcuPlaceholder = (function() {
    function IcuPlaceholder(value, name, sourceSpan) {
      this.value = value;
      this.name = name;
      this.sourceSpan = sourceSpan;
    }
    IcuPlaceholder.prototype.visit = function(visitor, context) {
      return visitor.visitIcuPlaceholder(this, context);
    };
    return IcuPlaceholder;
  }());
  var TAG_TO_PLACEHOLDER_NAMES = {
    'A': 'LINK',
    'B': 'BOLD_TEXT',
    'BR': 'LINE_BREAK',
    'EM': 'EMPHASISED_TEXT',
    'H1': 'HEADING_LEVEL1',
    'H2': 'HEADING_LEVEL2',
    'H3': 'HEADING_LEVEL3',
    'H4': 'HEADING_LEVEL4',
    'H5': 'HEADING_LEVEL5',
    'H6': 'HEADING_LEVEL6',
    'HR': 'HORIZONTAL_RULE',
    'I': 'ITALIC_TEXT',
    'LI': 'LIST_ITEM',
    'LINK': 'MEDIA_LINK',
    'OL': 'ORDERED_LIST',
    'P': 'PARAGRAPH',
    'Q': 'QUOTATION',
    'S': 'STRIKETHROUGH_TEXT',
    'SMALL': 'SMALL_TEXT',
    'SUB': 'SUBSTRIPT',
    'SUP': 'SUPERSCRIPT',
    'TBODY': 'TABLE_BODY',
    'TD': 'TABLE_CELL',
    'TFOOT': 'TABLE_FOOTER',
    'TH': 'TABLE_HEADER_CELL',
    'THEAD': 'TABLE_HEADER',
    'TR': 'TABLE_ROW',
    'TT': 'MONOSPACED_TEXT',
    'U': 'UNDERLINED_TEXT',
    'UL': 'UNORDERED_LIST'
  };
  var PlaceholderRegistry = (function() {
    function PlaceholderRegistry() {
      this._placeHolderNameCounts = {};
      this._signatureToName = {};
    }
    PlaceholderRegistry.prototype.getStartTagPlaceholderName = function(tag, attrs, isVoid) {
      var signature = this._hashTag(tag, attrs, isVoid);
      if (this._signatureToName[signature]) {
        return this._signatureToName[signature];
      }
      var upperTag = tag.toUpperCase();
      var baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || "TAG_" + upperTag;
      var name = this._generateUniqueName(isVoid ? baseName : "START_" + baseName);
      this._signatureToName[signature] = name;
      return name;
    };
    PlaceholderRegistry.prototype.getCloseTagPlaceholderName = function(tag) {
      var signature = this._hashClosingTag(tag);
      if (this._signatureToName[signature]) {
        return this._signatureToName[signature];
      }
      var upperTag = tag.toUpperCase();
      var baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || "TAG_" + upperTag;
      var name = this._generateUniqueName("CLOSE_" + baseName);
      this._signatureToName[signature] = name;
      return name;
    };
    PlaceholderRegistry.prototype.getPlaceholderName = function(name, content) {
      var upperName = name.toUpperCase();
      var signature = "PH: " + upperName + "=" + content;
      if (this._signatureToName[signature]) {
        return this._signatureToName[signature];
      }
      var uniqueName = this._generateUniqueName(upperName);
      this._signatureToName[signature] = uniqueName;
      return uniqueName;
    };
    PlaceholderRegistry.prototype.getUniquePlaceholder = function(name) {
      return this._generateUniqueName(name.toUpperCase());
    };
    PlaceholderRegistry.prototype._hashTag = function(tag, attrs, isVoid) {
      var start = "<" + tag;
      var strAttrs = Object.keys(attrs).sort().map(function(name) {
        return (" " + name + "=" + attrs[name]);
      }).join('');
      var end = isVoid ? '/>' : "></" + tag + ">";
      return start + strAttrs + end;
    };
    PlaceholderRegistry.prototype._hashClosingTag = function(tag) {
      return this._hashTag("/" + tag, {}, false);
    };
    PlaceholderRegistry.prototype._generateUniqueName = function(base) {
      var next = this._placeHolderNameCounts[base];
      this._placeHolderNameCounts[base] = next ? next + 1 : 1;
      return next ? base + "_" + next : base;
    };
    return PlaceholderRegistry;
  }());
  var _expParser = new Parser(new Lexer());
  function createI18nMessageFactory(interpolationConfig) {
    var visitor = new _I18nVisitor(_expParser, interpolationConfig);
    return function(nodes, meaning, description) {
      return visitor.toI18nMessage(nodes, meaning, description);
    };
  }
  var _I18nVisitor = (function() {
    function _I18nVisitor(_expressionParser, _interpolationConfig) {
      this._expressionParser = _expressionParser;
      this._interpolationConfig = _interpolationConfig;
    }
    _I18nVisitor.prototype.toI18nMessage = function(nodes, meaning, description) {
      this._isIcu = nodes.length == 1 && nodes[0] instanceof Expansion;
      this._icuDepth = 0;
      this._placeholderRegistry = new PlaceholderRegistry();
      this._placeholderToContent = {};
      this._placeholderToMessage = {};
      var i18nodes = visitAll(this, nodes, {});
      return new Message(i18nodes, this._placeholderToContent, this._placeholderToMessage, meaning, description);
    };
    _I18nVisitor.prototype.visitElement = function(el, context) {
      var children = visitAll(this, el.children);
      var attrs = {};
      el.attrs.forEach(function(attr) {
        attrs[attr.name] = attr.value;
      });
      var isVoid = getHtmlTagDefinition(el.name).isVoid;
      var startPhName = this._placeholderRegistry.getStartTagPlaceholderName(el.name, attrs, isVoid);
      this._placeholderToContent[startPhName] = el.sourceSpan.toString();
      var closePhName = '';
      if (!isVoid) {
        closePhName = this._placeholderRegistry.getCloseTagPlaceholderName(el.name);
        this._placeholderToContent[closePhName] = "</" + el.name + ">";
      }
      return new TagPlaceholder(el.name, attrs, startPhName, closePhName, children, isVoid, el.sourceSpan);
    };
    _I18nVisitor.prototype.visitAttribute = function(attribute, context) {
      return this._visitTextWithInterpolation(attribute.value, attribute.sourceSpan);
    };
    _I18nVisitor.prototype.visitText = function(text, context) {
      return this._visitTextWithInterpolation(text.value, text.sourceSpan);
    };
    _I18nVisitor.prototype.visitComment = function(comment, context) {
      return null;
    };
    _I18nVisitor.prototype.visitExpansion = function(icu, context) {
      var _this = this;
      this._icuDepth++;
      var i18nIcuCases = {};
      var i18nIcu = new Icu(icu.switchValue, icu.type, i18nIcuCases, icu.sourceSpan);
      icu.cases.forEach(function(caze) {
        i18nIcuCases[caze.value] = new Container(caze.expression.map(function(node) {
          return node.visit(_this, {});
        }), caze.expSourceSpan);
      });
      this._icuDepth--;
      if (this._isIcu || this._icuDepth > 0) {
        var expPh = this._placeholderRegistry.getUniquePlaceholder("VAR_" + icu.type);
        i18nIcu.expressionPlaceholder = expPh;
        this._placeholderToContent[expPh] = icu.switchValue;
        return i18nIcu;
      }
      var phName = this._placeholderRegistry.getPlaceholderName('ICU', icu.sourceSpan.toString());
      var visitor = new _I18nVisitor(this._expressionParser, this._interpolationConfig);
      this._placeholderToMessage[phName] = visitor.toI18nMessage([icu], '', '');
      return new IcuPlaceholder(i18nIcu, phName, icu.sourceSpan);
    };
    _I18nVisitor.prototype.visitExpansionCase = function(icuCase, context) {
      throw new Error('Unreachable code');
    };
    _I18nVisitor.prototype._visitTextWithInterpolation = function(text, sourceSpan) {
      var splitInterpolation = this._expressionParser.splitInterpolation(text, sourceSpan.start.toString(), this._interpolationConfig);
      if (!splitInterpolation) {
        return new Text$1(text, sourceSpan);
      }
      var nodes = [];
      var container = new Container(nodes, sourceSpan);
      var _a = this._interpolationConfig,
          sDelimiter = _a.start,
          eDelimiter = _a.end;
      for (var i = 0; i < splitInterpolation.strings.length - 1; i++) {
        var expression = splitInterpolation.expressions[i];
        var baseName = _extractPlaceholderName(expression) || 'INTERPOLATION';
        var phName = this._placeholderRegistry.getPlaceholderName(baseName, expression);
        if (splitInterpolation.strings[i].length) {
          nodes.push(new Text$1(splitInterpolation.strings[i], sourceSpan));
        }
        nodes.push(new Placeholder(expression, phName, sourceSpan));
        this._placeholderToContent[phName] = sDelimiter + expression + eDelimiter;
      }
      var lastStringIdx = splitInterpolation.strings.length - 1;
      if (splitInterpolation.strings[lastStringIdx].length) {
        nodes.push(new Text$1(splitInterpolation.strings[lastStringIdx], sourceSpan));
      }
      return container;
    };
    return _I18nVisitor;
  }());
  var _CUSTOM_PH_EXP = /\/\/[\s\S]*i18n[\s\S]*\([\s\S]*ph[\s\S]*=[\s\S]*"([\s\S]*?)"[\s\S]*\)/g;
  function _extractPlaceholderName(input) {
    return input.split(_CUSTOM_PH_EXP)[1];
  }
  var __extends$7 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var I18nError = (function(_super) {
    __extends$7(I18nError, _super);
    function I18nError(span, msg) {
      _super.call(this, span, msg);
    }
    return I18nError;
  }(ParseError));
  var _I18N_ATTR = 'i18n';
  var _I18N_ATTR_PREFIX = 'i18n-';
  var _I18N_COMMENT_PREFIX_REGEXP = /^i18n:?/;
  function extractMessages(nodes, interpolationConfig, implicitTags, implicitAttrs) {
    var visitor = new _Visitor(implicitTags, implicitAttrs);
    return visitor.extract(nodes, interpolationConfig);
  }
  function mergeTranslations(nodes, translations, interpolationConfig, implicitTags, implicitAttrs) {
    var visitor = new _Visitor(implicitTags, implicitAttrs);
    return visitor.merge(nodes, translations, interpolationConfig);
  }
  var ExtractionResult = (function() {
    function ExtractionResult(messages, errors) {
      this.messages = messages;
      this.errors = errors;
    }
    return ExtractionResult;
  }());
  var _VisitorMode = {};
  _VisitorMode.Extract = 0;
  _VisitorMode.Merge = 1;
  _VisitorMode[_VisitorMode.Extract] = "Extract";
  _VisitorMode[_VisitorMode.Merge] = "Merge";
  var _Visitor = (function() {
    function _Visitor(_implicitTags, _implicitAttrs) {
      this._implicitTags = _implicitTags;
      this._implicitAttrs = _implicitAttrs;
    }
    _Visitor.prototype.extract = function(nodes, interpolationConfig) {
      var _this = this;
      this._init(_VisitorMode.Extract, interpolationConfig);
      nodes.forEach(function(node) {
        return node.visit(_this, null);
      });
      if (this._inI18nBlock) {
        this._reportError(nodes[nodes.length - 1], 'Unclosed block');
      }
      return new ExtractionResult(this._messages, this._errors);
    };
    _Visitor.prototype.merge = function(nodes, translations, interpolationConfig) {
      this._init(_VisitorMode.Merge, interpolationConfig);
      this._translations = translations;
      var wrapper = new Element('wrapper', [], nodes, null, null, null);
      var translatedNode = wrapper.visit(this, null);
      if (this._inI18nBlock) {
        this._reportError(nodes[nodes.length - 1], 'Unclosed block');
      }
      return new ParseTreeResult(translatedNode.children, this._errors);
    };
    _Visitor.prototype.visitExpansionCase = function(icuCase, context) {
      var expression = visitAll(this, icuCase.expression, context);
      if (this._mode === _VisitorMode.Merge) {
        return new ExpansionCase(icuCase.value, expression, icuCase.sourceSpan, icuCase.valueSourceSpan, icuCase.expSourceSpan);
      }
    };
    _Visitor.prototype.visitExpansion = function(icu, context) {
      this._mayBeAddBlockChildren(icu);
      var wasInIcu = this._inIcu;
      if (!this._inIcu) {
        if (this._isInTranslatableSection) {
          this._addMessage([icu]);
        }
        this._inIcu = true;
      }
      var cases = visitAll(this, icu.cases, context);
      if (this._mode === _VisitorMode.Merge) {
        icu = new Expansion(icu.switchValue, icu.type, cases, icu.sourceSpan, icu.switchValueSourceSpan);
      }
      this._inIcu = wasInIcu;
      return icu;
    };
    _Visitor.prototype.visitComment = function(comment, context) {
      var isOpening = _isOpeningComment(comment);
      if (isOpening && this._isInTranslatableSection) {
        this._reportError(comment, 'Could not start a block inside a translatable section');
        return;
      }
      var isClosing = _isClosingComment(comment);
      if (isClosing && !this._inI18nBlock) {
        this._reportError(comment, 'Trying to close an unopened block');
        return;
      }
      if (!this._inI18nNode && !this._inIcu) {
        if (!this._inI18nBlock) {
          if (isOpening) {
            this._inI18nBlock = true;
            this._blockStartDepth = this._depth;
            this._blockChildren = [];
            this._blockMeaningAndDesc = comment.value.replace(_I18N_COMMENT_PREFIX_REGEXP, '').trim();
            this._openTranslatableSection(comment);
          }
        } else {
          if (isClosing) {
            if (this._depth == this._blockStartDepth) {
              this._closeTranslatableSection(comment, this._blockChildren);
              this._inI18nBlock = false;
              var message = this._addMessage(this._blockChildren, this._blockMeaningAndDesc);
              var nodes = this._translateMessage(comment, message);
              return visitAll(this, nodes);
            } else {
              this._reportError(comment, 'I18N blocks should not cross element boundaries');
              return;
            }
          }
        }
      }
    };
    _Visitor.prototype.visitText = function(text, context) {
      if (this._isInTranslatableSection) {
        this._mayBeAddBlockChildren(text);
      }
      return text;
    };
    _Visitor.prototype.visitElement = function(el, context) {
      var _this = this;
      this._mayBeAddBlockChildren(el);
      this._depth++;
      var wasInI18nNode = this._inI18nNode;
      var wasInImplicitNode = this._inImplicitNode;
      var childNodes;
      var i18nAttr = _getI18nAttr(el);
      var isImplicit = this._implicitTags.some(function(tag) {
        return el.name === tag;
      }) && !this._inIcu && !this._isInTranslatableSection;
      var isTopLevelImplicit = !wasInImplicitNode && isImplicit;
      this._inImplicitNode = this._inImplicitNode || isImplicit;
      if (!this._isInTranslatableSection && !this._inIcu) {
        if (i18nAttr) {
          this._inI18nNode = true;
          var message = this._addMessage(el.children, i18nAttr.value);
          childNodes = this._translateMessage(el, message);
        } else if (isTopLevelImplicit) {
          this._inI18nNode = true;
          var message = this._addMessage(el.children);
          childNodes = this._translateMessage(el, message);
        }
        if (this._mode == _VisitorMode.Extract) {
          var isTranslatable = i18nAttr || isTopLevelImplicit;
          if (isTranslatable) {
            this._openTranslatableSection(el);
          }
          visitAll(this, el.children);
          if (isTranslatable) {
            this._closeTranslatableSection(el, el.children);
          }
        }
        if (this._mode === _VisitorMode.Merge && !i18nAttr && !isTopLevelImplicit) {
          childNodes = [];
          el.children.forEach(function(child) {
            var visited = child.visit(_this, context);
            if (visited && !_this._isInTranslatableSection) {
              childNodes = childNodes.concat(visited);
            }
          });
        }
      } else {
        if (i18nAttr || isTopLevelImplicit) {
          this._reportError(el, 'Could not mark an element as translatable inside a translatable section');
        }
        if (this._mode == _VisitorMode.Extract) {
          visitAll(this, el.children);
        }
        if (this._mode == _VisitorMode.Merge) {
          childNodes = [];
          el.children.forEach(function(child) {
            var visited = child.visit(_this, context);
            if (visited && !_this._isInTranslatableSection) {
              childNodes = childNodes.concat(visited);
            }
          });
        }
      }
      this._visitAttributesOf(el);
      this._depth--;
      this._inI18nNode = wasInI18nNode;
      this._inImplicitNode = wasInImplicitNode;
      if (this._mode === _VisitorMode.Merge) {
        var translatedAttrs = this._translateAttributes(el);
        return new Element(el.name, translatedAttrs, childNodes, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
      }
    };
    _Visitor.prototype.visitAttribute = function(attribute, context) {
      throw new Error('unreachable code');
    };
    _Visitor.prototype._init = function(mode, interpolationConfig) {
      this._mode = mode;
      this._inI18nBlock = false;
      this._inI18nNode = false;
      this._depth = 0;
      this._inIcu = false;
      this._msgCountAtSectionStart = void 0;
      this._errors = [];
      this._messages = [];
      this._inImplicitNode = false;
      this._createI18nMessage = createI18nMessageFactory(interpolationConfig);
    };
    _Visitor.prototype._visitAttributesOf = function(el) {
      var _this = this;
      var explicitAttrNameToValue = {};
      var implicitAttrNames = this._implicitAttrs[el.name] || [];
      el.attrs.filter(function(attr) {
        return attr.name.startsWith(_I18N_ATTR_PREFIX);
      }).forEach(function(attr) {
        return explicitAttrNameToValue[attr.name.slice(_I18N_ATTR_PREFIX.length)] = attr.value;
      });
      el.attrs.forEach(function(attr) {
        if (attr.name in explicitAttrNameToValue) {
          _this._addMessage([attr], explicitAttrNameToValue[attr.name]);
        } else if (implicitAttrNames.some(function(name) {
          return attr.name === name;
        })) {
          _this._addMessage([attr]);
        }
      });
    };
    _Visitor.prototype._addMessage = function(ast, meaningAndDesc) {
      if (ast.length == 0 || ast.length == 1 && ast[0] instanceof Attribute$1 && !((ast[0])).value) {
        return;
      }
      var _a = _splitMeaningAndDesc(meaningAndDesc),
          meaning = _a[0],
          description = _a[1];
      var message = this._createI18nMessage(ast, meaning, description);
      this._messages.push(message);
      return message;
    };
    _Visitor.prototype._translateMessage = function(el, message) {
      if (message && this._mode === _VisitorMode.Merge) {
        var nodes = this._translations.get(message);
        if (nodes) {
          return nodes;
        }
        this._reportError(el, "Translation unavailable for message id=\"" + this._translations.digest(message) + "\"");
      }
      return [];
    };
    _Visitor.prototype._translateAttributes = function(el) {
      var _this = this;
      var attributes = el.attrs;
      var i18nAttributeMeanings = {};
      attributes.forEach(function(attr) {
        if (attr.name.startsWith(_I18N_ATTR_PREFIX)) {
          i18nAttributeMeanings[attr.name.slice(_I18N_ATTR_PREFIX.length)] = _splitMeaningAndDesc(attr.value)[0];
        }
      });
      var translatedAttributes = [];
      attributes.forEach(function(attr) {
        if (attr.name === _I18N_ATTR || attr.name.startsWith(_I18N_ATTR_PREFIX)) {
          return;
        }
        if (attr.value && attr.value != '' && i18nAttributeMeanings.hasOwnProperty(attr.name)) {
          var meaning = i18nAttributeMeanings[attr.name];
          var message = _this._createI18nMessage([attr], meaning, '');
          var nodes = _this._translations.get(message);
          if (nodes) {
            if (nodes[0] instanceof Text) {
              var value = ((nodes[0])).value;
              translatedAttributes.push(new Attribute$1(attr.name, value, attr.sourceSpan));
            } else {
              _this._reportError(el, "Unexpected translation for attribute \"" + attr.name + "\" (id=\"" + _this._translations.digest(message) + "\")");
            }
          } else {
            _this._reportError(el, "Translation unavailable for attribute \"" + attr.name + "\" (id=\"" + _this._translations.digest(message) + "\")");
          }
        } else {
          translatedAttributes.push(attr);
        }
      });
      return translatedAttributes;
    };
    _Visitor.prototype._mayBeAddBlockChildren = function(node) {
      if (this._inI18nBlock && !this._inIcu && this._depth == this._blockStartDepth) {
        this._blockChildren.push(node);
      }
    };
    _Visitor.prototype._openTranslatableSection = function(node) {
      if (this._isInTranslatableSection) {
        this._reportError(node, 'Unexpected section start');
      } else {
        this._msgCountAtSectionStart = this._messages.length;
      }
    };
    Object.defineProperty(_Visitor.prototype, "_isInTranslatableSection", {
      get: function() {
        return this._msgCountAtSectionStart !== void 0;
      },
      enumerable: true,
      configurable: true
    });
    _Visitor.prototype._closeTranslatableSection = function(node, directChildren) {
      if (!this._isInTranslatableSection) {
        this._reportError(node, 'Unexpected section end');
        return;
      }
      var startIndex = this._msgCountAtSectionStart;
      var significantChildren = directChildren.reduce(function(count, node) {
        return count + (node instanceof Comment ? 0 : 1);
      }, 0);
      if (significantChildren == 1) {
        for (var i = this._messages.length - 1; i >= startIndex; i--) {
          var ast = this._messages[i].nodes;
          if (!(ast.length == 1 && ast[0] instanceof Text$1)) {
            this._messages.splice(i, 1);
            break;
          }
        }
      }
      this._msgCountAtSectionStart = void 0;
    };
    _Visitor.prototype._reportError = function(node, msg) {
      this._errors.push(new I18nError(node.sourceSpan, msg));
    };
    return _Visitor;
  }());
  function _isOpeningComment(n) {
    return n instanceof Comment && n.value && n.value.startsWith('i18n');
  }
  function _isClosingComment(n) {
    return n instanceof Comment && n.value && n.value === '/i18n';
  }
  function _getI18nAttr(p) {
    return p.attrs.find(function(attr) {
      return attr.name === _I18N_ATTR;
    }) || null;
  }
  function _splitMeaningAndDesc(i18n) {
    if (!i18n)
      return ['', ''];
    var pipeIndex = i18n.indexOf('|');
    return pipeIndex == -1 ? ['', i18n] : [i18n.slice(0, pipeIndex), i18n.slice(pipeIndex + 1)];
  }
  var XmlTagDefinition = (function() {
    function XmlTagDefinition() {
      this.closedByParent = false;
      this.contentType = TagContentType.PARSABLE_DATA;
      this.isVoid = false;
      this.ignoreFirstLf = false;
      this.canSelfClose = true;
    }
    XmlTagDefinition.prototype.requireExtraParent = function(currentParent) {
      return false;
    };
    XmlTagDefinition.prototype.isClosedByChild = function(name) {
      return false;
    };
    return XmlTagDefinition;
  }());
  var _TAG_DEFINITION = new XmlTagDefinition();
  function getXmlTagDefinition(tagName) {
    return _TAG_DEFINITION;
  }
  var __extends$8 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var XmlParser = (function(_super) {
    __extends$8(XmlParser, _super);
    function XmlParser() {
      _super.call(this, getXmlTagDefinition);
    }
    XmlParser.prototype.parse = function(source, url, parseExpansionForms) {
      if (parseExpansionForms === void 0) {
        parseExpansionForms = false;
      }
      return _super.prototype.parse.call(this, source, url, parseExpansionForms, null);
    };
    return XmlParser;
  }(Parser$1));
  var __extends$9 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  function digest(message) {
    return sha1(serializeNodes(message.nodes).join('') + ("[" + message.meaning + "]"));
  }
  function decimalDigest(message) {
    var visitor = new _SerializerIgnoreIcuExpVisitor();
    var parts = message.nodes.map(function(a) {
      return a.visit(visitor, null);
    });
    return computeMsgId(parts.join(''), message.meaning);
  }
  var _SerializerVisitor = (function() {
    function _SerializerVisitor() {}
    _SerializerVisitor.prototype.visitText = function(text, context) {
      return text.value;
    };
    _SerializerVisitor.prototype.visitContainer = function(container, context) {
      var _this = this;
      return "[" + container.children.map(function(child) {
        return child.visit(_this);
      }).join(', ') + "]";
    };
    _SerializerVisitor.prototype.visitIcu = function(icu, context) {
      var _this = this;
      var strCases = Object.keys(icu.cases).map(function(k) {
        return (k + " {" + icu.cases[k].visit(_this) + "}");
      });
      return "{" + icu.expression + ", " + icu.type + ", " + strCases.join(', ') + "}";
    };
    _SerializerVisitor.prototype.visitTagPlaceholder = function(ph, context) {
      var _this = this;
      return ph.isVoid ? "<ph tag name=\"" + ph.startName + "\"/>" : "<ph tag name=\"" + ph.startName + "\">" + ph.children.map(function(child) {
        return child.visit(_this);
      }).join(', ') + "</ph name=\"" + ph.closeName + "\">";
    };
    _SerializerVisitor.prototype.visitPlaceholder = function(ph, context) {
      return ph.value ? "<ph name=\"" + ph.name + "\">" + ph.value + "</ph>" : "<ph name=\"" + ph.name + "\"/>";
    };
    _SerializerVisitor.prototype.visitIcuPlaceholder = function(ph, context) {
      return "<ph icu name=\"" + ph.name + "\">" + ph.value.visit(this) + "</ph>";
    };
    return _SerializerVisitor;
  }());
  var serializerVisitor = new _SerializerVisitor();
  function serializeNodes(nodes) {
    return nodes.map(function(a) {
      return a.visit(serializerVisitor, null);
    });
  }
  var _SerializerIgnoreIcuExpVisitor = (function(_super) {
    __extends$9(_SerializerIgnoreIcuExpVisitor, _super);
    function _SerializerIgnoreIcuExpVisitor() {
      _super.apply(this, arguments);
    }
    _SerializerIgnoreIcuExpVisitor.prototype.visitIcu = function(icu, context) {
      var _this = this;
      var strCases = Object.keys(icu.cases).map(function(k) {
        return (k + " {" + icu.cases[k].visit(_this) + "}");
      });
      return "{" + icu.type + ", " + strCases.join(', ') + "}";
    };
    return _SerializerIgnoreIcuExpVisitor;
  }(_SerializerVisitor));
  function sha1(str) {
    var utf8 = utf8Encode(str);
    var words32 = stringToWords32(utf8, Endian.Big);
    var len = utf8.length * 8;
    var w = new Array(80);
    var _a = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0],
        a = _a[0],
        b = _a[1],
        c = _a[2],
        d = _a[3],
        e = _a[4];
    words32[len >> 5] |= 0x80 << (24 - len % 32);
    words32[((len + 64 >> 9) << 4) + 15] = len;
    for (var i = 0; i < words32.length; i += 16) {
      var _b = [a, b, c, d, e],
          h0 = _b[0],
          h1 = _b[1],
          h2 = _b[2],
          h3 = _b[3],
          h4 = _b[4];
      for (var j = 0; j < 80; j++) {
        if (j < 16) {
          w[j] = words32[i + j];
        } else {
          w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);
        }
        var _c = fk(j, b, c, d),
            f = _c[0],
            k = _c[1];
        var temp = [rol32(a, 5), f, e, k, w[j]].reduce(add32);
        _d = [d, c, rol32(b, 30), a, temp], e = _d[0], d = _d[1], c = _d[2], b = _d[3], a = _d[4];
      }
      _e = [add32(a, h0), add32(b, h1), add32(c, h2), add32(d, h3), add32(e, h4)], a = _e[0], b = _e[1], c = _e[2], d = _e[3], e = _e[4];
    }
    return byteStringToHexString(words32ToByteString([a, b, c, d, e]));
    var _d,
        _e;
  }
  function fk(index, b, c, d) {
    if (index < 20) {
      return [(b & c) | (~b & d), 0x5a827999];
    }
    if (index < 40) {
      return [b ^ c ^ d, 0x6ed9eba1];
    }
    if (index < 60) {
      return [(b & c) | (b & d) | (c & d), 0x8f1bbcdc];
    }
    return [b ^ c ^ d, 0xca62c1d6];
  }
  function fingerprint(str) {
    var utf8 = utf8Encode(str);
    var _a = [hash32(utf8, 0), hash32(utf8, 102072)],
        hi = _a[0],
        lo = _a[1];
    if (hi == 0 && (lo == 0 || lo == 1)) {
      hi = hi ^ 0x130f9bef;
      lo = lo ^ -0x6b5f56d8;
    }
    return [hi, lo];
  }
  function computeMsgId(msg, meaning) {
    var _a = fingerprint(msg),
        hi = _a[0],
        lo = _a[1];
    if (meaning) {
      var _b = fingerprint(meaning),
          him = _b[0],
          lom = _b[1];
      _c = add64(rol64([hi, lo], 1), [him, lom]), hi = _c[0], lo = _c[1];
    }
    return byteStringToDecString(words32ToByteString([hi & 0x7fffffff, lo]));
    var _c;
  }
  function hash32(str, c) {
    var _a = [0x9e3779b9, 0x9e3779b9],
        a = _a[0],
        b = _a[1];
    var i;
    var len = str.length;
    for (i = 0; i + 12 <= len; i += 12) {
      a = add32(a, wordAt(str, i, Endian.Little));
      b = add32(b, wordAt(str, i + 4, Endian.Little));
      c = add32(c, wordAt(str, i + 8, Endian.Little));
      _b = mix([a, b, c]), a = _b[0], b = _b[1], c = _b[2];
    }
    a = add32(a, wordAt(str, i, Endian.Little));
    b = add32(b, wordAt(str, i + 4, Endian.Little));
    c = add32(c, len);
    c = add32(c, wordAt(str, i + 8, Endian.Little) << 8);
    return mix([a, b, c])[2];
    var _b;
  }
  function mix(_a) {
    var a = _a[0],
        b = _a[1],
        c = _a[2];
    a = sub32(a, b);
    a = sub32(a, c);
    a ^= c >>> 13;
    b = sub32(b, c);
    b = sub32(b, a);
    b ^= a << 8;
    c = sub32(c, a);
    c = sub32(c, b);
    c ^= b >>> 13;
    a = sub32(a, b);
    a = sub32(a, c);
    a ^= c >>> 12;
    b = sub32(b, c);
    b = sub32(b, a);
    b ^= a << 16;
    c = sub32(c, a);
    c = sub32(c, b);
    c ^= b >>> 5;
    a = sub32(a, b);
    a = sub32(a, c);
    a ^= c >>> 3;
    b = sub32(b, c);
    b = sub32(b, a);
    b ^= a << 10;
    c = sub32(c, a);
    c = sub32(c, b);
    c ^= b >>> 15;
    return [a, b, c];
  }
  var Endian = {};
  Endian.Little = 0;
  Endian.Big = 1;
  Endian[Endian.Little] = "Little";
  Endian[Endian.Big] = "Big";
  function utf8Encode(str) {
    var encoded = '';
    for (var index = 0; index < str.length; index++) {
      var codePoint = decodeSurrogatePairs(str, index);
      if (codePoint <= 0x7f) {
        encoded += String.fromCharCode(codePoint);
      } else if (codePoint <= 0x7ff) {
        encoded += String.fromCharCode(0xc0 | codePoint >>> 6, 0x80 | codePoint & 0x3f);
      } else if (codePoint <= 0xffff) {
        encoded += String.fromCharCode(0xe0 | codePoint >>> 12, 0x80 | codePoint >>> 6 & 0x3f, 0x80 | codePoint & 0x3f);
      } else if (codePoint <= 0x1fffff) {
        encoded += String.fromCharCode(0xf0 | codePoint >>> 18, 0x80 | codePoint >>> 12 & 0x3f, 0x80 | codePoint >>> 6 & 0x3f, 0x80 | codePoint & 0x3f);
      }
    }
    return encoded;
  }
  function decodeSurrogatePairs(str, index) {
    if (index < 0 || index >= str.length) {
      throw new Error("index=" + index + " is out of range in \"" + str + "\"");
    }
    var high = str.charCodeAt(index);
    if (high >= 0xd800 && high <= 0xdfff && str.length > index + 1) {
      var low = byteAt(str, index + 1);
      if (low >= 0xdc00 && low <= 0xdfff) {
        return (high - 0xd800) * 0x400 + low - 0xdc00 + 0x10000;
      }
    }
    return high;
  }
  function add32(a, b) {
    return add32to64(a, b)[1];
  }
  function add32to64(a, b) {
    var low = (a & 0xffff) + (b & 0xffff);
    var high = (a >>> 16) + (b >>> 16) + (low >>> 16);
    return [high >>> 16, (high << 16) | (low & 0xffff)];
  }
  function add64(_a, _b) {
    var ah = _a[0],
        al = _a[1];
    var bh = _b[0],
        bl = _b[1];
    var _c = add32to64(al, bl),
        carry = _c[0],
        l = _c[1];
    var h = add32(add32(ah, bh), carry);
    return [h, l];
  }
  function sub32(a, b) {
    var low = (a & 0xffff) - (b & 0xffff);
    var high = (a >> 16) - (b >> 16) + (low >> 16);
    return (high << 16) | (low & 0xffff);
  }
  function rol32(a, count) {
    return (a << count) | (a >>> (32 - count));
  }
  function rol64(_a, count) {
    var hi = _a[0],
        lo = _a[1];
    var h = (hi << count) | (lo >>> (32 - count));
    var l = (lo << count) | (hi >>> (32 - count));
    return [h, l];
  }
  function stringToWords32(str, endian) {
    var words32 = Array((str.length + 3) >>> 2);
    for (var i = 0; i < words32.length; i++) {
      words32[i] = wordAt(str, i * 4, endian);
    }
    return words32;
  }
  function byteAt(str, index) {
    return index >= str.length ? 0 : str.charCodeAt(index) & 0xff;
  }
  function wordAt(str, index, endian) {
    var word = 0;
    if (endian === Endian.Big) {
      for (var i = 0; i < 4; i++) {
        word += byteAt(str, index + i) << (24 - 8 * i);
      }
    } else {
      for (var i = 0; i < 4; i++) {
        word += byteAt(str, index + i) << 8 * i;
      }
    }
    return word;
  }
  function words32ToByteString(words32) {
    return words32.reduce(function(str, word) {
      return str + word32ToByteString(word);
    }, '');
  }
  function word32ToByteString(word) {
    var str = '';
    for (var i = 0; i < 4; i++) {
      str += String.fromCharCode((word >>> 8 * (3 - i)) & 0xff);
    }
    return str;
  }
  function byteStringToHexString(str) {
    var hex = '';
    for (var i = 0; i < str.length; i++) {
      var b = byteAt(str, i);
      hex += (b >>> 4).toString(16) + (b & 0x0f).toString(16);
    }
    return hex.toLowerCase();
  }
  function byteStringToDecString(str) {
    var decimal = '';
    var toThePower = '1';
    for (var i = str.length - 1; i >= 0; i--) {
      decimal = addBigInt(decimal, numberTimesBigInt(byteAt(str, i), toThePower));
      toThePower = numberTimesBigInt(256, toThePower);
    }
    return decimal.split('').reverse().join('');
  }
  function addBigInt(x, y) {
    var sum = '';
    var len = Math.max(x.length, y.length);
    for (var i = 0,
        carry = 0; i < len || carry; i++) {
      var tmpSum = carry + +(x[i] || 0) + +(y[i] || 0);
      if (tmpSum >= 10) {
        carry = 1;
        sum += tmpSum - 10;
      } else {
        carry = 0;
        sum += tmpSum;
      }
    }
    return sum;
  }
  function numberTimesBigInt(num, b) {
    var product = '';
    var bToThePower = b;
    for (; num !== 0; num = num >>> 1) {
      if (num & 1)
        product = addBigInt(product, bToThePower);
      bToThePower = addBigInt(bToThePower, bToThePower);
    }
    return product;
  }
  var __extends$10 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var _Visitor$1 = (function() {
    function _Visitor() {}
    _Visitor.prototype.visitTag = function(tag) {
      var _this = this;
      var strAttrs = this._serializeAttributes(tag.attrs);
      if (tag.children.length == 0) {
        return "<" + tag.name + strAttrs + "/>";
      }
      var strChildren = tag.children.map(function(node) {
        return node.visit(_this);
      });
      return "<" + tag.name + strAttrs + ">" + strChildren.join('') + "</" + tag.name + ">";
    };
    _Visitor.prototype.visitText = function(text) {
      return text.value;
    };
    _Visitor.prototype.visitDeclaration = function(decl) {
      return "<?xml" + this._serializeAttributes(decl.attrs) + " ?>";
    };
    _Visitor.prototype._serializeAttributes = function(attrs) {
      var strAttrs = Object.keys(attrs).map(function(name) {
        return (name + "=\"" + attrs[name] + "\"");
      }).join(' ');
      return strAttrs.length > 0 ? ' ' + strAttrs : '';
    };
    _Visitor.prototype.visitDoctype = function(doctype) {
      return "<!DOCTYPE " + doctype.rootTag + " [\n" + doctype.dtd + "\n]>";
    };
    return _Visitor;
  }());
  var _visitor = new _Visitor$1();
  function serialize(nodes) {
    return nodes.map(function(node) {
      return node.visit(_visitor);
    }).join('');
  }
  var Declaration = (function() {
    function Declaration(unescapedAttrs) {
      var _this = this;
      this.attrs = {};
      Object.keys(unescapedAttrs).forEach(function(k) {
        _this.attrs[k] = _escapeXml(unescapedAttrs[k]);
      });
    }
    Declaration.prototype.visit = function(visitor) {
      return visitor.visitDeclaration(this);
    };
    return Declaration;
  }());
  var Doctype = (function() {
    function Doctype(rootTag, dtd) {
      this.rootTag = rootTag;
      this.dtd = dtd;
    }
    ;
    Doctype.prototype.visit = function(visitor) {
      return visitor.visitDoctype(this);
    };
    return Doctype;
  }());
  var Tag = (function() {
    function Tag(name, unescapedAttrs, children) {
      var _this = this;
      if (unescapedAttrs === void 0) {
        unescapedAttrs = {};
      }
      if (children === void 0) {
        children = [];
      }
      this.name = name;
      this.children = children;
      this.attrs = {};
      Object.keys(unescapedAttrs).forEach(function(k) {
        _this.attrs[k] = _escapeXml(unescapedAttrs[k]);
      });
    }
    Tag.prototype.visit = function(visitor) {
      return visitor.visitTag(this);
    };
    return Tag;
  }());
  var Text$2 = (function() {
    function Text(unescapedValue) {
      this.value = _escapeXml(unescapedValue);
    }
    ;
    Text.prototype.visit = function(visitor) {
      return visitor.visitText(this);
    };
    return Text;
  }());
  var CR = (function(_super) {
    __extends$10(CR, _super);
    function CR(ws) {
      if (ws === void 0) {
        ws = 0;
      }
      _super.call(this, "\n" + new Array(ws + 1).join(' '));
    }
    return CR;
  }(Text$2));
  var _ESCAPED_CHARS = [[/&/g, '&amp;'], [/"/g, '&quot;'], [/'/g, '&apos;'], [/</g, '&lt;'], [/>/g, '&gt;']];
  function _escapeXml(text) {
    return _ESCAPED_CHARS.reduce(function(text, entry) {
      return text.replace(entry[0], entry[1]);
    }, text);
  }
  var _VERSION = '1.2';
  var _XMLNS = 'urn:oasis:names:tc:xliff:document:1.2';
  var _SOURCE_LANG = 'en';
  var _PLACEHOLDER_TAG = 'x';
  var _SOURCE_TAG = 'source';
  var _TARGET_TAG = 'target';
  var _UNIT_TAG = 'trans-unit';
  var Xliff = (function() {
    function Xliff() {}
    Xliff.prototype.write = function(messages) {
      var _this = this;
      var visitor = new _WriteVisitor();
      var visited = {};
      var transUnits = [];
      messages.forEach(function(message) {
        var id = _this.digest(message);
        if (visited[id])
          return;
        visited[id] = true;
        var transUnit = new Tag(_UNIT_TAG, {
          id: id,
          datatype: 'html'
        });
        transUnit.children.push(new CR(8), new Tag(_SOURCE_TAG, {}, visitor.serialize(message.nodes)), new CR(8), new Tag(_TARGET_TAG));
        if (message.description) {
          transUnit.children.push(new CR(8), new Tag('note', {
            priority: '1',
            from: 'description'
          }, [new Text$2(message.description)]));
        }
        if (message.meaning) {
          transUnit.children.push(new CR(8), new Tag('note', {
            priority: '1',
            from: 'meaning'
          }, [new Text$2(message.meaning)]));
        }
        transUnit.children.push(new CR(6));
        transUnits.push(new CR(6), transUnit);
      });
      var body = new Tag('body', {}, transUnits.concat([new CR(4)]));
      var file = new Tag('file', {
        'source-language': _SOURCE_LANG,
        datatype: 'plaintext',
        original: 'ng2.template'
      }, [new CR(4), body, new CR(2)]);
      var xliff = new Tag('xliff', {
        version: _VERSION,
        xmlns: _XMLNS
      }, [new CR(2), file, new CR()]);
      return serialize([new Declaration({
        version: '1.0',
        encoding: 'UTF-8'
      }), new CR(), xliff, new CR()]);
    };
    Xliff.prototype.load = function(content, url) {
      var xliffParser = new XliffParser();
      var _a = xliffParser.parse(content, url),
          mlNodesByMsgId = _a.mlNodesByMsgId,
          errors = _a.errors;
      var i18nNodesByMsgId = {};
      var converter = new XmlToI18n();
      Object.keys(mlNodesByMsgId).forEach(function(msgId) {
        var _a = converter.convert(mlNodesByMsgId[msgId]),
            i18nNodes = _a.i18nNodes,
            e = _a.errors;
        errors.push.apply(errors, e);
        i18nNodesByMsgId[msgId] = i18nNodes;
      });
      if (errors.length) {
        throw new Error("xliff parse errors:\n" + errors.join('\n'));
      }
      return i18nNodesByMsgId;
    };
    Xliff.prototype.digest = function(message) {
      return digest(message);
    };
    return Xliff;
  }());
  var _WriteVisitor = (function() {
    function _WriteVisitor() {}
    _WriteVisitor.prototype.visitText = function(text, context) {
      return [new Text$2(text.value)];
    };
    _WriteVisitor.prototype.visitContainer = function(container, context) {
      var _this = this;
      var nodes = [];
      container.children.forEach(function(node) {
        return nodes.push.apply(nodes, node.visit(_this));
      });
      return nodes;
    };
    _WriteVisitor.prototype.visitIcu = function(icu, context) {
      if (this._isInIcu) {
        throw new Error('xliff does not support nested ICU messages');
      }
      this._isInIcu = true;
      var nodes = [];
      this._isInIcu = false;
      return nodes;
    };
    _WriteVisitor.prototype.visitTagPlaceholder = function(ph, context) {
      var ctype = getCtypeForTag(ph.tag);
      var startTagPh = new Tag(_PLACEHOLDER_TAG, {
        id: ph.startName,
        ctype: ctype
      });
      if (ph.isVoid) {
        return [startTagPh];
      }
      var closeTagPh = new Tag(_PLACEHOLDER_TAG, {
        id: ph.closeName,
        ctype: ctype
      });
      return [startTagPh].concat(this.serialize(ph.children), [closeTagPh]);
    };
    _WriteVisitor.prototype.visitPlaceholder = function(ph, context) {
      return [new Tag(_PLACEHOLDER_TAG, {id: ph.name})];
    };
    _WriteVisitor.prototype.visitIcuPlaceholder = function(ph, context) {
      return [new Tag(_PLACEHOLDER_TAG, {id: ph.name})];
    };
    _WriteVisitor.prototype.serialize = function(nodes) {
      var _this = this;
      this._isInIcu = false;
      return (_a = []).concat.apply(_a, nodes.map(function(node) {
        return node.visit(_this);
      }));
      var _a;
    };
    return _WriteVisitor;
  }());
  var XliffParser = (function() {
    function XliffParser() {}
    XliffParser.prototype.parse = function(xliff, url) {
      this._unitMlNodes = [];
      this._mlNodesByMsgId = {};
      var xml = new XmlParser().parse(xliff, url, false);
      this._errors = xml.errors;
      visitAll(this, xml.rootNodes, null);
      return {
        mlNodesByMsgId: this._mlNodesByMsgId,
        errors: this._errors
      };
    };
    XliffParser.prototype.visitElement = function(element, context) {
      switch (element.name) {
        case _UNIT_TAG:
          this._unitMlNodes = null;
          var idAttr = element.attrs.find(function(attr) {
            return attr.name === 'id';
          });
          if (!idAttr) {
            this._addError(element, "<" + _UNIT_TAG + "> misses the \"id\" attribute");
          } else {
            var id = idAttr.value;
            if (this._mlNodesByMsgId.hasOwnProperty(id)) {
              this._addError(element, "Duplicated translations for msg " + id);
            } else {
              visitAll(this, element.children, null);
              if (this._unitMlNodes) {
                this._mlNodesByMsgId[id] = this._unitMlNodes;
              } else {
                this._addError(element, "Message " + id + " misses a translation");
              }
            }
          }
          break;
        case _SOURCE_TAG:
          break;
        case _TARGET_TAG:
          this._unitMlNodes = element.children;
          break;
        default:
          visitAll(this, element.children, null);
      }
    };
    XliffParser.prototype.visitAttribute = function(attribute, context) {};
    XliffParser.prototype.visitText = function(text, context) {};
    XliffParser.prototype.visitComment = function(comment, context) {};
    XliffParser.prototype.visitExpansion = function(expansion, context) {};
    XliffParser.prototype.visitExpansionCase = function(expansionCase, context) {};
    XliffParser.prototype._addError = function(node, message) {
      this._errors.push(new I18nError(node.sourceSpan, message));
    };
    return XliffParser;
  }());
  var XmlToI18n = (function() {
    function XmlToI18n() {}
    XmlToI18n.prototype.convert = function(nodes) {
      this._errors = [];
      return {
        i18nNodes: visitAll(this, nodes),
        errors: this._errors
      };
    };
    XmlToI18n.prototype.visitText = function(text, context) {
      return new Text$1(text.value, text.sourceSpan);
    };
    XmlToI18n.prototype.visitElement = function(el, context) {
      if (el.name === _PLACEHOLDER_TAG) {
        var nameAttr = el.attrs.find(function(attr) {
          return attr.name === 'id';
        });
        if (nameAttr) {
          return new Placeholder('', nameAttr.value, el.sourceSpan);
        }
        this._addError(el, "<" + _PLACEHOLDER_TAG + "> misses the \"id\" attribute");
      } else {
        this._addError(el, "Unexpected tag");
      }
    };
    XmlToI18n.prototype.visitExpansion = function(icu, context) {};
    XmlToI18n.prototype.visitExpansionCase = function(icuCase, context) {};
    XmlToI18n.prototype.visitComment = function(comment, context) {};
    XmlToI18n.prototype.visitAttribute = function(attribute, context) {};
    XmlToI18n.prototype._addError = function(node, message) {
      this._errors.push(new I18nError(node.sourceSpan, message));
    };
    return XmlToI18n;
  }());
  function getCtypeForTag(tag) {
    switch (tag.toLowerCase()) {
      case 'br':
        return 'lb';
      case 'img':
        return 'image';
      default:
        return "x-" + tag;
    }
  }
  var _MESSAGES_TAG = 'messagebundle';
  var _MESSAGE_TAG = 'msg';
  var _PLACEHOLDER_TAG$1 = 'ph';
  var _EXEMPLE_TAG = 'ex';
  var _DOCTYPE = "<!ELEMENT messagebundle (msg)*>\n<!ATTLIST messagebundle class CDATA #IMPLIED>\n\n<!ELEMENT msg (#PCDATA|ph|source)*>\n<!ATTLIST msg id CDATA #IMPLIED>\n<!ATTLIST msg seq CDATA #IMPLIED>\n<!ATTLIST msg name CDATA #IMPLIED>\n<!ATTLIST msg desc CDATA #IMPLIED>\n<!ATTLIST msg meaning CDATA #IMPLIED>\n<!ATTLIST msg obsolete (obsolete) #IMPLIED>\n<!ATTLIST msg xml:space (default|preserve) \"default\">\n<!ATTLIST msg is_hidden CDATA #IMPLIED>\n\n<!ELEMENT source (#PCDATA)>\n\n<!ELEMENT ph (#PCDATA|ex)*>\n<!ATTLIST ph name CDATA #REQUIRED>\n\n<!ELEMENT ex (#PCDATA)>";
  var Xmb = (function() {
    function Xmb() {}
    Xmb.prototype.write = function(messages) {
      var _this = this;
      var exampleVisitor = new ExampleVisitor();
      var visitor = new _Visitor$2();
      var visited = {};
      var rootNode = new Tag(_MESSAGES_TAG);
      messages.forEach(function(message) {
        var id = _this.digest(message);
        if (visited[id])
          return;
        visited[id] = true;
        var attrs = {id: id};
        if (message.description) {
          attrs['desc'] = message.description;
        }
        if (message.meaning) {
          attrs['meaning'] = message.meaning;
        }
        rootNode.children.push(new CR(2), new Tag(_MESSAGE_TAG, attrs, visitor.serialize(message.nodes)));
      });
      rootNode.children.push(new CR());
      return serialize([new Declaration({
        version: '1.0',
        encoding: 'UTF-8'
      }), new CR(), new Doctype(_MESSAGES_TAG, _DOCTYPE), new CR(), exampleVisitor.addDefaultExamples(rootNode), new CR()]);
    };
    Xmb.prototype.load = function(content, url) {
      throw new Error('Unsupported');
    };
    Xmb.prototype.digest = function(message) {
      return digest$1(message);
    };
    return Xmb;
  }());
  var _Visitor$2 = (function() {
    function _Visitor() {}
    _Visitor.prototype.visitText = function(text, context) {
      return [new Text$2(text.value)];
    };
    _Visitor.prototype.visitContainer = function(container, context) {
      var _this = this;
      var nodes = [];
      container.children.forEach(function(node) {
        return nodes.push.apply(nodes, node.visit(_this));
      });
      return nodes;
    };
    _Visitor.prototype.visitIcu = function(icu, context) {
      var _this = this;
      var nodes = [new Text$2("{" + icu.expressionPlaceholder + ", " + icu.type + ", ")];
      Object.keys(icu.cases).forEach(function(c) {
        nodes.push.apply(nodes, [new Text$2(c + " {")].concat(icu.cases[c].visit(_this), [new Text$2("} ")]));
      });
      nodes.push(new Text$2("}"));
      return nodes;
    };
    _Visitor.prototype.visitTagPlaceholder = function(ph, context) {
      var startEx = new Tag(_EXEMPLE_TAG, {}, [new Text$2("<" + ph.tag + ">")]);
      var startTagPh = new Tag(_PLACEHOLDER_TAG$1, {name: ph.startName}, [startEx]);
      if (ph.isVoid) {
        return [startTagPh];
      }
      var closeEx = new Tag(_EXEMPLE_TAG, {}, [new Text$2("</" + ph.tag + ">")]);
      var closeTagPh = new Tag(_PLACEHOLDER_TAG$1, {name: ph.closeName}, [closeEx]);
      return [startTagPh].concat(this.serialize(ph.children), [closeTagPh]);
    };
    _Visitor.prototype.visitPlaceholder = function(ph, context) {
      return [new Tag(_PLACEHOLDER_TAG$1, {name: ph.name})];
    };
    _Visitor.prototype.visitIcuPlaceholder = function(ph, context) {
      return [new Tag(_PLACEHOLDER_TAG$1, {name: ph.name})];
    };
    _Visitor.prototype.serialize = function(nodes) {
      var _this = this;
      return (_a = []).concat.apply(_a, nodes.map(function(node) {
        return node.visit(_this);
      }));
      var _a;
    };
    return _Visitor;
  }());
  function digest$1(message) {
    return decimalDigest(message);
  }
  var ExampleVisitor = (function() {
    function ExampleVisitor() {}
    ExampleVisitor.prototype.addDefaultExamples = function(node) {
      node.visit(this);
      return node;
    };
    ExampleVisitor.prototype.visitTag = function(tag) {
      var _this = this;
      if (tag.name === _PLACEHOLDER_TAG$1) {
        if (!tag.children || tag.children.length == 0) {
          var exText = new Text$2(tag.attrs['name'] || '...');
          tag.children = [new Tag(_EXEMPLE_TAG, {}, [exText])];
        }
      } else if (tag.children) {
        tag.children.forEach(function(node) {
          return node.visit(_this);
        });
      }
    };
    ExampleVisitor.prototype.visitText = function(text) {};
    ExampleVisitor.prototype.visitDeclaration = function(decl) {};
    ExampleVisitor.prototype.visitDoctype = function(doctype) {};
    return ExampleVisitor;
  }());
  var _TRANSLATIONS_TAG = 'translationbundle';
  var _TRANSLATION_TAG = 'translation';
  var _PLACEHOLDER_TAG$2 = 'ph';
  var Xtb = (function() {
    function Xtb() {}
    Xtb.prototype.write = function(messages) {
      throw new Error('Unsupported');
    };
    Xtb.prototype.load = function(content, url) {
      var xtbParser = new XtbParser();
      var _a = xtbParser.parse(content, url),
          mlNodesByMsgId = _a.mlNodesByMsgId,
          errors = _a.errors;
      var i18nNodesByMsgId = {};
      var converter = new XmlToI18n$1();
      Object.keys(mlNodesByMsgId).forEach(function(msgId) {
        var _a = converter.convert(mlNodesByMsgId[msgId]),
            i18nNodes = _a.i18nNodes,
            e = _a.errors;
        errors.push.apply(errors, e);
        i18nNodesByMsgId[msgId] = i18nNodes;
      });
      if (errors.length) {
        throw new Error("xtb parse errors:\n" + errors.join('\n'));
      }
      return i18nNodesByMsgId;
    };
    Xtb.prototype.digest = function(message) {
      return digest$1(message);
    };
    return Xtb;
  }());
  var XtbParser = (function() {
    function XtbParser() {}
    XtbParser.prototype.parse = function(xtb, url) {
      this._bundleDepth = 0;
      this._mlNodesByMsgId = {};
      var xml = new XmlParser().parse(xtb, url, true);
      this._errors = xml.errors;
      visitAll(this, xml.rootNodes);
      return {
        mlNodesByMsgId: this._mlNodesByMsgId,
        errors: this._errors
      };
    };
    XtbParser.prototype.visitElement = function(element, context) {
      switch (element.name) {
        case _TRANSLATIONS_TAG:
          this._bundleDepth++;
          if (this._bundleDepth > 1) {
            this._addError(element, "<" + _TRANSLATIONS_TAG + "> elements can not be nested");
          }
          visitAll(this, element.children, null);
          this._bundleDepth--;
          break;
        case _TRANSLATION_TAG:
          var idAttr = element.attrs.find(function(attr) {
            return attr.name === 'id';
          });
          if (!idAttr) {
            this._addError(element, "<" + _TRANSLATION_TAG + "> misses the \"id\" attribute");
          } else {
            var id = idAttr.value;
            if (this._mlNodesByMsgId.hasOwnProperty(id)) {
              this._addError(element, "Duplicated translations for msg " + id);
            } else {
              this._mlNodesByMsgId[id] = element.children;
            }
          }
          break;
        default:
          this._addError(element, 'Unexpected tag');
      }
    };
    XtbParser.prototype.visitAttribute = function(attribute, context) {};
    XtbParser.prototype.visitText = function(text, context) {};
    XtbParser.prototype.visitComment = function(comment, context) {};
    XtbParser.prototype.visitExpansion = function(expansion, context) {};
    XtbParser.prototype.visitExpansionCase = function(expansionCase, context) {};
    XtbParser.prototype._addError = function(node, message) {
      this._errors.push(new I18nError(node.sourceSpan, message));
    };
    return XtbParser;
  }());
  var XmlToI18n$1 = (function() {
    function XmlToI18n() {}
    XmlToI18n.prototype.convert = function(nodes) {
      this._errors = [];
      return {
        i18nNodes: visitAll(this, nodes),
        errors: this._errors
      };
    };
    XmlToI18n.prototype.visitText = function(text, context) {
      return new Text$1(text.value, text.sourceSpan);
    };
    XmlToI18n.prototype.visitExpansion = function(icu, context) {
      var caseMap = {};
      visitAll(this, icu.cases).forEach(function(c) {
        caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);
      });
      return new Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);
    };
    XmlToI18n.prototype.visitExpansionCase = function(icuCase, context) {
      return {
        value: icuCase.value,
        nodes: visitAll(this, icuCase.expression)
      };
    };
    XmlToI18n.prototype.visitElement = function(el, context) {
      if (el.name === _PLACEHOLDER_TAG$2) {
        var nameAttr = el.attrs.find(function(attr) {
          return attr.name === 'name';
        });
        if (nameAttr) {
          return new Placeholder('', nameAttr.value, el.sourceSpan);
        }
        this._addError(el, "<" + _PLACEHOLDER_TAG$2 + "> misses the \"name\" attribute");
      } else {
        this._addError(el, "Unexpected tag");
      }
    };
    XmlToI18n.prototype.visitComment = function(comment, context) {};
    XmlToI18n.prototype.visitAttribute = function(attribute, context) {};
    XmlToI18n.prototype._addError = function(node, message) {
      this._errors.push(new I18nError(node.sourceSpan, message));
    };
    return XmlToI18n;
  }());
  var __extends$11 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var __decorate$3 = (this && this.__decorate) || function(decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __metadata$3 = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var HtmlParser = (function(_super) {
    __extends$11(HtmlParser, _super);
    function HtmlParser() {
      _super.call(this, getHtmlTagDefinition);
    }
    HtmlParser.prototype.parse = function(source, url, parseExpansionForms, interpolationConfig) {
      if (parseExpansionForms === void 0) {
        parseExpansionForms = false;
      }
      if (interpolationConfig === void 0) {
        interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
      }
      return _super.prototype.parse.call(this, source, url, parseExpansionForms, interpolationConfig);
    };
    HtmlParser = __decorate$3([CompilerInjectable(), __metadata$3('design:paramtypes', [])], HtmlParser);
    return HtmlParser;
  }(Parser$1));
  var TranslationBundle = (function() {
    function TranslationBundle(_i18nNodesByMsgId, digest) {
      if (_i18nNodesByMsgId === void 0) {
        _i18nNodesByMsgId = {};
      }
      this._i18nNodesByMsgId = _i18nNodesByMsgId;
      this.digest = digest;
      this._i18nToHtml = new I18nToHtmlVisitor(_i18nNodesByMsgId, digest);
    }
    TranslationBundle.load = function(content, url, serializer) {
      var i18nNodesByMsgId = serializer.load(content, url);
      var digestFn = function(m) {
        return serializer.digest(m);
      };
      return new TranslationBundle(i18nNodesByMsgId, digestFn);
    };
    TranslationBundle.prototype.get = function(srcMsg) {
      var html = this._i18nToHtml.convert(srcMsg);
      if (html.errors.length) {
        throw new Error(html.errors.join('\n'));
      }
      return html.nodes;
    };
    TranslationBundle.prototype.has = function(srcMsg) {
      return this.digest(srcMsg) in this._i18nNodesByMsgId;
    };
    return TranslationBundle;
  }());
  var I18nToHtmlVisitor = (function() {
    function I18nToHtmlVisitor(_i18nNodesByMsgId, _digest) {
      if (_i18nNodesByMsgId === void 0) {
        _i18nNodesByMsgId = {};
      }
      this._i18nNodesByMsgId = _i18nNodesByMsgId;
      this._digest = _digest;
      this._srcMsgStack = [];
      this._errors = [];
    }
    I18nToHtmlVisitor.prototype.convert = function(srcMsg) {
      this._srcMsgStack.length = 0;
      this._errors.length = 0;
      var text = this._convertToText(srcMsg);
      var url = srcMsg.nodes[0].sourceSpan.start.file.url;
      var html = new HtmlParser().parse(text, url, true);
      return {
        nodes: html.rootNodes,
        errors: this._errors.concat(html.errors)
      };
    };
    I18nToHtmlVisitor.prototype.visitText = function(text, context) {
      return text.value;
    };
    I18nToHtmlVisitor.prototype.visitContainer = function(container, context) {
      var _this = this;
      return container.children.map(function(n) {
        return n.visit(_this);
      }).join('');
    };
    I18nToHtmlVisitor.prototype.visitIcu = function(icu, context) {
      var _this = this;
      var cases = Object.keys(icu.cases).map(function(k) {
        return (k + " {" + icu.cases[k].visit(_this) + "}");
      });
      var exp = this._srcMsg.placeholders.hasOwnProperty(icu.expression) ? this._srcMsg.placeholders[icu.expression] : icu.expression;
      return "{" + exp + ", " + icu.type + ", " + cases.join(' ') + "}";
    };
    I18nToHtmlVisitor.prototype.visitPlaceholder = function(ph, context) {
      var phName = ph.name;
      if (this._srcMsg.placeholders.hasOwnProperty(phName)) {
        return this._srcMsg.placeholders[phName];
      }
      if (this._srcMsg.placeholderToMessage.hasOwnProperty(phName)) {
        return this._convertToText(this._srcMsg.placeholderToMessage[phName]);
      }
      this._addError(ph, "Unknown placeholder");
      return '';
    };
    I18nToHtmlVisitor.prototype.visitTagPlaceholder = function(ph, context) {
      throw 'unreachable code';
    };
    I18nToHtmlVisitor.prototype.visitIcuPlaceholder = function(ph, context) {
      throw 'unreachable code';
    };
    I18nToHtmlVisitor.prototype._convertToText = function(srcMsg) {
      var _this = this;
      var digest = this._digest(srcMsg);
      if (this._i18nNodesByMsgId.hasOwnProperty(digest)) {
        this._srcMsgStack.push(this._srcMsg);
        this._srcMsg = srcMsg;
        var nodes = this._i18nNodesByMsgId[digest];
        var text = nodes.map(function(node) {
          return node.visit(_this);
        }).join('');
        this._srcMsg = this._srcMsgStack.pop();
        return text;
      }
      this._addError(srcMsg.nodes[0], "Missing translation for message " + digest);
      return '';
    };
    I18nToHtmlVisitor.prototype._addError = function(el, msg) {
      this._errors.push(new I18nError(el.sourceSpan, msg));
    };
    return I18nToHtmlVisitor;
  }());
  var I18NHtmlParser = (function() {
    function I18NHtmlParser(_htmlParser, _translations, _translationsFormat) {
      this._htmlParser = _htmlParser;
      this._translations = _translations;
      this._translationsFormat = _translationsFormat;
    }
    I18NHtmlParser.prototype.parse = function(source, url, parseExpansionForms, interpolationConfig) {
      if (parseExpansionForms === void 0) {
        parseExpansionForms = false;
      }
      if (interpolationConfig === void 0) {
        interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
      }
      var parseResult = this._htmlParser.parse(source, url, parseExpansionForms, interpolationConfig);
      if (!this._translations || this._translations === '') {
        return parseResult;
      }
      if (parseResult.errors.length) {
        return new ParseTreeResult(parseResult.rootNodes, parseResult.errors);
      }
      var serializer = this._createSerializer();
      var translationBundle = TranslationBundle.load(this._translations, url, serializer);
      return mergeTranslations(parseResult.rootNodes, translationBundle, interpolationConfig, [], {});
    };
    I18NHtmlParser.prototype._createSerializer = function() {
      var format = (this._translationsFormat || 'xlf').toLowerCase();
      switch (format) {
        case 'xmb':
          return new Xmb();
        case 'xtb':
          return new Xtb();
        case 'xliff':
        case 'xlf':
        default:
          return new Xliff();
      }
    };
    return I18NHtmlParser;
  }());
  var APP_VIEW_MODULE_URL = assetUrl('core', 'linker/view');
  var VIEW_UTILS_MODULE_URL = assetUrl('core', 'linker/view_utils');
  var CD_MODULE_URL = assetUrl('core', 'change_detection/change_detection');
  var ANIMATION_STYLE_UTIL_ASSET_URL = assetUrl('core', 'animation/animation_style_util');
  var Identifiers = (function() {
    function Identifiers() {}
    Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS = {
      name: 'ANALYZE_FOR_ENTRY_COMPONENTS',
      moduleUrl: assetUrl('core', 'metadata/di'),
      runtime: _angular_core.ANALYZE_FOR_ENTRY_COMPONENTS
    };
    Identifiers.ViewUtils = {
      name: 'ViewUtils',
      moduleUrl: assetUrl('core', 'linker/view_utils'),
      runtime: view_utils.ViewUtils
    };
    Identifiers.AppView = {
      name: 'AppView',
      moduleUrl: APP_VIEW_MODULE_URL,
      runtime: AppView
    };
    Identifiers.DebugAppView = {
      name: 'DebugAppView',
      moduleUrl: APP_VIEW_MODULE_URL,
      runtime: DebugAppView
    };
    Identifiers.ViewContainer = {
      name: 'ViewContainer',
      moduleUrl: assetUrl('core', 'linker/view_container'),
      runtime: ViewContainer
    };
    Identifiers.ElementRef = {
      name: 'ElementRef',
      moduleUrl: assetUrl('core', 'linker/element_ref'),
      runtime: _angular_core.ElementRef
    };
    Identifiers.ViewContainerRef = {
      name: 'ViewContainerRef',
      moduleUrl: assetUrl('core', 'linker/view_container_ref'),
      runtime: _angular_core.ViewContainerRef
    };
    Identifiers.ChangeDetectorRef = {
      name: 'ChangeDetectorRef',
      moduleUrl: assetUrl('core', 'change_detection/change_detector_ref'),
      runtime: _angular_core.ChangeDetectorRef
    };
    Identifiers.RenderComponentType = {
      name: 'RenderComponentType',
      moduleUrl: assetUrl('core', 'render/api'),
      runtime: _angular_core.RenderComponentType
    };
    Identifiers.QueryList = {
      name: 'QueryList',
      moduleUrl: assetUrl('core', 'linker/query_list'),
      runtime: _angular_core.QueryList
    };
    Identifiers.TemplateRef = {
      name: 'TemplateRef',
      moduleUrl: assetUrl('core', 'linker/template_ref'),
      runtime: _angular_core.TemplateRef
    };
    Identifiers.TemplateRef_ = {
      name: 'TemplateRef_',
      moduleUrl: assetUrl('core', 'linker/template_ref'),
      runtime: TemplateRef_
    };
    Identifiers.CodegenComponentFactoryResolver = {
      name: 'CodegenComponentFactoryResolver',
      moduleUrl: assetUrl('core', 'linker/component_factory_resolver'),
      runtime: CodegenComponentFactoryResolver
    };
    Identifiers.ComponentFactoryResolver = {
      name: 'ComponentFactoryResolver',
      moduleUrl: assetUrl('core', 'linker/component_factory_resolver'),
      runtime: _angular_core.ComponentFactoryResolver
    };
    Identifiers.ComponentFactory = {
      name: 'ComponentFactory',
      runtime: _angular_core.ComponentFactory,
      moduleUrl: assetUrl('core', 'linker/component_factory')
    };
    Identifiers.ComponentRef_ = {
      name: 'ComponentRef_',
      runtime: ComponentRef_,
      moduleUrl: assetUrl('core', 'linker/component_factory')
    };
    Identifiers.ComponentRef = {
      name: 'ComponentRef',
      runtime: _angular_core.ComponentRef,
      moduleUrl: assetUrl('core', 'linker/component_factory')
    };
    Identifiers.NgModuleFactory = {
      name: 'NgModuleFactory',
      runtime: _angular_core.NgModuleFactory,
      moduleUrl: assetUrl('core', 'linker/ng_module_factory')
    };
    Identifiers.NgModuleInjector = {
      name: 'NgModuleInjector',
      runtime: NgModuleInjector,
      moduleUrl: assetUrl('core', 'linker/ng_module_factory')
    };
    Identifiers.RegisterModuleFactoryFn = {
      name: 'registerModuleFactory',
      runtime: registerModuleFactory,
      moduleUrl: assetUrl('core', 'linker/ng_module_factory_loader')
    };
    Identifiers.ValueUnwrapper = {
      name: 'ValueUnwrapper',
      moduleUrl: CD_MODULE_URL,
      runtime: ValueUnwrapper
    };
    Identifiers.Injector = {
      name: 'Injector',
      moduleUrl: assetUrl('core', 'di/injector'),
      runtime: _angular_core.Injector
    };
    Identifiers.ViewEncapsulation = {
      name: 'ViewEncapsulation',
      moduleUrl: assetUrl('core', 'metadata/view'),
      runtime: _angular_core.ViewEncapsulation
    };
    Identifiers.ViewType = {
      name: 'ViewType',
      moduleUrl: assetUrl('core', 'linker/view_type'),
      runtime: ViewType
    };
    Identifiers.ChangeDetectionStrategy = {
      name: 'ChangeDetectionStrategy',
      moduleUrl: CD_MODULE_URL,
      runtime: _angular_core.ChangeDetectionStrategy
    };
    Identifiers.StaticNodeDebugInfo = {
      name: 'StaticNodeDebugInfo',
      moduleUrl: assetUrl('core', 'linker/debug_context'),
      runtime: StaticNodeDebugInfo
    };
    Identifiers.DebugContext = {
      name: 'DebugContext',
      moduleUrl: assetUrl('core', 'linker/debug_context'),
      runtime: DebugContext
    };
    Identifiers.Renderer = {
      name: 'Renderer',
      moduleUrl: assetUrl('core', 'render/api'),
      runtime: _angular_core.Renderer
    };
    Identifiers.SimpleChange = {
      name: 'SimpleChange',
      moduleUrl: CD_MODULE_URL,
      runtime: _angular_core.SimpleChange
    };
    Identifiers.UNINITIALIZED = {
      name: 'UNINITIALIZED',
      moduleUrl: CD_MODULE_URL,
      runtime: UNINITIALIZED
    };
    Identifiers.ChangeDetectorStatus = {
      name: 'ChangeDetectorStatus',
      moduleUrl: CD_MODULE_URL,
      runtime: ChangeDetectorStatus
    };
    Identifiers.checkBinding = {
      name: 'checkBinding',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.checkBinding
    };
    Identifiers.devModeEqual = {
      name: 'devModeEqual',
      moduleUrl: CD_MODULE_URL,
      runtime: devModeEqual
    };
    Identifiers.inlineInterpolate = {
      name: 'inlineInterpolate',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.inlineInterpolate
    };
    Identifiers.interpolate = {
      name: 'interpolate',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.interpolate
    };
    Identifiers.castByValue = {
      name: 'castByValue',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.castByValue
    };
    Identifiers.EMPTY_ARRAY = {
      name: 'EMPTY_ARRAY',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.EMPTY_ARRAY
    };
    Identifiers.EMPTY_MAP = {
      name: 'EMPTY_MAP',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.EMPTY_MAP
    };
    Identifiers.createRenderElement = {
      name: 'createRenderElement',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.createRenderElement
    };
    Identifiers.selectOrCreateRenderHostElement = {
      name: 'selectOrCreateRenderHostElement',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.selectOrCreateRenderHostElement
    };
    Identifiers.pureProxies = [null, {
      name: 'pureProxy1',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.pureProxy1
    }, {
      name: 'pureProxy2',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.pureProxy2
    }, {
      name: 'pureProxy3',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.pureProxy3
    }, {
      name: 'pureProxy4',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.pureProxy4
    }, {
      name: 'pureProxy5',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.pureProxy5
    }, {
      name: 'pureProxy6',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.pureProxy6
    }, {
      name: 'pureProxy7',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.pureProxy7
    }, {
      name: 'pureProxy8',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.pureProxy8
    }, {
      name: 'pureProxy9',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.pureProxy9
    }, {
      name: 'pureProxy10',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.pureProxy10
    }];
    Identifiers.SecurityContext = {
      name: 'SecurityContext',
      moduleUrl: assetUrl('core', 'security'),
      runtime: _angular_core.SecurityContext
    };
    Identifiers.AnimationKeyframe = {
      name: 'AnimationKeyframe',
      moduleUrl: assetUrl('core', 'animation/animation_keyframe'),
      runtime: AnimationKeyframe
    };
    Identifiers.AnimationStyles = {
      name: 'AnimationStyles',
      moduleUrl: assetUrl('core', 'animation/animation_styles'),
      runtime: AnimationStyles
    };
    Identifiers.NoOpAnimationPlayer = {
      name: 'NoOpAnimationPlayer',
      moduleUrl: assetUrl('core', 'animation/animation_player'),
      runtime: NoOpAnimationPlayer
    };
    Identifiers.AnimationGroupPlayer = {
      name: 'AnimationGroupPlayer',
      moduleUrl: assetUrl('core', 'animation/animation_group_player'),
      runtime: AnimationGroupPlayer
    };
    Identifiers.AnimationSequencePlayer = {
      name: 'AnimationSequencePlayer',
      moduleUrl: assetUrl('core', 'animation/animation_sequence_player'),
      runtime: AnimationSequencePlayer
    };
    Identifiers.prepareFinalAnimationStyles = {
      name: 'prepareFinalAnimationStyles',
      moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
      runtime: prepareFinalAnimationStyles
    };
    Identifiers.balanceAnimationKeyframes = {
      name: 'balanceAnimationKeyframes',
      moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
      runtime: balanceAnimationKeyframes
    };
    Identifiers.clearStyles = {
      name: 'clearStyles',
      moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
      runtime: clearStyles
    };
    Identifiers.renderStyles = {
      name: 'renderStyles',
      moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
      runtime: renderStyles
    };
    Identifiers.collectAndResolveStyles = {
      name: 'collectAndResolveStyles',
      moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
      runtime: collectAndResolveStyles
    };
    Identifiers.LOCALE_ID = {
      name: 'LOCALE_ID',
      moduleUrl: assetUrl('core', 'i18n/tokens'),
      runtime: _angular_core.LOCALE_ID
    };
    Identifiers.TRANSLATIONS_FORMAT = {
      name: 'TRANSLATIONS_FORMAT',
      moduleUrl: assetUrl('core', 'i18n/tokens'),
      runtime: _angular_core.TRANSLATIONS_FORMAT
    };
    Identifiers.setBindingDebugInfo = {
      name: 'setBindingDebugInfo',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.setBindingDebugInfo
    };
    Identifiers.setBindingDebugInfoForChanges = {
      name: 'setBindingDebugInfoForChanges',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.setBindingDebugInfoForChanges
    };
    Identifiers.AnimationTransition = {
      name: 'AnimationTransition',
      moduleUrl: assetUrl('core', 'animation/animation_transition'),
      runtime: AnimationTransition
    };
    Identifiers.InlineArray = {
      name: 'InlineArray',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: null
    };
    Identifiers.inlineArrays = [{
      name: 'InlineArray2',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.InlineArray2
    }, {
      name: 'InlineArray2',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.InlineArray2
    }, {
      name: 'InlineArray4',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.InlineArray4
    }, {
      name: 'InlineArray8',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.InlineArray8
    }, {
      name: 'InlineArray16',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.InlineArray16
    }];
    Identifiers.EMPTY_INLINE_ARRAY = {
      name: 'EMPTY_INLINE_ARRAY',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.EMPTY_INLINE_ARRAY
    };
    Identifiers.InlineArrayDynamic = {
      name: 'InlineArrayDynamic',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.InlineArrayDynamic
    };
    Identifiers.subscribeToRenderElement = {
      name: 'subscribeToRenderElement',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.subscribeToRenderElement
    };
    Identifiers.createRenderComponentType = {
      name: 'createRenderComponentType',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.createRenderComponentType
    };
    Identifiers.noop = {
      name: 'noop',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: view_utils.noop
    };
    return Identifiers;
  }());
  function assetUrl(pkg, path, type) {
    if (path === void 0) {
      path = null;
    }
    if (type === void 0) {
      type = 'src';
    }
    if (path == null) {
      return "@angular/" + pkg + "/index";
    } else {
      return "@angular/" + pkg + "/" + type + "/" + path;
    }
  }
  function resolveIdentifier(identifier) {
    return reflector.resolveIdentifier(identifier.name, identifier.moduleUrl, identifier.runtime);
  }
  function createIdentifier(identifier) {
    var reference = reflector.resolveIdentifier(identifier.name, identifier.moduleUrl, identifier.runtime);
    return {reference: reference};
  }
  function identifierToken(identifier) {
    return {identifier: identifier};
  }
  function createIdentifierToken(identifier) {
    return identifierToken(createIdentifier(identifier));
  }
  function createEnumIdentifier(enumType, name) {
    var resolvedEnum = reflector.resolveEnum(resolveIdentifier(enumType), name);
    return {reference: resolvedEnum};
  }
  var __extends$12 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var PLURAL_CASES = ['zero', 'one', 'two', 'few', 'many', 'other'];
  function expandNodes(nodes) {
    var expander = new _Expander();
    return new ExpansionResult(visitAll(expander, nodes), expander.isExpanded, expander.errors);
  }
  var ExpansionResult = (function() {
    function ExpansionResult(nodes, expanded, errors) {
      this.nodes = nodes;
      this.expanded = expanded;
      this.errors = errors;
    }
    return ExpansionResult;
  }());
  var ExpansionError = (function(_super) {
    __extends$12(ExpansionError, _super);
    function ExpansionError(span, errorMsg) {
      _super.call(this, span, errorMsg);
    }
    return ExpansionError;
  }(ParseError));
  var _Expander = (function() {
    function _Expander() {
      this.isExpanded = false;
      this.errors = [];
    }
    _Expander.prototype.visitElement = function(element, context) {
      return new Element(element.name, element.attrs, visitAll(this, element.children), element.sourceSpan, element.startSourceSpan, element.endSourceSpan);
    };
    _Expander.prototype.visitAttribute = function(attribute, context) {
      return attribute;
    };
    _Expander.prototype.visitText = function(text, context) {
      return text;
    };
    _Expander.prototype.visitComment = function(comment, context) {
      return comment;
    };
    _Expander.prototype.visitExpansion = function(icu, context) {
      this.isExpanded = true;
      return icu.type == 'plural' ? _expandPluralForm(icu, this.errors) : _expandDefaultForm(icu, this.errors);
    };
    _Expander.prototype.visitExpansionCase = function(icuCase, context) {
      throw new Error('Should not be reached');
    };
    return _Expander;
  }());
  function _expandPluralForm(ast, errors) {
    var children = ast.cases.map(function(c) {
      if (PLURAL_CASES.indexOf(c.value) == -1 && !c.value.match(/^=\d+$/)) {
        errors.push(new ExpansionError(c.valueSourceSpan, "Plural cases should be \"=<number>\" or one of " + PLURAL_CASES.join(", ")));
      }
      var expansionResult = expandNodes(c.expression);
      errors.push.apply(errors, expansionResult.errors);
      return new Element("template", [new Attribute$1('ngPluralCase', "" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
    });
    var switchAttr = new Attribute$1('[ngPlural]', ast.switchValue, ast.switchValueSourceSpan);
    return new Element('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
  }
  function _expandDefaultForm(ast, errors) {
    var children = ast.cases.map(function(c) {
      var expansionResult = expandNodes(c.expression);
      errors.push.apply(errors, expansionResult.errors);
      if (c.value === 'other') {
        return new Element("template", [new Attribute$1('ngSwitchDefault', '', c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
      }
      return new Element("template", [new Attribute$1('ngSwitchCase', "" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
    });
    var switchAttr = new Attribute$1('[ngSwitch]', ast.switchValue, ast.switchValueSourceSpan);
    return new Element('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
  }
  var __extends$13 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var ProviderError = (function(_super) {
    __extends$13(ProviderError, _super);
    function ProviderError(message, span) {
      _super.call(this, span, message);
    }
    return ProviderError;
  }(ParseError));
  var ProviderViewContext = (function() {
    function ProviderViewContext(component, sourceSpan) {
      var _this = this;
      this.component = component;
      this.sourceSpan = sourceSpan;
      this.errors = [];
      this.viewQueries = _getViewQueries(component);
      this.viewProviders = new Map();
      component.viewProviders.forEach(function(provider) {
        if (isBlank(_this.viewProviders.get(tokenReference(provider.token)))) {
          _this.viewProviders.set(tokenReference(provider.token), true);
        }
      });
    }
    return ProviderViewContext;
  }());
  var ProviderElementContext = (function() {
    function ProviderElementContext(viewContext, _parent, _isViewRoot, _directiveAsts, attrs, refs, _sourceSpan) {
      var _this = this;
      this.viewContext = viewContext;
      this._parent = _parent;
      this._isViewRoot = _isViewRoot;
      this._directiveAsts = _directiveAsts;
      this._sourceSpan = _sourceSpan;
      this._transformedProviders = new Map();
      this._seenProviders = new Map();
      this._hasViewContainer = false;
      this._attrs = {};
      attrs.forEach(function(attrAst) {
        return _this._attrs[attrAst.name] = attrAst.value;
      });
      var directivesMeta = _directiveAsts.map(function(directiveAst) {
        return directiveAst.directive;
      });
      this._allProviders = _resolveProvidersFromDirectives(directivesMeta, _sourceSpan, viewContext.errors);
      this._contentQueries = _getContentQueries(directivesMeta);
      var queriedTokens = new Map();
      Array.from(this._allProviders.values()).forEach(function(provider) {
        _this._addQueryReadsTo(provider.token, queriedTokens);
      });
      refs.forEach(function(refAst) {
        _this._addQueryReadsTo({value: refAst.name}, queriedTokens);
      });
      if (isPresent(queriedTokens.get(resolveIdentifier(Identifiers.ViewContainerRef)))) {
        this._hasViewContainer = true;
      }
      Array.from(this._allProviders.values()).forEach(function(provider) {
        var eager = provider.eager || isPresent(queriedTokens.get(tokenReference(provider.token)));
        if (eager) {
          _this._getOrCreateLocalProvider(provider.providerType, provider.token, true);
        }
      });
    }
    ProviderElementContext.prototype.afterElement = function() {
      var _this = this;
      Array.from(this._allProviders.values()).forEach(function(provider) {
        _this._getOrCreateLocalProvider(provider.providerType, provider.token, false);
      });
    };
    Object.defineProperty(ProviderElementContext.prototype, "transformProviders", {
      get: function() {
        return Array.from(this._transformedProviders.values());
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ProviderElementContext.prototype, "transformedDirectiveAsts", {
      get: function() {
        var sortedProviderTypes = this.transformProviders.map(function(provider) {
          return provider.token.identifier;
        });
        var sortedDirectives = this._directiveAsts.slice();
        sortedDirectives.sort(function(dir1, dir2) {
          return sortedProviderTypes.indexOf(dir1.directive.type) - sortedProviderTypes.indexOf(dir2.directive.type);
        });
        return sortedDirectives;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ProviderElementContext.prototype, "transformedHasViewContainer", {
      get: function() {
        return this._hasViewContainer;
      },
      enumerable: true,
      configurable: true
    });
    ProviderElementContext.prototype._addQueryReadsTo = function(token, queryReadTokens) {
      this._getQueriesFor(token).forEach(function(query) {
        var queryReadToken = query.read || token;
        if (isBlank(queryReadTokens.get(tokenReference(queryReadToken)))) {
          queryReadTokens.set(tokenReference(queryReadToken), true);
        }
      });
    };
    ProviderElementContext.prototype._getQueriesFor = function(token) {
      var result = [];
      var currentEl = this;
      var distance = 0;
      var queries;
      while (currentEl !== null) {
        queries = currentEl._contentQueries.get(tokenReference(token));
        if (isPresent(queries)) {
          result.push.apply(result, queries.filter(function(query) {
            return query.descendants || distance <= 1;
          }));
        }
        if (currentEl._directiveAsts.length > 0) {
          distance++;
        }
        currentEl = currentEl._parent;
      }
      queries = this.viewContext.viewQueries.get(tokenReference(token));
      if (isPresent(queries)) {
        result.push.apply(result, queries);
      }
      return result;
    };
    ProviderElementContext.prototype._getOrCreateLocalProvider = function(requestingProviderType, token, eager) {
      var _this = this;
      var resolvedProvider = this._allProviders.get(tokenReference(token));
      if (!resolvedProvider || ((requestingProviderType === ProviderAstType.Directive || requestingProviderType === ProviderAstType.PublicService) && resolvedProvider.providerType === ProviderAstType.PrivateService) || ((requestingProviderType === ProviderAstType.PrivateService || requestingProviderType === ProviderAstType.PublicService) && resolvedProvider.providerType === ProviderAstType.Builtin)) {
        return null;
      }
      var transformedProviderAst = this._transformedProviders.get(tokenReference(token));
      if (isPresent(transformedProviderAst)) {
        return transformedProviderAst;
      }
      if (isPresent(this._seenProviders.get(tokenReference(token)))) {
        this.viewContext.errors.push(new ProviderError("Cannot instantiate cyclic dependency! " + tokenName(token), this._sourceSpan));
        return null;
      }
      this._seenProviders.set(tokenReference(token), true);
      var transformedProviders = resolvedProvider.providers.map(function(provider) {
        var transformedUseValue = provider.useValue;
        var transformedUseExisting = provider.useExisting;
        var transformedDeps;
        if (isPresent(provider.useExisting)) {
          var existingDiDep = _this._getDependency(resolvedProvider.providerType, {token: provider.useExisting}, eager);
          if (isPresent(existingDiDep.token)) {
            transformedUseExisting = existingDiDep.token;
          } else {
            transformedUseExisting = null;
            transformedUseValue = existingDiDep.value;
          }
        } else if (isPresent(provider.useFactory)) {
          var deps = provider.deps || provider.useFactory.diDeps;
          transformedDeps = deps.map(function(dep) {
            return _this._getDependency(resolvedProvider.providerType, dep, eager);
          });
        } else if (isPresent(provider.useClass)) {
          var deps = provider.deps || provider.useClass.diDeps;
          transformedDeps = deps.map(function(dep) {
            return _this._getDependency(resolvedProvider.providerType, dep, eager);
          });
        }
        return _transformProvider(provider, {
          useExisting: transformedUseExisting,
          useValue: transformedUseValue,
          deps: transformedDeps
        });
      });
      transformedProviderAst = _transformProviderAst(resolvedProvider, {
        eager: eager,
        providers: transformedProviders
      });
      this._transformedProviders.set(tokenReference(token), transformedProviderAst);
      return transformedProviderAst;
    };
    ProviderElementContext.prototype._getLocalDependency = function(requestingProviderType, dep, eager) {
      if (eager === void 0) {
        eager = null;
      }
      if (dep.isAttribute) {
        var attrValue = this._attrs[dep.token.value];
        return {
          isValue: true,
          value: attrValue == null ? null : attrValue
        };
      }
      if (isPresent(dep.token)) {
        if ((requestingProviderType === ProviderAstType.Directive || requestingProviderType === ProviderAstType.Component)) {
          if (tokenReference(dep.token) === resolveIdentifier(Identifiers.Renderer) || tokenReference(dep.token) === resolveIdentifier(Identifiers.ElementRef) || tokenReference(dep.token) === resolveIdentifier(Identifiers.ChangeDetectorRef) || tokenReference(dep.token) === resolveIdentifier(Identifiers.TemplateRef)) {
            return dep;
          }
          if (tokenReference(dep.token) === resolveIdentifier(Identifiers.ViewContainerRef)) {
            this._hasViewContainer = true;
          }
        }
        if (tokenReference(dep.token) === resolveIdentifier(Identifiers.Injector)) {
          return dep;
        }
        if (isPresent(this._getOrCreateLocalProvider(requestingProviderType, dep.token, eager))) {
          return dep;
        }
      }
      return null;
    };
    ProviderElementContext.prototype._getDependency = function(requestingProviderType, dep, eager) {
      if (eager === void 0) {
        eager = null;
      }
      var currElement = this;
      var currEager = eager;
      var result = null;
      if (!dep.isSkipSelf) {
        result = this._getLocalDependency(requestingProviderType, dep, eager);
      }
      if (dep.isSelf) {
        if (!result && dep.isOptional) {
          result = {
            isValue: true,
            value: null
          };
        }
      } else {
        while (!result && isPresent(currElement._parent)) {
          var prevElement = currElement;
          currElement = currElement._parent;
          if (prevElement._isViewRoot) {
            currEager = false;
          }
          result = currElement._getLocalDependency(ProviderAstType.PublicService, dep, currEager);
        }
        if (!result) {
          if (!dep.isHost || this.viewContext.component.isHost || this.viewContext.component.type.reference === tokenReference(dep.token) || isPresent(this.viewContext.viewProviders.get(tokenReference(dep.token)))) {
            result = dep;
          } else {
            result = dep.isOptional ? result = {
              isValue: true,
              value: null
            } : null;
          }
        }
      }
      if (!result) {
        this.viewContext.errors.push(new ProviderError("No provider for " + tokenName(dep.token), this._sourceSpan));
      }
      return result;
    };
    return ProviderElementContext;
  }());
  var NgModuleProviderAnalyzer = (function() {
    function NgModuleProviderAnalyzer(ngModule, extraProviders, sourceSpan) {
      var _this = this;
      this._transformedProviders = new Map();
      this._seenProviders = new Map();
      this._errors = [];
      this._allProviders = new Map();
      ngModule.transitiveModule.modules.forEach(function(ngModuleType) {
        var ngModuleProvider = {
          token: {identifier: ngModuleType},
          useClass: ngModuleType
        };
        _resolveProviders([ngModuleProvider], ProviderAstType.PublicService, true, sourceSpan, _this._errors, _this._allProviders);
      });
      _resolveProviders(ngModule.transitiveModule.providers.map(function(entry) {
        return entry.provider;
      }).concat(extraProviders), ProviderAstType.PublicService, false, sourceSpan, this._errors, this._allProviders);
    }
    NgModuleProviderAnalyzer.prototype.parse = function() {
      var _this = this;
      Array.from(this._allProviders.values()).forEach(function(provider) {
        _this._getOrCreateLocalProvider(provider.token, provider.eager);
      });
      if (this._errors.length > 0) {
        var errorString = this._errors.join('\n');
        throw new Error("Provider parse errors:\n" + errorString);
      }
      return Array.from(this._transformedProviders.values());
    };
    NgModuleProviderAnalyzer.prototype._getOrCreateLocalProvider = function(token, eager) {
      var _this = this;
      var resolvedProvider = this._allProviders.get(tokenReference(token));
      if (!resolvedProvider) {
        return null;
      }
      var transformedProviderAst = this._transformedProviders.get(tokenReference(token));
      if (isPresent(transformedProviderAst)) {
        return transformedProviderAst;
      }
      if (isPresent(this._seenProviders.get(tokenReference(token)))) {
        this._errors.push(new ProviderError("Cannot instantiate cyclic dependency! " + tokenName(token), resolvedProvider.sourceSpan));
        return null;
      }
      this._seenProviders.set(tokenReference(token), true);
      var transformedProviders = resolvedProvider.providers.map(function(provider) {
        var transformedUseValue = provider.useValue;
        var transformedUseExisting = provider.useExisting;
        var transformedDeps;
        if (isPresent(provider.useExisting)) {
          var existingDiDep = _this._getDependency({token: provider.useExisting}, eager, resolvedProvider.sourceSpan);
          if (isPresent(existingDiDep.token)) {
            transformedUseExisting = existingDiDep.token;
          } else {
            transformedUseExisting = null;
            transformedUseValue = existingDiDep.value;
          }
        } else if (isPresent(provider.useFactory)) {
          var deps = provider.deps || provider.useFactory.diDeps;
          transformedDeps = deps.map(function(dep) {
            return _this._getDependency(dep, eager, resolvedProvider.sourceSpan);
          });
        } else if (isPresent(provider.useClass)) {
          var deps = provider.deps || provider.useClass.diDeps;
          transformedDeps = deps.map(function(dep) {
            return _this._getDependency(dep, eager, resolvedProvider.sourceSpan);
          });
        }
        return _transformProvider(provider, {
          useExisting: transformedUseExisting,
          useValue: transformedUseValue,
          deps: transformedDeps
        });
      });
      transformedProviderAst = _transformProviderAst(resolvedProvider, {
        eager: eager,
        providers: transformedProviders
      });
      this._transformedProviders.set(tokenReference(token), transformedProviderAst);
      return transformedProviderAst;
    };
    NgModuleProviderAnalyzer.prototype._getDependency = function(dep, eager, requestorSourceSpan) {
      if (eager === void 0) {
        eager = null;
      }
      var foundLocal = false;
      if (!dep.isSkipSelf && isPresent(dep.token)) {
        if (tokenReference(dep.token) === resolveIdentifier(Identifiers.Injector) || tokenReference(dep.token) === resolveIdentifier(Identifiers.ComponentFactoryResolver)) {
          foundLocal = true;
        } else if (isPresent(this._getOrCreateLocalProvider(dep.token, eager))) {
          foundLocal = true;
        }
      }
      var result = dep;
      if (dep.isSelf && !foundLocal) {
        if (dep.isOptional) {
          result = {
            isValue: true,
            value: null
          };
        } else {
          this._errors.push(new ProviderError("No provider for " + tokenName(dep.token), requestorSourceSpan));
        }
      }
      return result;
    };
    return NgModuleProviderAnalyzer;
  }());
  function _transformProvider(provider, _a) {
    var useExisting = _a.useExisting,
        useValue = _a.useValue,
        deps = _a.deps;
    return {
      token: provider.token,
      useClass: provider.useClass,
      useExisting: useExisting,
      useFactory: provider.useFactory,
      useValue: useValue,
      deps: deps,
      multi: provider.multi
    };
  }
  function _transformProviderAst(provider, _a) {
    var eager = _a.eager,
        providers = _a.providers;
    return new ProviderAst(provider.token, provider.multiProvider, provider.eager || eager, providers, provider.providerType, provider.lifecycleHooks, provider.sourceSpan);
  }
  function _resolveProvidersFromDirectives(directives, sourceSpan, targetErrors) {
    var providersByToken = new Map();
    directives.forEach(function(directive) {
      var dirProvider = {
        token: {identifier: directive.type},
        useClass: directive.type
      };
      _resolveProviders([dirProvider], directive.isComponent ? ProviderAstType.Component : ProviderAstType.Directive, true, sourceSpan, targetErrors, providersByToken);
    });
    var directivesWithComponentFirst = directives.filter(function(dir) {
      return dir.isComponent;
    }).concat(directives.filter(function(dir) {
      return !dir.isComponent;
    }));
    directivesWithComponentFirst.forEach(function(directive) {
      _resolveProviders(directive.providers, ProviderAstType.PublicService, false, sourceSpan, targetErrors, providersByToken);
      _resolveProviders(directive.viewProviders, ProviderAstType.PrivateService, false, sourceSpan, targetErrors, providersByToken);
    });
    return providersByToken;
  }
  function _resolveProviders(providers, providerType, eager, sourceSpan, targetErrors, targetProvidersByToken) {
    providers.forEach(function(provider) {
      var resolvedProvider = targetProvidersByToken.get(tokenReference(provider.token));
      if (isPresent(resolvedProvider) && !!resolvedProvider.multiProvider !== !!provider.multi) {
        targetErrors.push(new ProviderError("Mixing multi and non multi provider is not possible for token " + tokenName(resolvedProvider.token), sourceSpan));
      }
      if (!resolvedProvider) {
        var lifecycleHooks = provider.token.identifier && ((provider.token.identifier)).lifecycleHooks ? ((provider.token.identifier)).lifecycleHooks : [];
        resolvedProvider = new ProviderAst(provider.token, provider.multi, eager || lifecycleHooks.length > 0, [provider], providerType, lifecycleHooks, sourceSpan);
        targetProvidersByToken.set(tokenReference(provider.token), resolvedProvider);
      } else {
        if (!provider.multi) {
          resolvedProvider.providers.length = 0;
        }
        resolvedProvider.providers.push(provider);
      }
    });
  }
  function _getViewQueries(component) {
    var viewQueries = new Map();
    if (isPresent(component.viewQueries)) {
      component.viewQueries.forEach(function(query) {
        return _addQueryToTokenMap(viewQueries, query);
      });
    }
    return viewQueries;
  }
  function _getContentQueries(directives) {
    var contentQueries = new Map();
    directives.forEach(function(directive) {
      if (isPresent(directive.queries)) {
        directive.queries.forEach(function(query) {
          return _addQueryToTokenMap(contentQueries, query);
        });
      }
    });
    return contentQueries;
  }
  function _addQueryToTokenMap(map, query) {
    query.selectors.forEach(function(token) {
      var entry = map.get(tokenReference(token));
      if (!entry) {
        entry = [];
        map.set(tokenReference(token), entry);
      }
      entry.push(query);
    });
  }
  var ElementSchemaRegistry = (function() {
    function ElementSchemaRegistry() {}
    ElementSchemaRegistry.prototype.hasProperty = function(tagName, propName, schemaMetas) {};
    ElementSchemaRegistry.prototype.hasElement = function(tagName, schemaMetas) {};
    ElementSchemaRegistry.prototype.securityContext = function(elementName, propName, isAttribute) {};
    ElementSchemaRegistry.prototype.allKnownElementNames = function() {};
    ElementSchemaRegistry.prototype.getMappedPropName = function(propName) {};
    ElementSchemaRegistry.prototype.getDefaultComponentElementName = function() {};
    ElementSchemaRegistry.prototype.validateProperty = function(name) {};
    ElementSchemaRegistry.prototype.validateAttribute = function(name) {};
    ElementSchemaRegistry.prototype.normalizeAnimationStyleProperty = function(propName) {};
    ElementSchemaRegistry.prototype.normalizeAnimationStyleValue = function(camelCaseProp, userProvidedProp, val) {};
    return ElementSchemaRegistry;
  }());
  var StyleWithImports = (function() {
    function StyleWithImports(style, styleUrls) {
      this.style = style;
      this.styleUrls = styleUrls;
    }
    return StyleWithImports;
  }());
  function isStyleUrlResolvable(url) {
    if (url == null || url.length === 0 || url[0] == '/')
      return false;
    var schemeMatch = url.match(URL_WITH_SCHEMA_REGEXP);
    return schemeMatch === null || schemeMatch[1] == 'package' || schemeMatch[1] == 'asset';
  }
  function extractStyleUrls(resolver, baseUrl, cssText) {
    var foundUrls = [];
    var modifiedCssText = cssText.replace(CSS_COMMENT_REGEXP, '').replace(CSS_IMPORT_REGEXP, function() {
      var m = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        m[_i - 0] = arguments[_i];
      }
      var url = m[1] || m[2];
      if (!isStyleUrlResolvable(url)) {
        return m[0];
      }
      foundUrls.push(resolver.resolve(baseUrl, url));
      return '';
    });
    return new StyleWithImports(modifiedCssText, foundUrls);
  }
  var CSS_IMPORT_REGEXP = /@import\s+(?:url\()?\s*(?:(?:['"]([^'"]*))|([^;\)\s]*))[^;]*;?/g;
  var CSS_COMMENT_REGEXP = /\/\*.+?\*\//g;
  var URL_WITH_SCHEMA_REGEXP = /^([^:/?#]+):/;
  var __extends$14 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var PROPERTY_PARTS_SEPARATOR = '.';
  var ATTRIBUTE_PREFIX = 'attr';
  var CLASS_PREFIX = 'class';
  var STYLE_PREFIX = 'style';
  var ANIMATE_PROP_PREFIX = 'animate-';
  var BoundPropertyType = {};
  BoundPropertyType.DEFAULT = 0;
  BoundPropertyType.LITERAL_ATTR = 1;
  BoundPropertyType.ANIMATION = 2;
  BoundPropertyType[BoundPropertyType.DEFAULT] = "DEFAULT";
  BoundPropertyType[BoundPropertyType.LITERAL_ATTR] = "LITERAL_ATTR";
  BoundPropertyType[BoundPropertyType.ANIMATION] = "ANIMATION";
  var BoundProperty = (function() {
    function BoundProperty(name, expression, type, sourceSpan) {
      this.name = name;
      this.expression = expression;
      this.type = type;
      this.sourceSpan = sourceSpan;
    }
    Object.defineProperty(BoundProperty.prototype, "isLiteral", {
      get: function() {
        return this.type === BoundPropertyType.LITERAL_ATTR;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(BoundProperty.prototype, "isAnimation", {
      get: function() {
        return this.type === BoundPropertyType.ANIMATION;
      },
      enumerable: true,
      configurable: true
    });
    return BoundProperty;
  }());
  var BindingParser = (function() {
    function BindingParser(_exprParser, _interpolationConfig, _schemaRegistry, pipes, _targetErrors) {
      var _this = this;
      this._exprParser = _exprParser;
      this._interpolationConfig = _interpolationConfig;
      this._schemaRegistry = _schemaRegistry;
      this._targetErrors = _targetErrors;
      this.pipesByName = new Map();
      pipes.forEach(function(pipe) {
        return _this.pipesByName.set(pipe.name, pipe);
      });
    }
    BindingParser.prototype.createDirectiveHostPropertyAsts = function(dirMeta, sourceSpan) {
      var _this = this;
      if (dirMeta.hostProperties) {
        var boundProps_1 = [];
        Object.keys(dirMeta.hostProperties).forEach(function(propName) {
          var expression = dirMeta.hostProperties[propName];
          if (typeof expression === 'string') {
            _this.parsePropertyBinding(propName, expression, true, sourceSpan, [], boundProps_1);
          } else {
            _this._reportError("Value of the host property binding \"" + propName + "\" needs to be a string representing an expression but got \"" + expression + "\" (" + typeof expression + ")", sourceSpan);
          }
        });
        return boundProps_1.map(function(prop) {
          return _this.createElementPropertyAst(dirMeta.selector, prop);
        });
      }
    };
    BindingParser.prototype.createDirectiveHostEventAsts = function(dirMeta, sourceSpan) {
      var _this = this;
      if (dirMeta.hostListeners) {
        var targetEventAsts_1 = [];
        Object.keys(dirMeta.hostListeners).forEach(function(propName) {
          var expression = dirMeta.hostListeners[propName];
          if (typeof expression === 'string') {
            _this.parseEvent(propName, expression, sourceSpan, [], targetEventAsts_1);
          } else {
            _this._reportError("Value of the host listener \"" + propName + "\" needs to be a string representing an expression but got \"" + expression + "\" (" + typeof expression + ")", sourceSpan);
          }
        });
        return targetEventAsts_1;
      }
    };
    BindingParser.prototype.parseInterpolation = function(value, sourceSpan) {
      var sourceInfo = sourceSpan.start.toString();
      try {
        var ast = this._exprParser.parseInterpolation(value, sourceInfo, this._interpolationConfig);
        if (ast)
          this._reportExpressionParserErrors(ast.errors, sourceSpan);
        this._checkPipes(ast, sourceSpan);
        return ast;
      } catch (e) {
        this._reportError("" + e, sourceSpan);
        return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
      }
    };
    BindingParser.prototype.parseInlineTemplateBinding = function(name, prefixToken, value, sourceSpan, targetMatchableAttrs, targetProps, targetVars) {
      var bindings = this._parseTemplateBindings(prefixToken, value, sourceSpan);
      for (var i = 0; i < bindings.length; i++) {
        var binding = bindings[i];
        if (binding.keyIsVar) {
          targetVars.push(new VariableAst(binding.key, binding.name, sourceSpan));
        } else if (isPresent(binding.expression)) {
          this._parsePropertyAst(binding.key, binding.expression, sourceSpan, targetMatchableAttrs, targetProps);
        } else {
          targetMatchableAttrs.push([binding.key, '']);
          this.parseLiteralAttr(binding.key, null, sourceSpan, targetMatchableAttrs, targetProps);
        }
      }
    };
    BindingParser.prototype._parseTemplateBindings = function(prefixToken, value, sourceSpan) {
      var _this = this;
      var sourceInfo = sourceSpan.start.toString();
      try {
        var bindingsResult = this._exprParser.parseTemplateBindings(prefixToken, value, sourceInfo);
        this._reportExpressionParserErrors(bindingsResult.errors, sourceSpan);
        bindingsResult.templateBindings.forEach(function(binding) {
          if (isPresent(binding.expression)) {
            _this._checkPipes(binding.expression, sourceSpan);
          }
        });
        bindingsResult.warnings.forEach(function(warning) {
          _this._reportError(warning, sourceSpan, ParseErrorLevel.WARNING);
        });
        return bindingsResult.templateBindings;
      } catch (e) {
        this._reportError("" + e, sourceSpan);
        return [];
      }
    };
    BindingParser.prototype.parseLiteralAttr = function(name, value, sourceSpan, targetMatchableAttrs, targetProps) {
      if (_isAnimationLabel(name)) {
        name = name.substring(1);
        if (value) {
          this._reportError("Assigning animation triggers via @prop=\"exp\" attributes with an expression is invalid." + " Use property bindings (e.g. [@prop]=\"exp\") or use an attribute without a value (e.g. @prop) instead.", sourceSpan, ParseErrorLevel.FATAL);
        }
        this._parseAnimation(name, value, sourceSpan, targetMatchableAttrs, targetProps);
      } else {
        targetProps.push(new BoundProperty(name, this._exprParser.wrapLiteralPrimitive(value, ''), BoundPropertyType.LITERAL_ATTR, sourceSpan));
      }
    };
    BindingParser.prototype.parsePropertyBinding = function(name, expression, isHost, sourceSpan, targetMatchableAttrs, targetProps) {
      var isAnimationProp = false;
      if (name.startsWith(ANIMATE_PROP_PREFIX)) {
        isAnimationProp = true;
        name = name.substring(ANIMATE_PROP_PREFIX.length);
      } else if (_isAnimationLabel(name)) {
        isAnimationProp = true;
        name = name.substring(1);
      }
      if (isAnimationProp) {
        this._parseAnimation(name, expression, sourceSpan, targetMatchableAttrs, targetProps);
      } else {
        this._parsePropertyAst(name, this._parseBinding(expression, isHost, sourceSpan), sourceSpan, targetMatchableAttrs, targetProps);
      }
    };
    BindingParser.prototype.parsePropertyInterpolation = function(name, value, sourceSpan, targetMatchableAttrs, targetProps) {
      var expr = this.parseInterpolation(value, sourceSpan);
      if (isPresent(expr)) {
        this._parsePropertyAst(name, expr, sourceSpan, targetMatchableAttrs, targetProps);
        return true;
      }
      return false;
    };
    BindingParser.prototype._parsePropertyAst = function(name, ast, sourceSpan, targetMatchableAttrs, targetProps) {
      targetMatchableAttrs.push([name, ast.source]);
      targetProps.push(new BoundProperty(name, ast, BoundPropertyType.DEFAULT, sourceSpan));
    };
    BindingParser.prototype._parseAnimation = function(name, expression, sourceSpan, targetMatchableAttrs, targetProps) {
      var ast = this._parseBinding(expression || 'null', false, sourceSpan);
      targetMatchableAttrs.push([name, ast.source]);
      targetProps.push(new BoundProperty(name, ast, BoundPropertyType.ANIMATION, sourceSpan));
    };
    BindingParser.prototype._parseBinding = function(value, isHostBinding, sourceSpan) {
      var sourceInfo = sourceSpan.start.toString();
      try {
        var ast = isHostBinding ? this._exprParser.parseSimpleBinding(value, sourceInfo, this._interpolationConfig) : this._exprParser.parseBinding(value, sourceInfo, this._interpolationConfig);
        if (ast)
          this._reportExpressionParserErrors(ast.errors, sourceSpan);
        this._checkPipes(ast, sourceSpan);
        return ast;
      } catch (e) {
        this._reportError("" + e, sourceSpan);
        return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
      }
    };
    BindingParser.prototype.createElementPropertyAst = function(elementSelector, boundProp) {
      if (boundProp.isAnimation) {
        return new BoundElementPropertyAst(boundProp.name, PropertyBindingType.Animation, _angular_core.SecurityContext.NONE, false, boundProp.expression, null, boundProp.sourceSpan);
      }
      var unit = null;
      var bindingType;
      var boundPropertyName = null;
      var parts = boundProp.name.split(PROPERTY_PARTS_SEPARATOR);
      var securityContexts;
      if (parts.length > 1) {
        if (parts[0] == ATTRIBUTE_PREFIX) {
          boundPropertyName = parts[1];
          this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, true);
          securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, true);
          var nsSeparatorIdx = boundPropertyName.indexOf(':');
          if (nsSeparatorIdx > -1) {
            var ns = boundPropertyName.substring(0, nsSeparatorIdx);
            var name_1 = boundPropertyName.substring(nsSeparatorIdx + 1);
            boundPropertyName = mergeNsAndName(ns, name_1);
          }
          bindingType = PropertyBindingType.Attribute;
        } else if (parts[0] == CLASS_PREFIX) {
          boundPropertyName = parts[1];
          bindingType = PropertyBindingType.Class;
          securityContexts = [_angular_core.SecurityContext.NONE];
        } else if (parts[0] == STYLE_PREFIX) {
          unit = parts.length > 2 ? parts[2] : null;
          boundPropertyName = parts[1];
          bindingType = PropertyBindingType.Style;
          securityContexts = [_angular_core.SecurityContext.STYLE];
        }
      }
      if (boundPropertyName === null) {
        boundPropertyName = this._schemaRegistry.getMappedPropName(boundProp.name);
        securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, false);
        bindingType = PropertyBindingType.Property;
        this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, false);
      }
      return new BoundElementPropertyAst(boundPropertyName, bindingType, securityContexts.length === 1 ? securityContexts[0] : null, securityContexts.length > 1, boundProp.expression, unit, boundProp.sourceSpan);
    };
    BindingParser.prototype.parseEvent = function(name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
      if (_isAnimationLabel(name)) {
        name = name.substr(1);
        this._parseAnimationEvent(name, expression, sourceSpan, targetEvents);
      } else {
        this._parseEvent(name, expression, sourceSpan, targetMatchableAttrs, targetEvents);
      }
    };
    BindingParser.prototype._parseAnimationEvent = function(name, expression, sourceSpan, targetEvents) {
      var matches = splitAtPeriod(name, [name, '']);
      var eventName = matches[0];
      var phase = matches[1].toLowerCase();
      if (phase) {
        switch (phase) {
          case 'start':
          case 'done':
            var ast = this._parseAction(expression, sourceSpan);
            targetEvents.push(new BoundEventAst(eventName, null, phase, ast, sourceSpan));
            break;
          default:
            this._reportError("The provided animation output phase value \"" + phase + "\" for \"@" + eventName + "\" is not supported (use start or done)", sourceSpan);
            break;
        }
      } else {
        this._reportError("The animation trigger output event (@" + eventName + ") is missing its phase value name (start or done are currently supported)", sourceSpan);
      }
    };
    BindingParser.prototype._parseEvent = function(name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
      var _a = splitAtColon(name, [null, name]),
          target = _a[0],
          eventName = _a[1];
      var ast = this._parseAction(expression, sourceSpan);
      targetMatchableAttrs.push([name, ast.source]);
      targetEvents.push(new BoundEventAst(eventName, target, null, ast, sourceSpan));
    };
    BindingParser.prototype._parseAction = function(value, sourceSpan) {
      var sourceInfo = sourceSpan.start.toString();
      try {
        var ast = this._exprParser.parseAction(value, sourceInfo, this._interpolationConfig);
        if (ast) {
          this._reportExpressionParserErrors(ast.errors, sourceSpan);
        }
        if (!ast || ast.ast instanceof EmptyExpr) {
          this._reportError("Empty expressions are not allowed", sourceSpan);
          return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
        }
        this._checkPipes(ast, sourceSpan);
        return ast;
      } catch (e) {
        this._reportError("" + e, sourceSpan);
        return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
      }
    };
    BindingParser.prototype._reportError = function(message, sourceSpan, level) {
      if (level === void 0) {
        level = ParseErrorLevel.FATAL;
      }
      this._targetErrors.push(new ParseError(sourceSpan, message, level));
    };
    BindingParser.prototype._reportExpressionParserErrors = function(errors, sourceSpan) {
      for (var _i = 0,
          errors_1 = errors; _i < errors_1.length; _i++) {
        var error = errors_1[_i];
        this._reportError(error.message, sourceSpan);
      }
    };
    BindingParser.prototype._checkPipes = function(ast, sourceSpan) {
      var _this = this;
      if (isPresent(ast)) {
        var collector = new PipeCollector();
        ast.visit(collector);
        collector.pipes.forEach(function(ast, pipeName) {
          if (!_this.pipesByName.has(pipeName)) {
            _this._reportError("The pipe '" + pipeName + "' could not be found", new ParseSourceSpan(sourceSpan.start.moveBy(ast.span.start), sourceSpan.start.moveBy(ast.span.end)));
          }
        });
      }
    };
    BindingParser.prototype._validatePropertyOrAttributeName = function(propName, sourceSpan, isAttr) {
      var report = isAttr ? this._schemaRegistry.validateAttribute(propName) : this._schemaRegistry.validateProperty(propName);
      if (report.error) {
        this._reportError(report.msg, sourceSpan, ParseErrorLevel.FATAL);
      }
    };
    return BindingParser;
  }());
  var PipeCollector = (function(_super) {
    __extends$14(PipeCollector, _super);
    function PipeCollector() {
      _super.apply(this, arguments);
      this.pipes = new Map();
    }
    PipeCollector.prototype.visitPipe = function(ast, context) {
      this.pipes.set(ast.name, ast);
      ast.exp.visit(this);
      this.visitAll(ast.args, context);
      return null;
    };
    return PipeCollector;
  }(RecursiveAstVisitor));
  function _isAnimationLabel(name) {
    return name[0] == '@';
  }
  function calcPossibleSecurityContexts(registry, selector, propName, isAttribute) {
    var ctxs = [];
    CssSelector.parse(selector).forEach(function(selector) {
      var elementNames = selector.element ? [selector.element] : registry.allKnownElementNames();
      var notElementNames = new Set(selector.notSelectors.filter(function(selector) {
        return selector.isElementSelector();
      }).map(function(selector) {
        return selector.element;
      }));
      var possibleElementNames = elementNames.filter(function(elementName) {
        return !notElementNames.has(elementName);
      });
      ctxs.push.apply(ctxs, possibleElementNames.map(function(elementName) {
        return registry.securityContext(elementName, propName, isAttribute);
      }));
    });
    return ctxs.length === 0 ? [_angular_core.SecurityContext.NONE] : Array.from(new Set(ctxs)).sort();
  }
  var NG_CONTENT_SELECT_ATTR = 'select';
  var NG_CONTENT_ELEMENT = 'ng-content';
  var LINK_ELEMENT = 'link';
  var LINK_STYLE_REL_ATTR = 'rel';
  var LINK_STYLE_HREF_ATTR = 'href';
  var LINK_STYLE_REL_VALUE = 'stylesheet';
  var STYLE_ELEMENT = 'style';
  var SCRIPT_ELEMENT = 'script';
  var NG_NON_BINDABLE_ATTR = 'ngNonBindable';
  var NG_PROJECT_AS = 'ngProjectAs';
  function preparseElement(ast) {
    var selectAttr = null;
    var hrefAttr = null;
    var relAttr = null;
    var nonBindable = false;
    var projectAs = null;
    ast.attrs.forEach(function(attr) {
      var lcAttrName = attr.name.toLowerCase();
      if (lcAttrName == NG_CONTENT_SELECT_ATTR) {
        selectAttr = attr.value;
      } else if (lcAttrName == LINK_STYLE_HREF_ATTR) {
        hrefAttr = attr.value;
      } else if (lcAttrName == LINK_STYLE_REL_ATTR) {
        relAttr = attr.value;
      } else if (attr.name == NG_NON_BINDABLE_ATTR) {
        nonBindable = true;
      } else if (attr.name == NG_PROJECT_AS) {
        if (attr.value.length > 0) {
          projectAs = attr.value;
        }
      }
    });
    selectAttr = normalizeNgContentSelect(selectAttr);
    var nodeName = ast.name.toLowerCase();
    var type = PreparsedElementType.OTHER;
    if (splitNsName(nodeName)[1] == NG_CONTENT_ELEMENT) {
      type = PreparsedElementType.NG_CONTENT;
    } else if (nodeName == STYLE_ELEMENT) {
      type = PreparsedElementType.STYLE;
    } else if (nodeName == SCRIPT_ELEMENT) {
      type = PreparsedElementType.SCRIPT;
    } else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {
      type = PreparsedElementType.STYLESHEET;
    }
    return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs);
  }
  var PreparsedElementType = {};
  PreparsedElementType.NG_CONTENT = 0;
  PreparsedElementType.STYLE = 1;
  PreparsedElementType.STYLESHEET = 2;
  PreparsedElementType.SCRIPT = 3;
  PreparsedElementType.OTHER = 4;
  PreparsedElementType[PreparsedElementType.NG_CONTENT] = "NG_CONTENT";
  PreparsedElementType[PreparsedElementType.STYLE] = "STYLE";
  PreparsedElementType[PreparsedElementType.STYLESHEET] = "STYLESHEET";
  PreparsedElementType[PreparsedElementType.SCRIPT] = "SCRIPT";
  PreparsedElementType[PreparsedElementType.OTHER] = "OTHER";
  var PreparsedElement = (function() {
    function PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs) {
      this.type = type;
      this.selectAttr = selectAttr;
      this.hrefAttr = hrefAttr;
      this.nonBindable = nonBindable;
      this.projectAs = projectAs;
    }
    return PreparsedElement;
  }());
  function normalizeNgContentSelect(selectAttr) {
    if (selectAttr === null || selectAttr.length === 0) {
      return '*';
    }
    return selectAttr;
  }
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var BIND_NAME_REGEXP = /^(?:(?:(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.+))|\[\(([^\)]+)\)\]|\[([^\]]+)\]|\(([^\)]+)\))$/;
  var KW_BIND_IDX = 1;
  var KW_LET_IDX = 2;
  var KW_REF_IDX = 3;
  var KW_ON_IDX = 4;
  var KW_BINDON_IDX = 5;
  var KW_AT_IDX = 6;
  var IDENT_KW_IDX = 7;
  var IDENT_BANANA_BOX_IDX = 8;
  var IDENT_PROPERTY_IDX = 9;
  var IDENT_EVENT_IDX = 10;
  var TEMPLATE_ELEMENT = 'template';
  var TEMPLATE_ATTR = 'template';
  var TEMPLATE_ATTR_PREFIX = '*';
  var CLASS_ATTR = 'class';
  var TEXT_CSS_SELECTOR = CssSelector.parse('*')[0];
  var TEMPLATE_TRANSFORMS = new _angular_core.OpaqueToken('TemplateTransforms');
  var TemplateParseError = (function(_super) {
    __extends(TemplateParseError, _super);
    function TemplateParseError(message, span, level) {
      _super.call(this, span, message, level);
    }
    return TemplateParseError;
  }(ParseError));
  var TemplateParseResult = (function() {
    function TemplateParseResult(templateAst, errors) {
      this.templateAst = templateAst;
      this.errors = errors;
    }
    return TemplateParseResult;
  }());
  var TemplateParser = (function() {
    function TemplateParser(_exprParser, _schemaRegistry, _htmlParser, _console, transforms) {
      this._exprParser = _exprParser;
      this._schemaRegistry = _schemaRegistry;
      this._htmlParser = _htmlParser;
      this._console = _console;
      this.transforms = transforms;
    }
    TemplateParser.prototype.parse = function(component, template, directives, pipes, schemas, templateUrl) {
      var result = this.tryParse(component, template, directives, pipes, schemas, templateUrl);
      var warnings = result.errors.filter(function(error) {
        return error.level === ParseErrorLevel.WARNING;
      });
      var errors = result.errors.filter(function(error) {
        return error.level === ParseErrorLevel.FATAL;
      });
      if (warnings.length > 0) {
        this._console.warn("Template parse warnings:\n" + warnings.join('\n'));
      }
      if (errors.length > 0) {
        var errorString = errors.join('\n');
        throw new SyntaxError("Template parse errors:\n" + errorString);
      }
      return result.templateAst;
    };
    TemplateParser.prototype.tryParse = function(component, template, directives, pipes, schemas, templateUrl) {
      return this.tryParseHtml(this.expandHtml(this._htmlParser.parse(template, templateUrl, true, this.getInterpolationConfig(component))), component, template, directives, pipes, schemas, templateUrl);
    };
    TemplateParser.prototype.tryParseHtml = function(htmlAstWithErrors, component, template, directives, pipes, schemas, templateUrl) {
      var result;
      var errors = htmlAstWithErrors.errors;
      if (htmlAstWithErrors.rootNodes.length > 0) {
        var uniqDirectives = removeSummaryDuplicates(directives);
        var uniqPipes = removeSummaryDuplicates(pipes);
        var providerViewContext = new ProviderViewContext(component, htmlAstWithErrors.rootNodes[0].sourceSpan);
        var interpolationConfig = void 0;
        if (component.template && component.template.interpolation) {
          interpolationConfig = {
            start: component.template.interpolation[0],
            end: component.template.interpolation[1]
          };
        }
        var bindingParser = new BindingParser(this._exprParser, interpolationConfig, this._schemaRegistry, uniqPipes, errors);
        var parseVisitor = new TemplateParseVisitor(providerViewContext, uniqDirectives, bindingParser, this._schemaRegistry, schemas, errors);
        result = visitAll(parseVisitor, htmlAstWithErrors.rootNodes, EMPTY_ELEMENT_CONTEXT);
        errors.push.apply(errors, providerViewContext.errors);
      } else {
        result = [];
      }
      this._assertNoReferenceDuplicationOnTemplate(result, errors);
      if (errors.length > 0) {
        return new TemplateParseResult(result, errors);
      }
      if (this.transforms) {
        this.transforms.forEach(function(transform) {
          result = templateVisitAll(transform, result);
        });
      }
      return new TemplateParseResult(result, errors);
    };
    TemplateParser.prototype.expandHtml = function(htmlAstWithErrors, forced) {
      if (forced === void 0) {
        forced = false;
      }
      var errors = htmlAstWithErrors.errors;
      if (errors.length == 0 || forced) {
        var expandedHtmlAst = expandNodes(htmlAstWithErrors.rootNodes);
        errors.push.apply(errors, expandedHtmlAst.errors);
        htmlAstWithErrors = new ParseTreeResult(expandedHtmlAst.nodes, errors);
      }
      return htmlAstWithErrors;
    };
    TemplateParser.prototype.getInterpolationConfig = function(component) {
      if (component.template) {
        return InterpolationConfig.fromArray(component.template.interpolation);
      }
    };
    TemplateParser.prototype._assertNoReferenceDuplicationOnTemplate = function(result, errors) {
      var existingReferences = [];
      result.filter(function(element) {
        return !!((element)).references;
      }).forEach(function(element) {
        return ((element)).references.forEach(function(reference) {
          var name = reference.name;
          if (existingReferences.indexOf(name) < 0) {
            existingReferences.push(name);
          } else {
            var error = new TemplateParseError("Reference \"#" + name + "\" is defined several times", reference.sourceSpan, ParseErrorLevel.FATAL);
            errors.push(error);
          }
        });
      });
    };
    TemplateParser.ctorParameters = function() {
      return [{type: Parser}, {type: ElementSchemaRegistry}, {type: I18NHtmlParser}, {type: Console}, {
        type: Array,
        decorators: [{type: _angular_core.Optional}, {
          type: _angular_core.Inject,
          args: [TEMPLATE_TRANSFORMS]
        }]
      }];
    };
    TemplateParser = __decorate([CompilerInjectable(), __metadata('design:paramtypes', [Parser, ElementSchemaRegistry, I18NHtmlParser, Console, Array])], TemplateParser);
    return TemplateParser;
  }());
  var TemplateParseVisitor = (function() {
    function TemplateParseVisitor(providerViewContext, directives, _bindingParser, _schemaRegistry, _schemas, _targetErrors) {
      var _this = this;
      this.providerViewContext = providerViewContext;
      this._bindingParser = _bindingParser;
      this._schemaRegistry = _schemaRegistry;
      this._schemas = _schemas;
      this._targetErrors = _targetErrors;
      this.selectorMatcher = new SelectorMatcher();
      this.directivesIndex = new Map();
      this.ngContentCount = 0;
      directives.forEach(function(directive, index) {
        var selector = CssSelector.parse(directive.selector);
        _this.selectorMatcher.addSelectables(selector, directive);
        _this.directivesIndex.set(directive, index);
      });
    }
    TemplateParseVisitor.prototype.visitExpansion = function(expansion, context) {
      return null;
    };
    TemplateParseVisitor.prototype.visitExpansionCase = function(expansionCase, context) {
      return null;
    };
    TemplateParseVisitor.prototype.visitText = function(text, parent) {
      var ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);
      var expr = this._bindingParser.parseInterpolation(text.value, text.sourceSpan);
      if (expr) {
        return new BoundTextAst(expr, ngContentIndex, text.sourceSpan);
      } else {
        return new TextAst(text.value, ngContentIndex, text.sourceSpan);
      }
    };
    TemplateParseVisitor.prototype.visitAttribute = function(attribute, context) {
      return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);
    };
    TemplateParseVisitor.prototype.visitComment = function(comment, context) {
      return null;
    };
    TemplateParseVisitor.prototype.visitElement = function(element, parent) {
      var _this = this;
      var nodeName = element.name;
      var preparsedElement = preparseElement(element);
      if (preparsedElement.type === PreparsedElementType.SCRIPT || preparsedElement.type === PreparsedElementType.STYLE) {
        return null;
      }
      if (preparsedElement.type === PreparsedElementType.STYLESHEET && isStyleUrlResolvable(preparsedElement.hrefAttr)) {
        return null;
      }
      var matchableAttrs = [];
      var elementOrDirectiveProps = [];
      var elementOrDirectiveRefs = [];
      var elementVars = [];
      var events = [];
      var templateElementOrDirectiveProps = [];
      var templateMatchableAttrs = [];
      var templateElementVars = [];
      var hasInlineTemplates = false;
      var attrs = [];
      var lcElName = splitNsName(nodeName.toLowerCase())[1];
      var isTemplateElement = lcElName == TEMPLATE_ELEMENT;
      element.attrs.forEach(function(attr) {
        var hasBinding = _this._parseAttr(isTemplateElement, attr, matchableAttrs, elementOrDirectiveProps, events, elementOrDirectiveRefs, elementVars);
        var templateBindingsSource;
        var prefixToken;
        var normalizedName = _this._normalizeAttributeName(attr.name);
        if (normalizedName == TEMPLATE_ATTR) {
          templateBindingsSource = attr.value;
        } else if (normalizedName.startsWith(TEMPLATE_ATTR_PREFIX)) {
          templateBindingsSource = attr.value;
          prefixToken = normalizedName.substring(TEMPLATE_ATTR_PREFIX.length);
        }
        var hasTemplateBinding = isPresent(templateBindingsSource);
        if (hasTemplateBinding) {
          if (hasInlineTemplates) {
            _this._reportError("Can't have multiple template bindings on one element. Use only one attribute named 'template' or prefixed with *", attr.sourceSpan);
          }
          hasInlineTemplates = true;
          _this._bindingParser.parseInlineTemplateBinding(attr.name, prefixToken, templateBindingsSource, attr.sourceSpan, templateMatchableAttrs, templateElementOrDirectiveProps, templateElementVars);
        }
        if (!hasBinding && !hasTemplateBinding) {
          attrs.push(_this.visitAttribute(attr, null));
          matchableAttrs.push([attr.name, attr.value]);
        }
      });
      var elementCssSelector = createElementCssSelector(nodeName, matchableAttrs);
      var _a = this._parseDirectives(this.selectorMatcher, elementCssSelector),
          directiveMetas = _a.directives,
          matchElement = _a.matchElement;
      var references = [];
      var directiveAsts = this._createDirectiveAsts(isTemplateElement, element.name, directiveMetas, elementOrDirectiveProps, elementOrDirectiveRefs, element.sourceSpan, references);
      var elementProps = this._createElementPropertyAsts(element.name, elementOrDirectiveProps, directiveAsts);
      var isViewRoot = parent.isTemplateElement || hasInlineTemplates;
      var providerContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, isViewRoot, directiveAsts, attrs, references, element.sourceSpan);
      var children = visitAll(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR : this, element.children, ElementContext.create(isTemplateElement, directiveAsts, isTemplateElement ? parent.providerContext : providerContext));
      providerContext.afterElement();
      var projectionSelector = isPresent(preparsedElement.projectAs) ? CssSelector.parse(preparsedElement.projectAs)[0] : elementCssSelector;
      var ngContentIndex = parent.findNgContentIndex(projectionSelector);
      var parsedElement;
      if (preparsedElement.type === PreparsedElementType.NG_CONTENT) {
        if (element.children && !element.children.every(_isEmptyTextNode)) {
          this._reportError("<ng-content> element cannot have content.", element.sourceSpan);
        }
        parsedElement = new NgContentAst(this.ngContentCount++, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);
      } else if (isTemplateElement) {
        this._assertAllEventsPublishedByDirectives(directiveAsts, events);
        this._assertNoComponentsNorElementBindingsOnTemplate(directiveAsts, elementProps, element.sourceSpan);
        parsedElement = new EmbeddedTemplateAst(attrs, events, references, elementVars, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, children, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);
      } else {
        this._assertElementExists(matchElement, element);
        this._assertOnlyOneComponent(directiveAsts, element.sourceSpan);
        var ngContentIndex_1 = hasInlineTemplates ? null : parent.findNgContentIndex(projectionSelector);
        parsedElement = new ElementAst(nodeName, attrs, elementProps, events, references, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, children, hasInlineTemplates ? null : ngContentIndex_1, element.sourceSpan, element.endSourceSpan);
        this._findComponentDirectives(directiveAsts).forEach(function(componentDirectiveAst) {
          return _this._validateElementAnimationInputOutputs(componentDirectiveAst.hostProperties, componentDirectiveAst.hostEvents, componentDirectiveAst.directive.template);
        });
        var componentTemplate = providerContext.viewContext.component.template;
        this._validateElementAnimationInputOutputs(elementProps, events, componentTemplate.toSummary());
      }
      if (hasInlineTemplates) {
        var templateCssSelector = createElementCssSelector(TEMPLATE_ELEMENT, templateMatchableAttrs);
        var templateDirectiveMetas = this._parseDirectives(this.selectorMatcher, templateCssSelector).directives;
        var templateDirectiveAsts = this._createDirectiveAsts(true, element.name, templateDirectiveMetas, templateElementOrDirectiveProps, [], element.sourceSpan, []);
        var templateElementProps = this._createElementPropertyAsts(element.name, templateElementOrDirectiveProps, templateDirectiveAsts);
        this._assertNoComponentsNorElementBindingsOnTemplate(templateDirectiveAsts, templateElementProps, element.sourceSpan);
        var templateProviderContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, parent.isTemplateElement, templateDirectiveAsts, [], [], element.sourceSpan);
        templateProviderContext.afterElement();
        parsedElement = new EmbeddedTemplateAst([], [], [], templateElementVars, templateProviderContext.transformedDirectiveAsts, templateProviderContext.transformProviders, templateProviderContext.transformedHasViewContainer, [parsedElement], ngContentIndex, element.sourceSpan);
      }
      return parsedElement;
    };
    TemplateParseVisitor.prototype._validateElementAnimationInputOutputs = function(inputs, outputs, template) {
      var _this = this;
      var triggerLookup = new Set();
      template.animations.forEach(function(entry) {
        triggerLookup.add(entry);
      });
      var animationInputs = inputs.filter(function(input) {
        return input.isAnimation;
      });
      animationInputs.forEach(function(input) {
        var name = input.name;
        if (!triggerLookup.has(name)) {
          _this._reportError("Couldn't find an animation entry for \"" + name + "\"", input.sourceSpan);
        }
      });
      outputs.forEach(function(output) {
        if (output.isAnimation) {
          var found = animationInputs.find(function(input) {
            return input.name == output.name;
          });
          if (!found) {
            _this._reportError("Unable to listen on (@" + output.name + "." + output.phase + ") because the animation trigger [@" + output.name + "] isn't being used on the same element", output.sourceSpan);
          }
        }
      });
    };
    TemplateParseVisitor.prototype._parseAttr = function(isTemplateElement, attr, targetMatchableAttrs, targetProps, targetEvents, targetRefs, targetVars) {
      var name = this._normalizeAttributeName(attr.name);
      var value = attr.value;
      var srcSpan = attr.sourceSpan;
      var bindParts = name.match(BIND_NAME_REGEXP);
      var hasBinding = false;
      if (bindParts !== null) {
        hasBinding = true;
        if (isPresent(bindParts[KW_BIND_IDX])) {
          this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
        } else if (bindParts[KW_LET_IDX]) {
          if (isTemplateElement) {
            var identifier = bindParts[IDENT_KW_IDX];
            this._parseVariable(identifier, value, srcSpan, targetVars);
          } else {
            this._reportError("\"let-\" is only supported on template elements.", srcSpan);
          }
        } else if (bindParts[KW_REF_IDX]) {
          var identifier = bindParts[IDENT_KW_IDX];
          this._parseReference(identifier, value, srcSpan, targetRefs);
        } else if (bindParts[KW_ON_IDX]) {
          this._bindingParser.parseEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
        } else if (bindParts[KW_BINDON_IDX]) {
          this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
          this._parseAssignmentEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
        } else if (bindParts[KW_AT_IDX]) {
          this._bindingParser.parseLiteralAttr(name, value, srcSpan, targetMatchableAttrs, targetProps);
        } else if (bindParts[IDENT_BANANA_BOX_IDX]) {
          this._bindingParser.parsePropertyBinding(bindParts[IDENT_BANANA_BOX_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
          this._parseAssignmentEvent(bindParts[IDENT_BANANA_BOX_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
        } else if (bindParts[IDENT_PROPERTY_IDX]) {
          this._bindingParser.parsePropertyBinding(bindParts[IDENT_PROPERTY_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
        } else if (bindParts[IDENT_EVENT_IDX]) {
          this._bindingParser.parseEvent(bindParts[IDENT_EVENT_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
        }
      } else {
        hasBinding = this._bindingParser.parsePropertyInterpolation(name, value, srcSpan, targetMatchableAttrs, targetProps);
      }
      if (!hasBinding) {
        this._bindingParser.parseLiteralAttr(name, value, srcSpan, targetMatchableAttrs, targetProps);
      }
      return hasBinding;
    };
    TemplateParseVisitor.prototype._normalizeAttributeName = function(attrName) {
      return /^data-/i.test(attrName) ? attrName.substring(5) : attrName;
    };
    TemplateParseVisitor.prototype._parseVariable = function(identifier, value, sourceSpan, targetVars) {
      if (identifier.indexOf('-') > -1) {
        this._reportError("\"-\" is not allowed in variable names", sourceSpan);
      }
      targetVars.push(new VariableAst(identifier, value, sourceSpan));
    };
    TemplateParseVisitor.prototype._parseReference = function(identifier, value, sourceSpan, targetRefs) {
      if (identifier.indexOf('-') > -1) {
        this._reportError("\"-\" is not allowed in reference names", sourceSpan);
      }
      targetRefs.push(new ElementOrDirectiveRef(identifier, value, sourceSpan));
    };
    TemplateParseVisitor.prototype._parseAssignmentEvent = function(name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
      this._bindingParser.parseEvent(name + "Change", expression + "=$event", sourceSpan, targetMatchableAttrs, targetEvents);
    };
    TemplateParseVisitor.prototype._parseDirectives = function(selectorMatcher, elementCssSelector) {
      var _this = this;
      var directives = new Array(this.directivesIndex.size);
      var matchElement = false;
      selectorMatcher.match(elementCssSelector, function(selector, directive) {
        directives[_this.directivesIndex.get(directive)] = directive;
        matchElement = matchElement || selector.hasElementSelector();
      });
      return {
        directives: directives.filter(function(dir) {
          return !!dir;
        }),
        matchElement: matchElement
      };
    };
    TemplateParseVisitor.prototype._createDirectiveAsts = function(isTemplateElement, elementName, directives, props, elementOrDirectiveRefs, elementSourceSpan, targetReferences) {
      var _this = this;
      var matchedReferences = new Set();
      var component = null;
      var directiveAsts = directives.map(function(directive) {
        var sourceSpan = new ParseSourceSpan(elementSourceSpan.start, elementSourceSpan.end, "Directive " + identifierName(directive.type));
        if (directive.isComponent) {
          component = directive;
        }
        var directiveProperties = [];
        var hostProperties = _this._bindingParser.createDirectiveHostPropertyAsts(directive, sourceSpan);
        _this._checkPropertiesInSchema(elementName, hostProperties);
        var hostEvents = _this._bindingParser.createDirectiveHostEventAsts(directive, sourceSpan);
        _this._createDirectivePropertyAsts(directive.inputs, props, directiveProperties);
        elementOrDirectiveRefs.forEach(function(elOrDirRef) {
          if ((elOrDirRef.value.length === 0 && directive.isComponent) || (directive.exportAs == elOrDirRef.value)) {
            targetReferences.push(new ReferenceAst(elOrDirRef.name, identifierToken(directive.type), elOrDirRef.sourceSpan));
            matchedReferences.add(elOrDirRef.name);
          }
        });
        return new DirectiveAst(directive, directiveProperties, hostProperties, hostEvents, sourceSpan);
      });
      elementOrDirectiveRefs.forEach(function(elOrDirRef) {
        if (elOrDirRef.value.length > 0) {
          if (!matchedReferences.has(elOrDirRef.name)) {
            _this._reportError("There is no directive with \"exportAs\" set to \"" + elOrDirRef.value + "\"", elOrDirRef.sourceSpan);
          }
        } else if (!component) {
          var refToken = null;
          if (isTemplateElement) {
            refToken = createIdentifierToken(Identifiers.TemplateRef);
          }
          targetReferences.push(new ReferenceAst(elOrDirRef.name, refToken, elOrDirRef.sourceSpan));
        }
      });
      return directiveAsts;
    };
    TemplateParseVisitor.prototype._createDirectivePropertyAsts = function(directiveProperties, boundProps, targetBoundDirectiveProps) {
      if (directiveProperties) {
        var boundPropsByName_1 = new Map();
        boundProps.forEach(function(boundProp) {
          var prevValue = boundPropsByName_1.get(boundProp.name);
          if (!prevValue || prevValue.isLiteral) {
            boundPropsByName_1.set(boundProp.name, boundProp);
          }
        });
        Object.keys(directiveProperties).forEach(function(dirProp) {
          var elProp = directiveProperties[dirProp];
          var boundProp = boundPropsByName_1.get(elProp);
          if (boundProp) {
            targetBoundDirectiveProps.push(new BoundDirectivePropertyAst(dirProp, boundProp.name, boundProp.expression, boundProp.sourceSpan));
          }
        });
      }
    };
    TemplateParseVisitor.prototype._createElementPropertyAsts = function(elementName, props, directives) {
      var _this = this;
      var boundElementProps = [];
      var boundDirectivePropsIndex = new Map();
      directives.forEach(function(directive) {
        directive.inputs.forEach(function(prop) {
          boundDirectivePropsIndex.set(prop.templateName, prop);
        });
      });
      props.forEach(function(prop) {
        if (!prop.isLiteral && !boundDirectivePropsIndex.get(prop.name)) {
          boundElementProps.push(_this._bindingParser.createElementPropertyAst(elementName, prop));
        }
      });
      this._checkPropertiesInSchema(elementName, boundElementProps);
      return boundElementProps;
    };
    TemplateParseVisitor.prototype._findComponentDirectives = function(directives) {
      return directives.filter(function(directive) {
        return directive.directive.isComponent;
      });
    };
    TemplateParseVisitor.prototype._findComponentDirectiveNames = function(directives) {
      return this._findComponentDirectives(directives).map(function(directive) {
        return identifierName(directive.directive.type);
      });
    };
    TemplateParseVisitor.prototype._assertOnlyOneComponent = function(directives, sourceSpan) {
      var componentTypeNames = this._findComponentDirectiveNames(directives);
      if (componentTypeNames.length > 1) {
        this._reportError("More than one component matched on this element.\n" + "Make sure that only one component's selector can match a given element.\n" + ("Conflicting components: " + componentTypeNames.join(',')), sourceSpan);
      }
    };
    TemplateParseVisitor.prototype._assertElementExists = function(matchElement, element) {
      var elName = element.name.replace(/^:xhtml:/, '');
      if (!matchElement && !this._schemaRegistry.hasElement(elName, this._schemas)) {
        var errorMsg = ("'" + elName + "' is not a known element:\n") + ("1. If '" + elName + "' is an Angular component, then verify that it is part of this module.\n") + ("2. If '" + elName + "' is a Web Component then add \"CUSTOM_ELEMENTS_SCHEMA\" to the '@NgModule.schemas' of this component to suppress this message.");
        this._reportError(errorMsg, element.sourceSpan);
      }
    };
    TemplateParseVisitor.prototype._assertNoComponentsNorElementBindingsOnTemplate = function(directives, elementProps, sourceSpan) {
      var _this = this;
      var componentTypeNames = this._findComponentDirectiveNames(directives);
      if (componentTypeNames.length > 0) {
        this._reportError("Components on an embedded template: " + componentTypeNames.join(','), sourceSpan);
      }
      elementProps.forEach(function(prop) {
        _this._reportError("Property binding " + prop.name + " not used by any directive on an embedded template. Make sure that the property name is spelled correctly and all directives are listed in the \"@NgModule.declarations\".", sourceSpan);
      });
    };
    TemplateParseVisitor.prototype._assertAllEventsPublishedByDirectives = function(directives, events) {
      var _this = this;
      var allDirectiveEvents = new Set();
      directives.forEach(function(directive) {
        Object.keys(directive.directive.outputs).forEach(function(k) {
          var eventName = directive.directive.outputs[k];
          allDirectiveEvents.add(eventName);
        });
      });
      events.forEach(function(event) {
        if (isPresent(event.target) || !allDirectiveEvents.has(event.name)) {
          _this._reportError("Event binding " + event.fullName + " not emitted by any directive on an embedded template. Make sure that the event name is spelled correctly and all directives are listed in the \"@NgModule.declarations\".", event.sourceSpan);
        }
      });
    };
    TemplateParseVisitor.prototype._checkPropertiesInSchema = function(elementName, boundProps) {
      var _this = this;
      boundProps.forEach(function(boundProp) {
        if (boundProp.type === PropertyBindingType.Property && !_this._schemaRegistry.hasProperty(elementName, boundProp.name, _this._schemas)) {
          var errorMsg = "Can't bind to '" + boundProp.name + "' since it isn't a known property of '" + elementName + "'.";
          if (elementName.indexOf('-') > -1) {
            errorMsg += ("\n1. If '" + elementName + "' is an Angular component and it has '" + boundProp.name + "' input, then verify that it is part of this module.") + ("\n2. If '" + elementName + "' is a Web Component then add \"CUSTOM_ELEMENTS_SCHEMA\" to the '@NgModule.schemas' of this component to suppress this message.\n");
          }
          _this._reportError(errorMsg, boundProp.sourceSpan);
        }
      });
    };
    TemplateParseVisitor.prototype._reportError = function(message, sourceSpan, level) {
      if (level === void 0) {
        level = ParseErrorLevel.FATAL;
      }
      this._targetErrors.push(new ParseError(sourceSpan, message, level));
    };
    return TemplateParseVisitor;
  }());
  var NonBindableVisitor = (function() {
    function NonBindableVisitor() {}
    NonBindableVisitor.prototype.visitElement = function(ast, parent) {
      var preparsedElement = preparseElement(ast);
      if (preparsedElement.type === PreparsedElementType.SCRIPT || preparsedElement.type === PreparsedElementType.STYLE || preparsedElement.type === PreparsedElementType.STYLESHEET) {
        return null;
      }
      var attrNameAndValues = ast.attrs.map(function(attr) {
        return [attr.name, attr.value];
      });
      var selector = createElementCssSelector(ast.name, attrNameAndValues);
      var ngContentIndex = parent.findNgContentIndex(selector);
      var children = visitAll(this, ast.children, EMPTY_ELEMENT_CONTEXT);
      return new ElementAst(ast.name, visitAll(this, ast.attrs), [], [], [], [], [], false, children, ngContentIndex, ast.sourceSpan, ast.endSourceSpan);
    };
    NonBindableVisitor.prototype.visitComment = function(comment, context) {
      return null;
    };
    NonBindableVisitor.prototype.visitAttribute = function(attribute, context) {
      return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);
    };
    NonBindableVisitor.prototype.visitText = function(text, parent) {
      var ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);
      return new TextAst(text.value, ngContentIndex, text.sourceSpan);
    };
    NonBindableVisitor.prototype.visitExpansion = function(expansion, context) {
      return expansion;
    };
    NonBindableVisitor.prototype.visitExpansionCase = function(expansionCase, context) {
      return expansionCase;
    };
    return NonBindableVisitor;
  }());
  var ElementOrDirectiveRef = (function() {
    function ElementOrDirectiveRef(name, value, sourceSpan) {
      this.name = name;
      this.value = value;
      this.sourceSpan = sourceSpan;
    }
    return ElementOrDirectiveRef;
  }());
  function splitClasses(classAttrValue) {
    return classAttrValue.trim().split(/\s+/g);
  }
  var ElementContext = (function() {
    function ElementContext(isTemplateElement, _ngContentIndexMatcher, _wildcardNgContentIndex, providerContext) {
      this.isTemplateElement = isTemplateElement;
      this._ngContentIndexMatcher = _ngContentIndexMatcher;
      this._wildcardNgContentIndex = _wildcardNgContentIndex;
      this.providerContext = providerContext;
    }
    ElementContext.create = function(isTemplateElement, directives, providerContext) {
      var matcher = new SelectorMatcher();
      var wildcardNgContentIndex = null;
      var component = directives.find(function(directive) {
        return directive.directive.isComponent;
      });
      if (component) {
        var ngContentSelectors = component.directive.template.ngContentSelectors;
        for (var i = 0; i < ngContentSelectors.length; i++) {
          var selector = ngContentSelectors[i];
          if (selector === '*') {
            wildcardNgContentIndex = i;
          } else {
            matcher.addSelectables(CssSelector.parse(ngContentSelectors[i]), i);
          }
        }
      }
      return new ElementContext(isTemplateElement, matcher, wildcardNgContentIndex, providerContext);
    };
    ElementContext.prototype.findNgContentIndex = function(selector) {
      var ngContentIndices = [];
      this._ngContentIndexMatcher.match(selector, function(selector, ngContentIndex) {
        ngContentIndices.push(ngContentIndex);
      });
      ngContentIndices.sort();
      if (isPresent(this._wildcardNgContentIndex)) {
        ngContentIndices.push(this._wildcardNgContentIndex);
      }
      return ngContentIndices.length > 0 ? ngContentIndices[0] : null;
    };
    return ElementContext;
  }());
  function createElementCssSelector(elementName, attributes) {
    var cssSelector = new CssSelector();
    var elNameNoNs = splitNsName(elementName)[1];
    cssSelector.setElement(elNameNoNs);
    for (var i = 0; i < attributes.length; i++) {
      var attrName = attributes[i][0];
      var attrNameNoNs = splitNsName(attrName)[1];
      var attrValue = attributes[i][1];
      cssSelector.addAttribute(attrNameNoNs, attrValue);
      if (attrName.toLowerCase() == CLASS_ATTR) {
        var classes = splitClasses(attrValue);
        classes.forEach(function(className) {
          return cssSelector.addClassName(className);
        });
      }
    }
    return cssSelector;
  }
  var EMPTY_ELEMENT_CONTEXT = new ElementContext(true, new SelectorMatcher(), null, null);
  var NON_BINDABLE_VISITOR = new NonBindableVisitor();
  function _isEmptyTextNode(node) {
    return node instanceof Text && node.value.trim().length == 0;
  }
  function removeSummaryDuplicates(items) {
    var map = new Map();
    items.forEach(function(item) {
      if (!map.get(item.type.reference)) {
        map.set(item.type.reference, item);
      }
    });
    return Array.from(map.values());
  }
  function unimplemented$2() {
    throw new Error('unimplemented');
  }
  var CompilerConfig = (function() {
    function CompilerConfig(_a) {
      var _b = _a === void 0 ? {} : _a,
          _c = _b.renderTypes,
          renderTypes = _c === void 0 ? new DefaultRenderTypes() : _c,
          _d = _b.defaultEncapsulation,
          defaultEncapsulation = _d === void 0 ? _angular_core.ViewEncapsulation.Emulated : _d,
          genDebugInfo = _b.genDebugInfo,
          logBindingUpdate = _b.logBindingUpdate,
          _e = _b.useJit,
          useJit = _e === void 0 ? true : _e;
      this.renderTypes = renderTypes;
      this.defaultEncapsulation = defaultEncapsulation;
      this._genDebugInfo = genDebugInfo;
      this._logBindingUpdate = logBindingUpdate;
      this.useJit = useJit;
    }
    Object.defineProperty(CompilerConfig.prototype, "genDebugInfo", {
      get: function() {
        return this._genDebugInfo === void 0 ? _angular_core.isDevMode() : this._genDebugInfo;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(CompilerConfig.prototype, "logBindingUpdate", {
      get: function() {
        return this._logBindingUpdate === void 0 ? _angular_core.isDevMode() : this._logBindingUpdate;
      },
      enumerable: true,
      configurable: true
    });
    return CompilerConfig;
  }());
  var RenderTypes = (function() {
    function RenderTypes() {}
    Object.defineProperty(RenderTypes.prototype, "renderer", {
      get: function() {
        return unimplemented$2();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(RenderTypes.prototype, "renderText", {
      get: function() {
        return unimplemented$2();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(RenderTypes.prototype, "renderElement", {
      get: function() {
        return unimplemented$2();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(RenderTypes.prototype, "renderComment", {
      get: function() {
        return unimplemented$2();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(RenderTypes.prototype, "renderNode", {
      get: function() {
        return unimplemented$2();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(RenderTypes.prototype, "renderEvent", {
      get: function() {
        return unimplemented$2();
      },
      enumerable: true,
      configurable: true
    });
    return RenderTypes;
  }());
  var DefaultRenderTypes = (function() {
    function DefaultRenderTypes() {
      this.renderText = null;
      this.renderElement = null;
      this.renderComment = null;
      this.renderNode = null;
      this.renderEvent = null;
    }
    Object.defineProperty(DefaultRenderTypes.prototype, "renderer", {
      get: function() {
        return createIdentifier(Identifiers.Renderer);
      },
      enumerable: true,
      configurable: true
    });
    ;
    return DefaultRenderTypes;
  }());
  var __extends$16 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var AnimationAst = (function() {
    function AnimationAst() {
      this.startTime = 0;
      this.playTime = 0;
    }
    AnimationAst.prototype.visit = function(visitor, context) {};
    return AnimationAst;
  }());
  var AnimationStateAst = (function(_super) {
    __extends$16(AnimationStateAst, _super);
    function AnimationStateAst() {
      _super.apply(this, arguments);
    }
    AnimationStateAst.prototype.visit = function(visitor, context) {};
    return AnimationStateAst;
  }(AnimationAst));
  var AnimationEntryAst = (function(_super) {
    __extends$16(AnimationEntryAst, _super);
    function AnimationEntryAst(name, stateDeclarations, stateTransitions) {
      _super.call(this);
      this.name = name;
      this.stateDeclarations = stateDeclarations;
      this.stateTransitions = stateTransitions;
    }
    AnimationEntryAst.prototype.visit = function(visitor, context) {
      return visitor.visitAnimationEntry(this, context);
    };
    return AnimationEntryAst;
  }(AnimationAst));
  var AnimationStateDeclarationAst = (function(_super) {
    __extends$16(AnimationStateDeclarationAst, _super);
    function AnimationStateDeclarationAst(stateName, styles) {
      _super.call(this);
      this.stateName = stateName;
      this.styles = styles;
    }
    AnimationStateDeclarationAst.prototype.visit = function(visitor, context) {
      return visitor.visitAnimationStateDeclaration(this, context);
    };
    return AnimationStateDeclarationAst;
  }(AnimationStateAst));
  var AnimationStateTransitionExpression = (function() {
    function AnimationStateTransitionExpression(fromState, toState) {
      this.fromState = fromState;
      this.toState = toState;
    }
    return AnimationStateTransitionExpression;
  }());
  var AnimationStateTransitionAst = (function(_super) {
    __extends$16(AnimationStateTransitionAst, _super);
    function AnimationStateTransitionAst(stateChanges, animation) {
      _super.call(this);
      this.stateChanges = stateChanges;
      this.animation = animation;
    }
    AnimationStateTransitionAst.prototype.visit = function(visitor, context) {
      return visitor.visitAnimationStateTransition(this, context);
    };
    return AnimationStateTransitionAst;
  }(AnimationStateAst));
  var AnimationStepAst = (function(_super) {
    __extends$16(AnimationStepAst, _super);
    function AnimationStepAst(startingStyles, keyframes, duration, delay, easing) {
      _super.call(this);
      this.startingStyles = startingStyles;
      this.keyframes = keyframes;
      this.duration = duration;
      this.delay = delay;
      this.easing = easing;
    }
    AnimationStepAst.prototype.visit = function(visitor, context) {
      return visitor.visitAnimationStep(this, context);
    };
    return AnimationStepAst;
  }(AnimationAst));
  var AnimationStylesAst = (function(_super) {
    __extends$16(AnimationStylesAst, _super);
    function AnimationStylesAst(styles) {
      _super.call(this);
      this.styles = styles;
    }
    AnimationStylesAst.prototype.visit = function(visitor, context) {
      return visitor.visitAnimationStyles(this, context);
    };
    return AnimationStylesAst;
  }(AnimationAst));
  var AnimationKeyframeAst = (function(_super) {
    __extends$16(AnimationKeyframeAst, _super);
    function AnimationKeyframeAst(offset, styles) {
      _super.call(this);
      this.offset = offset;
      this.styles = styles;
    }
    AnimationKeyframeAst.prototype.visit = function(visitor, context) {
      return visitor.visitAnimationKeyframe(this, context);
    };
    return AnimationKeyframeAst;
  }(AnimationAst));
  var AnimationWithStepsAst = (function(_super) {
    __extends$16(AnimationWithStepsAst, _super);
    function AnimationWithStepsAst(steps) {
      _super.call(this);
      this.steps = steps;
    }
    return AnimationWithStepsAst;
  }(AnimationAst));
  var AnimationGroupAst = (function(_super) {
    __extends$16(AnimationGroupAst, _super);
    function AnimationGroupAst(steps) {
      _super.call(this, steps);
    }
    AnimationGroupAst.prototype.visit = function(visitor, context) {
      return visitor.visitAnimationGroup(this, context);
    };
    return AnimationGroupAst;
  }(AnimationWithStepsAst));
  var AnimationSequenceAst = (function(_super) {
    __extends$16(AnimationSequenceAst, _super);
    function AnimationSequenceAst(steps) {
      _super.call(this, steps);
    }
    AnimationSequenceAst.prototype.visit = function(visitor, context) {
      return visitor.visitAnimationSequence(this, context);
    };
    return AnimationSequenceAst;
  }(AnimationWithStepsAst));
  var StylesCollectionEntry = (function() {
    function StylesCollectionEntry(time, value) {
      this.time = time;
      this.value = value;
    }
    StylesCollectionEntry.prototype.matches = function(time, value) {
      return time == this.time && value == this.value;
    };
    return StylesCollectionEntry;
  }());
  var StylesCollection = (function() {
    function StylesCollection() {
      this.styles = {};
    }
    StylesCollection.prototype.insertAtTime = function(property, time, value) {
      var tuple = new StylesCollectionEntry(time, value);
      var entries = this.styles[property];
      if (!isPresent(entries)) {
        entries = this.styles[property] = [];
      }
      var insertionIndex = 0;
      for (var i = entries.length - 1; i >= 0; i--) {
        if (entries[i].time <= time) {
          insertionIndex = i + 1;
          break;
        }
      }
      entries.splice(insertionIndex, 0, tuple);
    };
    StylesCollection.prototype.getByIndex = function(property, index) {
      var items = this.styles[property];
      if (isPresent(items)) {
        return index >= items.length ? null : items[index];
      }
      return null;
    };
    StylesCollection.prototype.indexOfAtOrBeforeTime = function(property, time) {
      var entries = this.styles[property];
      if (isPresent(entries)) {
        for (var i = entries.length - 1; i >= 0; i--) {
          if (entries[i].time <= time)
            return i;
        }
      }
      return null;
    };
    return StylesCollection;
  }());
  var __extends$15 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var __decorate$4 = (this && this.__decorate) || function(decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __metadata$4 = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var _INITIAL_KEYFRAME = 0;
  var _TERMINAL_KEYFRAME = 1;
  var _ONE_SECOND = 1000;
  var AnimationParseError = (function(_super) {
    __extends$15(AnimationParseError, _super);
    function AnimationParseError(message) {
      _super.call(this, null, message);
    }
    AnimationParseError.prototype.toString = function() {
      return "" + this.msg;
    };
    return AnimationParseError;
  }(ParseError));
  var AnimationEntryParseResult = (function() {
    function AnimationEntryParseResult(ast, errors) {
      this.ast = ast;
      this.errors = errors;
    }
    return AnimationEntryParseResult;
  }());
  var AnimationParser = (function() {
    function AnimationParser(_schema) {
      this._schema = _schema;
    }
    AnimationParser.prototype.parseComponent = function(component) {
      var _this = this;
      var errors = [];
      var componentName = identifierName(component.type);
      var animationTriggerNames = new Set();
      var asts = component.template.animations.map(function(entry) {
        var result = _this.parseEntry(entry);
        var ast = result.ast;
        var triggerName = ast.name;
        if (animationTriggerNames.has(triggerName)) {
          result.errors.push(new AnimationParseError("The animation trigger \"" + triggerName + "\" has already been registered for the " + componentName + " component"));
        } else {
          animationTriggerNames.add(triggerName);
        }
        if (result.errors.length > 0) {
          var errorMessage_1 = "- Unable to parse the animation sequence for \"" + triggerName + "\" on the " + componentName + " component due to the following errors:";
          result.errors.forEach(function(error) {
            errorMessage_1 += '\n-- ' + error.msg;
          });
          errors.push(errorMessage_1);
        }
        return ast;
      });
      if (errors.length > 0) {
        var errorString = errors.join('\n');
        throw new Error("Animation parse errors:\n" + errorString);
      }
      return asts;
    };
    AnimationParser.prototype.parseEntry = function(entry) {
      var _this = this;
      var errors = [];
      var stateStyles = {};
      var transitions = [];
      var stateDeclarationAsts = [];
      entry.definitions.forEach(function(def) {
        if (def instanceof CompileAnimationStateDeclarationMetadata) {
          _parseAnimationDeclarationStates(def, _this._schema, errors).forEach(function(ast) {
            stateDeclarationAsts.push(ast);
            stateStyles[ast.stateName] = ast.styles;
          });
        } else {
          transitions.push((def));
        }
      });
      var stateTransitionAsts = transitions.map(function(transDef) {
        return _parseAnimationStateTransition(transDef, stateStyles, _this._schema, errors);
      });
      var ast = new AnimationEntryAst(entry.name, stateDeclarationAsts, stateTransitionAsts);
      return new AnimationEntryParseResult(ast, errors);
    };
    AnimationParser = __decorate$4([CompilerInjectable(), __metadata$4('design:paramtypes', [ElementSchemaRegistry])], AnimationParser);
    return AnimationParser;
  }());
  function _parseAnimationDeclarationStates(stateMetadata, schema, errors) {
    var normalizedStyles = _normalizeStyleMetadata(stateMetadata.styles, {}, schema, errors, false);
    var defStyles = new AnimationStylesAst(normalizedStyles);
    var states = stateMetadata.stateNameExpr.split(/\s*,\s*/);
    return states.map(function(state) {
      return new AnimationStateDeclarationAst(state, defStyles);
    });
  }
  function _parseAnimationStateTransition(transitionStateMetadata, stateStyles, schema, errors) {
    var styles = new StylesCollection();
    var transitionExprs = [];
    var transitionStates = transitionStateMetadata.stateChangeExpr.split(/\s*,\s*/);
    transitionStates.forEach(function(expr) {
      transitionExprs.push.apply(transitionExprs, _parseAnimationTransitionExpr(expr, errors));
    });
    var entry = _normalizeAnimationEntry(transitionStateMetadata.steps);
    var animation = _normalizeStyleSteps(entry, stateStyles, schema, errors);
    var animationAst = _parseTransitionAnimation(animation, 0, styles, stateStyles, errors);
    if (errors.length == 0) {
      _fillAnimationAstStartingKeyframes(animationAst, styles, errors);
    }
    var stepsAst = (animationAst instanceof AnimationWithStepsAst) ? animationAst : new AnimationSequenceAst([animationAst]);
    return new AnimationStateTransitionAst(transitionExprs, stepsAst);
  }
  function _parseAnimationAlias(alias, errors) {
    switch (alias) {
      case ':enter':
        return 'void => *';
      case ':leave':
        return '* => void';
      default:
        errors.push(new AnimationParseError("the transition alias value \"" + alias + "\" is not supported"));
        return '* => *';
    }
  }
  function _parseAnimationTransitionExpr(eventStr, errors) {
    var expressions = [];
    if (eventStr[0] == ':') {
      eventStr = _parseAnimationAlias(eventStr, errors);
    }
    var match = eventStr.match(/^(\*|[-\w]+)\s*(<?[=-]>)\s*(\*|[-\w]+)$/);
    if (!isPresent(match) || match.length < 4) {
      errors.push(new AnimationParseError("the provided " + eventStr + " is not of a supported format"));
      return expressions;
    }
    var fromState = match[1];
    var separator = match[2];
    var toState = match[3];
    expressions.push(new AnimationStateTransitionExpression(fromState, toState));
    var isFullAnyStateExpr = fromState == ANY_STATE && toState == ANY_STATE;
    if (separator[0] == '<' && !isFullAnyStateExpr) {
      expressions.push(new AnimationStateTransitionExpression(toState, fromState));
    }
    return expressions;
  }
  function _normalizeAnimationEntry(entry) {
    return Array.isArray(entry) ? new CompileAnimationSequenceMetadata(entry) : entry;
  }
  function _normalizeStyleMetadata(entry, stateStyles, schema, errors, permitStateReferences) {
    var offset = entry.offset;
    if (offset > 1 || offset < 0) {
      errors.push(new AnimationParseError("Offset values for animations must be between 0 and 1"));
    }
    var normalizedStyles = [];
    entry.styles.forEach(function(styleEntry) {
      if (typeof styleEntry === 'string') {
        if (permitStateReferences) {
          normalizedStyles.push.apply(normalizedStyles, _resolveStylesFromState((styleEntry), stateStyles, errors));
        } else {
          errors.push(new AnimationParseError("State based animations cannot contain references to other states"));
        }
      } else {
        var stylesObj_1 = (styleEntry);
        var normalizedStylesObj_1 = {};
        Object.keys(stylesObj_1).forEach(function(propName) {
          var normalizedProp = schema.normalizeAnimationStyleProperty(propName);
          var normalizedOutput = schema.normalizeAnimationStyleValue(normalizedProp, propName, stylesObj_1[propName]);
          var normalizationError = normalizedOutput['error'];
          if (normalizationError) {
            errors.push(new AnimationParseError(normalizationError));
          }
          normalizedStylesObj_1[normalizedProp] = normalizedOutput['value'];
        });
        normalizedStyles.push(normalizedStylesObj_1);
      }
    });
    return normalizedStyles;
  }
  function _normalizeStyleSteps(entry, stateStyles, schema, errors) {
    var steps = _normalizeStyleStepEntry(entry, stateStyles, schema, errors);
    return (entry instanceof CompileAnimationGroupMetadata) ? new CompileAnimationGroupMetadata(steps) : new CompileAnimationSequenceMetadata(steps);
  }
  function _mergeAnimationStyles(stylesList, newItem) {
    if (typeof newItem === 'object' && newItem !== null && stylesList.length > 0) {
      var lastIndex = stylesList.length - 1;
      var lastItem = stylesList[lastIndex];
      if (typeof lastItem === 'object' && lastItem !== null) {
        stylesList[lastIndex] = StringMapWrapper.merge((lastItem), (newItem));
        return;
      }
    }
    stylesList.push(newItem);
  }
  function _normalizeStyleStepEntry(entry, stateStyles, schema, errors) {
    var steps;
    if (entry instanceof CompileAnimationWithStepsMetadata) {
      steps = entry.steps;
    } else {
      return [entry];
    }
    var newSteps = [];
    var combinedStyles;
    steps.forEach(function(step) {
      if (step instanceof CompileAnimationStyleMetadata) {
        if (!isPresent(combinedStyles)) {
          combinedStyles = [];
        }
        _normalizeStyleMetadata((step), stateStyles, schema, errors, true).forEach(function(entry) {
          _mergeAnimationStyles(combinedStyles, entry);
        });
      } else {
        if (isPresent(combinedStyles)) {
          newSteps.push(new CompileAnimationStyleMetadata(0, combinedStyles));
          combinedStyles = null;
        }
        if (step instanceof CompileAnimationAnimateMetadata) {
          var animateStyleValue = ((step)).styles;
          if (animateStyleValue instanceof CompileAnimationStyleMetadata) {
            animateStyleValue.styles = _normalizeStyleMetadata(animateStyleValue, stateStyles, schema, errors, true);
          } else if (animateStyleValue instanceof CompileAnimationKeyframesSequenceMetadata) {
            animateStyleValue.steps.forEach(function(step) {
              step.styles = _normalizeStyleMetadata(step, stateStyles, schema, errors, true);
            });
          }
        } else if (step instanceof CompileAnimationWithStepsMetadata) {
          var innerSteps = _normalizeStyleStepEntry(step, stateStyles, schema, errors);
          step = step instanceof CompileAnimationGroupMetadata ? new CompileAnimationGroupMetadata(innerSteps) : new CompileAnimationSequenceMetadata(innerSteps);
        }
        newSteps.push(step);
      }
    });
    if (isPresent(combinedStyles)) {
      newSteps.push(new CompileAnimationStyleMetadata(0, combinedStyles));
    }
    return newSteps;
  }
  function _resolveStylesFromState(stateName, stateStyles, errors) {
    var styles = [];
    if (stateName[0] != ':') {
      errors.push(new AnimationParseError("Animation states via styles must be prefixed with a \":\""));
    } else {
      var normalizedStateName = stateName.substring(1);
      var value = stateStyles[normalizedStateName];
      if (!isPresent(value)) {
        errors.push(new AnimationParseError("Unable to apply styles due to missing a state: \"" + normalizedStateName + "\""));
      } else {
        value.styles.forEach(function(stylesEntry) {
          if (typeof stylesEntry === 'object' && stylesEntry !== null) {
            styles.push((stylesEntry));
          }
        });
      }
    }
    return styles;
  }
  var _AnimationTimings = (function() {
    function _AnimationTimings(duration, delay, easing) {
      this.duration = duration;
      this.delay = delay;
      this.easing = easing;
    }
    return _AnimationTimings;
  }());
  function _parseAnimationKeyframes(keyframeSequence, currentTime, collectedStyles, stateStyles, errors) {
    var totalEntries = keyframeSequence.steps.length;
    var totalOffsets = 0;
    keyframeSequence.steps.forEach(function(step) {
      return totalOffsets += (isPresent(step.offset) ? 1 : 0);
    });
    if (totalOffsets > 0 && totalOffsets < totalEntries) {
      errors.push(new AnimationParseError("Not all style() entries contain an offset for the provided keyframe()"));
      totalOffsets = totalEntries;
    }
    var limit = totalEntries - 1;
    var margin = totalOffsets == 0 ? (1 / limit) : 0;
    var rawKeyframes = [];
    var index = 0;
    var doSortKeyframes = false;
    var lastOffset = 0;
    keyframeSequence.steps.forEach(function(styleMetadata) {
      var offset = styleMetadata.offset;
      var keyframeStyles = {};
      styleMetadata.styles.forEach(function(entry) {
        Object.keys(entry).forEach(function(prop) {
          if (prop != 'offset') {
            keyframeStyles[prop] = ((entry))[prop];
          }
        });
      });
      if (isPresent(offset)) {
        doSortKeyframes = doSortKeyframes || (offset < lastOffset);
      } else {
        offset = index == limit ? _TERMINAL_KEYFRAME : (margin * index);
      }
      rawKeyframes.push([offset, keyframeStyles]);
      lastOffset = offset;
      index++;
    });
    if (doSortKeyframes) {
      rawKeyframes.sort(function(a, b) {
        return a[0] <= b[0] ? -1 : 1;
      });
    }
    var firstKeyframe = rawKeyframes[0];
    if (firstKeyframe[0] != _INITIAL_KEYFRAME) {
      rawKeyframes.splice(0, 0, firstKeyframe = [_INITIAL_KEYFRAME, {}]);
    }
    var firstKeyframeStyles = firstKeyframe[1];
    limit = rawKeyframes.length - 1;
    var lastKeyframe = rawKeyframes[limit];
    if (lastKeyframe[0] != _TERMINAL_KEYFRAME) {
      rawKeyframes.push(lastKeyframe = [_TERMINAL_KEYFRAME, {}]);
      limit++;
    }
    var lastKeyframeStyles = lastKeyframe[1];
    for (var i = 1; i <= limit; i++) {
      var entry = rawKeyframes[i];
      var styles = entry[1];
      Object.keys(styles).forEach(function(prop) {
        if (!isPresent(firstKeyframeStyles[prop])) {
          firstKeyframeStyles[prop] = FILL_STYLE_FLAG;
        }
      });
    }
    var _loop_1 = function(i) {
      var entry = rawKeyframes[i];
      var styles = entry[1];
      Object.keys(styles).forEach(function(prop) {
        if (!isPresent(lastKeyframeStyles[prop])) {
          lastKeyframeStyles[prop] = styles[prop];
        }
      });
    };
    for (var i = limit - 1; i >= 0; i--) {
      _loop_1(i);
    }
    return rawKeyframes.map(function(entry) {
      return new AnimationKeyframeAst(entry[0], new AnimationStylesAst([entry[1]]));
    });
  }
  function _parseTransitionAnimation(entry, currentTime, collectedStyles, stateStyles, errors) {
    var ast;
    var playTime = 0;
    var startingTime = currentTime;
    if (entry instanceof CompileAnimationWithStepsMetadata) {
      var maxDuration_1 = 0;
      var steps_1 = [];
      var isGroup_1 = entry instanceof CompileAnimationGroupMetadata;
      var previousStyles_1;
      entry.steps.forEach(function(entry) {
        var time = isGroup_1 ? startingTime : currentTime;
        if (entry instanceof CompileAnimationStyleMetadata) {
          entry.styles.forEach(function(stylesEntry) {
            var map = (stylesEntry);
            Object.keys(map).forEach(function(prop) {
              collectedStyles.insertAtTime(prop, time, map[prop]);
            });
          });
          previousStyles_1 = entry.styles;
          return;
        }
        var innerAst = _parseTransitionAnimation(entry, time, collectedStyles, stateStyles, errors);
        if (isPresent(previousStyles_1)) {
          if (entry instanceof CompileAnimationWithStepsMetadata) {
            var startingStyles = new AnimationStylesAst(previousStyles_1);
            steps_1.push(new AnimationStepAst(startingStyles, [], 0, 0, ''));
          } else {
            var innerStep = (innerAst);
            (_a = innerStep.startingStyles.styles).push.apply(_a, previousStyles_1);
          }
          previousStyles_1 = null;
        }
        var astDuration = innerAst.playTime;
        currentTime += astDuration;
        playTime += astDuration;
        maxDuration_1 = Math.max(astDuration, maxDuration_1);
        steps_1.push(innerAst);
        var _a;
      });
      if (isPresent(previousStyles_1)) {
        var startingStyles = new AnimationStylesAst(previousStyles_1);
        steps_1.push(new AnimationStepAst(startingStyles, [], 0, 0, ''));
      }
      if (isGroup_1) {
        ast = new AnimationGroupAst(steps_1);
        playTime = maxDuration_1;
        currentTime = startingTime + playTime;
      } else {
        ast = new AnimationSequenceAst(steps_1);
      }
    } else if (entry instanceof CompileAnimationAnimateMetadata) {
      var timings = _parseTimeExpression(entry.timings, errors);
      var styles = entry.styles;
      var keyframes = void 0;
      if (styles instanceof CompileAnimationKeyframesSequenceMetadata) {
        keyframes = _parseAnimationKeyframes(styles, currentTime, collectedStyles, stateStyles, errors);
      } else {
        var styleData = (styles);
        var offset = _TERMINAL_KEYFRAME;
        var styleAst = new AnimationStylesAst((styleData.styles));
        var keyframe = new AnimationKeyframeAst(offset, styleAst);
        keyframes = [keyframe];
      }
      ast = new AnimationStepAst(new AnimationStylesAst([]), keyframes, timings.duration, timings.delay, timings.easing);
      playTime = timings.duration + timings.delay;
      currentTime += playTime;
      keyframes.forEach(function(keyframe) {
        return keyframe.styles.styles.forEach(function(entry) {
          return Object.keys(entry).forEach(function(prop) {
            collectedStyles.insertAtTime(prop, currentTime, entry[prop]);
          });
        });
      });
    } else {
      ast = new AnimationStepAst(null, [], 0, 0, '');
    }
    ast.playTime = playTime;
    ast.startTime = startingTime;
    return ast;
  }
  function _fillAnimationAstStartingKeyframes(ast, collectedStyles, errors) {
    if ((ast instanceof AnimationStepAst) && ast.keyframes.length > 0) {
      var keyframes = ast.keyframes;
      if (keyframes.length == 1) {
        var endKeyframe = keyframes[0];
        var startKeyframe = _createStartKeyframeFromEndKeyframe(endKeyframe, ast.startTime, ast.playTime, collectedStyles, errors);
        ast.keyframes = [startKeyframe, endKeyframe];
      }
    } else if (ast instanceof AnimationWithStepsAst) {
      ast.steps.forEach(function(entry) {
        return _fillAnimationAstStartingKeyframes(entry, collectedStyles, errors);
      });
    }
  }
  function _parseTimeExpression(exp, errors) {
    var regex = /^([\.\d]+)(m?s)(?:\s+([\.\d]+)(m?s))?(?:\s+([-a-z]+(?:\(.+?\))?))?/i;
    var duration;
    var delay = 0;
    var easing = null;
    if (typeof exp === 'string') {
      var matches = exp.match(regex);
      if (matches === null) {
        errors.push(new AnimationParseError("The provided timing value \"" + exp + "\" is invalid."));
        return new _AnimationTimings(0, 0, null);
      }
      var durationMatch = parseFloat(matches[1]);
      var durationUnit = matches[2];
      if (durationUnit == 's') {
        durationMatch *= _ONE_SECOND;
      }
      duration = Math.floor(durationMatch);
      var delayMatch = matches[3];
      var delayUnit = matches[4];
      if (isPresent(delayMatch)) {
        var delayVal = parseFloat(delayMatch);
        if (isPresent(delayUnit) && delayUnit == 's') {
          delayVal *= _ONE_SECOND;
        }
        delay = Math.floor(delayVal);
      }
      var easingVal = matches[5];
      if (!isBlank(easingVal)) {
        easing = easingVal;
      }
    } else {
      duration = (exp);
    }
    return new _AnimationTimings(duration, delay, easing);
  }
  function _createStartKeyframeFromEndKeyframe(endKeyframe, startTime, duration, collectedStyles, errors) {
    var values = {};
    var endTime = startTime + duration;
    endKeyframe.styles.styles.forEach(function(styleData) {
      Object.keys(styleData).forEach(function(prop) {
        var val = styleData[prop];
        if (prop == 'offset')
          return;
        var resultIndex = collectedStyles.indexOfAtOrBeforeTime(prop, startTime);
        var resultEntry,
            nextEntry,
            value;
        if (isPresent(resultIndex)) {
          resultEntry = collectedStyles.getByIndex(prop, resultIndex);
          value = resultEntry.value;
          nextEntry = collectedStyles.getByIndex(prop, resultIndex + 1);
        } else {
          value = FILL_STYLE_FLAG;
        }
        if (isPresent(nextEntry) && !nextEntry.matches(endTime, val)) {
          errors.push(new AnimationParseError("The animated CSS property \"" + prop + "\" unexpectedly changes between steps \"" + resultEntry.time + "ms\" and \"" + endTime + "ms\" at \"" + nextEntry.time + "ms\""));
        }
        values[prop] = value;
      });
    });
    return new AnimationKeyframeAst(_INITIAL_KEYFRAME, new AnimationStylesAst([values]));
  }
  var ResourceLoader = (function() {
    function ResourceLoader() {}
    ResourceLoader.prototype.get = function(url) {
      return null;
    };
    return ResourceLoader;
  }());
  var __decorate$6 = (this && this.__decorate) || function(decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __metadata$6 = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  function createUrlResolverWithoutPackagePrefix() {
    return new UrlResolver();
  }
  function createOfflineCompileUrlResolver() {
    return new UrlResolver('.');
  }
  var DEFAULT_PACKAGE_URL_PROVIDER = {
    provide: _angular_core.PACKAGE_ROOT_URL,
    useValue: '/'
  };
  var UrlResolver = (function() {
    function UrlResolver(_packagePrefix) {
      if (_packagePrefix === void 0) {
        _packagePrefix = null;
      }
      this._packagePrefix = _packagePrefix;
    }
    UrlResolver.prototype.resolve = function(baseUrl, url) {
      var resolvedUrl = url;
      if (isPresent(baseUrl) && baseUrl.length > 0) {
        resolvedUrl = _resolveUrl(baseUrl, resolvedUrl);
      }
      var resolvedParts = _split(resolvedUrl);
      var prefix = this._packagePrefix;
      if (isPresent(prefix) && isPresent(resolvedParts) && resolvedParts[_ComponentIndex.Scheme] == 'package') {
        var path = resolvedParts[_ComponentIndex.Path];
        prefix = prefix.replace(/\/+$/, '');
        path = path.replace(/^\/+/, '');
        return prefix + "/" + path;
      }
      return resolvedUrl;
    };
    UrlResolver.ctorParameters = function() {
      return [{
        type: undefined,
        decorators: [{
          type: _angular_core.Inject,
          args: [_angular_core.PACKAGE_ROOT_URL]
        }]
      }];
    };
    UrlResolver = __decorate$6([CompilerInjectable(), __metadata$6('design:paramtypes', [String])], UrlResolver);
    return UrlResolver;
  }());
  function getUrlScheme(url) {
    var match = _split(url);
    return (match && match[_ComponentIndex.Scheme]) || '';
  }
  function _buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
    var out = [];
    if (isPresent(opt_scheme)) {
      out.push(opt_scheme + ':');
    }
    if (isPresent(opt_domain)) {
      out.push('//');
      if (isPresent(opt_userInfo)) {
        out.push(opt_userInfo + '@');
      }
      out.push(opt_domain);
      if (isPresent(opt_port)) {
        out.push(':' + opt_port);
      }
    }
    if (isPresent(opt_path)) {
      out.push(opt_path);
    }
    if (isPresent(opt_queryData)) {
      out.push('?' + opt_queryData);
    }
    if (isPresent(opt_fragment)) {
      out.push('#' + opt_fragment);
    }
    return out.join('');
  }
  var _splitRe = new RegExp('^' + '(?:' + '([^:/?#.]+)' + ':)?' + '(?://' + '(?:([^/?#]*)@)?' + '([\\w\\d\\-\\u0100-\\uffff.%]*)' + '(?::([0-9]+))?' + ')?' + '([^?#]+)?' + '(?:\\?([^#]*))?' + '(?:#(.*))?' + '$');
  var _ComponentIndex = {};
  _ComponentIndex.Scheme = 1;
  _ComponentIndex.UserInfo = 2;
  _ComponentIndex.Domain = 3;
  _ComponentIndex.Port = 4;
  _ComponentIndex.Path = 5;
  _ComponentIndex.QueryData = 6;
  _ComponentIndex.Fragment = 7;
  _ComponentIndex[_ComponentIndex.Scheme] = "Scheme";
  _ComponentIndex[_ComponentIndex.UserInfo] = "UserInfo";
  _ComponentIndex[_ComponentIndex.Domain] = "Domain";
  _ComponentIndex[_ComponentIndex.Port] = "Port";
  _ComponentIndex[_ComponentIndex.Path] = "Path";
  _ComponentIndex[_ComponentIndex.QueryData] = "QueryData";
  _ComponentIndex[_ComponentIndex.Fragment] = "Fragment";
  function _split(uri) {
    return uri.match(_splitRe);
  }
  function _removeDotSegments(path) {
    if (path == '/')
      return '/';
    var leadingSlash = path[0] == '/' ? '/' : '';
    var trailingSlash = path[path.length - 1] === '/' ? '/' : '';
    var segments = path.split('/');
    var out = [];
    var up = 0;
    for (var pos = 0; pos < segments.length; pos++) {
      var segment = segments[pos];
      switch (segment) {
        case '':
        case '.':
          break;
        case '..':
          if (out.length > 0) {
            out.pop();
          } else {
            up++;
          }
          break;
        default:
          out.push(segment);
      }
    }
    if (leadingSlash == '') {
      while (up-- > 0) {
        out.unshift('..');
      }
      if (out.length === 0)
        out.push('.');
    }
    return leadingSlash + out.join('/') + trailingSlash;
  }
  function _joinAndCanonicalizePath(parts) {
    var path = parts[_ComponentIndex.Path];
    path = isBlank(path) ? '' : _removeDotSegments(path);
    parts[_ComponentIndex.Path] = path;
    return _buildFromEncodedParts(parts[_ComponentIndex.Scheme], parts[_ComponentIndex.UserInfo], parts[_ComponentIndex.Domain], parts[_ComponentIndex.Port], path, parts[_ComponentIndex.QueryData], parts[_ComponentIndex.Fragment]);
  }
  function _resolveUrl(base, url) {
    var parts = _split(encodeURI(url));
    var baseParts = _split(base);
    if (isPresent(parts[_ComponentIndex.Scheme])) {
      return _joinAndCanonicalizePath(parts);
    } else {
      parts[_ComponentIndex.Scheme] = baseParts[_ComponentIndex.Scheme];
    }
    for (var i = _ComponentIndex.Scheme; i <= _ComponentIndex.Port; i++) {
      if (isBlank(parts[i])) {
        parts[i] = baseParts[i];
      }
    }
    if (parts[_ComponentIndex.Path][0] == '/') {
      return _joinAndCanonicalizePath(parts);
    }
    var path = baseParts[_ComponentIndex.Path];
    if (isBlank(path))
      path = '/';
    var index = path.lastIndexOf('/');
    path = path.substring(0, index + 1) + parts[_ComponentIndex.Path];
    parts[_ComponentIndex.Path] = path;
    return _joinAndCanonicalizePath(parts);
  }
  var __decorate$5 = (this && this.__decorate) || function(decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __metadata$5 = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var DirectiveNormalizer = (function() {
    function DirectiveNormalizer(_resourceLoader, _urlResolver, _htmlParser, _config) {
      this._resourceLoader = _resourceLoader;
      this._urlResolver = _urlResolver;
      this._htmlParser = _htmlParser;
      this._config = _config;
      this._resourceLoaderCache = new Map();
    }
    DirectiveNormalizer.prototype.clearCache = function() {
      this._resourceLoaderCache.clear();
    };
    DirectiveNormalizer.prototype.clearCacheFor = function(normalizedDirective) {
      var _this = this;
      if (!normalizedDirective.isComponent) {
        return;
      }
      this._resourceLoaderCache.delete(normalizedDirective.template.templateUrl);
      normalizedDirective.template.externalStylesheets.forEach(function(stylesheet) {
        _this._resourceLoaderCache.delete(stylesheet.moduleUrl);
      });
    };
    DirectiveNormalizer.prototype._fetch = function(url) {
      var result = this._resourceLoaderCache.get(url);
      if (!result) {
        result = this._resourceLoader.get(url);
        this._resourceLoaderCache.set(url, result);
      }
      return result;
    };
    DirectiveNormalizer.prototype.normalizeTemplate = function(prenormData) {
      var _this = this;
      var normalizedTemplateSync = null;
      var normalizedTemplateAsync;
      if (isPresent(prenormData.template)) {
        normalizedTemplateSync = this.normalizeTemplateSync(prenormData);
        normalizedTemplateAsync = Promise.resolve(normalizedTemplateSync);
      } else if (prenormData.templateUrl) {
        normalizedTemplateAsync = this.normalizeTemplateAsync(prenormData);
      } else {
        throw new SyntaxError("No template specified for component " + stringify(prenormData.componentType));
      }
      if (normalizedTemplateSync && normalizedTemplateSync.styleUrls.length === 0) {
        return new SyncAsyncResult(normalizedTemplateSync);
      } else {
        return new SyncAsyncResult(null, normalizedTemplateAsync.then(function(normalizedTemplate) {
          return _this.normalizeExternalStylesheets(normalizedTemplate);
        }));
      }
    };
    DirectiveNormalizer.prototype.normalizeTemplateSync = function(prenomData) {
      return this.normalizeLoadedTemplate(prenomData, prenomData.template, prenomData.moduleUrl);
    };
    DirectiveNormalizer.prototype.normalizeTemplateAsync = function(prenomData) {
      var _this = this;
      var templateUrl = this._urlResolver.resolve(prenomData.moduleUrl, prenomData.templateUrl);
      return this._fetch(templateUrl).then(function(value) {
        return _this.normalizeLoadedTemplate(prenomData, value, templateUrl);
      });
    };
    DirectiveNormalizer.prototype.normalizeLoadedTemplate = function(prenomData, template, templateAbsUrl) {
      var interpolationConfig = InterpolationConfig.fromArray(prenomData.interpolation);
      var rootNodesAndErrors = this._htmlParser.parse(template, stringify(prenomData.componentType), false, interpolationConfig);
      if (rootNodesAndErrors.errors.length > 0) {
        var errorString = rootNodesAndErrors.errors.join('\n');
        throw new SyntaxError("Template parse errors:\n" + errorString);
      }
      var templateMetadataStyles = this.normalizeStylesheet(new CompileStylesheetMetadata({
        styles: prenomData.styles,
        styleUrls: prenomData.styleUrls,
        moduleUrl: prenomData.moduleUrl
      }));
      var visitor = new TemplatePreparseVisitor();
      visitAll(visitor, rootNodesAndErrors.rootNodes);
      var templateStyles = this.normalizeStylesheet(new CompileStylesheetMetadata({
        styles: visitor.styles,
        styleUrls: visitor.styleUrls,
        moduleUrl: templateAbsUrl
      }));
      var encapsulation = prenomData.encapsulation;
      if (isBlank(encapsulation)) {
        encapsulation = this._config.defaultEncapsulation;
      }
      var styles = templateMetadataStyles.styles.concat(templateStyles.styles);
      var styleUrls = templateMetadataStyles.styleUrls.concat(templateStyles.styleUrls);
      if (encapsulation === _angular_core.ViewEncapsulation.Emulated && styles.length === 0 && styleUrls.length === 0) {
        encapsulation = _angular_core.ViewEncapsulation.None;
      }
      return new CompileTemplateMetadata({
        encapsulation: encapsulation,
        template: template,
        templateUrl: templateAbsUrl,
        styles: styles,
        styleUrls: styleUrls,
        ngContentSelectors: visitor.ngContentSelectors,
        animations: prenomData.animations,
        interpolation: prenomData.interpolation
      });
    };
    DirectiveNormalizer.prototype.normalizeExternalStylesheets = function(templateMeta) {
      return this._loadMissingExternalStylesheets(templateMeta.styleUrls).then(function(externalStylesheets) {
        return new CompileTemplateMetadata({
          encapsulation: templateMeta.encapsulation,
          template: templateMeta.template,
          templateUrl: templateMeta.templateUrl,
          styles: templateMeta.styles,
          styleUrls: templateMeta.styleUrls,
          externalStylesheets: externalStylesheets,
          ngContentSelectors: templateMeta.ngContentSelectors,
          animations: templateMeta.animations,
          interpolation: templateMeta.interpolation
        });
      });
    };
    DirectiveNormalizer.prototype._loadMissingExternalStylesheets = function(styleUrls, loadedStylesheets) {
      var _this = this;
      if (loadedStylesheets === void 0) {
        loadedStylesheets = new Map();
      }
      return Promise.all(styleUrls.filter(function(styleUrl) {
        return !loadedStylesheets.has(styleUrl);
      }).map(function(styleUrl) {
        return _this._fetch(styleUrl).then(function(loadedStyle) {
          var stylesheet = _this.normalizeStylesheet(new CompileStylesheetMetadata({
            styles: [loadedStyle],
            moduleUrl: styleUrl
          }));
          loadedStylesheets.set(styleUrl, stylesheet);
          return _this._loadMissingExternalStylesheets(stylesheet.styleUrls, loadedStylesheets);
        });
      })).then(function(_) {
        return Array.from(loadedStylesheets.values());
      });
    };
    DirectiveNormalizer.prototype.normalizeStylesheet = function(stylesheet) {
      var _this = this;
      var allStyleUrls = stylesheet.styleUrls.filter(isStyleUrlResolvable).map(function(url) {
        return _this._urlResolver.resolve(stylesheet.moduleUrl, url);
      });
      var allStyles = stylesheet.styles.map(function(style) {
        var styleWithImports = extractStyleUrls(_this._urlResolver, stylesheet.moduleUrl, style);
        allStyleUrls.push.apply(allStyleUrls, styleWithImports.styleUrls);
        return styleWithImports.style;
      });
      return new CompileStylesheetMetadata({
        styles: allStyles,
        styleUrls: allStyleUrls,
        moduleUrl: stylesheet.moduleUrl
      });
    };
    DirectiveNormalizer = __decorate$5([CompilerInjectable(), __metadata$5('design:paramtypes', [ResourceLoader, UrlResolver, HtmlParser, CompilerConfig])], DirectiveNormalizer);
    return DirectiveNormalizer;
  }());
  var TemplatePreparseVisitor = (function() {
    function TemplatePreparseVisitor() {
      this.ngContentSelectors = [];
      this.styles = [];
      this.styleUrls = [];
      this.ngNonBindableStackCount = 0;
    }
    TemplatePreparseVisitor.prototype.visitElement = function(ast, context) {
      var preparsedElement = preparseElement(ast);
      switch (preparsedElement.type) {
        case PreparsedElementType.NG_CONTENT:
          if (this.ngNonBindableStackCount === 0) {
            this.ngContentSelectors.push(preparsedElement.selectAttr);
          }
          break;
        case PreparsedElementType.STYLE:
          var textContent_1 = '';
          ast.children.forEach(function(child) {
            if (child instanceof Text) {
              textContent_1 += child.value;
            }
          });
          this.styles.push(textContent_1);
          break;
        case PreparsedElementType.STYLESHEET:
          this.styleUrls.push(preparsedElement.hrefAttr);
          break;
        default:
          break;
      }
      if (preparsedElement.nonBindable) {
        this.ngNonBindableStackCount++;
      }
      visitAll(this, ast.children);
      if (preparsedElement.nonBindable) {
        this.ngNonBindableStackCount--;
      }
      return null;
    };
    TemplatePreparseVisitor.prototype.visitComment = function(ast, context) {
      return null;
    };
    TemplatePreparseVisitor.prototype.visitAttribute = function(ast, context) {
      return null;
    };
    TemplatePreparseVisitor.prototype.visitText = function(ast, context) {
      return null;
    };
    TemplatePreparseVisitor.prototype.visitExpansion = function(ast, context) {
      return null;
    };
    TemplatePreparseVisitor.prototype.visitExpansionCase = function(ast, context) {
      return null;
    };
    return TemplatePreparseVisitor;
  }());
  var __decorate$7 = (this && this.__decorate) || function(decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __metadata$7 = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var DirectiveResolver = (function() {
    function DirectiveResolver(_reflector) {
      if (_reflector === void 0) {
        _reflector = reflector;
      }
      this._reflector = _reflector;
    }
    DirectiveResolver.prototype.isDirective = function(type) {
      var typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type));
      return typeMetadata && typeMetadata.some(isDirectiveMetadata);
    };
    DirectiveResolver.prototype.resolve = function(type, throwIfNotFound) {
      if (throwIfNotFound === void 0) {
        throwIfNotFound = true;
      }
      var typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type));
      if (typeMetadata) {
        var metadata = ListWrapper.findLast(typeMetadata, isDirectiveMetadata);
        if (metadata) {
          var propertyMetadata = this._reflector.propMetadata(type);
          return this._mergeWithPropertyMetadata(metadata, propertyMetadata, type);
        }
      }
      if (throwIfNotFound) {
        throw new Error("No Directive annotation found on " + stringify(type));
      }
      return null;
    };
    DirectiveResolver.prototype._mergeWithPropertyMetadata = function(dm, propertyMetadata, directiveType) {
      var inputs = [];
      var outputs = [];
      var host = {};
      var queries = {};
      Object.keys(propertyMetadata).forEach(function(propName) {
        var input = ListWrapper.findLast(propertyMetadata[propName], function(a) {
          return a instanceof _angular_core.Input;
        });
        if (input) {
          if (input.bindingPropertyName) {
            inputs.push(propName + ": " + input.bindingPropertyName);
          } else {
            inputs.push(propName);
          }
        }
        var output = ListWrapper.findLast(propertyMetadata[propName], function(a) {
          return a instanceof _angular_core.Output;
        });
        if (output) {
          if (output.bindingPropertyName) {
            outputs.push(propName + ": " + output.bindingPropertyName);
          } else {
            outputs.push(propName);
          }
        }
        var hostBindings = propertyMetadata[propName].filter(function(a) {
          return a && a instanceof _angular_core.HostBinding;
        });
        hostBindings.forEach(function(hostBinding) {
          if (hostBinding.hostPropertyName) {
            var startWith = hostBinding.hostPropertyName[0];
            if (startWith === '(') {
              throw new Error("@HostBinding can not bind to events. Use @HostListener instead.");
            } else if (startWith === '[') {
              throw new Error("@HostBinding parameter should be a property name, 'class.<name>', or 'attr.<name>'.");
            }
            host[("[" + hostBinding.hostPropertyName + "]")] = propName;
          } else {
            host[("[" + propName + "]")] = propName;
          }
        });
        var hostListeners = propertyMetadata[propName].filter(function(a) {
          return a && a instanceof _angular_core.HostListener;
        });
        hostListeners.forEach(function(hostListener) {
          var args = hostListener.args || [];
          host[("(" + hostListener.eventName + ")")] = propName + "(" + args.join(',') + ")";
        });
        var query = ListWrapper.findLast(propertyMetadata[propName], function(a) {
          return a instanceof _angular_core.Query;
        });
        if (query) {
          queries[propName] = query;
        }
      });
      return this._merge(dm, inputs, outputs, host, queries, directiveType);
    };
    DirectiveResolver.prototype._extractPublicName = function(def) {
      return splitAtColon(def, [null, def])[1].trim();
    };
    DirectiveResolver.prototype._dedupeBindings = function(bindings) {
      var names = new Set();
      var reversedResult = [];
      for (var i = bindings.length - 1; i >= 0; i--) {
        var binding = bindings[i];
        var name_1 = this._extractPublicName(binding);
        if (!names.has(name_1)) {
          names.add(name_1);
          reversedResult.push(binding);
        }
      }
      return reversedResult.reverse();
    };
    DirectiveResolver.prototype._merge = function(directive, inputs, outputs, host, queries, directiveType) {
      var mergedInputs = this._dedupeBindings(directive.inputs ? directive.inputs.concat(inputs) : inputs);
      var mergedOutputs = this._dedupeBindings(directive.outputs ? directive.outputs.concat(outputs) : outputs);
      var mergedHost = directive.host ? StringMapWrapper.merge(directive.host, host) : host;
      var mergedQueries = directive.queries ? StringMapWrapper.merge(directive.queries, queries) : queries;
      if (directive instanceof _angular_core.Component) {
        return new _angular_core.Component({
          selector: directive.selector,
          inputs: mergedInputs,
          outputs: mergedOutputs,
          host: mergedHost,
          exportAs: directive.exportAs,
          moduleId: directive.moduleId,
          queries: mergedQueries,
          changeDetection: directive.changeDetection,
          providers: directive.providers,
          viewProviders: directive.viewProviders,
          entryComponents: directive.entryComponents,
          template: directive.template,
          templateUrl: directive.templateUrl,
          styles: directive.styles,
          styleUrls: directive.styleUrls,
          encapsulation: directive.encapsulation,
          animations: directive.animations,
          interpolation: directive.interpolation
        });
      } else {
        return new _angular_core.Directive({
          selector: directive.selector,
          inputs: mergedInputs,
          outputs: mergedOutputs,
          host: mergedHost,
          exportAs: directive.exportAs,
          queries: mergedQueries,
          providers: directive.providers
        });
      }
    };
    DirectiveResolver = __decorate$7([CompilerInjectable(), __metadata$7('design:paramtypes', [ReflectorReader])], DirectiveResolver);
    return DirectiveResolver;
  }());
  function isDirectiveMetadata(type) {
    return type instanceof _angular_core.Directive;
  }
  var __extends$17 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var TypeModifier = {};
  TypeModifier.Const = 0;
  TypeModifier[TypeModifier.Const] = "Const";
  var Type$1 = (function() {
    function Type(modifiers) {
      if (modifiers === void 0) {
        modifiers = null;
      }
      this.modifiers = modifiers;
      if (!modifiers) {
        this.modifiers = [];
      }
    }
    Type.prototype.visitType = function(visitor, context) {};
    Type.prototype.hasModifier = function(modifier) {
      return this.modifiers.indexOf(modifier) !== -1;
    };
    return Type;
  }());
  var BuiltinTypeName = {};
  BuiltinTypeName.Dynamic = 0;
  BuiltinTypeName.Bool = 1;
  BuiltinTypeName.String = 2;
  BuiltinTypeName.Int = 3;
  BuiltinTypeName.Number = 4;
  BuiltinTypeName.Function = 5;
  BuiltinTypeName.Null = 6;
  BuiltinTypeName[BuiltinTypeName.Dynamic] = "Dynamic";
  BuiltinTypeName[BuiltinTypeName.Bool] = "Bool";
  BuiltinTypeName[BuiltinTypeName.String] = "String";
  BuiltinTypeName[BuiltinTypeName.Int] = "Int";
  BuiltinTypeName[BuiltinTypeName.Number] = "Number";
  BuiltinTypeName[BuiltinTypeName.Function] = "Function";
  BuiltinTypeName[BuiltinTypeName.Null] = "Null";
  var BuiltinType = (function(_super) {
    __extends$17(BuiltinType, _super);
    function BuiltinType(name, modifiers) {
      if (modifiers === void 0) {
        modifiers = null;
      }
      _super.call(this, modifiers);
      this.name = name;
    }
    BuiltinType.prototype.visitType = function(visitor, context) {
      return visitor.visitBuiltintType(this, context);
    };
    return BuiltinType;
  }(Type$1));
  var ExpressionType = (function(_super) {
    __extends$17(ExpressionType, _super);
    function ExpressionType(value, typeParams, modifiers) {
      if (typeParams === void 0) {
        typeParams = null;
      }
      if (modifiers === void 0) {
        modifiers = null;
      }
      _super.call(this, modifiers);
      this.value = value;
      this.typeParams = typeParams;
    }
    ExpressionType.prototype.visitType = function(visitor, context) {
      return visitor.visitExpressionType(this, context);
    };
    return ExpressionType;
  }(Type$1));
  var ArrayType = (function(_super) {
    __extends$17(ArrayType, _super);
    function ArrayType(of, modifiers) {
      if (modifiers === void 0) {
        modifiers = null;
      }
      _super.call(this, modifiers);
      this.of = of;
    }
    ArrayType.prototype.visitType = function(visitor, context) {
      return visitor.visitArrayType(this, context);
    };
    return ArrayType;
  }(Type$1));
  var MapType = (function(_super) {
    __extends$17(MapType, _super);
    function MapType(valueType, modifiers) {
      if (modifiers === void 0) {
        modifiers = null;
      }
      _super.call(this, modifiers);
      this.valueType = valueType;
    }
    MapType.prototype.visitType = function(visitor, context) {
      return visitor.visitMapType(this, context);
    };
    return MapType;
  }(Type$1));
  var DYNAMIC_TYPE = new BuiltinType(BuiltinTypeName.Dynamic);
  var BOOL_TYPE = new BuiltinType(BuiltinTypeName.Bool);
  var INT_TYPE = new BuiltinType(BuiltinTypeName.Int);
  var NUMBER_TYPE = new BuiltinType(BuiltinTypeName.Number);
  var STRING_TYPE = new BuiltinType(BuiltinTypeName.String);
  var FUNCTION_TYPE = new BuiltinType(BuiltinTypeName.Function);
  var NULL_TYPE = new BuiltinType(BuiltinTypeName.Null);
  var BinaryOperator = {};
  BinaryOperator.Equals = 0;
  BinaryOperator.NotEquals = 1;
  BinaryOperator.Identical = 2;
  BinaryOperator.NotIdentical = 3;
  BinaryOperator.Minus = 4;
  BinaryOperator.Plus = 5;
  BinaryOperator.Divide = 6;
  BinaryOperator.Multiply = 7;
  BinaryOperator.Modulo = 8;
  BinaryOperator.And = 9;
  BinaryOperator.Or = 10;
  BinaryOperator.Lower = 11;
  BinaryOperator.LowerEquals = 12;
  BinaryOperator.Bigger = 13;
  BinaryOperator.BiggerEquals = 14;
  BinaryOperator[BinaryOperator.Equals] = "Equals";
  BinaryOperator[BinaryOperator.NotEquals] = "NotEquals";
  BinaryOperator[BinaryOperator.Identical] = "Identical";
  BinaryOperator[BinaryOperator.NotIdentical] = "NotIdentical";
  BinaryOperator[BinaryOperator.Minus] = "Minus";
  BinaryOperator[BinaryOperator.Plus] = "Plus";
  BinaryOperator[BinaryOperator.Divide] = "Divide";
  BinaryOperator[BinaryOperator.Multiply] = "Multiply";
  BinaryOperator[BinaryOperator.Modulo] = "Modulo";
  BinaryOperator[BinaryOperator.And] = "And";
  BinaryOperator[BinaryOperator.Or] = "Or";
  BinaryOperator[BinaryOperator.Lower] = "Lower";
  BinaryOperator[BinaryOperator.LowerEquals] = "LowerEquals";
  BinaryOperator[BinaryOperator.Bigger] = "Bigger";
  BinaryOperator[BinaryOperator.BiggerEquals] = "BiggerEquals";
  var Expression = (function() {
    function Expression(type) {
      this.type = type;
    }
    Expression.prototype.visitExpression = function(visitor, context) {};
    Expression.prototype.prop = function(name) {
      return new ReadPropExpr(this, name);
    };
    Expression.prototype.key = function(index, type) {
      if (type === void 0) {
        type = null;
      }
      return new ReadKeyExpr(this, index, type);
    };
    Expression.prototype.callMethod = function(name, params) {
      return new InvokeMethodExpr(this, name, params);
    };
    Expression.prototype.callFn = function(params) {
      return new InvokeFunctionExpr(this, params);
    };
    Expression.prototype.instantiate = function(params, type) {
      if (type === void 0) {
        type = null;
      }
      return new InstantiateExpr(this, params, type);
    };
    Expression.prototype.conditional = function(trueCase, falseCase) {
      if (falseCase === void 0) {
        falseCase = null;
      }
      return new ConditionalExpr(this, trueCase, falseCase);
    };
    Expression.prototype.equals = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs);
    };
    Expression.prototype.notEquals = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs);
    };
    Expression.prototype.identical = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs);
    };
    Expression.prototype.notIdentical = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs);
    };
    Expression.prototype.minus = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs);
    };
    Expression.prototype.plus = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs);
    };
    Expression.prototype.divide = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs);
    };
    Expression.prototype.multiply = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs);
    };
    Expression.prototype.modulo = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs);
    };
    Expression.prototype.and = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.And, this, rhs);
    };
    Expression.prototype.or = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs);
    };
    Expression.prototype.lower = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs);
    };
    Expression.prototype.lowerEquals = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs);
    };
    Expression.prototype.bigger = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs);
    };
    Expression.prototype.biggerEquals = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs);
    };
    Expression.prototype.isBlank = function() {
      return this.equals(TYPED_NULL_EXPR);
    };
    Expression.prototype.cast = function(type) {
      return new CastExpr(this, type);
    };
    Expression.prototype.toStmt = function() {
      return new ExpressionStatement(this);
    };
    return Expression;
  }());
  var BuiltinVar = {};
  BuiltinVar.This = 0;
  BuiltinVar.Super = 1;
  BuiltinVar.CatchError = 2;
  BuiltinVar.CatchStack = 3;
  BuiltinVar[BuiltinVar.This] = "This";
  BuiltinVar[BuiltinVar.Super] = "Super";
  BuiltinVar[BuiltinVar.CatchError] = "CatchError";
  BuiltinVar[BuiltinVar.CatchStack] = "CatchStack";
  var ReadVarExpr = (function(_super) {
    __extends$17(ReadVarExpr, _super);
    function ReadVarExpr(name, type) {
      if (type === void 0) {
        type = null;
      }
      _super.call(this, type);
      if (typeof name === 'string') {
        this.name = name;
        this.builtin = null;
      } else {
        this.name = null;
        this.builtin = name;
      }
    }
    ReadVarExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitReadVarExpr(this, context);
    };
    ReadVarExpr.prototype.set = function(value) {
      return new WriteVarExpr(this.name, value);
    };
    return ReadVarExpr;
  }(Expression));
  var WriteVarExpr = (function(_super) {
    __extends$17(WriteVarExpr, _super);
    function WriteVarExpr(name, value, type) {
      if (type === void 0) {
        type = null;
      }
      _super.call(this, type || value.type);
      this.name = name;
      this.value = value;
    }
    WriteVarExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitWriteVarExpr(this, context);
    };
    WriteVarExpr.prototype.toDeclStmt = function(type, modifiers) {
      if (type === void 0) {
        type = null;
      }
      if (modifiers === void 0) {
        modifiers = null;
      }
      return new DeclareVarStmt(this.name, this.value, type, modifiers);
    };
    return WriteVarExpr;
  }(Expression));
  var WriteKeyExpr = (function(_super) {
    __extends$17(WriteKeyExpr, _super);
    function WriteKeyExpr(receiver, index, value, type) {
      if (type === void 0) {
        type = null;
      }
      _super.call(this, type || value.type);
      this.receiver = receiver;
      this.index = index;
      this.value = value;
    }
    WriteKeyExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitWriteKeyExpr(this, context);
    };
    return WriteKeyExpr;
  }(Expression));
  var WritePropExpr = (function(_super) {
    __extends$17(WritePropExpr, _super);
    function WritePropExpr(receiver, name, value, type) {
      if (type === void 0) {
        type = null;
      }
      _super.call(this, type || value.type);
      this.receiver = receiver;
      this.name = name;
      this.value = value;
    }
    WritePropExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitWritePropExpr(this, context);
    };
    return WritePropExpr;
  }(Expression));
  var BuiltinMethod = {};
  BuiltinMethod.ConcatArray = 0;
  BuiltinMethod.SubscribeObservable = 1;
  BuiltinMethod.Bind = 2;
  BuiltinMethod[BuiltinMethod.ConcatArray] = "ConcatArray";
  BuiltinMethod[BuiltinMethod.SubscribeObservable] = "SubscribeObservable";
  BuiltinMethod[BuiltinMethod.Bind] = "Bind";
  var InvokeMethodExpr = (function(_super) {
    __extends$17(InvokeMethodExpr, _super);
    function InvokeMethodExpr(receiver, method, args, type) {
      if (type === void 0) {
        type = null;
      }
      _super.call(this, type);
      this.receiver = receiver;
      this.args = args;
      if (typeof method === 'string') {
        this.name = method;
        this.builtin = null;
      } else {
        this.name = null;
        this.builtin = method;
      }
    }
    InvokeMethodExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitInvokeMethodExpr(this, context);
    };
    return InvokeMethodExpr;
  }(Expression));
  var InvokeFunctionExpr = (function(_super) {
    __extends$17(InvokeFunctionExpr, _super);
    function InvokeFunctionExpr(fn, args, type) {
      if (type === void 0) {
        type = null;
      }
      _super.call(this, type);
      this.fn = fn;
      this.args = args;
    }
    InvokeFunctionExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitInvokeFunctionExpr(this, context);
    };
    return InvokeFunctionExpr;
  }(Expression));
  var InstantiateExpr = (function(_super) {
    __extends$17(InstantiateExpr, _super);
    function InstantiateExpr(classExpr, args, type) {
      _super.call(this, type);
      this.classExpr = classExpr;
      this.args = args;
    }
    InstantiateExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitInstantiateExpr(this, context);
    };
    return InstantiateExpr;
  }(Expression));
  var LiteralExpr = (function(_super) {
    __extends$17(LiteralExpr, _super);
    function LiteralExpr(value, type) {
      if (type === void 0) {
        type = null;
      }
      _super.call(this, type);
      this.value = value;
    }
    LiteralExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitLiteralExpr(this, context);
    };
    return LiteralExpr;
  }(Expression));
  var ExternalExpr = (function(_super) {
    __extends$17(ExternalExpr, _super);
    function ExternalExpr(value, type, typeParams) {
      if (type === void 0) {
        type = null;
      }
      if (typeParams === void 0) {
        typeParams = null;
      }
      _super.call(this, type);
      this.value = value;
      this.typeParams = typeParams;
    }
    ExternalExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitExternalExpr(this, context);
    };
    return ExternalExpr;
  }(Expression));
  var ConditionalExpr = (function(_super) {
    __extends$17(ConditionalExpr, _super);
    function ConditionalExpr(condition, trueCase, falseCase, type) {
      if (falseCase === void 0) {
        falseCase = null;
      }
      if (type === void 0) {
        type = null;
      }
      _super.call(this, type || trueCase.type);
      this.condition = condition;
      this.falseCase = falseCase;
      this.trueCase = trueCase;
    }
    ConditionalExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitConditionalExpr(this, context);
    };
    return ConditionalExpr;
  }(Expression));
  var NotExpr = (function(_super) {
    __extends$17(NotExpr, _super);
    function NotExpr(condition) {
      _super.call(this, BOOL_TYPE);
      this.condition = condition;
    }
    NotExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitNotExpr(this, context);
    };
    return NotExpr;
  }(Expression));
  var CastExpr = (function(_super) {
    __extends$17(CastExpr, _super);
    function CastExpr(value, type) {
      _super.call(this, type);
      this.value = value;
    }
    CastExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitCastExpr(this, context);
    };
    return CastExpr;
  }(Expression));
  var FnParam = (function() {
    function FnParam(name, type) {
      if (type === void 0) {
        type = null;
      }
      this.name = name;
      this.type = type;
    }
    return FnParam;
  }());
  var FunctionExpr = (function(_super) {
    __extends$17(FunctionExpr, _super);
    function FunctionExpr(params, statements, type) {
      if (type === void 0) {
        type = null;
      }
      _super.call(this, type);
      this.params = params;
      this.statements = statements;
    }
    FunctionExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitFunctionExpr(this, context);
    };
    FunctionExpr.prototype.toDeclStmt = function(name, modifiers) {
      if (modifiers === void 0) {
        modifiers = null;
      }
      return new DeclareFunctionStmt(name, this.params, this.statements, this.type, modifiers);
    };
    return FunctionExpr;
  }(Expression));
  var BinaryOperatorExpr = (function(_super) {
    __extends$17(BinaryOperatorExpr, _super);
    function BinaryOperatorExpr(operator, lhs, rhs, type) {
      if (type === void 0) {
        type = null;
      }
      _super.call(this, type || lhs.type);
      this.operator = operator;
      this.rhs = rhs;
      this.lhs = lhs;
    }
    BinaryOperatorExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitBinaryOperatorExpr(this, context);
    };
    return BinaryOperatorExpr;
  }(Expression));
  var ReadPropExpr = (function(_super) {
    __extends$17(ReadPropExpr, _super);
    function ReadPropExpr(receiver, name, type) {
      if (type === void 0) {
        type = null;
      }
      _super.call(this, type);
      this.receiver = receiver;
      this.name = name;
    }
    ReadPropExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitReadPropExpr(this, context);
    };
    ReadPropExpr.prototype.set = function(value) {
      return new WritePropExpr(this.receiver, this.name, value);
    };
    return ReadPropExpr;
  }(Expression));
  var ReadKeyExpr = (function(_super) {
    __extends$17(ReadKeyExpr, _super);
    function ReadKeyExpr(receiver, index, type) {
      if (type === void 0) {
        type = null;
      }
      _super.call(this, type);
      this.receiver = receiver;
      this.index = index;
    }
    ReadKeyExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitReadKeyExpr(this, context);
    };
    ReadKeyExpr.prototype.set = function(value) {
      return new WriteKeyExpr(this.receiver, this.index, value);
    };
    return ReadKeyExpr;
  }(Expression));
  var LiteralArrayExpr = (function(_super) {
    __extends$17(LiteralArrayExpr, _super);
    function LiteralArrayExpr(entries, type) {
      if (type === void 0) {
        type = null;
      }
      _super.call(this, type);
      this.entries = entries;
    }
    LiteralArrayExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitLiteralArrayExpr(this, context);
    };
    return LiteralArrayExpr;
  }(Expression));
  var LiteralMapEntry = (function() {
    function LiteralMapEntry(key, value, quoted) {
      if (quoted === void 0) {
        quoted = false;
      }
      this.key = key;
      this.value = value;
      this.quoted = quoted;
    }
    return LiteralMapEntry;
  }());
  var LiteralMapExpr = (function(_super) {
    __extends$17(LiteralMapExpr, _super);
    function LiteralMapExpr(entries, type) {
      if (type === void 0) {
        type = null;
      }
      _super.call(this, type);
      this.entries = entries;
      this.valueType = null;
      if (isPresent(type)) {
        this.valueType = type.valueType;
      }
    }
    LiteralMapExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitLiteralMapExpr(this, context);
    };
    return LiteralMapExpr;
  }(Expression));
  var THIS_EXPR = new ReadVarExpr(BuiltinVar.This);
  var SUPER_EXPR = new ReadVarExpr(BuiltinVar.Super);
  var CATCH_ERROR_VAR = new ReadVarExpr(BuiltinVar.CatchError);
  var CATCH_STACK_VAR = new ReadVarExpr(BuiltinVar.CatchStack);
  var NULL_EXPR = new LiteralExpr(null, null);
  var TYPED_NULL_EXPR = new LiteralExpr(null, NULL_TYPE);
  var StmtModifier = {};
  StmtModifier.Final = 0;
  StmtModifier.Private = 1;
  StmtModifier[StmtModifier.Final] = "Final";
  StmtModifier[StmtModifier.Private] = "Private";
  var Statement = (function() {
    function Statement(modifiers) {
      if (modifiers === void 0) {
        modifiers = null;
      }
      this.modifiers = modifiers;
      if (!modifiers) {
        this.modifiers = [];
      }
    }
    Statement.prototype.visitStatement = function(visitor, context) {};
    Statement.prototype.hasModifier = function(modifier) {
      return this.modifiers.indexOf(modifier) !== -1;
    };
    return Statement;
  }());
  var DeclareVarStmt = (function(_super) {
    __extends$17(DeclareVarStmt, _super);
    function DeclareVarStmt(name, value, type, modifiers) {
      if (type === void 0) {
        type = null;
      }
      if (modifiers === void 0) {
        modifiers = null;
      }
      _super.call(this, modifiers);
      this.name = name;
      this.value = value;
      this.type = type || value.type;
    }
    DeclareVarStmt.prototype.visitStatement = function(visitor, context) {
      return visitor.visitDeclareVarStmt(this, context);
    };
    return DeclareVarStmt;
  }(Statement));
  var DeclareFunctionStmt = (function(_super) {
    __extends$17(DeclareFunctionStmt, _super);
    function DeclareFunctionStmt(name, params, statements, type, modifiers) {
      if (type === void 0) {
        type = null;
      }
      if (modifiers === void 0) {
        modifiers = null;
      }
      _super.call(this, modifiers);
      this.name = name;
      this.params = params;
      this.statements = statements;
      this.type = type;
    }
    DeclareFunctionStmt.prototype.visitStatement = function(visitor, context) {
      return visitor.visitDeclareFunctionStmt(this, context);
    };
    return DeclareFunctionStmt;
  }(Statement));
  var ExpressionStatement = (function(_super) {
    __extends$17(ExpressionStatement, _super);
    function ExpressionStatement(expr) {
      _super.call(this);
      this.expr = expr;
    }
    ExpressionStatement.prototype.visitStatement = function(visitor, context) {
      return visitor.visitExpressionStmt(this, context);
    };
    return ExpressionStatement;
  }(Statement));
  var ReturnStatement = (function(_super) {
    __extends$17(ReturnStatement, _super);
    function ReturnStatement(value) {
      _super.call(this);
      this.value = value;
    }
    ReturnStatement.prototype.visitStatement = function(visitor, context) {
      return visitor.visitReturnStmt(this, context);
    };
    return ReturnStatement;
  }(Statement));
  var AbstractClassPart = (function() {
    function AbstractClassPart(type, modifiers) {
      if (type === void 0) {
        type = null;
      }
      this.type = type;
      this.modifiers = modifiers;
      if (!modifiers) {
        this.modifiers = [];
      }
    }
    AbstractClassPart.prototype.hasModifier = function(modifier) {
      return this.modifiers.indexOf(modifier) !== -1;
    };
    return AbstractClassPart;
  }());
  var ClassField = (function(_super) {
    __extends$17(ClassField, _super);
    function ClassField(name, type, modifiers) {
      if (type === void 0) {
        type = null;
      }
      if (modifiers === void 0) {
        modifiers = null;
      }
      _super.call(this, type, modifiers);
      this.name = name;
    }
    return ClassField;
  }(AbstractClassPart));
  var ClassMethod = (function(_super) {
    __extends$17(ClassMethod, _super);
    function ClassMethod(name, params, body, type, modifiers) {
      if (type === void 0) {
        type = null;
      }
      if (modifiers === void 0) {
        modifiers = null;
      }
      _super.call(this, type, modifiers);
      this.name = name;
      this.params = params;
      this.body = body;
    }
    return ClassMethod;
  }(AbstractClassPart));
  var ClassGetter = (function(_super) {
    __extends$17(ClassGetter, _super);
    function ClassGetter(name, body, type, modifiers) {
      if (type === void 0) {
        type = null;
      }
      if (modifiers === void 0) {
        modifiers = null;
      }
      _super.call(this, type, modifiers);
      this.name = name;
      this.body = body;
    }
    return ClassGetter;
  }(AbstractClassPart));
  var ClassStmt = (function(_super) {
    __extends$17(ClassStmt, _super);
    function ClassStmt(name, parent, fields, getters, constructorMethod, methods, modifiers) {
      if (modifiers === void 0) {
        modifiers = null;
      }
      _super.call(this, modifiers);
      this.name = name;
      this.parent = parent;
      this.fields = fields;
      this.getters = getters;
      this.constructorMethod = constructorMethod;
      this.methods = methods;
    }
    ClassStmt.prototype.visitStatement = function(visitor, context) {
      return visitor.visitDeclareClassStmt(this, context);
    };
    return ClassStmt;
  }(Statement));
  var IfStmt = (function(_super) {
    __extends$17(IfStmt, _super);
    function IfStmt(condition, trueCase, falseCase) {
      if (falseCase === void 0) {
        falseCase = [];
      }
      _super.call(this);
      this.condition = condition;
      this.trueCase = trueCase;
      this.falseCase = falseCase;
    }
    IfStmt.prototype.visitStatement = function(visitor, context) {
      return visitor.visitIfStmt(this, context);
    };
    return IfStmt;
  }(Statement));
  var CommentStmt = (function(_super) {
    __extends$17(CommentStmt, _super);
    function CommentStmt(comment) {
      _super.call(this);
      this.comment = comment;
    }
    CommentStmt.prototype.visitStatement = function(visitor, context) {
      return visitor.visitCommentStmt(this, context);
    };
    return CommentStmt;
  }(Statement));
  var TryCatchStmt = (function(_super) {
    __extends$17(TryCatchStmt, _super);
    function TryCatchStmt(bodyStmts, catchStmts) {
      _super.call(this);
      this.bodyStmts = bodyStmts;
      this.catchStmts = catchStmts;
    }
    TryCatchStmt.prototype.visitStatement = function(visitor, context) {
      return visitor.visitTryCatchStmt(this, context);
    };
    return TryCatchStmt;
  }(Statement));
  var ThrowStmt = (function(_super) {
    __extends$17(ThrowStmt, _super);
    function ThrowStmt(error) {
      _super.call(this);
      this.error = error;
    }
    ThrowStmt.prototype.visitStatement = function(visitor, context) {
      return visitor.visitThrowStmt(this, context);
    };
    return ThrowStmt;
  }(Statement));
  var ExpressionTransformer = (function() {
    function ExpressionTransformer() {}
    ExpressionTransformer.prototype.visitReadVarExpr = function(ast, context) {
      return ast;
    };
    ExpressionTransformer.prototype.visitWriteVarExpr = function(expr, context) {
      return new WriteVarExpr(expr.name, expr.value.visitExpression(this, context));
    };
    ExpressionTransformer.prototype.visitWriteKeyExpr = function(expr, context) {
      return new WriteKeyExpr(expr.receiver.visitExpression(this, context), expr.index.visitExpression(this, context), expr.value.visitExpression(this, context));
    };
    ExpressionTransformer.prototype.visitWritePropExpr = function(expr, context) {
      return new WritePropExpr(expr.receiver.visitExpression(this, context), expr.name, expr.value.visitExpression(this, context));
    };
    ExpressionTransformer.prototype.visitInvokeMethodExpr = function(ast, context) {
      var method = ast.builtin || ast.name;
      return new InvokeMethodExpr(ast.receiver.visitExpression(this, context), method, this.visitAllExpressions(ast.args, context), ast.type);
    };
    ExpressionTransformer.prototype.visitInvokeFunctionExpr = function(ast, context) {
      return new InvokeFunctionExpr(ast.fn.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type);
    };
    ExpressionTransformer.prototype.visitInstantiateExpr = function(ast, context) {
      return new InstantiateExpr(ast.classExpr.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type);
    };
    ExpressionTransformer.prototype.visitLiteralExpr = function(ast, context) {
      return ast;
    };
    ExpressionTransformer.prototype.visitExternalExpr = function(ast, context) {
      return ast;
    };
    ExpressionTransformer.prototype.visitConditionalExpr = function(ast, context) {
      return new ConditionalExpr(ast.condition.visitExpression(this, context), ast.trueCase.visitExpression(this, context), ast.falseCase.visitExpression(this, context));
    };
    ExpressionTransformer.prototype.visitNotExpr = function(ast, context) {
      return new NotExpr(ast.condition.visitExpression(this, context));
    };
    ExpressionTransformer.prototype.visitCastExpr = function(ast, context) {
      return new CastExpr(ast.value.visitExpression(this, context), context);
    };
    ExpressionTransformer.prototype.visitFunctionExpr = function(ast, context) {
      return ast;
    };
    ExpressionTransformer.prototype.visitBinaryOperatorExpr = function(ast, context) {
      return new BinaryOperatorExpr(ast.operator, ast.lhs.visitExpression(this, context), ast.rhs.visitExpression(this, context), ast.type);
    };
    ExpressionTransformer.prototype.visitReadPropExpr = function(ast, context) {
      return new ReadPropExpr(ast.receiver.visitExpression(this, context), ast.name, ast.type);
    };
    ExpressionTransformer.prototype.visitReadKeyExpr = function(ast, context) {
      return new ReadKeyExpr(ast.receiver.visitExpression(this, context), ast.index.visitExpression(this, context), ast.type);
    };
    ExpressionTransformer.prototype.visitLiteralArrayExpr = function(ast, context) {
      return new LiteralArrayExpr(this.visitAllExpressions(ast.entries, context));
    };
    ExpressionTransformer.prototype.visitLiteralMapExpr = function(ast, context) {
      var _this = this;
      var entries = ast.entries.map(function(entry) {
        return new LiteralMapEntry(entry.key, entry.value.visitExpression(_this, context), entry.quoted);
      });
      return new LiteralMapExpr(entries);
    };
    ExpressionTransformer.prototype.visitAllExpressions = function(exprs, context) {
      var _this = this;
      return exprs.map(function(expr) {
        return expr.visitExpression(_this, context);
      });
    };
    ExpressionTransformer.prototype.visitDeclareVarStmt = function(stmt, context) {
      return new DeclareVarStmt(stmt.name, stmt.value.visitExpression(this, context), stmt.type, stmt.modifiers);
    };
    ExpressionTransformer.prototype.visitDeclareFunctionStmt = function(stmt, context) {
      return stmt;
    };
    ExpressionTransformer.prototype.visitExpressionStmt = function(stmt, context) {
      return new ExpressionStatement(stmt.expr.visitExpression(this, context));
    };
    ExpressionTransformer.prototype.visitReturnStmt = function(stmt, context) {
      return new ReturnStatement(stmt.value.visitExpression(this, context));
    };
    ExpressionTransformer.prototype.visitDeclareClassStmt = function(stmt, context) {
      return stmt;
    };
    ExpressionTransformer.prototype.visitIfStmt = function(stmt, context) {
      return new IfStmt(stmt.condition.visitExpression(this, context), this.visitAllStatements(stmt.trueCase, context), this.visitAllStatements(stmt.falseCase, context));
    };
    ExpressionTransformer.prototype.visitTryCatchStmt = function(stmt, context) {
      return new TryCatchStmt(this.visitAllStatements(stmt.bodyStmts, context), this.visitAllStatements(stmt.catchStmts, context));
    };
    ExpressionTransformer.prototype.visitThrowStmt = function(stmt, context) {
      return new ThrowStmt(stmt.error.visitExpression(this, context));
    };
    ExpressionTransformer.prototype.visitCommentStmt = function(stmt, context) {
      return stmt;
    };
    ExpressionTransformer.prototype.visitAllStatements = function(stmts, context) {
      var _this = this;
      return stmts.map(function(stmt) {
        return stmt.visitStatement(_this, context);
      });
    };
    return ExpressionTransformer;
  }());
  var RecursiveExpressionVisitor = (function() {
    function RecursiveExpressionVisitor() {}
    RecursiveExpressionVisitor.prototype.visitReadVarExpr = function(ast, context) {
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitWriteVarExpr = function(expr, context) {
      expr.value.visitExpression(this, context);
      return expr;
    };
    RecursiveExpressionVisitor.prototype.visitWriteKeyExpr = function(expr, context) {
      expr.receiver.visitExpression(this, context);
      expr.index.visitExpression(this, context);
      expr.value.visitExpression(this, context);
      return expr;
    };
    RecursiveExpressionVisitor.prototype.visitWritePropExpr = function(expr, context) {
      expr.receiver.visitExpression(this, context);
      expr.value.visitExpression(this, context);
      return expr;
    };
    RecursiveExpressionVisitor.prototype.visitInvokeMethodExpr = function(ast, context) {
      ast.receiver.visitExpression(this, context);
      this.visitAllExpressions(ast.args, context);
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitInvokeFunctionExpr = function(ast, context) {
      ast.fn.visitExpression(this, context);
      this.visitAllExpressions(ast.args, context);
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitInstantiateExpr = function(ast, context) {
      ast.classExpr.visitExpression(this, context);
      this.visitAllExpressions(ast.args, context);
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitLiteralExpr = function(ast, context) {
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitExternalExpr = function(ast, context) {
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitConditionalExpr = function(ast, context) {
      ast.condition.visitExpression(this, context);
      ast.trueCase.visitExpression(this, context);
      ast.falseCase.visitExpression(this, context);
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitNotExpr = function(ast, context) {
      ast.condition.visitExpression(this, context);
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitCastExpr = function(ast, context) {
      ast.value.visitExpression(this, context);
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitFunctionExpr = function(ast, context) {
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitBinaryOperatorExpr = function(ast, context) {
      ast.lhs.visitExpression(this, context);
      ast.rhs.visitExpression(this, context);
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitReadPropExpr = function(ast, context) {
      ast.receiver.visitExpression(this, context);
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitReadKeyExpr = function(ast, context) {
      ast.receiver.visitExpression(this, context);
      ast.index.visitExpression(this, context);
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitLiteralArrayExpr = function(ast, context) {
      this.visitAllExpressions(ast.entries, context);
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitLiteralMapExpr = function(ast, context) {
      var _this = this;
      ast.entries.forEach(function(entry) {
        return entry.value.visitExpression(_this, context);
      });
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitAllExpressions = function(exprs, context) {
      var _this = this;
      exprs.forEach(function(expr) {
        return expr.visitExpression(_this, context);
      });
    };
    RecursiveExpressionVisitor.prototype.visitDeclareVarStmt = function(stmt, context) {
      stmt.value.visitExpression(this, context);
      return stmt;
    };
    RecursiveExpressionVisitor.prototype.visitDeclareFunctionStmt = function(stmt, context) {
      return stmt;
    };
    RecursiveExpressionVisitor.prototype.visitExpressionStmt = function(stmt, context) {
      stmt.expr.visitExpression(this, context);
      return stmt;
    };
    RecursiveExpressionVisitor.prototype.visitReturnStmt = function(stmt, context) {
      stmt.value.visitExpression(this, context);
      return stmt;
    };
    RecursiveExpressionVisitor.prototype.visitDeclareClassStmt = function(stmt, context) {
      return stmt;
    };
    RecursiveExpressionVisitor.prototype.visitIfStmt = function(stmt, context) {
      stmt.condition.visitExpression(this, context);
      this.visitAllStatements(stmt.trueCase, context);
      this.visitAllStatements(stmt.falseCase, context);
      return stmt;
    };
    RecursiveExpressionVisitor.prototype.visitTryCatchStmt = function(stmt, context) {
      this.visitAllStatements(stmt.bodyStmts, context);
      this.visitAllStatements(stmt.catchStmts, context);
      return stmt;
    };
    RecursiveExpressionVisitor.prototype.visitThrowStmt = function(stmt, context) {
      stmt.error.visitExpression(this, context);
      return stmt;
    };
    RecursiveExpressionVisitor.prototype.visitCommentStmt = function(stmt, context) {
      return stmt;
    };
    RecursiveExpressionVisitor.prototype.visitAllStatements = function(stmts, context) {
      var _this = this;
      stmts.forEach(function(stmt) {
        return stmt.visitStatement(_this, context);
      });
    };
    return RecursiveExpressionVisitor;
  }());
  function replaceVarInExpression(varName, newValue, expression) {
    var transformer = new _ReplaceVariableTransformer(varName, newValue);
    return expression.visitExpression(transformer, null);
  }
  var _ReplaceVariableTransformer = (function(_super) {
    __extends$17(_ReplaceVariableTransformer, _super);
    function _ReplaceVariableTransformer(_varName, _newValue) {
      _super.call(this);
      this._varName = _varName;
      this._newValue = _newValue;
    }
    _ReplaceVariableTransformer.prototype.visitReadVarExpr = function(ast, context) {
      return ast.name == this._varName ? this._newValue : ast;
    };
    return _ReplaceVariableTransformer;
  }(ExpressionTransformer));
  function findReadVarNames(stmts) {
    var finder = new _VariableFinder();
    finder.visitAllStatements(stmts, null);
    return finder.varNames;
  }
  var _VariableFinder = (function(_super) {
    __extends$17(_VariableFinder, _super);
    function _VariableFinder() {
      _super.apply(this, arguments);
      this.varNames = new Set();
    }
    _VariableFinder.prototype.visitReadVarExpr = function(ast, context) {
      this.varNames.add(ast.name);
      return null;
    };
    return _VariableFinder;
  }(RecursiveExpressionVisitor));
  function variable(name, type) {
    if (type === void 0) {
      type = null;
    }
    return new ReadVarExpr(name, type);
  }
  function importExpr(id, typeParams) {
    if (typeParams === void 0) {
      typeParams = null;
    }
    return new ExternalExpr(id, null, typeParams);
  }
  function importType(id, typeParams, typeModifiers) {
    if (typeParams === void 0) {
      typeParams = null;
    }
    if (typeModifiers === void 0) {
      typeModifiers = null;
    }
    return isPresent(id) ? expressionType(importExpr(id), typeParams, typeModifiers) : null;
  }
  function expressionType(expr, typeParams, typeModifiers) {
    if (typeParams === void 0) {
      typeParams = null;
    }
    if (typeModifiers === void 0) {
      typeModifiers = null;
    }
    return isPresent(expr) ? new ExpressionType(expr, typeParams, typeModifiers) : null;
  }
  function literalArr(values, type) {
    if (type === void 0) {
      type = null;
    }
    return new LiteralArrayExpr(values, type);
  }
  function literalMap(values, type, quoted) {
    if (type === void 0) {
      type = null;
    }
    if (quoted === void 0) {
      quoted = false;
    }
    return new LiteralMapExpr(values.map(function(entry) {
      return new LiteralMapEntry(entry[0], entry[1], quoted);
    }), type);
  }
  function not(expr) {
    return new NotExpr(expr);
  }
  function fn(params, body, type) {
    if (type === void 0) {
      type = null;
    }
    return new FunctionExpr(params, body, type);
  }
  function literal(value, type) {
    if (type === void 0) {
      type = null;
    }
    return new LiteralExpr(value, type);
  }
  var CheckBindingField = (function() {
    function CheckBindingField(expression, bindingId) {
      this.expression = expression;
      this.bindingId = bindingId;
    }
    return CheckBindingField;
  }());
  function createCheckBindingField(builder) {
    var bindingId = "" + builder.fields.length;
    var fieldExpr = createBindFieldExpr(bindingId);
    builder.fields.push(new ClassField(fieldExpr.name, null, [StmtModifier.Private]));
    builder.ctorStmts.push(THIS_EXPR.prop(fieldExpr.name).set(importExpr(createIdentifier(Identifiers.UNINITIALIZED))).toStmt());
    return new CheckBindingField(fieldExpr, bindingId);
  }
  function createCheckBindingStmt(evalResult, fieldExpr, throwOnChangeVar, actions) {
    var condition = importExpr(createIdentifier(Identifiers.checkBinding)).callFn([throwOnChangeVar, fieldExpr, evalResult.currValExpr]);
    if (evalResult.forceUpdate) {
      condition = evalResult.forceUpdate.or(condition);
    }
    return evalResult.stmts.concat([new IfStmt(condition, actions.concat([(THIS_EXPR.prop(fieldExpr.name).set(evalResult.currValExpr).toStmt())]))]);
  }
  function createBindFieldExpr(bindingId) {
    return THIS_EXPR.prop("_expr_" + bindingId);
  }
  function createDiTokenExpression(token) {
    if (isPresent(token.value)) {
      return literal(token.value);
    } else {
      return importExpr(token.identifier);
    }
  }
  function createInlineArray(values) {
    if (values.length === 0) {
      return importExpr(createIdentifier(Identifiers.EMPTY_INLINE_ARRAY));
    }
    var log2 = Math.log(values.length) / Math.log(2);
    var index = Math.ceil(log2);
    var identifierSpec = index < Identifiers.inlineArrays.length ? Identifiers.inlineArrays[index] : Identifiers.InlineArrayDynamic;
    var identifier = createIdentifier(identifierSpec);
    return importExpr(identifier).instantiate([(literal(values.length))].concat(values));
  }
  function createPureProxy(fn, argCount, pureProxyProp, builder) {
    builder.fields.push(new ClassField(pureProxyProp.name, null));
    var pureProxyId = argCount < Identifiers.pureProxies.length ? Identifiers.pureProxies[argCount] : null;
    if (!pureProxyId) {
      throw new Error("Unsupported number of argument for pure functions: " + argCount);
    }
    builder.ctorStmts.push(THIS_EXPR.prop(pureProxyProp.name).set(importExpr(createIdentifier(pureProxyId)).callFn([fn])).toStmt());
  }
  function createEnumExpression(enumType, enumValue) {
    var enumName = Object.keys(enumType.runtime).find(function(propName) {
      return enumType.runtime[propName] === enumValue;
    });
    if (!enumName) {
      throw new Error("Unknown enum value " + enumValue + " in " + enumType.name);
    }
    return importExpr(createEnumIdentifier(enumType, enumName));
  }
  var VAL_UNWRAPPER_VAR = variable("valUnwrapper");
  var EventHandlerVars = (function() {
    function EventHandlerVars() {}
    EventHandlerVars.event = variable('$event');
    return EventHandlerVars;
  }());
  var ConvertPropertyBindingResult = (function() {
    function ConvertPropertyBindingResult(stmts, currValExpr, forceUpdate) {
      this.stmts = stmts;
      this.currValExpr = currValExpr;
      this.forceUpdate = forceUpdate;
    }
    return ConvertPropertyBindingResult;
  }());
  function convertPropertyBinding(builder, nameResolver, implicitReceiver, expression, bindingId) {
    var currValExpr = createCurrValueExpr(bindingId);
    var stmts = [];
    if (!nameResolver) {
      nameResolver = new DefaultNameResolver();
    }
    var visitor = new _AstToIrVisitor(builder, nameResolver, implicitReceiver, VAL_UNWRAPPER_VAR, bindingId, false);
    var outputExpr = expression.visit(visitor, _Mode.Expression);
    if (!outputExpr) {
      return null;
    }
    if (visitor.temporaryCount) {
      for (var i = 0; i < visitor.temporaryCount; i++) {
        stmts.push(temporaryDeclaration(bindingId, i));
      }
    }
    if (visitor.needsValueUnwrapper) {
      var initValueUnwrapperStmt = VAL_UNWRAPPER_VAR.callMethod('reset', []).toStmt();
      stmts.push(initValueUnwrapperStmt);
    }
    stmts.push(currValExpr.set(outputExpr).toDeclStmt(null, [StmtModifier.Final]));
    if (visitor.needsValueUnwrapper) {
      return new ConvertPropertyBindingResult(stmts, currValExpr, VAL_UNWRAPPER_VAR.prop('hasWrappedValue'));
    } else {
      return new ConvertPropertyBindingResult(stmts, currValExpr, null);
    }
  }
  var ConvertActionBindingResult = (function() {
    function ConvertActionBindingResult(stmts, preventDefault) {
      this.stmts = stmts;
      this.preventDefault = preventDefault;
    }
    return ConvertActionBindingResult;
  }());
  function convertActionBinding(builder, nameResolver, implicitReceiver, action, bindingId) {
    if (!nameResolver) {
      nameResolver = new DefaultNameResolver();
    }
    var visitor = new _AstToIrVisitor(builder, nameResolver, implicitReceiver, null, bindingId, true);
    var actionStmts = [];
    flattenStatements(action.visit(visitor, _Mode.Statement), actionStmts);
    prependTemporaryDecls(visitor.temporaryCount, bindingId, actionStmts);
    var lastIndex = actionStmts.length - 1;
    var preventDefaultVar = null;
    if (lastIndex >= 0) {
      var lastStatement = actionStmts[lastIndex];
      var returnExpr = convertStmtIntoExpression(lastStatement);
      if (returnExpr) {
        preventDefaultVar = createPreventDefaultVar(bindingId);
        actionStmts[lastIndex] = preventDefaultVar.set(returnExpr.cast(DYNAMIC_TYPE).notIdentical(literal(false))).toDeclStmt(null, [StmtModifier.Final]);
      }
    }
    return new ConvertActionBindingResult(actionStmts, preventDefaultVar);
  }
  function createSharedBindingVariablesIfNeeded(stmts) {
    var unwrapperStmts = [];
    var readVars = findReadVarNames(stmts);
    if (readVars.has(VAL_UNWRAPPER_VAR.name)) {
      unwrapperStmts.push(VAL_UNWRAPPER_VAR.set(importExpr(createIdentifier(Identifiers.ValueUnwrapper)).instantiate([])).toDeclStmt(null, [StmtModifier.Final]));
    }
    return unwrapperStmts;
  }
  function temporaryName(bindingId, temporaryNumber) {
    return "tmp_" + bindingId + "_" + temporaryNumber;
  }
  function temporaryDeclaration(bindingId, temporaryNumber) {
    return new DeclareVarStmt(temporaryName(bindingId, temporaryNumber), NULL_EXPR);
  }
  function prependTemporaryDecls(temporaryCount, bindingId, statements) {
    for (var i = temporaryCount - 1; i >= 0; i--) {
      statements.unshift(temporaryDeclaration(bindingId, i));
    }
  }
  var _Mode = {};
  _Mode.Statement = 0;
  _Mode.Expression = 1;
  _Mode[_Mode.Statement] = "Statement";
  _Mode[_Mode.Expression] = "Expression";
  function ensureStatementMode(mode, ast) {
    if (mode !== _Mode.Statement) {
      throw new Error("Expected a statement, but saw " + ast);
    }
  }
  function ensureExpressionMode(mode, ast) {
    if (mode !== _Mode.Expression) {
      throw new Error("Expected an expression, but saw " + ast);
    }
  }
  function convertToStatementIfNeeded(mode, expr) {
    if (mode === _Mode.Statement) {
      return expr.toStmt();
    } else {
      return expr;
    }
  }
  var _AstToIrVisitor = (function() {
    function _AstToIrVisitor(_builder, _nameResolver, _implicitReceiver, _valueUnwrapper, bindingId, isAction) {
      this._builder = _builder;
      this._nameResolver = _nameResolver;
      this._implicitReceiver = _implicitReceiver;
      this._valueUnwrapper = _valueUnwrapper;
      this.bindingId = bindingId;
      this.isAction = isAction;
      this._nodeMap = new Map();
      this._resultMap = new Map();
      this._currentTemporary = 0;
      this.needsValueUnwrapper = false;
      this.temporaryCount = 0;
    }
    _AstToIrVisitor.prototype.visitBinary = function(ast, mode) {
      var op;
      switch (ast.operation) {
        case '+':
          op = BinaryOperator.Plus;
          break;
        case '-':
          op = BinaryOperator.Minus;
          break;
        case '*':
          op = BinaryOperator.Multiply;
          break;
        case '/':
          op = BinaryOperator.Divide;
          break;
        case '%':
          op = BinaryOperator.Modulo;
          break;
        case '&&':
          op = BinaryOperator.And;
          break;
        case '||':
          op = BinaryOperator.Or;
          break;
        case '==':
          op = BinaryOperator.Equals;
          break;
        case '!=':
          op = BinaryOperator.NotEquals;
          break;
        case '===':
          op = BinaryOperator.Identical;
          break;
        case '!==':
          op = BinaryOperator.NotIdentical;
          break;
        case '<':
          op = BinaryOperator.Lower;
          break;
        case '>':
          op = BinaryOperator.Bigger;
          break;
        case '<=':
          op = BinaryOperator.LowerEquals;
          break;
        case '>=':
          op = BinaryOperator.BiggerEquals;
          break;
        default:
          throw new Error("Unsupported operation " + ast.operation);
      }
      return convertToStatementIfNeeded(mode, new BinaryOperatorExpr(op, this.visit(ast.left, _Mode.Expression), this.visit(ast.right, _Mode.Expression)));
    };
    _AstToIrVisitor.prototype.visitChain = function(ast, mode) {
      ensureStatementMode(mode, ast);
      return this.visitAll(ast.expressions, mode);
    };
    _AstToIrVisitor.prototype.visitConditional = function(ast, mode) {
      var value = this.visit(ast.condition, _Mode.Expression);
      return convertToStatementIfNeeded(mode, value.conditional(this.visit(ast.trueExp, _Mode.Expression), this.visit(ast.falseExp, _Mode.Expression)));
    };
    _AstToIrVisitor.prototype.visitPipe = function(ast, mode) {
      var input = this.visit(ast.exp, _Mode.Expression);
      var args = this.visitAll(ast.args, _Mode.Expression);
      var value = this._nameResolver.callPipe(ast.name, input, args);
      if (!value) {
        throw new Error("Illegal state: Pipe " + ast.name + " is not allowed here!");
      }
      this.needsValueUnwrapper = true;
      return convertToStatementIfNeeded(mode, this._valueUnwrapper.callMethod('unwrap', [value]));
    };
    _AstToIrVisitor.prototype.visitFunctionCall = function(ast, mode) {
      return convertToStatementIfNeeded(mode, this.visit(ast.target, _Mode.Expression).callFn(this.visitAll(ast.args, _Mode.Expression)));
    };
    _AstToIrVisitor.prototype.visitImplicitReceiver = function(ast, mode) {
      ensureExpressionMode(mode, ast);
      return this._implicitReceiver;
    };
    _AstToIrVisitor.prototype.visitInterpolation = function(ast, mode) {
      ensureExpressionMode(mode, ast);
      var args = [literal(ast.expressions.length)];
      for (var i = 0; i < ast.strings.length - 1; i++) {
        args.push(literal(ast.strings[i]));
        args.push(this.visit(ast.expressions[i], _Mode.Expression));
      }
      args.push(literal(ast.strings[ast.strings.length - 1]));
      return ast.expressions.length <= 9 ? importExpr(createIdentifier(Identifiers.inlineInterpolate)).callFn(args) : importExpr(createIdentifier(Identifiers.interpolate)).callFn([args[0], literalArr(args.slice(1))]);
    };
    _AstToIrVisitor.prototype.visitKeyedRead = function(ast, mode) {
      var leftMostSafe = this.leftMostSafeNode(ast);
      if (leftMostSafe) {
        return this.convertSafeAccess(ast, leftMostSafe, mode);
      } else {
        return convertToStatementIfNeeded(mode, this.visit(ast.obj, _Mode.Expression).key(this.visit(ast.key, _Mode.Expression)));
      }
    };
    _AstToIrVisitor.prototype.visitKeyedWrite = function(ast, mode) {
      var obj = this.visit(ast.obj, _Mode.Expression);
      var key = this.visit(ast.key, _Mode.Expression);
      var value = this.visit(ast.value, _Mode.Expression);
      return convertToStatementIfNeeded(mode, obj.key(key).set(value));
    };
    _AstToIrVisitor.prototype.visitLiteralArray = function(ast, mode) {
      var parts = this.visitAll(ast.expressions, mode);
      var literalArr$$ = this.isAction ? literalArr(parts) : createCachedLiteralArray(this._builder, parts);
      return convertToStatementIfNeeded(mode, literalArr$$);
    };
    _AstToIrVisitor.prototype.visitLiteralMap = function(ast, mode) {
      var parts = [];
      for (var i = 0; i < ast.keys.length; i++) {
        parts.push([ast.keys[i], this.visit(ast.values[i], _Mode.Expression)]);
      }
      var literalMap$$ = this.isAction ? literalMap(parts) : createCachedLiteralMap(this._builder, parts);
      return convertToStatementIfNeeded(mode, literalMap$$);
    };
    _AstToIrVisitor.prototype.visitLiteralPrimitive = function(ast, mode) {
      return convertToStatementIfNeeded(mode, literal(ast.value));
    };
    _AstToIrVisitor.prototype._getLocal = function(name) {
      if (this.isAction && name == EventHandlerVars.event.name) {
        return EventHandlerVars.event;
      }
      return this._nameResolver.getLocal(name);
    };
    _AstToIrVisitor.prototype.visitMethodCall = function(ast, mode) {
      var leftMostSafe = this.leftMostSafeNode(ast);
      if (leftMostSafe) {
        return this.convertSafeAccess(ast, leftMostSafe, mode);
      } else {
        var args = this.visitAll(ast.args, _Mode.Expression);
        var result = null;
        var receiver = this.visit(ast.receiver, _Mode.Expression);
        if (receiver === this._implicitReceiver) {
          var varExpr = this._getLocal(ast.name);
          if (isPresent(varExpr)) {
            result = varExpr.callFn(args);
          }
        }
        if (isBlank(result)) {
          result = receiver.callMethod(ast.name, args);
        }
        return convertToStatementIfNeeded(mode, result);
      }
    };
    _AstToIrVisitor.prototype.visitPrefixNot = function(ast, mode) {
      return convertToStatementIfNeeded(mode, not(this.visit(ast.expression, _Mode.Expression)));
    };
    _AstToIrVisitor.prototype.visitPropertyRead = function(ast, mode) {
      var leftMostSafe = this.leftMostSafeNode(ast);
      if (leftMostSafe) {
        return this.convertSafeAccess(ast, leftMostSafe, mode);
      } else {
        var result = null;
        var receiver = this.visit(ast.receiver, _Mode.Expression);
        if (receiver === this._implicitReceiver) {
          result = this._getLocal(ast.name);
        }
        if (isBlank(result)) {
          result = receiver.prop(ast.name);
        }
        return convertToStatementIfNeeded(mode, result);
      }
    };
    _AstToIrVisitor.prototype.visitPropertyWrite = function(ast, mode) {
      var receiver = this.visit(ast.receiver, _Mode.Expression);
      if (receiver === this._implicitReceiver) {
        var varExpr = this._getLocal(ast.name);
        if (isPresent(varExpr)) {
          throw new Error('Cannot assign to a reference or variable!');
        }
      }
      return convertToStatementIfNeeded(mode, receiver.prop(ast.name).set(this.visit(ast.value, _Mode.Expression)));
    };
    _AstToIrVisitor.prototype.visitSafePropertyRead = function(ast, mode) {
      return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
    };
    _AstToIrVisitor.prototype.visitSafeMethodCall = function(ast, mode) {
      return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
    };
    _AstToIrVisitor.prototype.visitAll = function(asts, mode) {
      var _this = this;
      return asts.map(function(ast) {
        return _this.visit(ast, mode);
      });
    };
    _AstToIrVisitor.prototype.visitQuote = function(ast, mode) {
      throw new Error('Quotes are not supported for evaluation!');
    };
    _AstToIrVisitor.prototype.visit = function(ast, mode) {
      var result = this._resultMap.get(ast);
      if (result)
        return result;
      return (this._nodeMap.get(ast) || ast).visit(this, mode);
    };
    _AstToIrVisitor.prototype.convertSafeAccess = function(ast, leftMostSafe, mode) {
      var guardedExpression = this.visit(leftMostSafe.receiver, _Mode.Expression);
      var temporary;
      if (this.needsTemporary(leftMostSafe.receiver)) {
        temporary = this.allocateTemporary();
        guardedExpression = temporary.set(guardedExpression);
        this._resultMap.set(leftMostSafe.receiver, temporary);
      }
      var condition = guardedExpression.isBlank();
      if (leftMostSafe instanceof SafeMethodCall) {
        this._nodeMap.set(leftMostSafe, new MethodCall(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name, leftMostSafe.args));
      } else {
        this._nodeMap.set(leftMostSafe, new PropertyRead(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name));
      }
      var access = this.visit(ast, _Mode.Expression);
      this._nodeMap.delete(leftMostSafe);
      if (temporary) {
        this.releaseTemporary(temporary);
      }
      return convertToStatementIfNeeded(mode, condition.conditional(literal(null), access));
    };
    _AstToIrVisitor.prototype.leftMostSafeNode = function(ast) {
      var _this = this;
      var visit = function(visitor, ast) {
        return (_this._nodeMap.get(ast) || ast).visit(visitor);
      };
      return ast.visit({
        visitBinary: function(ast) {
          return null;
        },
        visitChain: function(ast) {
          return null;
        },
        visitConditional: function(ast) {
          return null;
        },
        visitFunctionCall: function(ast) {
          return null;
        },
        visitImplicitReceiver: function(ast) {
          return null;
        },
        visitInterpolation: function(ast) {
          return null;
        },
        visitKeyedRead: function(ast) {
          return visit(this, ast.obj);
        },
        visitKeyedWrite: function(ast) {
          return null;
        },
        visitLiteralArray: function(ast) {
          return null;
        },
        visitLiteralMap: function(ast) {
          return null;
        },
        visitLiteralPrimitive: function(ast) {
          return null;
        },
        visitMethodCall: function(ast) {
          return visit(this, ast.receiver);
        },
        visitPipe: function(ast) {
          return null;
        },
        visitPrefixNot: function(ast) {
          return null;
        },
        visitPropertyRead: function(ast) {
          return visit(this, ast.receiver);
        },
        visitPropertyWrite: function(ast) {
          return null;
        },
        visitQuote: function(ast) {
          return null;
        },
        visitSafeMethodCall: function(ast) {
          return visit(this, ast.receiver) || ast;
        },
        visitSafePropertyRead: function(ast) {
          return visit(this, ast.receiver) || ast;
        }
      });
    };
    _AstToIrVisitor.prototype.needsTemporary = function(ast) {
      var _this = this;
      var visit = function(visitor, ast) {
        return ast && (_this._nodeMap.get(ast) || ast).visit(visitor);
      };
      var visitSome = function(visitor, ast) {
        return ast.some(function(ast) {
          return visit(visitor, ast);
        });
      };
      return ast.visit({
        visitBinary: function(ast) {
          return visit(this, ast.left) || visit(this, ast.right);
        },
        visitChain: function(ast) {
          return false;
        },
        visitConditional: function(ast) {
          return visit(this, ast.condition) || visit(this, ast.trueExp) || visit(this, ast.falseExp);
        },
        visitFunctionCall: function(ast) {
          return true;
        },
        visitImplicitReceiver: function(ast) {
          return false;
        },
        visitInterpolation: function(ast) {
          return visitSome(this, ast.expressions);
        },
        visitKeyedRead: function(ast) {
          return false;
        },
        visitKeyedWrite: function(ast) {
          return false;
        },
        visitLiteralArray: function(ast) {
          return true;
        },
        visitLiteralMap: function(ast) {
          return true;
        },
        visitLiteralPrimitive: function(ast) {
          return false;
        },
        visitMethodCall: function(ast) {
          return true;
        },
        visitPipe: function(ast) {
          return true;
        },
        visitPrefixNot: function(ast) {
          return visit(this, ast.expression);
        },
        visitPropertyRead: function(ast) {
          return false;
        },
        visitPropertyWrite: function(ast) {
          return false;
        },
        visitQuote: function(ast) {
          return false;
        },
        visitSafeMethodCall: function(ast) {
          return true;
        },
        visitSafePropertyRead: function(ast) {
          return false;
        }
      });
    };
    _AstToIrVisitor.prototype.allocateTemporary = function() {
      var tempNumber = this._currentTemporary++;
      this.temporaryCount = Math.max(this._currentTemporary, this.temporaryCount);
      return new ReadVarExpr(temporaryName(this.bindingId, tempNumber));
    };
    _AstToIrVisitor.prototype.releaseTemporary = function(temporary) {
      this._currentTemporary--;
      if (temporary.name != temporaryName(this.bindingId, this._currentTemporary)) {
        throw new Error("Temporary " + temporary.name + " released out of order");
      }
    };
    return _AstToIrVisitor;
  }());
  function flattenStatements(arg, output) {
    if (Array.isArray(arg)) {
      ((arg)).forEach(function(entry) {
        return flattenStatements(entry, output);
      });
    } else {
      output.push(arg);
    }
  }
  function createCachedLiteralArray(builder, values) {
    if (values.length === 0) {
      return importExpr(createIdentifier(Identifiers.EMPTY_ARRAY));
    }
    var proxyExpr = THIS_EXPR.prop("_arr_" + builder.fields.length);
    var proxyParams = [];
    var proxyReturnEntries = [];
    for (var i = 0; i < values.length; i++) {
      var paramName = "p" + i;
      proxyParams.push(new FnParam(paramName));
      proxyReturnEntries.push(variable(paramName));
    }
    createPureProxy(fn(proxyParams, [new ReturnStatement(literalArr(proxyReturnEntries))], new ArrayType(DYNAMIC_TYPE)), values.length, proxyExpr, builder);
    return proxyExpr.callFn(values);
  }
  function createCachedLiteralMap(builder, entries) {
    if (entries.length === 0) {
      return importExpr(createIdentifier(Identifiers.EMPTY_MAP));
    }
    var proxyExpr = THIS_EXPR.prop("_map_" + builder.fields.length);
    var proxyParams = [];
    var proxyReturnEntries = [];
    var values = [];
    for (var i = 0; i < entries.length; i++) {
      var paramName = "p" + i;
      proxyParams.push(new FnParam(paramName));
      proxyReturnEntries.push([entries[i][0], variable(paramName)]);
      values.push((entries[i][1]));
    }
    createPureProxy(fn(proxyParams, [new ReturnStatement(literalMap(proxyReturnEntries))], new MapType(DYNAMIC_TYPE)), entries.length, proxyExpr, builder);
    return proxyExpr.callFn(values);
  }
  var DefaultNameResolver = (function() {
    function DefaultNameResolver() {}
    DefaultNameResolver.prototype.callPipe = function(name, input, args) {
      return null;
    };
    DefaultNameResolver.prototype.getLocal = function(name) {
      return null;
    };
    return DefaultNameResolver;
  }());
  function createCurrValueExpr(bindingId) {
    return variable("currVal_" + bindingId);
  }
  function createPreventDefaultVar(bindingId) {
    return variable("pd_" + bindingId);
  }
  function convertStmtIntoExpression(stmt) {
    if (stmt instanceof ExpressionStatement) {
      return stmt.expr;
    } else if (stmt instanceof ReturnStatement) {
      return stmt.value;
    }
    return null;
  }
  function writeToRenderer(view, boundProp, renderElement, renderValue, logBindingUpdate, securityContextExpression) {
    var updateStmts = [];
    var renderer = view.prop('renderer');
    renderValue = sanitizedValue(view, boundProp, renderValue, securityContextExpression);
    switch (boundProp.type) {
      case PropertyBindingType.Property:
        if (logBindingUpdate) {
          updateStmts.push(importExpr(createIdentifier(Identifiers.setBindingDebugInfo)).callFn([renderer, renderElement, literal(boundProp.name), renderValue]).toStmt());
        }
        updateStmts.push(renderer.callMethod('setElementProperty', [renderElement, literal(boundProp.name), renderValue]).toStmt());
        break;
      case PropertyBindingType.Attribute:
        renderValue = renderValue.isBlank().conditional(NULL_EXPR, renderValue.callMethod('toString', []));
        updateStmts.push(renderer.callMethod('setElementAttribute', [renderElement, literal(boundProp.name), renderValue]).toStmt());
        break;
      case PropertyBindingType.Class:
        updateStmts.push(renderer.callMethod('setElementClass', [renderElement, literal(boundProp.name), renderValue]).toStmt());
        break;
      case PropertyBindingType.Style:
        var strValue = renderValue.callMethod('toString', []);
        if (isPresent(boundProp.unit)) {
          strValue = strValue.plus(literal(boundProp.unit));
        }
        renderValue = renderValue.isBlank().conditional(NULL_EXPR, strValue);
        updateStmts.push(renderer.callMethod('setElementStyle', [renderElement, literal(boundProp.name), renderValue]).toStmt());
        break;
      case PropertyBindingType.Animation:
        throw new Error('Illegal state: Should not come here!');
    }
    return updateStmts;
  }
  function sanitizedValue(view, boundProp, renderValue, securityContextExpression) {
    if (boundProp.securityContext === _angular_core.SecurityContext.NONE) {
      return renderValue;
    }
    if (!boundProp.needsRuntimeSecurityContext) {
      securityContextExpression = createEnumExpression(Identifiers.SecurityContext, boundProp.securityContext);
    }
    if (!securityContextExpression) {
      throw new Error("internal error, no SecurityContext given " + boundProp.name);
    }
    var ctx = view.prop('viewUtils').prop('sanitizer');
    var args = [securityContextExpression, renderValue];
    return ctx.callMethod('sanitize', args);
  }
  function triggerAnimation(view, componentView, boundProp, boundOutputs, eventListener, renderElement, renderValue, lastRenderValue) {
    var detachStmts = [];
    var updateStmts = [];
    var animationName = boundProp.name;
    var animationFnExpr = componentView.prop('componentType').prop('animations').key(literal(animationName));
    var emptyStateValue = literal(EMPTY_STATE);
    var unitializedValue = importExpr(createIdentifier(Identifiers.UNINITIALIZED));
    var animationTransitionVar = variable('animationTransition_' + animationName);
    updateStmts.push(animationTransitionVar.set(animationFnExpr.callFn([view, renderElement, lastRenderValue.equals(unitializedValue).conditional(emptyStateValue, lastRenderValue), renderValue.equals(unitializedValue).conditional(emptyStateValue, renderValue)])).toDeclStmt());
    detachStmts.push(animationTransitionVar.set(animationFnExpr.callFn([view, renderElement, lastRenderValue, emptyStateValue])).toDeclStmt());
    var registerStmts = [];
    var animationStartMethodExists = boundOutputs.find(function(event) {
      return event.isAnimation && event.name == animationName && event.phase == 'start';
    });
    if (animationStartMethodExists) {
      registerStmts.push(animationTransitionVar.callMethod('onStart', [eventListener.callMethod(BuiltinMethod.Bind, [view, literal(BoundEventAst.calcFullName(animationName, null, 'start'))])]).toStmt());
    }
    var animationDoneMethodExists = boundOutputs.find(function(event) {
      return event.isAnimation && event.name == animationName && event.phase == 'done';
    });
    if (animationDoneMethodExists) {
      registerStmts.push(animationTransitionVar.callMethod('onDone', [eventListener.callMethod(BuiltinMethod.Bind, [view, literal(BoundEventAst.calcFullName(animationName, null, 'done'))])]).toStmt());
    }
    updateStmts.push.apply(updateStmts, registerStmts);
    detachStmts.push.apply(detachStmts, registerStmts);
    return {
      updateStmts: updateStmts,
      detachStmts: detachStmts
    };
  }
  function createClassStmt(config) {
    var parentArgs = config.parentArgs || [];
    var superCtorStmts = config.parent ? [SUPER_EXPR.callFn(parentArgs).toStmt()] : [];
    var builder = concatClassBuilderParts(Array.isArray(config.builders) ? config.builders : [config.builders]);
    var ctor = new ClassMethod(null, config.ctorParams || [], superCtorStmts.concat(builder.ctorStmts));
    return new ClassStmt(config.name, config.parent, builder.fields, builder.getters, ctor, builder.methods, config.modifiers || []);
  }
  function concatClassBuilderParts(builders) {
    return {
      fields: (_a = []).concat.apply(_a, builders.map(function(builder) {
        return builder.fields || [];
      })),
      methods: (_b = []).concat.apply(_b, builders.map(function(builder) {
        return builder.methods || [];
      })),
      getters: (_c = []).concat.apply(_c, builders.map(function(builder) {
        return builder.getters || [];
      })),
      ctorStmts: (_d = []).concat.apply(_d, builders.map(function(builder) {
        return builder.ctorStmts || [];
      }))
    };
    var _a,
        _b,
        _c,
        _d;
  }
  var __decorate$8 = (this && this.__decorate) || function(decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __metadata$8 = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var DirectiveWrapperCompileResult = (function() {
    function DirectiveWrapperCompileResult(statements, dirWrapperClassVar) {
      this.statements = statements;
      this.dirWrapperClassVar = dirWrapperClassVar;
    }
    return DirectiveWrapperCompileResult;
  }());
  var CONTEXT_FIELD_NAME = 'context';
  var CHANGES_FIELD_NAME = '_changes';
  var CHANGED_FIELD_NAME = '_changed';
  var EVENT_HANDLER_FIELD_NAME = '_eventHandler';
  var CURR_VALUE_VAR = variable('currValue');
  var THROW_ON_CHANGE_VAR = variable('throwOnChange');
  var FORCE_UPDATE_VAR = variable('forceUpdate');
  var VIEW_VAR = variable('view');
  var COMPONENT_VIEW_VAR = variable('componentView');
  var RENDER_EL_VAR = variable('el');
  var EVENT_NAME_VAR = variable('eventName');
  var RESET_CHANGES_STMT = THIS_EXPR.prop(CHANGES_FIELD_NAME).set(literalMap([])).toStmt();
  var DirectiveWrapperCompiler = (function() {
    function DirectiveWrapperCompiler(compilerConfig, _exprParser, _schemaRegistry, _console) {
      this.compilerConfig = compilerConfig;
      this._exprParser = _exprParser;
      this._schemaRegistry = _schemaRegistry;
      this._console = _console;
    }
    DirectiveWrapperCompiler.dirWrapperClassName = function(id) {
      return "Wrapper_" + identifierName(id);
    };
    DirectiveWrapperCompiler.prototype.compile = function(dirMeta) {
      var hostParseResult = parseHostBindings(dirMeta, this._exprParser, this._schemaRegistry);
      reportParseErrors(hostParseResult.errors, this._console);
      var builder = new DirectiveWrapperBuilder(this.compilerConfig, dirMeta);
      Object.keys(dirMeta.inputs).forEach(function(inputFieldName) {
        addCheckInputMethod(inputFieldName, builder);
      });
      addNgDoCheckMethod(builder);
      addCheckHostMethod(hostParseResult.hostProps, hostParseResult.hostListeners, builder);
      addHandleEventMethod(hostParseResult.hostListeners, builder);
      addSubscribeMethod(dirMeta, builder);
      var classStmt = builder.build();
      return new DirectiveWrapperCompileResult([classStmt], classStmt.name);
    };
    DirectiveWrapperCompiler = __decorate$8([CompilerInjectable(), __metadata$8('design:paramtypes', [CompilerConfig, Parser, ElementSchemaRegistry, Console])], DirectiveWrapperCompiler);
    return DirectiveWrapperCompiler;
  }());
  var DirectiveWrapperBuilder = (function() {
    function DirectiveWrapperBuilder(compilerConfig, dirMeta) {
      this.compilerConfig = compilerConfig;
      this.dirMeta = dirMeta;
      this.fields = [];
      this.getters = [];
      this.methods = [];
      this.ctorStmts = [];
      this.detachStmts = [];
      this.destroyStmts = [];
      var dirLifecycleHooks = dirMeta.type.lifecycleHooks;
      this.genChanges = dirLifecycleHooks.indexOf(LifecycleHooks.OnChanges) !== -1 || this.compilerConfig.logBindingUpdate;
      this.ngOnChanges = dirLifecycleHooks.indexOf(LifecycleHooks.OnChanges) !== -1;
      this.ngOnInit = dirLifecycleHooks.indexOf(LifecycleHooks.OnInit) !== -1;
      this.ngDoCheck = dirLifecycleHooks.indexOf(LifecycleHooks.DoCheck) !== -1;
      this.ngOnDestroy = dirLifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1;
      if (this.ngOnDestroy) {
        this.destroyStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod('ngOnDestroy', []).toStmt());
      }
    }
    DirectiveWrapperBuilder.prototype.build = function() {
      var dirDepParamNames = [];
      for (var i = 0; i < this.dirMeta.type.diDeps.length; i++) {
        dirDepParamNames.push("p" + i);
      }
      var methods = [new ClassMethod('ngOnDetach', [new FnParam(VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])), new FnParam(COMPONENT_VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])), new FnParam(RENDER_EL_VAR.name, DYNAMIC_TYPE)], this.detachStmts), new ClassMethod('ngOnDestroy', [], this.destroyStmts)];
      var fields = [new ClassField(EVENT_HANDLER_FIELD_NAME, FUNCTION_TYPE, [StmtModifier.Private]), new ClassField(CONTEXT_FIELD_NAME, importType(this.dirMeta.type)), new ClassField(CHANGED_FIELD_NAME, BOOL_TYPE, [StmtModifier.Private])];
      var ctorStmts = [THIS_EXPR.prop(CHANGED_FIELD_NAME).set(literal(false)).toStmt()];
      if (this.genChanges) {
        fields.push(new ClassField(CHANGES_FIELD_NAME, new MapType(DYNAMIC_TYPE), [StmtModifier.Private]));
        ctorStmts.push(RESET_CHANGES_STMT);
      }
      ctorStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME).set(importExpr(this.dirMeta.type).instantiate(dirDepParamNames.map(function(paramName) {
        return variable(paramName);
      }))).toStmt());
      return createClassStmt({
        name: DirectiveWrapperCompiler.dirWrapperClassName(this.dirMeta.type),
        ctorParams: dirDepParamNames.map(function(paramName) {
          return new FnParam(paramName, DYNAMIC_TYPE);
        }),
        builders: [{
          fields: fields,
          ctorStmts: ctorStmts,
          methods: methods
        }, this]
      });
    };
    return DirectiveWrapperBuilder;
  }());
  function addNgDoCheckMethod(builder) {
    var changedVar = variable('changed');
    var stmts = [changedVar.set(THIS_EXPR.prop(CHANGED_FIELD_NAME)).toDeclStmt(), THIS_EXPR.prop(CHANGED_FIELD_NAME).set(literal(false)).toStmt()];
    var lifecycleStmts = [];
    if (builder.genChanges) {
      var onChangesStmts = [];
      if (builder.ngOnChanges) {
        onChangesStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod('ngOnChanges', [THIS_EXPR.prop(CHANGES_FIELD_NAME)]).toStmt());
      }
      if (builder.compilerConfig.logBindingUpdate) {
        onChangesStmts.push(importExpr(createIdentifier(Identifiers.setBindingDebugInfoForChanges)).callFn([VIEW_VAR.prop('renderer'), RENDER_EL_VAR, THIS_EXPR.prop(CHANGES_FIELD_NAME)]).toStmt());
      }
      onChangesStmts.push(RESET_CHANGES_STMT);
      lifecycleStmts.push(new IfStmt(changedVar, onChangesStmts));
    }
    if (builder.ngOnInit) {
      lifecycleStmts.push(new IfStmt(VIEW_VAR.prop('numberOfChecks').identical(new LiteralExpr(0)), [THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod('ngOnInit', []).toStmt()]));
    }
    if (builder.ngDoCheck) {
      lifecycleStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod('ngDoCheck', []).toStmt());
    }
    if (lifecycleStmts.length > 0) {
      stmts.push(new IfStmt(not(THROW_ON_CHANGE_VAR), lifecycleStmts));
    }
    stmts.push(new ReturnStatement(changedVar));
    builder.methods.push(new ClassMethod('ngDoCheck', [new FnParam(VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])), new FnParam(RENDER_EL_VAR.name, DYNAMIC_TYPE), new FnParam(THROW_ON_CHANGE_VAR.name, BOOL_TYPE)], stmts, BOOL_TYPE));
  }
  function addCheckInputMethod(input, builder) {
    var field = createCheckBindingField(builder);
    var onChangeStatements = [THIS_EXPR.prop(CHANGED_FIELD_NAME).set(literal(true)).toStmt(), THIS_EXPR.prop(CONTEXT_FIELD_NAME).prop(input).set(CURR_VALUE_VAR).toStmt()];
    if (builder.genChanges) {
      onChangeStatements.push(THIS_EXPR.prop(CHANGES_FIELD_NAME).key(literal(input)).set(importExpr(createIdentifier(Identifiers.SimpleChange)).instantiate([field.expression, CURR_VALUE_VAR])).toStmt());
    }
    var methodBody = createCheckBindingStmt({
      currValExpr: CURR_VALUE_VAR,
      forceUpdate: FORCE_UPDATE_VAR,
      stmts: []
    }, field.expression, THROW_ON_CHANGE_VAR, onChangeStatements);
    builder.methods.push(new ClassMethod("check_" + input, [new FnParam(CURR_VALUE_VAR.name, DYNAMIC_TYPE), new FnParam(THROW_ON_CHANGE_VAR.name, BOOL_TYPE), new FnParam(FORCE_UPDATE_VAR.name, BOOL_TYPE)], methodBody));
  }
  function addCheckHostMethod(hostProps, hostEvents, builder) {
    var stmts = [];
    var methodParams = [new FnParam(VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])), new FnParam(COMPONENT_VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])), new FnParam(RENDER_EL_VAR.name, DYNAMIC_TYPE), new FnParam(THROW_ON_CHANGE_VAR.name, BOOL_TYPE)];
    hostProps.forEach(function(hostProp, hostPropIdx) {
      var field = createCheckBindingField(builder);
      var evalResult = convertPropertyBinding(builder, null, THIS_EXPR.prop(CONTEXT_FIELD_NAME), hostProp.value, field.bindingId);
      if (!evalResult) {
        return;
      }
      var securityContextExpr;
      if (hostProp.needsRuntimeSecurityContext) {
        securityContextExpr = variable("secCtx_" + methodParams.length);
        methodParams.push(new FnParam(securityContextExpr.name, importType(createIdentifier(Identifiers.SecurityContext))));
      }
      var checkBindingStmts;
      if (hostProp.isAnimation) {
        var _a = triggerAnimation(VIEW_VAR, COMPONENT_VIEW_VAR, hostProp, hostEvents, THIS_EXPR.prop(EVENT_HANDLER_FIELD_NAME).or(importExpr(createIdentifier(Identifiers.noop))), RENDER_EL_VAR, evalResult.currValExpr, field.expression),
            updateStmts = _a.updateStmts,
            detachStmts = _a.detachStmts;
        checkBindingStmts = updateStmts;
        (_b = builder.detachStmts).push.apply(_b, detachStmts);
      } else {
        checkBindingStmts = writeToRenderer(VIEW_VAR, hostProp, RENDER_EL_VAR, evalResult.currValExpr, builder.compilerConfig.logBindingUpdate, securityContextExpr);
      }
      stmts.push.apply(stmts, createCheckBindingStmt(evalResult, field.expression, THROW_ON_CHANGE_VAR, checkBindingStmts));
      var _b;
    });
    builder.methods.push(new ClassMethod('checkHost', methodParams, stmts));
  }
  function addHandleEventMethod(hostListeners, builder) {
    var resultVar = variable("result");
    var actionStmts = [resultVar.set(literal(true)).toDeclStmt(BOOL_TYPE)];
    hostListeners.forEach(function(hostListener, eventIdx) {
      var evalResult = convertActionBinding(builder, null, THIS_EXPR.prop(CONTEXT_FIELD_NAME), hostListener.handler, "sub_" + eventIdx);
      var trueStmts = evalResult.stmts;
      if (evalResult.preventDefault) {
        trueStmts.push(resultVar.set(evalResult.preventDefault.and(resultVar)).toStmt());
      }
      actionStmts.push(new IfStmt(EVENT_NAME_VAR.equals(literal(hostListener.fullName)), trueStmts));
    });
    actionStmts.push(new ReturnStatement(resultVar));
    builder.methods.push(new ClassMethod('handleEvent', [new FnParam(EVENT_NAME_VAR.name, STRING_TYPE), new FnParam(EventHandlerVars.event.name, DYNAMIC_TYPE)], actionStmts, BOOL_TYPE));
  }
  function addSubscribeMethod(dirMeta, builder) {
    var methodParams = [new FnParam(VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])), new FnParam(EVENT_HANDLER_FIELD_NAME, DYNAMIC_TYPE)];
    var stmts = [THIS_EXPR.prop(EVENT_HANDLER_FIELD_NAME).set(variable(EVENT_HANDLER_FIELD_NAME)).toStmt()];
    Object.keys(dirMeta.outputs).forEach(function(emitterPropName, emitterIdx) {
      var eventName = dirMeta.outputs[emitterPropName];
      var paramName = "emit" + emitterIdx;
      methodParams.push(new FnParam(paramName, BOOL_TYPE));
      var subscriptionFieldName = "subscription" + emitterIdx;
      builder.fields.push(new ClassField(subscriptionFieldName, DYNAMIC_TYPE));
      stmts.push(new IfStmt(variable(paramName), [THIS_EXPR.prop(subscriptionFieldName).set(THIS_EXPR.prop(CONTEXT_FIELD_NAME).prop(emitterPropName).callMethod(BuiltinMethod.SubscribeObservable, [variable(EVENT_HANDLER_FIELD_NAME).callMethod(BuiltinMethod.Bind, [VIEW_VAR, literal(eventName)])])).toStmt()]));
      builder.destroyStmts.push(THIS_EXPR.prop(subscriptionFieldName).and(THIS_EXPR.prop(subscriptionFieldName).callMethod('unsubscribe', [])).toStmt());
    });
    builder.methods.push(new ClassMethod('subscribe', methodParams, stmts));
  }
  var ParseResult = (function() {
    function ParseResult(hostProps, hostListeners, errors) {
      this.hostProps = hostProps;
      this.hostListeners = hostListeners;
      this.errors = errors;
    }
    return ParseResult;
  }());
  function parseHostBindings(dirMeta, exprParser, schemaRegistry) {
    var errors = [];
    var parser = new BindingParser(exprParser, DEFAULT_INTERPOLATION_CONFIG, schemaRegistry, [], errors);
    var moduleUrl = identifierModuleUrl(dirMeta.type);
    var sourceFileName = moduleUrl ? "in Directive " + identifierName(dirMeta.type) + " in " + moduleUrl : "in Directive " + identifierName(dirMeta.type);
    var sourceFile = new ParseSourceFile('', sourceFileName);
    var sourceSpan = new ParseSourceSpan(new ParseLocation(sourceFile, null, null, null), new ParseLocation(sourceFile, null, null, null));
    var parsedHostProps = parser.createDirectiveHostPropertyAsts(dirMeta.toSummary(), sourceSpan);
    var parsedHostListeners = parser.createDirectiveHostEventAsts(dirMeta.toSummary(), sourceSpan);
    return new ParseResult(parsedHostProps, parsedHostListeners, errors);
  }
  function reportParseErrors(parseErrors, console) {
    var warnings = parseErrors.filter(function(error) {
      return error.level === ParseErrorLevel.WARNING;
    });
    var errors = parseErrors.filter(function(error) {
      return error.level === ParseErrorLevel.FATAL;
    });
    if (warnings.length > 0) {
      this._console.warn("Directive parse warnings:\n" + warnings.join('\n'));
    }
    if (errors.length > 0) {
      throw new Error("Directive parse errors:\n" + errors.join('\n'));
    }
  }
  var DirectiveWrapperExpressions = (function() {
    function DirectiveWrapperExpressions() {}
    DirectiveWrapperExpressions.create = function(dir, depsExpr) {
      return importExpr(dir).instantiate(depsExpr, importType(dir));
    };
    DirectiveWrapperExpressions.context = function(dirWrapper) {
      return dirWrapper.prop(CONTEXT_FIELD_NAME);
    };
    DirectiveWrapperExpressions.ngDoCheck = function(dirWrapper, view, renderElement, throwOnChange) {
      return dirWrapper.callMethod('ngDoCheck', [view, renderElement, throwOnChange]);
    };
    DirectiveWrapperExpressions.checkHost = function(hostProps, dirWrapper, view, componentView, renderElement, throwOnChange, runtimeSecurityContexts) {
      if (hostProps.length) {
        return [dirWrapper.callMethod('checkHost', [view, componentView, renderElement, throwOnChange].concat(runtimeSecurityContexts)).toStmt()];
      } else {
        return [];
      }
    };
    DirectiveWrapperExpressions.ngOnDetach = function(hostProps, dirWrapper, view, componentView, renderEl) {
      if (hostProps.some(function(prop) {
        return prop.isAnimation;
      })) {
        return [dirWrapper.callMethod('ngOnDetach', [view, componentView, renderEl]).toStmt()];
      } else {
        return [];
      }
    };
    DirectiveWrapperExpressions.ngOnDestroy = function(dir, dirWrapper) {
      if (dir.type.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1 || Object.keys(dir.outputs).length > 0) {
        return [dirWrapper.callMethod('ngOnDestroy', []).toStmt()];
      } else {
        return [];
      }
    };
    DirectiveWrapperExpressions.subscribe = function(dirMeta, hostProps, usedEvents, dirWrapper, view, eventListener) {
      var needsSubscribe = false;
      var eventFlags = [];
      Object.keys(dirMeta.outputs).forEach(function(propName) {
        var eventName = dirMeta.outputs[propName];
        var eventUsed = usedEvents.indexOf(eventName) > -1;
        needsSubscribe = needsSubscribe || eventUsed;
        eventFlags.push(literal(eventUsed));
      });
      hostProps.forEach(function(hostProp) {
        if (hostProp.isAnimation && usedEvents.length > 0) {
          needsSubscribe = true;
        }
      });
      if (needsSubscribe) {
        return [dirWrapper.callMethod('subscribe', [view, eventListener].concat(eventFlags)).toStmt()];
      } else {
        return [];
      }
    };
    DirectiveWrapperExpressions.handleEvent = function(hostEvents, dirWrapper, eventName, event) {
      return dirWrapper.callMethod('handleEvent', [eventName, event]);
    };
    return DirectiveWrapperExpressions;
  }());
  function hasLifecycleHook(hook, token) {
    return reflector.hasLifecycleHook(token, getHookName(hook));
  }
  function getHookName(hook) {
    switch (hook) {
      case LifecycleHooks.OnInit:
        return 'ngOnInit';
      case LifecycleHooks.OnDestroy:
        return 'ngOnDestroy';
      case LifecycleHooks.DoCheck:
        return 'ngDoCheck';
      case LifecycleHooks.OnChanges:
        return 'ngOnChanges';
      case LifecycleHooks.AfterContentInit:
        return 'ngAfterContentInit';
      case LifecycleHooks.AfterContentChecked:
        return 'ngAfterContentChecked';
      case LifecycleHooks.AfterViewInit:
        return 'ngAfterViewInit';
      case LifecycleHooks.AfterViewChecked:
        return 'ngAfterViewChecked';
    }
  }
  var __decorate$10 = (this && this.__decorate) || function(decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __metadata$10 = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  function _isNgModuleMetadata(obj) {
    return obj instanceof _angular_core.NgModule;
  }
  var NgModuleResolver = (function() {
    function NgModuleResolver(_reflector) {
      if (_reflector === void 0) {
        _reflector = reflector;
      }
      this._reflector = _reflector;
    }
    NgModuleResolver.prototype.isNgModule = function(type) {
      return this._reflector.annotations(type).some(_isNgModuleMetadata);
    };
    NgModuleResolver.prototype.resolve = function(type, throwIfNotFound) {
      if (throwIfNotFound === void 0) {
        throwIfNotFound = true;
      }
      var ngModuleMeta = ListWrapper.findLast(this._reflector.annotations(type), _isNgModuleMetadata);
      if (isPresent(ngModuleMeta)) {
        return ngModuleMeta;
      } else {
        if (throwIfNotFound) {
          throw new Error("No NgModule metadata found for '" + stringify(type) + "'.");
        }
        return null;
      }
    };
    NgModuleResolver = __decorate$10([CompilerInjectable(), __metadata$10('design:paramtypes', [ReflectorReader])], NgModuleResolver);
    return NgModuleResolver;
  }());
  var __decorate$11 = (this && this.__decorate) || function(decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __metadata$11 = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  function _isPipeMetadata(type) {
    return type instanceof _angular_core.Pipe;
  }
  var PipeResolver = (function() {
    function PipeResolver(_reflector) {
      if (_reflector === void 0) {
        _reflector = reflector;
      }
      this._reflector = _reflector;
    }
    PipeResolver.prototype.isPipe = function(type) {
      var typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type));
      return typeMetadata && typeMetadata.some(_isPipeMetadata);
    };
    PipeResolver.prototype.resolve = function(type, throwIfNotFound) {
      if (throwIfNotFound === void 0) {
        throwIfNotFound = true;
      }
      var metas = this._reflector.annotations(_angular_core.resolveForwardRef(type));
      if (isPresent(metas)) {
        var annotation = ListWrapper.findLast(metas, _isPipeMetadata);
        if (isPresent(annotation)) {
          return annotation;
        }
      }
      if (throwIfNotFound) {
        throw new Error("No Pipe decorator found on " + stringify(type));
      }
      return null;
    };
    PipeResolver = __decorate$11([CompilerInjectable(), __metadata$11('design:paramtypes', [ReflectorReader])], PipeResolver);
    return PipeResolver;
  }());
  var __decorate$12 = (this && this.__decorate) || function(decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __metadata$12 = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var SummaryResolver = (function() {
    function SummaryResolver() {}
    SummaryResolver.prototype.resolveSummary = function(reference) {
      return null;
    };
    ;
    SummaryResolver.prototype.getSymbolsOf = function(filePath) {
      return [];
    };
    SummaryResolver = __decorate$12([CompilerInjectable(), __metadata$12('design:paramtypes', [])], SummaryResolver);
    return SummaryResolver;
  }());
  var __extends$18 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var __decorate$9 = (this && this.__decorate) || function(decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __metadata$9 = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var ERROR_COLLECTOR_TOKEN = new _angular_core.OpaqueToken('ErrorCollector');
  var CompileMetadataResolver = (function() {
    function CompileMetadataResolver(_ngModuleResolver, _directiveResolver, _pipeResolver, _summaryResolver, _schemaRegistry, _directiveNormalizer, _reflector, _errorCollector) {
      if (_reflector === void 0) {
        _reflector = reflector;
      }
      this._ngModuleResolver = _ngModuleResolver;
      this._directiveResolver = _directiveResolver;
      this._pipeResolver = _pipeResolver;
      this._summaryResolver = _summaryResolver;
      this._schemaRegistry = _schemaRegistry;
      this._directiveNormalizer = _directiveNormalizer;
      this._reflector = _reflector;
      this._errorCollector = _errorCollector;
      this._directiveCache = new Map();
      this._summaryCache = new Map();
      this._pipeCache = new Map();
      this._ngModuleCache = new Map();
      this._ngModuleOfTypes = new Map();
    }
    CompileMetadataResolver.prototype.clearCacheFor = function(type) {
      var dirMeta = this._directiveCache.get(type);
      this._directiveCache.delete(type);
      this._summaryCache.delete(type);
      this._pipeCache.delete(type);
      this._ngModuleOfTypes.delete(type);
      this._ngModuleCache.clear();
      if (dirMeta) {
        this._directiveNormalizer.clearCacheFor(dirMeta);
      }
    };
    CompileMetadataResolver.prototype.clearCache = function() {
      this._directiveCache.clear();
      this._summaryCache.clear();
      this._pipeCache.clear();
      this._ngModuleCache.clear();
      this._ngModuleOfTypes.clear();
      this._directiveNormalizer.clearCache();
    };
    CompileMetadataResolver.prototype.getAnimationEntryMetadata = function(entry) {
      var _this = this;
      var defs = entry.definitions.map(function(def) {
        return _this._getAnimationStateMetadata(def);
      });
      return new CompileAnimationEntryMetadata(entry.name, defs);
    };
    CompileMetadataResolver.prototype._getAnimationStateMetadata = function(value) {
      if (value instanceof _angular_core.AnimationStateDeclarationMetadata) {
        var styles = this._getAnimationStyleMetadata(value.styles);
        return new CompileAnimationStateDeclarationMetadata(value.stateNameExpr, styles);
      }
      if (value instanceof _angular_core.AnimationStateTransitionMetadata) {
        return new CompileAnimationStateTransitionMetadata(value.stateChangeExpr, this._getAnimationMetadata(value.steps));
      }
      return null;
    };
    CompileMetadataResolver.prototype._getAnimationStyleMetadata = function(value) {
      return new CompileAnimationStyleMetadata(value.offset, value.styles);
    };
    CompileMetadataResolver.prototype._getAnimationMetadata = function(value) {
      var _this = this;
      if (value instanceof _angular_core.AnimationStyleMetadata) {
        return this._getAnimationStyleMetadata(value);
      }
      if (value instanceof _angular_core.AnimationKeyframesSequenceMetadata) {
        return new CompileAnimationKeyframesSequenceMetadata(value.steps.map(function(entry) {
          return _this._getAnimationStyleMetadata(entry);
        }));
      }
      if (value instanceof _angular_core.AnimationAnimateMetadata) {
        var animateData = (this._getAnimationMetadata(value.styles));
        return new CompileAnimationAnimateMetadata(value.timings, animateData);
      }
      if (value instanceof _angular_core.AnimationWithStepsMetadata) {
        var steps = value.steps.map(function(step) {
          return _this._getAnimationMetadata(step);
        });
        if (value instanceof _angular_core.AnimationGroupMetadata) {
          return new CompileAnimationGroupMetadata(steps);
        }
        return new CompileAnimationSequenceMetadata(steps);
      }
      return null;
    };
    CompileMetadataResolver.prototype._loadSummary = function(type, kind) {
      var typeSummary = this._summaryCache.get(type);
      if (!typeSummary) {
        var summary = this._summaryResolver.resolveSummary(type);
        typeSummary = summary ? summary.type : null;
        this._summaryCache.set(type, typeSummary);
      }
      return typeSummary && typeSummary.summaryKind === kind ? typeSummary : null;
    };
    CompileMetadataResolver.prototype._loadDirectiveMetadata = function(directiveType, isSync) {
      var _this = this;
      if (this._directiveCache.has(directiveType)) {
        return;
      }
      directiveType = _angular_core.resolveForwardRef(directiveType);
      var _a = this.getNonNormalizedDirectiveMetadata(directiveType),
          annotation = _a.annotation,
          metadata = _a.metadata;
      var createDirectiveMetadata = function(templateMetadata) {
        var normalizedDirMeta = new CompileDirectiveMetadata({
          type: metadata.type,
          isComponent: metadata.isComponent,
          selector: metadata.selector,
          exportAs: metadata.exportAs,
          changeDetection: metadata.changeDetection,
          inputs: metadata.inputs,
          outputs: metadata.outputs,
          hostListeners: metadata.hostListeners,
          hostProperties: metadata.hostProperties,
          hostAttributes: metadata.hostAttributes,
          providers: metadata.providers,
          viewProviders: metadata.viewProviders,
          queries: metadata.queries,
          viewQueries: metadata.viewQueries,
          entryComponents: metadata.entryComponents,
          template: templateMetadata
        });
        _this._directiveCache.set(directiveType, normalizedDirMeta);
        _this._summaryCache.set(directiveType, normalizedDirMeta.toSummary());
        return normalizedDirMeta;
      };
      if (metadata.isComponent) {
        var templateMeta = this._directiveNormalizer.normalizeTemplate({
          componentType: directiveType,
          moduleUrl: componentModuleUrl(this._reflector, directiveType, annotation),
          encapsulation: metadata.template.encapsulation,
          template: metadata.template.template,
          templateUrl: metadata.template.templateUrl,
          styles: metadata.template.styles,
          styleUrls: metadata.template.styleUrls,
          animations: metadata.template.animations,
          interpolation: metadata.template.interpolation
        });
        if (templateMeta.syncResult) {
          createDirectiveMetadata(templateMeta.syncResult);
          return null;
        } else {
          if (isSync) {
            this._reportError(new ComponentStillLoadingError(directiveType), directiveType);
            return null;
          }
          return templateMeta.asyncResult.then(createDirectiveMetadata);
        }
      } else {
        createDirectiveMetadata(null);
        return null;
      }
    };
    CompileMetadataResolver.prototype.getNonNormalizedDirectiveMetadata = function(directiveType) {
      var _this = this;
      directiveType = _angular_core.resolveForwardRef(directiveType);
      var dirMeta = this._directiveResolver.resolve(directiveType);
      if (!dirMeta) {
        return null;
      }
      var nonNormalizedTemplateMetadata;
      if (dirMeta instanceof _angular_core.Component) {
        assertArrayOfStrings('styles', dirMeta.styles);
        assertArrayOfStrings('styleUrls', dirMeta.styleUrls);
        assertInterpolationSymbols('interpolation', dirMeta.interpolation);
        var animations = dirMeta.animations ? dirMeta.animations.map(function(e) {
          return _this.getAnimationEntryMetadata(e);
        }) : null;
        nonNormalizedTemplateMetadata = new CompileTemplateMetadata({
          encapsulation: dirMeta.encapsulation,
          template: dirMeta.template,
          templateUrl: dirMeta.templateUrl,
          styles: dirMeta.styles,
          styleUrls: dirMeta.styleUrls,
          animations: animations,
          interpolation: dirMeta.interpolation
        });
      }
      var changeDetectionStrategy = null;
      var viewProviders = [];
      var entryComponentMetadata = [];
      var selector = dirMeta.selector;
      if (dirMeta instanceof _angular_core.Component) {
        changeDetectionStrategy = dirMeta.changeDetection;
        if (dirMeta.viewProviders) {
          viewProviders = this._getProvidersMetadata(dirMeta.viewProviders, entryComponentMetadata, "viewProviders for \"" + stringifyType(directiveType) + "\"", [], directiveType);
        }
        if (dirMeta.entryComponents) {
          entryComponentMetadata = flattenAndDedupeArray(dirMeta.entryComponents).map(function(type) {
            return _this._getIdentifierMetadata(type);
          }).concat(entryComponentMetadata);
        }
        if (!selector) {
          selector = this._schemaRegistry.getDefaultComponentElementName();
        }
      } else {
        if (!selector) {
          this._reportError(new SyntaxError("Directive " + stringifyType(directiveType) + " has no selector, please add it!"), directiveType);
          selector = 'error';
        }
      }
      var providers = [];
      if (isPresent(dirMeta.providers)) {
        providers = this._getProvidersMetadata(dirMeta.providers, entryComponentMetadata, "providers for \"" + stringifyType(directiveType) + "\"", [], directiveType);
      }
      var queries = [];
      var viewQueries = [];
      if (isPresent(dirMeta.queries)) {
        queries = this._getQueriesMetadata(dirMeta.queries, false, directiveType);
        viewQueries = this._getQueriesMetadata(dirMeta.queries, true, directiveType);
      }
      var metadata = CompileDirectiveMetadata.create({
        selector: selector,
        exportAs: dirMeta.exportAs,
        isComponent: !!nonNormalizedTemplateMetadata,
        type: this._getTypeMetadata(directiveType),
        template: nonNormalizedTemplateMetadata,
        changeDetection: changeDetectionStrategy,
        inputs: dirMeta.inputs,
        outputs: dirMeta.outputs,
        host: dirMeta.host,
        providers: providers,
        viewProviders: viewProviders,
        queries: queries,
        viewQueries: viewQueries,
        entryComponents: entryComponentMetadata
      });
      return {
        metadata: metadata,
        annotation: dirMeta
      };
    };
    CompileMetadataResolver.prototype.getDirectiveMetadata = function(directiveType) {
      var dirMeta = this._directiveCache.get(directiveType);
      if (!dirMeta) {
        this._reportError(new SyntaxError("Illegal state: getDirectiveMetadata can only be called after loadNgModuleMetadata for a module that declares it. Directive " + stringifyType(directiveType) + "."), directiveType);
      }
      return dirMeta;
    };
    CompileMetadataResolver.prototype.getDirectiveSummary = function(dirType) {
      var dirSummary = (this._loadSummary(dirType, CompileSummaryKind.Directive));
      if (!dirSummary) {
        this._reportError(new SyntaxError("Illegal state: Could not load the summary for directive " + stringifyType(dirType) + "."), dirType);
      }
      return dirSummary;
    };
    CompileMetadataResolver.prototype.isDirective = function(type) {
      return this._directiveResolver.isDirective(type);
    };
    CompileMetadataResolver.prototype.isPipe = function(type) {
      return this._pipeResolver.isPipe(type);
    };
    CompileMetadataResolver.prototype.getNgModuleSummary = function(moduleType) {
      var moduleSummary = (this._loadSummary(moduleType, CompileSummaryKind.NgModule));
      if (!moduleSummary) {
        var moduleMeta = this.getNgModuleMetadata(moduleType, false);
        moduleSummary = moduleMeta ? moduleMeta.toSummary() : null;
        if (moduleSummary) {
          this._summaryCache.set(moduleType, moduleSummary);
        }
      }
      return moduleSummary;
    };
    CompileMetadataResolver.prototype.loadNgModuleDirectiveAndPipeMetadata = function(moduleType, isSync, throwIfNotFound) {
      var _this = this;
      if (throwIfNotFound === void 0) {
        throwIfNotFound = true;
      }
      var ngModule = this.getNgModuleMetadata(moduleType, throwIfNotFound);
      var loading = [];
      if (ngModule) {
        ngModule.declaredDirectives.forEach(function(id) {
          var promise = _this._loadDirectiveMetadata(id.reference, isSync);
          if (promise) {
            loading.push(promise);
          }
        });
        ngModule.declaredPipes.forEach(function(id) {
          return _this._loadPipeMetadata(id.reference);
        });
      }
      return Promise.all(loading);
    };
    CompileMetadataResolver.prototype.getNgModuleMetadata = function(moduleType, throwIfNotFound) {
      var _this = this;
      if (throwIfNotFound === void 0) {
        throwIfNotFound = true;
      }
      moduleType = _angular_core.resolveForwardRef(moduleType);
      var compileMeta = this._ngModuleCache.get(moduleType);
      if (compileMeta) {
        return compileMeta;
      }
      var meta = this._ngModuleResolver.resolve(moduleType, throwIfNotFound);
      if (!meta) {
        return null;
      }
      var declaredDirectives = [];
      var exportedNonModuleIdentifiers = [];
      var declaredPipes = [];
      var importedModules = [];
      var exportedModules = [];
      var providers = [];
      var entryComponents = [];
      var bootstrapComponents = [];
      var schemas = [];
      if (meta.imports) {
        flattenAndDedupeArray(meta.imports).forEach(function(importedType) {
          var importedModuleType;
          if (isValidType(importedType)) {
            importedModuleType = importedType;
          } else if (importedType && importedType.ngModule) {
            var moduleWithProviders = importedType;
            importedModuleType = moduleWithProviders.ngModule;
            if (moduleWithProviders.providers) {
              providers.push.apply(providers, _this._getProvidersMetadata(moduleWithProviders.providers, entryComponents, "provider for the NgModule '" + stringifyType(importedModuleType) + "'", [], importedType));
            }
          }
          if (importedModuleType) {
            var importedModuleSummary = _this.getNgModuleSummary(importedModuleType);
            if (!importedModuleSummary) {
              _this._reportError(new SyntaxError("Unexpected " + _this._getTypeDescriptor(importedType) + " '" + stringifyType(importedType) + "' imported by the module '" + stringifyType(moduleType) + "'"), moduleType);
              return;
            }
            importedModules.push(importedModuleSummary);
          } else {
            _this._reportError(new SyntaxError("Unexpected value '" + stringifyType(importedType) + "' imported by the module '" + stringifyType(moduleType) + "'"), moduleType);
            return;
          }
        });
      }
      if (meta.exports) {
        flattenAndDedupeArray(meta.exports).forEach(function(exportedType) {
          if (!isValidType(exportedType)) {
            _this._reportError(new SyntaxError("Unexpected value '" + stringifyType(exportedType) + "' exported by the module '" + stringifyType(moduleType) + "'"), moduleType);
            return;
          }
          var exportedModuleSummary = _this.getNgModuleSummary(exportedType);
          if (exportedModuleSummary) {
            exportedModules.push(exportedModuleSummary);
          } else {
            exportedNonModuleIdentifiers.push(_this._getIdentifierMetadata(exportedType));
          }
        });
      }
      var transitiveModule = this._getTransitiveNgModuleMetadata(importedModules, exportedModules);
      if (meta.declarations) {
        flattenAndDedupeArray(meta.declarations).forEach(function(declaredType) {
          if (!isValidType(declaredType)) {
            _this._reportError(new SyntaxError("Unexpected value '" + stringifyType(declaredType) + "' declared by the module '" + stringifyType(moduleType) + "'"), moduleType);
            return;
          }
          var declaredIdentifier = _this._getIdentifierMetadata(declaredType);
          if (_this._directiveResolver.isDirective(declaredType)) {
            transitiveModule.addDirective(declaredIdentifier);
            declaredDirectives.push(declaredIdentifier);
            _this._addTypeToModule(declaredType, moduleType);
          } else if (_this._pipeResolver.isPipe(declaredType)) {
            transitiveModule.addPipe(declaredIdentifier);
            transitiveModule.pipes.push(declaredIdentifier);
            declaredPipes.push(declaredIdentifier);
            _this._addTypeToModule(declaredType, moduleType);
          } else {
            _this._reportError(new SyntaxError("Unexpected " + _this._getTypeDescriptor(declaredType) + " '" + stringifyType(declaredType) + "' declared by the module '" + stringifyType(moduleType) + "'"), moduleType);
            return;
          }
        });
      }
      var exportedDirectives = [];
      var exportedPipes = [];
      exportedNonModuleIdentifiers.forEach(function(exportedId) {
        if (transitiveModule.directivesSet.has(exportedId.reference)) {
          exportedDirectives.push(exportedId);
          transitiveModule.addExportedDirective(exportedId);
        } else if (transitiveModule.pipesSet.has(exportedId.reference)) {
          exportedPipes.push(exportedId);
          transitiveModule.addExportedPipe(exportedId);
        } else {
          _this._reportError(new SyntaxError("Can't export " + _this._getTypeDescriptor(exportedId.reference) + " " + stringifyType(exportedId.reference) + " from " + stringifyType(moduleType) + " as it was neither declared nor imported!"), moduleType);
        }
      });
      if (meta.providers) {
        providers.push.apply(providers, this._getProvidersMetadata(meta.providers, entryComponents, "provider for the NgModule '" + stringifyType(moduleType) + "'", [], moduleType));
      }
      if (meta.entryComponents) {
        entryComponents.push.apply(entryComponents, flattenAndDedupeArray(meta.entryComponents).map(function(type) {
          return _this._getIdentifierMetadata(type);
        }));
      }
      if (meta.bootstrap) {
        flattenAndDedupeArray(meta.bootstrap).forEach(function(type) {
          if (!isValidType(type)) {
            _this._reportError(new SyntaxError("Unexpected value '" + stringifyType(type) + "' used in the bootstrap property of module '" + stringifyType(moduleType) + "'"), moduleType);
            return;
          }
          bootstrapComponents.push(_this._getIdentifierMetadata(type));
        });
      }
      entryComponents.push.apply(entryComponents, bootstrapComponents);
      if (meta.schemas) {
        schemas.push.apply(schemas, flattenAndDedupeArray(meta.schemas));
      }
      compileMeta = new CompileNgModuleMetadata({
        type: this._getTypeMetadata(moduleType),
        providers: providers,
        entryComponents: entryComponents,
        bootstrapComponents: bootstrapComponents,
        schemas: schemas,
        declaredDirectives: declaredDirectives,
        exportedDirectives: exportedDirectives,
        declaredPipes: declaredPipes,
        exportedPipes: exportedPipes,
        importedModules: importedModules,
        exportedModules: exportedModules,
        transitiveModule: transitiveModule,
        id: meta.id
      });
      entryComponents.forEach(function(id) {
        return transitiveModule.addEntryComponent(id);
      });
      providers.forEach(function(provider) {
        return transitiveModule.addProvider(provider, compileMeta.type);
      });
      transitiveModule.addModule(compileMeta.type);
      this._ngModuleCache.set(moduleType, compileMeta);
      return compileMeta;
    };
    CompileMetadataResolver.prototype._getTypeDescriptor = function(type) {
      if (this._directiveResolver.isDirective(type)) {
        return 'directive';
      }
      if (this._pipeResolver.isPipe(type)) {
        return 'pipe';
      }
      if (this._ngModuleResolver.isNgModule(type)) {
        return 'module';
      }
      if (((type)).provide) {
        return 'provider';
      }
      return 'value';
    };
    CompileMetadataResolver.prototype._addTypeToModule = function(type, moduleType) {
      var oldModule = this._ngModuleOfTypes.get(type);
      if (oldModule && oldModule !== moduleType) {
        this._reportError(new SyntaxError(("Type " + stringifyType(type) + " is part of the declarations of 2 modules: " + stringifyType(oldModule) + " and " + stringifyType(moduleType) + "! ") + ("Please consider moving " + stringifyType(type) + " to a higher module that imports " + stringifyType(oldModule) + " and " + stringifyType(moduleType) + ". ") + ("You can also create a new NgModule that exports and includes " + stringifyType(type) + " then import that NgModule in " + stringifyType(oldModule) + " and " + stringifyType(moduleType) + ".")), moduleType);
      }
      this._ngModuleOfTypes.set(type, moduleType);
    };
    CompileMetadataResolver.prototype._getTransitiveNgModuleMetadata = function(importedModules, exportedModules) {
      var result = new TransitiveCompileNgModuleMetadata();
      var modulesByToken = new Map();
      importedModules.concat(exportedModules).forEach(function(modSummary) {
        modSummary.modules.forEach(function(mod) {
          return result.addModule(mod);
        });
        modSummary.entryComponents.forEach(function(comp) {
          return result.addEntryComponent(comp);
        });
        var addedTokens = new Set();
        modSummary.providers.forEach(function(entry) {
          var tokenRef = tokenReference(entry.provider.token);
          var prevModules = modulesByToken.get(tokenRef);
          if (!prevModules) {
            prevModules = new Set();
            modulesByToken.set(tokenRef, prevModules);
          }
          var moduleRef = entry.module.reference;
          if (addedTokens.has(tokenRef) || !prevModules.has(moduleRef)) {
            prevModules.add(moduleRef);
            addedTokens.add(tokenRef);
            result.addProvider(entry.provider, entry.module);
          }
        });
      });
      exportedModules.forEach(function(modSummary) {
        modSummary.exportedDirectives.forEach(function(id) {
          return result.addExportedDirective(id);
        });
        modSummary.exportedPipes.forEach(function(id) {
          return result.addExportedPipe(id);
        });
      });
      importedModules.forEach(function(modSummary) {
        modSummary.exportedDirectives.forEach(function(id) {
          return result.addDirective(id);
        });
        modSummary.exportedPipes.forEach(function(id) {
          return result.addPipe(id);
        });
      });
      return result;
    };
    CompileMetadataResolver.prototype._getIdentifierMetadata = function(type) {
      type = _angular_core.resolveForwardRef(type);
      return {reference: type};
    };
    CompileMetadataResolver.prototype.isInjectable = function(type) {
      var annotations = this._reflector.annotations(type);
      return annotations.some(function(ann) {
        return ann.constructor === _angular_core.Injectable;
      });
    };
    CompileMetadataResolver.prototype.getInjectableSummary = function(type) {
      return {
        summaryKind: CompileSummaryKind.Injectable,
        type: this._getTypeMetadata(type)
      };
    };
    CompileMetadataResolver.prototype._getInjectableMetadata = function(type, dependencies) {
      if (dependencies === void 0) {
        dependencies = null;
      }
      var typeSummary = this._loadSummary(type, CompileSummaryKind.Injectable);
      if (typeSummary) {
        return typeSummary.type;
      }
      return this._getTypeMetadata(type, dependencies);
    };
    CompileMetadataResolver.prototype._getTypeMetadata = function(type, dependencies) {
      if (dependencies === void 0) {
        dependencies = null;
      }
      var identifier = this._getIdentifierMetadata(type);
      return {
        reference: identifier.reference,
        diDeps: this._getDependenciesMetadata(identifier.reference, dependencies),
        lifecycleHooks: LIFECYCLE_HOOKS_VALUES.filter(function(hook) {
          return hasLifecycleHook(hook, identifier.reference);
        })
      };
    };
    CompileMetadataResolver.prototype._getFactoryMetadata = function(factory, dependencies) {
      if (dependencies === void 0) {
        dependencies = null;
      }
      factory = _angular_core.resolveForwardRef(factory);
      return {
        reference: factory,
        diDeps: this._getDependenciesMetadata(factory, dependencies)
      };
    };
    CompileMetadataResolver.prototype.getPipeMetadata = function(pipeType) {
      var pipeMeta = this._pipeCache.get(pipeType);
      if (!pipeMeta) {
        this._reportError(new SyntaxError("Illegal state: getPipeMetadata can only be called after loadNgModuleMetadata for a module that declares it. Pipe " + stringifyType(pipeType) + "."), pipeType);
      }
      return pipeMeta;
    };
    CompileMetadataResolver.prototype.getPipeSummary = function(pipeType) {
      var pipeSummary = (this._loadSummary(pipeType, CompileSummaryKind.Pipe));
      if (!pipeSummary) {
        this._reportError(new SyntaxError("Illegal state: Could not load the summary for pipe " + stringifyType(pipeType) + "."), pipeType);
      }
      return pipeSummary;
    };
    CompileMetadataResolver.prototype.getOrLoadPipeMetadata = function(pipeType) {
      var pipeMeta = this._pipeCache.get(pipeType);
      if (!pipeMeta) {
        pipeMeta = this._loadPipeMetadata(pipeType);
      }
      return pipeMeta;
    };
    CompileMetadataResolver.prototype._loadPipeMetadata = function(pipeType) {
      pipeType = _angular_core.resolveForwardRef(pipeType);
      var pipeAnnotation = this._pipeResolver.resolve(pipeType);
      var pipeMeta = new CompilePipeMetadata({
        type: this._getTypeMetadata(pipeType),
        name: pipeAnnotation.name,
        pure: pipeAnnotation.pure
      });
      this._pipeCache.set(pipeType, pipeMeta);
      this._summaryCache.set(pipeType, pipeMeta.toSummary());
      return pipeMeta;
    };
    CompileMetadataResolver.prototype._getDependenciesMetadata = function(typeOrFunc, dependencies) {
      var _this = this;
      var hasUnknownDeps = false;
      var params = dependencies || this._reflector.parameters(typeOrFunc) || [];
      var dependenciesMetadata = params.map(function(param) {
        var isAttribute = false;
        var isHost = false;
        var isSelf = false;
        var isSkipSelf = false;
        var isOptional = false;
        var token = null;
        if (Array.isArray(param)) {
          param.forEach(function(paramEntry) {
            if (paramEntry instanceof _angular_core.Host) {
              isHost = true;
            } else if (paramEntry instanceof _angular_core.Self) {
              isSelf = true;
            } else if (paramEntry instanceof _angular_core.SkipSelf) {
              isSkipSelf = true;
            } else if (paramEntry instanceof _angular_core.Optional) {
              isOptional = true;
            } else if (paramEntry instanceof _angular_core.Attribute) {
              isAttribute = true;
              token = paramEntry.attributeName;
            } else if (paramEntry instanceof _angular_core.Inject) {
              token = paramEntry.token;
            } else if (isValidType(paramEntry) && isBlank(token)) {
              token = paramEntry;
            }
          });
        } else {
          token = param;
        }
        if (isBlank(token)) {
          hasUnknownDeps = true;
          return null;
        }
        return {
          isAttribute: isAttribute,
          isHost: isHost,
          isSelf: isSelf,
          isSkipSelf: isSkipSelf,
          isOptional: isOptional,
          token: _this._getTokenMetadata(token)
        };
      });
      if (hasUnknownDeps) {
        var depsTokens = dependenciesMetadata.map(function(dep) {
          return dep ? stringifyType(dep.token) : '?';
        }).join(', ');
        this._reportError(new SyntaxError("Can't resolve all parameters for " + stringifyType(typeOrFunc) + ": (" + depsTokens + ")."), typeOrFunc);
      }
      return dependenciesMetadata;
    };
    CompileMetadataResolver.prototype._getTokenMetadata = function(token) {
      token = _angular_core.resolveForwardRef(token);
      var compileToken;
      if (typeof token === 'string') {
        compileToken = {value: token};
      } else {
        compileToken = {identifier: {reference: token}};
      }
      return compileToken;
    };
    CompileMetadataResolver.prototype._getProvidersMetadata = function(providers, targetEntryComponents, debugInfo, compileProviders, type) {
      var _this = this;
      if (compileProviders === void 0) {
        compileProviders = [];
      }
      providers.forEach(function(provider, providerIdx) {
        if (Array.isArray(provider)) {
          _this._getProvidersMetadata(provider, targetEntryComponents, debugInfo, compileProviders);
        } else {
          provider = _angular_core.resolveForwardRef(provider);
          var providerMeta = void 0;
          if (provider && typeof provider == 'object' && provider.hasOwnProperty('provide')) {
            providerMeta = new ProviderMeta(provider.provide, provider);
          } else if (isValidType(provider)) {
            providerMeta = new ProviderMeta(provider, {useClass: provider});
          } else {
            var providersInfo = ((providers.reduce(function(soFar, seenProvider, seenProviderIdx) {
              if (seenProviderIdx < providerIdx) {
                soFar.push("" + stringifyType(seenProvider));
              } else if (seenProviderIdx == providerIdx) {
                soFar.push("?" + stringifyType(seenProvider) + "?");
              } else if (seenProviderIdx == providerIdx + 1) {
                soFar.push('...');
              }
              return soFar;
            }, []))).join(', ');
            _this._reportError(new SyntaxError("Invalid " + (debugInfo ? debugInfo : 'provider') + " - only instances of Provider and Type are allowed, got: [" + providersInfo + "]"), type);
          }
          if (providerMeta.token === resolveIdentifier(Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS)) {
            targetEntryComponents.push.apply(targetEntryComponents, _this._getEntryComponentsFromProvider(providerMeta, type));
          } else {
            compileProviders.push(_this.getProviderMetadata(providerMeta));
          }
        }
      });
      return compileProviders;
    };
    CompileMetadataResolver.prototype._getEntryComponentsFromProvider = function(provider, type) {
      var _this = this;
      var components = [];
      var collectedIdentifiers = [];
      if (provider.useFactory || provider.useExisting || provider.useClass) {
        this._reportError(new SyntaxError("The ANALYZE_FOR_ENTRY_COMPONENTS token only supports useValue!"), type);
        return [];
      }
      if (!provider.multi) {
        this._reportError(new SyntaxError("The ANALYZE_FOR_ENTRY_COMPONENTS token only supports 'multi = true'!"), type);
        return [];
      }
      extractIdentifiers(provider.useValue, collectedIdentifiers);
      collectedIdentifiers.forEach(function(identifier) {
        if (_this._directiveResolver.isDirective(identifier.reference) || _this._loadSummary(identifier.reference, CompileSummaryKind.Directive)) {
          components.push(identifier);
        }
      });
      return components;
    };
    CompileMetadataResolver.prototype.getProviderMetadata = function(provider) {
      var compileDeps;
      var compileTypeMetadata = null;
      var compileFactoryMetadata = null;
      var token = this._getTokenMetadata(provider.token);
      if (provider.useClass) {
        compileTypeMetadata = this._getInjectableMetadata(provider.useClass, provider.dependencies);
        compileDeps = compileTypeMetadata.diDeps;
        if (provider.token === provider.useClass) {
          token = {identifier: compileTypeMetadata};
        }
      } else if (provider.useFactory) {
        compileFactoryMetadata = this._getFactoryMetadata(provider.useFactory, provider.dependencies);
        compileDeps = compileFactoryMetadata.diDeps;
      }
      return {
        token: token,
        useClass: compileTypeMetadata,
        useValue: provider.useValue,
        useFactory: compileFactoryMetadata,
        useExisting: provider.useExisting ? this._getTokenMetadata(provider.useExisting) : null,
        deps: compileDeps,
        multi: provider.multi
      };
    };
    CompileMetadataResolver.prototype._getQueriesMetadata = function(queries, isViewQuery, directiveType) {
      var _this = this;
      var res = [];
      Object.keys(queries).forEach(function(propertyName) {
        var query = queries[propertyName];
        if (query.isViewQuery === isViewQuery) {
          res.push(_this._getQueryMetadata(query, propertyName, directiveType));
        }
      });
      return res;
    };
    CompileMetadataResolver.prototype._queryVarBindings = function(selector) {
      return selector.split(/\s*,\s*/);
    };
    CompileMetadataResolver.prototype._getQueryMetadata = function(q, propertyName, typeOrFunc) {
      var _this = this;
      var selectors;
      if (typeof q.selector === 'string') {
        selectors = this._queryVarBindings(q.selector).map(function(varName) {
          return _this._getTokenMetadata(varName);
        });
      } else {
        if (!q.selector) {
          this._reportError(new SyntaxError("Can't construct a query for the property \"" + propertyName + "\" of \"" + stringifyType(typeOrFunc) + "\" since the query selector wasn't defined."), typeOrFunc);
        }
        selectors = [this._getTokenMetadata(q.selector)];
      }
      return {
        selectors: selectors,
        first: q.first,
        descendants: q.descendants,
        propertyName: propertyName,
        read: q.read ? this._getTokenMetadata(q.read) : null
      };
    };
    CompileMetadataResolver.prototype._reportError = function(error, type, otherType) {
      if (this._errorCollector) {
        this._errorCollector(error, type);
        if (otherType) {
          this._errorCollector(error, otherType);
        }
      } else {
        throw error;
      }
    };
    CompileMetadataResolver.ctorParameters = function() {
      return [{type: NgModuleResolver}, {type: DirectiveResolver}, {type: PipeResolver}, {type: SummaryResolver}, {type: ElementSchemaRegistry}, {type: DirectiveNormalizer}, {type: ReflectorReader}, {
        type: undefined,
        decorators: [{type: _angular_core.Optional}, {
          type: _angular_core.Inject,
          args: [ERROR_COLLECTOR_TOKEN]
        }]
      }];
    };
    CompileMetadataResolver = __decorate$9([CompilerInjectable(), __metadata$9('design:paramtypes', [NgModuleResolver, DirectiveResolver, PipeResolver, SummaryResolver, ElementSchemaRegistry, DirectiveNormalizer, ReflectorReader, Function])], CompileMetadataResolver);
    return CompileMetadataResolver;
  }());
  function flattenArray(tree, out) {
    if (out === void 0) {
      out = [];
    }
    if (tree) {
      for (var i = 0; i < tree.length; i++) {
        var item = _angular_core.resolveForwardRef(tree[i]);
        if (Array.isArray(item)) {
          flattenArray(item, out);
        } else {
          out.push(item);
        }
      }
    }
    return out;
  }
  function dedupeArray(array) {
    if (array) {
      return Array.from(new Set(array));
    }
    return [];
  }
  function flattenAndDedupeArray(tree) {
    return dedupeArray(flattenArray(tree));
  }
  function isValidType(value) {
    return (value instanceof StaticSymbol) || (value instanceof _angular_core.Type);
  }
  function componentModuleUrl(reflector, type, cmpMetadata) {
    if (type instanceof StaticSymbol) {
      return type.filePath;
    }
    var moduleId = cmpMetadata.moduleId;
    if (typeof moduleId === 'string') {
      var scheme = getUrlScheme(moduleId);
      return scheme ? moduleId : "package:" + moduleId + MODULE_SUFFIX;
    } else if (moduleId !== null && moduleId !== void 0) {
      throw new SyntaxError(("moduleId should be a string in \"" + stringifyType(type) + "\". See https://goo.gl/wIDDiL for more information.\n") + "If you're using Webpack you should inline the template and the styles, see https://goo.gl/X2J8zc.");
    }
    return reflector.importUri(type);
  }
  function extractIdentifiers(value, targetIdentifiers) {
    visitValue(value, new _CompileValueConverter(), targetIdentifiers);
  }
  var _CompileValueConverter = (function(_super) {
    __extends$18(_CompileValueConverter, _super);
    function _CompileValueConverter() {
      _super.apply(this, arguments);
    }
    _CompileValueConverter.prototype.visitOther = function(value, targetIdentifiers) {
      targetIdentifiers.push({reference: value});
    };
    return _CompileValueConverter;
  }(ValueTransformer));
  function stringifyType(type) {
    if (type instanceof StaticSymbol) {
      return type.name + " in " + type.filePath;
    } else {
      return stringify(type);
    }
  }
  var QUOTED_KEYS = '$quoted$';
  function convertValueToOutputAst(value, type) {
    if (type === void 0) {
      type = null;
    }
    return visitValue(value, new _ValueOutputAstTransformer(), type);
  }
  var _ValueOutputAstTransformer = (function() {
    function _ValueOutputAstTransformer() {}
    _ValueOutputAstTransformer.prototype.visitArray = function(arr, type) {
      var _this = this;
      return literalArr(arr.map(function(value) {
        return visitValue(value, _this, null);
      }), type);
    };
    _ValueOutputAstTransformer.prototype.visitStringMap = function(map, type) {
      var _this = this;
      var entries = [];
      var quotedSet = new Set(map && map[QUOTED_KEYS]);
      Object.keys(map).forEach(function(key) {
        entries.push(new LiteralMapEntry(key, visitValue(map[key], _this, null), quotedSet.has(key)));
      });
      return new LiteralMapExpr(entries, type);
    };
    _ValueOutputAstTransformer.prototype.visitPrimitive = function(value, type) {
      return literal(value, type);
    };
    _ValueOutputAstTransformer.prototype.visitOther = function(value, type) {
      if (value instanceof Expression) {
        return value;
      } else {
        return importExpr({reference: value});
      }
    };
    return _ValueOutputAstTransformer;
  }());
  var __decorate$13 = (this && this.__decorate) || function(decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __metadata$13 = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var ComponentFactoryDependency = (function() {
    function ComponentFactoryDependency(comp, placeholder) {
      this.comp = comp;
      this.placeholder = placeholder;
    }
    return ComponentFactoryDependency;
  }());
  var NgModuleCompileResult = (function() {
    function NgModuleCompileResult(statements, ngModuleFactoryVar, dependencies) {
      this.statements = statements;
      this.ngModuleFactoryVar = ngModuleFactoryVar;
      this.dependencies = dependencies;
    }
    return NgModuleCompileResult;
  }());
  var NgModuleCompiler = (function() {
    function NgModuleCompiler() {}
    NgModuleCompiler.prototype.compile = function(ngModuleMeta, extraProviders) {
      var moduleUrl = identifierModuleUrl(ngModuleMeta.type);
      var sourceFileName = isPresent(moduleUrl) ? "in NgModule " + identifierName(ngModuleMeta.type) + " in " + moduleUrl : "in NgModule " + identifierName(ngModuleMeta.type);
      var sourceFile = new ParseSourceFile('', sourceFileName);
      var sourceSpan = new ParseSourceSpan(new ParseLocation(sourceFile, null, null, null), new ParseLocation(sourceFile, null, null, null));
      var deps = [];
      var bootstrapComponentFactories = [];
      var entryComponentFactories = ngModuleMeta.transitiveModule.entryComponents.map(function(entryComponent) {
        var id = {reference: null};
        if (ngModuleMeta.bootstrapComponents.some(function(id) {
          return id.reference === entryComponent.reference;
        })) {
          bootstrapComponentFactories.push(id);
        }
        deps.push(new ComponentFactoryDependency(entryComponent, id));
        return id;
      });
      var builder = new _InjectorBuilder(ngModuleMeta, entryComponentFactories, bootstrapComponentFactories, sourceSpan);
      var providerParser = new NgModuleProviderAnalyzer(ngModuleMeta, extraProviders, sourceSpan);
      providerParser.parse().forEach(function(provider) {
        return builder.addProvider(provider);
      });
      var injectorClass = builder.build();
      var ngModuleFactoryVar = identifierName(ngModuleMeta.type) + "NgFactory";
      var ngModuleFactoryStmt = variable(ngModuleFactoryVar).set(importExpr(createIdentifier(Identifiers.NgModuleFactory)).instantiate([variable(injectorClass.name), importExpr(ngModuleMeta.type)], importType(createIdentifier(Identifiers.NgModuleFactory), [importType(ngModuleMeta.type)], [TypeModifier.Const]))).toDeclStmt(null, [StmtModifier.Final]);
      var stmts = [injectorClass, ngModuleFactoryStmt];
      if (ngModuleMeta.id) {
        var registerFactoryStmt = importExpr(createIdentifier(Identifiers.RegisterModuleFactoryFn)).callFn([literal(ngModuleMeta.id), variable(ngModuleFactoryVar)]).toStmt();
        stmts.push(registerFactoryStmt);
      }
      return new NgModuleCompileResult(stmts, ngModuleFactoryVar, deps);
    };
    NgModuleCompiler = __decorate$13([CompilerInjectable(), __metadata$13('design:paramtypes', [])], NgModuleCompiler);
    return NgModuleCompiler;
  }());
  var _InjectorBuilder = (function() {
    function _InjectorBuilder(_ngModuleMeta, _entryComponentFactories, _bootstrapComponentFactories, _sourceSpan) {
      this._ngModuleMeta = _ngModuleMeta;
      this._entryComponentFactories = _entryComponentFactories;
      this._bootstrapComponentFactories = _bootstrapComponentFactories;
      this._sourceSpan = _sourceSpan;
      this.fields = [];
      this.getters = [];
      this.methods = [];
      this.ctorStmts = [];
      this._tokens = [];
      this._instances = new Map();
      this._createStmts = [];
      this._destroyStmts = [];
    }
    _InjectorBuilder.prototype.addProvider = function(resolvedProvider) {
      var _this = this;
      var providerValueExpressions = resolvedProvider.providers.map(function(provider) {
        return _this._getProviderValue(provider);
      });
      var propName = "_" + tokenName(resolvedProvider.token) + "_" + this._instances.size;
      var instance = this._createProviderProperty(propName, resolvedProvider, providerValueExpressions, resolvedProvider.multiProvider, resolvedProvider.eager);
      if (resolvedProvider.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1) {
        this._destroyStmts.push(instance.callMethod('ngOnDestroy', []).toStmt());
      }
      this._tokens.push(resolvedProvider.token);
      this._instances.set(tokenReference(resolvedProvider.token), instance);
    };
    _InjectorBuilder.prototype.build = function() {
      var _this = this;
      var getMethodStmts = this._tokens.map(function(token) {
        var providerExpr = _this._instances.get(tokenReference(token));
        return new IfStmt(InjectMethodVars.token.identical(createDiTokenExpression(token)), [new ReturnStatement(providerExpr)]);
      });
      var methods = [new ClassMethod('createInternal', [], this._createStmts.concat(new ReturnStatement(this._instances.get(this._ngModuleMeta.type.reference))), importType(this._ngModuleMeta.type)), new ClassMethod('getInternal', [new FnParam(InjectMethodVars.token.name, DYNAMIC_TYPE), new FnParam(InjectMethodVars.notFoundResult.name, DYNAMIC_TYPE)], getMethodStmts.concat([new ReturnStatement(InjectMethodVars.notFoundResult)]), DYNAMIC_TYPE), new ClassMethod('destroyInternal', [], this._destroyStmts)];
      var parentArgs = [variable(InjectorProps.parent.name), literalArr(this._entryComponentFactories.map(function(componentFactory) {
        return importExpr(componentFactory);
      })), literalArr(this._bootstrapComponentFactories.map(function(componentFactory) {
        return importExpr(componentFactory);
      }))];
      var injClassName = identifierName(this._ngModuleMeta.type) + "Injector";
      return createClassStmt({
        name: injClassName,
        ctorParams: [new FnParam(InjectorProps.parent.name, importType(createIdentifier(Identifiers.Injector)))],
        parent: importExpr(createIdentifier(Identifiers.NgModuleInjector), [importType(this._ngModuleMeta.type)]),
        parentArgs: parentArgs,
        builders: [{methods: methods}, this]
      });
    };
    _InjectorBuilder.prototype._getProviderValue = function(provider) {
      var _this = this;
      var result;
      if (isPresent(provider.useExisting)) {
        result = this._getDependency({token: provider.useExisting});
      } else if (isPresent(provider.useFactory)) {
        var deps = provider.deps || provider.useFactory.diDeps;
        var depsExpr = deps.map(function(dep) {
          return _this._getDependency(dep);
        });
        result = importExpr(provider.useFactory).callFn(depsExpr);
      } else if (isPresent(provider.useClass)) {
        var deps = provider.deps || provider.useClass.diDeps;
        var depsExpr = deps.map(function(dep) {
          return _this._getDependency(dep);
        });
        result = importExpr(provider.useClass).instantiate(depsExpr, importType(provider.useClass));
      } else {
        result = convertValueToOutputAst(provider.useValue);
      }
      return result;
    };
    _InjectorBuilder.prototype._createProviderProperty = function(propName, provider, providerValueExpressions, isMulti, isEager) {
      var resolvedProviderValueExpr;
      var type;
      if (isMulti) {
        resolvedProviderValueExpr = literalArr(providerValueExpressions);
        type = new ArrayType(DYNAMIC_TYPE);
      } else {
        resolvedProviderValueExpr = providerValueExpressions[0];
        type = providerValueExpressions[0].type;
      }
      if (!type) {
        type = DYNAMIC_TYPE;
      }
      if (isEager) {
        this.fields.push(new ClassField(propName, type));
        this._createStmts.push(THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());
      } else {
        var internalField = "_" + propName;
        this.fields.push(new ClassField(internalField, type));
        var getterStmts = [new IfStmt(THIS_EXPR.prop(internalField).isBlank(), [THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt()]), new ReturnStatement(THIS_EXPR.prop(internalField))];
        this.getters.push(new ClassGetter(propName, getterStmts, type));
      }
      return THIS_EXPR.prop(propName);
    };
    _InjectorBuilder.prototype._getDependency = function(dep) {
      var result = null;
      if (dep.isValue) {
        result = literal(dep.value);
      }
      if (!dep.isSkipSelf) {
        if (dep.token && (tokenReference(dep.token) === resolveIdentifier(Identifiers.Injector) || tokenReference(dep.token) === resolveIdentifier(Identifiers.ComponentFactoryResolver))) {
          result = THIS_EXPR;
        }
        if (!result) {
          result = this._instances.get(tokenReference(dep.token));
        }
      }
      if (!result) {
        var args = [createDiTokenExpression(dep.token)];
        if (dep.isOptional) {
          args.push(NULL_EXPR);
        }
        result = InjectorProps.parent.callMethod('get', args);
      }
      return result;
    };
    return _InjectorBuilder;
  }());
  var InjectorProps = (function() {
    function InjectorProps() {}
    InjectorProps.parent = THIS_EXPR.prop('parent');
    return InjectorProps;
  }());
  var InjectMethodVars = (function() {
    function InjectMethodVars() {}
    InjectMethodVars.token = variable('token');
    InjectMethodVars.notFoundResult = variable('notFoundResult');
    return InjectMethodVars;
  }());
  var _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\|\n|\r|\$/g;
  var _LEGAL_IDENTIFIER_RE = /^[$A-Z_][0-9A-Z_$]*$/i;
  var CATCH_ERROR_VAR$1 = variable('error');
  var CATCH_STACK_VAR$1 = variable('stack');
  var _EmittedLine = (function() {
    function _EmittedLine(indent) {
      this.indent = indent;
      this.parts = [];
    }
    return _EmittedLine;
  }());
  var EmitterVisitorContext = (function() {
    function EmitterVisitorContext(_exportedVars, _indent) {
      this._exportedVars = _exportedVars;
      this._indent = _indent;
      this._classes = [];
      this._lines = [new _EmittedLine(_indent)];
    }
    EmitterVisitorContext.createRoot = function(exportedVars) {
      return new EmitterVisitorContext(exportedVars, 0);
    };
    Object.defineProperty(EmitterVisitorContext.prototype, "_currentLine", {
      get: function() {
        return this._lines[this._lines.length - 1];
      },
      enumerable: true,
      configurable: true
    });
    EmitterVisitorContext.prototype.isExportedVar = function(varName) {
      return this._exportedVars.indexOf(varName) !== -1;
    };
    EmitterVisitorContext.prototype.println = function(lastPart) {
      if (lastPart === void 0) {
        lastPart = '';
      }
      this.print(lastPart, true);
    };
    EmitterVisitorContext.prototype.lineIsEmpty = function() {
      return this._currentLine.parts.length === 0;
    };
    EmitterVisitorContext.prototype.print = function(part, newLine) {
      if (newLine === void 0) {
        newLine = false;
      }
      if (part.length > 0) {
        this._currentLine.parts.push(part);
      }
      if (newLine) {
        this._lines.push(new _EmittedLine(this._indent));
      }
    };
    EmitterVisitorContext.prototype.removeEmptyLastLine = function() {
      if (this.lineIsEmpty()) {
        this._lines.pop();
      }
    };
    EmitterVisitorContext.prototype.incIndent = function() {
      this._indent++;
      this._currentLine.indent = this._indent;
    };
    EmitterVisitorContext.prototype.decIndent = function() {
      this._indent--;
      this._currentLine.indent = this._indent;
    };
    EmitterVisitorContext.prototype.pushClass = function(clazz) {
      this._classes.push(clazz);
    };
    EmitterVisitorContext.prototype.popClass = function() {
      return this._classes.pop();
    };
    Object.defineProperty(EmitterVisitorContext.prototype, "currentClass", {
      get: function() {
        return this._classes.length > 0 ? this._classes[this._classes.length - 1] : null;
      },
      enumerable: true,
      configurable: true
    });
    EmitterVisitorContext.prototype.toSource = function() {
      var lines = this._lines;
      if (lines[lines.length - 1].parts.length === 0) {
        lines = lines.slice(0, lines.length - 1);
      }
      return lines.map(function(line) {
        if (line.parts.length > 0) {
          return _createIndent(line.indent) + line.parts.join('');
        } else {
          return '';
        }
      }).join('\n');
    };
    return EmitterVisitorContext;
  }());
  var AbstractEmitterVisitor = (function() {
    function AbstractEmitterVisitor(_escapeDollarInStrings) {
      this._escapeDollarInStrings = _escapeDollarInStrings;
    }
    AbstractEmitterVisitor.prototype.visitExpressionStmt = function(stmt, ctx) {
      stmt.expr.visitExpression(this, ctx);
      ctx.println(';');
      return null;
    };
    AbstractEmitterVisitor.prototype.visitReturnStmt = function(stmt, ctx) {
      ctx.print("return ");
      stmt.value.visitExpression(this, ctx);
      ctx.println(';');
      return null;
    };
    AbstractEmitterVisitor.prototype.visitCastExpr = function(ast, context) {};
    AbstractEmitterVisitor.prototype.visitDeclareClassStmt = function(stmt, ctx) {};
    AbstractEmitterVisitor.prototype.visitIfStmt = function(stmt, ctx) {
      ctx.print("if (");
      stmt.condition.visitExpression(this, ctx);
      ctx.print(") {");
      var hasElseCase = isPresent(stmt.falseCase) && stmt.falseCase.length > 0;
      if (stmt.trueCase.length <= 1 && !hasElseCase) {
        ctx.print(" ");
        this.visitAllStatements(stmt.trueCase, ctx);
        ctx.removeEmptyLastLine();
        ctx.print(" ");
      } else {
        ctx.println();
        ctx.incIndent();
        this.visitAllStatements(stmt.trueCase, ctx);
        ctx.decIndent();
        if (hasElseCase) {
          ctx.println("} else {");
          ctx.incIndent();
          this.visitAllStatements(stmt.falseCase, ctx);
          ctx.decIndent();
        }
      }
      ctx.println("}");
      return null;
    };
    AbstractEmitterVisitor.prototype.visitTryCatchStmt = function(stmt, ctx) {};
    AbstractEmitterVisitor.prototype.visitThrowStmt = function(stmt, ctx) {
      ctx.print("throw ");
      stmt.error.visitExpression(this, ctx);
      ctx.println(";");
      return null;
    };
    AbstractEmitterVisitor.prototype.visitCommentStmt = function(stmt, ctx) {
      var lines = stmt.comment.split('\n');
      lines.forEach(function(line) {
        ctx.println("// " + line);
      });
      return null;
    };
    AbstractEmitterVisitor.prototype.visitDeclareVarStmt = function(stmt, ctx) {};
    AbstractEmitterVisitor.prototype.visitWriteVarExpr = function(expr, ctx) {
      var lineWasEmpty = ctx.lineIsEmpty();
      if (!lineWasEmpty) {
        ctx.print('(');
      }
      ctx.print(expr.name + " = ");
      expr.value.visitExpression(this, ctx);
      if (!lineWasEmpty) {
        ctx.print(')');
      }
      return null;
    };
    AbstractEmitterVisitor.prototype.visitWriteKeyExpr = function(expr, ctx) {
      var lineWasEmpty = ctx.lineIsEmpty();
      if (!lineWasEmpty) {
        ctx.print('(');
      }
      expr.receiver.visitExpression(this, ctx);
      ctx.print("[");
      expr.index.visitExpression(this, ctx);
      ctx.print("] = ");
      expr.value.visitExpression(this, ctx);
      if (!lineWasEmpty) {
        ctx.print(')');
      }
      return null;
    };
    AbstractEmitterVisitor.prototype.visitWritePropExpr = function(expr, ctx) {
      var lineWasEmpty = ctx.lineIsEmpty();
      if (!lineWasEmpty) {
        ctx.print('(');
      }
      expr.receiver.visitExpression(this, ctx);
      ctx.print("." + expr.name + " = ");
      expr.value.visitExpression(this, ctx);
      if (!lineWasEmpty) {
        ctx.print(')');
      }
      return null;
    };
    AbstractEmitterVisitor.prototype.visitInvokeMethodExpr = function(expr, ctx) {
      expr.receiver.visitExpression(this, ctx);
      var name = expr.name;
      if (isPresent(expr.builtin)) {
        name = this.getBuiltinMethodName(expr.builtin);
        if (isBlank(name)) {
          return null;
        }
      }
      ctx.print("." + name + "(");
      this.visitAllExpressions(expr.args, ctx, ",");
      ctx.print(")");
      return null;
    };
    AbstractEmitterVisitor.prototype.getBuiltinMethodName = function(method) {};
    AbstractEmitterVisitor.prototype.visitInvokeFunctionExpr = function(expr, ctx) {
      expr.fn.visitExpression(this, ctx);
      ctx.print("(");
      this.visitAllExpressions(expr.args, ctx, ',');
      ctx.print(")");
      return null;
    };
    AbstractEmitterVisitor.prototype.visitReadVarExpr = function(ast, ctx) {
      var varName = ast.name;
      if (isPresent(ast.builtin)) {
        switch (ast.builtin) {
          case BuiltinVar.Super:
            varName = 'super';
            break;
          case BuiltinVar.This:
            varName = 'this';
            break;
          case BuiltinVar.CatchError:
            varName = CATCH_ERROR_VAR$1.name;
            break;
          case BuiltinVar.CatchStack:
            varName = CATCH_STACK_VAR$1.name;
            break;
          default:
            throw new Error("Unknown builtin variable " + ast.builtin);
        }
      }
      ctx.print(varName);
      return null;
    };
    AbstractEmitterVisitor.prototype.visitInstantiateExpr = function(ast, ctx) {
      ctx.print("new ");
      ast.classExpr.visitExpression(this, ctx);
      ctx.print("(");
      this.visitAllExpressions(ast.args, ctx, ',');
      ctx.print(")");
      return null;
    };
    AbstractEmitterVisitor.prototype.visitLiteralExpr = function(ast, ctx) {
      var value = ast.value;
      if (typeof value === 'string') {
        ctx.print(escapeIdentifier(value, this._escapeDollarInStrings));
      } else {
        ctx.print("" + value);
      }
      return null;
    };
    AbstractEmitterVisitor.prototype.visitExternalExpr = function(ast, ctx) {};
    AbstractEmitterVisitor.prototype.visitConditionalExpr = function(ast, ctx) {
      ctx.print("(");
      ast.condition.visitExpression(this, ctx);
      ctx.print('? ');
      ast.trueCase.visitExpression(this, ctx);
      ctx.print(': ');
      ast.falseCase.visitExpression(this, ctx);
      ctx.print(")");
      return null;
    };
    AbstractEmitterVisitor.prototype.visitNotExpr = function(ast, ctx) {
      ctx.print('!');
      ast.condition.visitExpression(this, ctx);
      return null;
    };
    AbstractEmitterVisitor.prototype.visitFunctionExpr = function(ast, ctx) {};
    AbstractEmitterVisitor.prototype.visitDeclareFunctionStmt = function(stmt, context) {};
    AbstractEmitterVisitor.prototype.visitBinaryOperatorExpr = function(ast, ctx) {
      var opStr;
      switch (ast.operator) {
        case BinaryOperator.Equals:
          opStr = '==';
          break;
        case BinaryOperator.Identical:
          opStr = '===';
          break;
        case BinaryOperator.NotEquals:
          opStr = '!=';
          break;
        case BinaryOperator.NotIdentical:
          opStr = '!==';
          break;
        case BinaryOperator.And:
          opStr = '&&';
          break;
        case BinaryOperator.Or:
          opStr = '||';
          break;
        case BinaryOperator.Plus:
          opStr = '+';
          break;
        case BinaryOperator.Minus:
          opStr = '-';
          break;
        case BinaryOperator.Divide:
          opStr = '/';
          break;
        case BinaryOperator.Multiply:
          opStr = '*';
          break;
        case BinaryOperator.Modulo:
          opStr = '%';
          break;
        case BinaryOperator.Lower:
          opStr = '<';
          break;
        case BinaryOperator.LowerEquals:
          opStr = '<=';
          break;
        case BinaryOperator.Bigger:
          opStr = '>';
          break;
        case BinaryOperator.BiggerEquals:
          opStr = '>=';
          break;
        default:
          throw new Error("Unknown operator " + ast.operator);
      }
      ctx.print("(");
      ast.lhs.visitExpression(this, ctx);
      ctx.print(" " + opStr + " ");
      ast.rhs.visitExpression(this, ctx);
      ctx.print(")");
      return null;
    };
    AbstractEmitterVisitor.prototype.visitReadPropExpr = function(ast, ctx) {
      ast.receiver.visitExpression(this, ctx);
      ctx.print(".");
      ctx.print(ast.name);
      return null;
    };
    AbstractEmitterVisitor.prototype.visitReadKeyExpr = function(ast, ctx) {
      ast.receiver.visitExpression(this, ctx);
      ctx.print("[");
      ast.index.visitExpression(this, ctx);
      ctx.print("]");
      return null;
    };
    AbstractEmitterVisitor.prototype.visitLiteralArrayExpr = function(ast, ctx) {
      var useNewLine = ast.entries.length > 1;
      ctx.print("[", useNewLine);
      ctx.incIndent();
      this.visitAllExpressions(ast.entries, ctx, ',', useNewLine);
      ctx.decIndent();
      ctx.print("]", useNewLine);
      return null;
    };
    AbstractEmitterVisitor.prototype.visitLiteralMapExpr = function(ast, ctx) {
      var _this = this;
      var useNewLine = ast.entries.length > 1;
      ctx.print("{", useNewLine);
      ctx.incIndent();
      this.visitAllObjects(function(entry) {
        ctx.print(escapeIdentifier(entry.key, _this._escapeDollarInStrings, entry.quoted) + ": ");
        entry.value.visitExpression(_this, ctx);
      }, ast.entries, ctx, ',', useNewLine);
      ctx.decIndent();
      ctx.print("}", useNewLine);
      return null;
    };
    AbstractEmitterVisitor.prototype.visitAllExpressions = function(expressions, ctx, separator, newLine) {
      var _this = this;
      if (newLine === void 0) {
        newLine = false;
      }
      this.visitAllObjects(function(expr) {
        return expr.visitExpression(_this, ctx);
      }, expressions, ctx, separator, newLine);
    };
    AbstractEmitterVisitor.prototype.visitAllObjects = function(handler, expressions, ctx, separator, newLine) {
      if (newLine === void 0) {
        newLine = false;
      }
      for (var i = 0; i < expressions.length; i++) {
        if (i > 0) {
          ctx.print(separator, newLine);
        }
        handler(expressions[i]);
      }
      if (newLine) {
        ctx.println();
      }
    };
    AbstractEmitterVisitor.prototype.visitAllStatements = function(statements, ctx) {
      var _this = this;
      statements.forEach(function(stmt) {
        return stmt.visitStatement(_this, ctx);
      });
    };
    return AbstractEmitterVisitor;
  }());
  function escapeIdentifier(input, escapeDollar, alwaysQuote) {
    if (alwaysQuote === void 0) {
      alwaysQuote = true;
    }
    if (isBlank(input)) {
      return null;
    }
    var body = input.replace(_SINGLE_QUOTE_ESCAPE_STRING_RE, function() {
      var match = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        match[_i - 0] = arguments[_i];
      }
      if (match[0] == '$') {
        return escapeDollar ? '\\$' : '$';
      } else if (match[0] == '\n') {
        return '\\n';
      } else if (match[0] == '\r') {
        return '\\r';
      } else {
        return "\\" + match[0];
      }
    });
    var requiresQuotes = alwaysQuote || !_LEGAL_IDENTIFIER_RE.test(body);
    return requiresQuotes ? "'" + body + "'" : body;
  }
  function _createIndent(count) {
    var res = '';
    for (var i = 0; i < count; i++) {
      res += '  ';
    }
    return res;
  }
  var __extends$19 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var _debugModuleUrl = '/debug/lib';
  function debugOutputAstAsTypeScript(ast) {
    var converter = new _TsEmitterVisitor(_debugModuleUrl);
    var ctx = EmitterVisitorContext.createRoot([]);
    var asts = Array.isArray(ast) ? ast : [ast];
    asts.forEach(function(ast) {
      if (ast instanceof Statement) {
        ast.visitStatement(converter, ctx);
      } else if (ast instanceof Expression) {
        ast.visitExpression(converter, ctx);
      } else if (ast instanceof Type$1) {
        ast.visitType(converter, ctx);
      } else {
        throw new Error("Don't know how to print debug info for " + ast);
      }
    });
    return ctx.toSource();
  }
  var TypeScriptEmitter = (function() {
    function TypeScriptEmitter(_importGenerator) {
      this._importGenerator = _importGenerator;
    }
    TypeScriptEmitter.prototype.emitStatements = function(moduleUrl, stmts, exportedVars) {
      var _this = this;
      var converter = new _TsEmitterVisitor(moduleUrl);
      var ctx = EmitterVisitorContext.createRoot(exportedVars);
      converter.visitAllStatements(stmts, ctx);
      var srcParts = [];
      converter.importsWithPrefixes.forEach(function(prefix, importedModuleUrl) {
        srcParts.push("imp" + ("ort * as " + prefix + " from '" + _this._importGenerator.fileNameToModuleName(importedModuleUrl, moduleUrl) + "';"));
      });
      srcParts.push(ctx.toSource());
      return srcParts.join('\n');
    };
    return TypeScriptEmitter;
  }());
  var _TsEmitterVisitor = (function(_super) {
    __extends$19(_TsEmitterVisitor, _super);
    function _TsEmitterVisitor(_moduleUrl) {
      _super.call(this, false);
      this._moduleUrl = _moduleUrl;
      this.importsWithPrefixes = new Map();
    }
    _TsEmitterVisitor.prototype.visitType = function(t, ctx, defaultType) {
      if (defaultType === void 0) {
        defaultType = 'any';
      }
      if (isPresent(t)) {
        t.visitType(this, ctx);
      } else {
        ctx.print(defaultType);
      }
    };
    _TsEmitterVisitor.prototype.visitLiteralExpr = function(ast, ctx) {
      var value = ast.value;
      if (isBlank(value) && ast.type != NULL_TYPE) {
        ctx.print("(" + value + " as any)");
        return null;
      }
      return _super.prototype.visitLiteralExpr.call(this, ast, ctx);
    };
    _TsEmitterVisitor.prototype.visitLiteralArrayExpr = function(ast, ctx) {
      if (ast.entries.length === 0) {
        ctx.print('(');
      }
      var result = _super.prototype.visitLiteralArrayExpr.call(this, ast, ctx);
      if (ast.entries.length === 0) {
        ctx.print(' as any[])');
      }
      return result;
    };
    _TsEmitterVisitor.prototype.visitExternalExpr = function(ast, ctx) {
      this._visitIdentifier(ast.value, ast.typeParams, ctx);
      return null;
    };
    _TsEmitterVisitor.prototype.visitDeclareVarStmt = function(stmt, ctx) {
      if (ctx.isExportedVar(stmt.name)) {
        ctx.print("export ");
      }
      if (stmt.hasModifier(StmtModifier.Final)) {
        ctx.print("const");
      } else {
        ctx.print("var");
      }
      ctx.print(" " + stmt.name + ":");
      this.visitType(stmt.type, ctx);
      ctx.print(" = ");
      stmt.value.visitExpression(this, ctx);
      ctx.println(";");
      return null;
    };
    _TsEmitterVisitor.prototype.visitCastExpr = function(ast, ctx) {
      ctx.print("(<");
      ast.type.visitType(this, ctx);
      ctx.print(">");
      ast.value.visitExpression(this, ctx);
      ctx.print(")");
      return null;
    };
    _TsEmitterVisitor.prototype.visitDeclareClassStmt = function(stmt, ctx) {
      var _this = this;
      ctx.pushClass(stmt);
      if (ctx.isExportedVar(stmt.name)) {
        ctx.print("export ");
      }
      ctx.print("class " + stmt.name);
      if (isPresent(stmt.parent)) {
        ctx.print(" extends ");
        stmt.parent.visitExpression(this, ctx);
      }
      ctx.println(" {");
      ctx.incIndent();
      stmt.fields.forEach(function(field) {
        return _this._visitClassField(field, ctx);
      });
      if (isPresent(stmt.constructorMethod)) {
        this._visitClassConstructor(stmt, ctx);
      }
      stmt.getters.forEach(function(getter) {
        return _this._visitClassGetter(getter, ctx);
      });
      stmt.methods.forEach(function(method) {
        return _this._visitClassMethod(method, ctx);
      });
      ctx.decIndent();
      ctx.println("}");
      ctx.popClass();
      return null;
    };
    _TsEmitterVisitor.prototype._visitClassField = function(field, ctx) {
      if (field.hasModifier(StmtModifier.Private)) {
        ctx.print("/*private*/ ");
      }
      ctx.print(field.name);
      ctx.print(':');
      this.visitType(field.type, ctx);
      ctx.println(";");
    };
    _TsEmitterVisitor.prototype._visitClassGetter = function(getter, ctx) {
      if (getter.hasModifier(StmtModifier.Private)) {
        ctx.print("private ");
      }
      ctx.print("get " + getter.name + "()");
      ctx.print(':');
      this.visitType(getter.type, ctx);
      ctx.println(" {");
      ctx.incIndent();
      this.visitAllStatements(getter.body, ctx);
      ctx.decIndent();
      ctx.println("}");
    };
    _TsEmitterVisitor.prototype._visitClassConstructor = function(stmt, ctx) {
      ctx.print("constructor(");
      this._visitParams(stmt.constructorMethod.params, ctx);
      ctx.println(") {");
      ctx.incIndent();
      this.visitAllStatements(stmt.constructorMethod.body, ctx);
      ctx.decIndent();
      ctx.println("}");
    };
    _TsEmitterVisitor.prototype._visitClassMethod = function(method, ctx) {
      if (method.hasModifier(StmtModifier.Private)) {
        ctx.print("private ");
      }
      ctx.print(method.name + "(");
      this._visitParams(method.params, ctx);
      ctx.print("):");
      this.visitType(method.type, ctx, 'void');
      ctx.println(" {");
      ctx.incIndent();
      this.visitAllStatements(method.body, ctx);
      ctx.decIndent();
      ctx.println("}");
    };
    _TsEmitterVisitor.prototype.visitFunctionExpr = function(ast, ctx) {
      ctx.print("(");
      this._visitParams(ast.params, ctx);
      ctx.print("):");
      this.visitType(ast.type, ctx, 'void');
      ctx.println(" => {");
      ctx.incIndent();
      this.visitAllStatements(ast.statements, ctx);
      ctx.decIndent();
      ctx.print("}");
      return null;
    };
    _TsEmitterVisitor.prototype.visitDeclareFunctionStmt = function(stmt, ctx) {
      if (ctx.isExportedVar(stmt.name)) {
        ctx.print("export ");
      }
      ctx.print("function " + stmt.name + "(");
      this._visitParams(stmt.params, ctx);
      ctx.print("):");
      this.visitType(stmt.type, ctx, 'void');
      ctx.println(" {");
      ctx.incIndent();
      this.visitAllStatements(stmt.statements, ctx);
      ctx.decIndent();
      ctx.println("}");
      return null;
    };
    _TsEmitterVisitor.prototype.visitTryCatchStmt = function(stmt, ctx) {
      ctx.println("try {");
      ctx.incIndent();
      this.visitAllStatements(stmt.bodyStmts, ctx);
      ctx.decIndent();
      ctx.println("} catch (" + CATCH_ERROR_VAR$1.name + ") {");
      ctx.incIndent();
      var catchStmts = [(CATCH_STACK_VAR$1.set(CATCH_ERROR_VAR$1.prop('stack')).toDeclStmt(null, [StmtModifier.Final]))].concat(stmt.catchStmts);
      this.visitAllStatements(catchStmts, ctx);
      ctx.decIndent();
      ctx.println("}");
      return null;
    };
    _TsEmitterVisitor.prototype.visitBuiltintType = function(type, ctx) {
      var typeStr;
      switch (type.name) {
        case BuiltinTypeName.Bool:
          typeStr = 'boolean';
          break;
        case BuiltinTypeName.Dynamic:
          typeStr = 'any';
          break;
        case BuiltinTypeName.Function:
          typeStr = 'Function';
          break;
        case BuiltinTypeName.Number:
          typeStr = 'number';
          break;
        case BuiltinTypeName.Int:
          typeStr = 'number';
          break;
        case BuiltinTypeName.String:
          typeStr = 'string';
          break;
        default:
          throw new Error("Unsupported builtin type " + type.name);
      }
      ctx.print(typeStr);
      return null;
    };
    _TsEmitterVisitor.prototype.visitExpressionType = function(ast, ctx) {
      var _this = this;
      ast.value.visitExpression(this, ctx);
      if (isPresent(ast.typeParams) && ast.typeParams.length > 0) {
        ctx.print("<");
        this.visitAllObjects(function(type) {
          return type.visitType(_this, ctx);
        }, ast.typeParams, ctx, ',');
        ctx.print(">");
      }
      return null;
    };
    _TsEmitterVisitor.prototype.visitArrayType = function(type, ctx) {
      this.visitType(type.of, ctx);
      ctx.print("[]");
      return null;
    };
    _TsEmitterVisitor.prototype.visitMapType = function(type, ctx) {
      ctx.print("{[key: string]:");
      this.visitType(type.valueType, ctx);
      ctx.print("}");
      return null;
    };
    _TsEmitterVisitor.prototype.getBuiltinMethodName = function(method) {
      var name;
      switch (method) {
        case BuiltinMethod.ConcatArray:
          name = 'concat';
          break;
        case BuiltinMethod.SubscribeObservable:
          name = 'subscribe';
          break;
        case BuiltinMethod.Bind:
          name = 'bind';
          break;
        default:
          throw new Error("Unknown builtin method: " + method);
      }
      return name;
    };
    _TsEmitterVisitor.prototype._visitParams = function(params, ctx) {
      var _this = this;
      this.visitAllObjects(function(param) {
        ctx.print(param.name);
        ctx.print(':');
        _this.visitType(param.type, ctx);
      }, params, ctx, ',');
    };
    _TsEmitterVisitor.prototype._visitIdentifier = function(value, typeParams, ctx) {
      var _this = this;
      var name = identifierName(value);
      var moduleUrl = identifierModuleUrl(value);
      if (isBlank(name)) {
        throw new Error("Internal error: unknown identifier " + value);
      }
      if (isPresent(moduleUrl) && moduleUrl != this._moduleUrl) {
        var prefix = this.importsWithPrefixes.get(moduleUrl);
        if (isBlank(prefix)) {
          prefix = "import" + this.importsWithPrefixes.size;
          this.importsWithPrefixes.set(moduleUrl, prefix);
        }
        ctx.print(prefix + ".");
      }
      if (value.reference && value.reference.members && value.reference.members.length) {
        ctx.print(value.reference.name);
        ctx.print('.');
        ctx.print(value.reference.members.join('.'));
      } else {
        ctx.print(name);
      }
      if (isPresent(typeParams) && typeParams.length > 0) {
        ctx.print("<");
        this.visitAllObjects(function(type) {
          return type.visitType(_this, ctx);
        }, typeParams, ctx, ',');
        ctx.print(">");
      }
    };
    return _TsEmitterVisitor;
  }(AbstractEmitterVisitor));
  var SECURITY_SCHEMA = {};
  function registerContext(ctx, specs) {
    for (var _i = 0,
        specs_1 = specs; _i < specs_1.length; _i++) {
      var spec = specs_1[_i];
      SECURITY_SCHEMA[spec.toLowerCase()] = ctx;
    }
  }
  registerContext(_angular_core.SecurityContext.HTML, ['iframe|srcdoc', '*|innerHTML', '*|outerHTML']);
  registerContext(_angular_core.SecurityContext.STYLE, ['*|style']);
  registerContext(_angular_core.SecurityContext.URL, ['*|formAction', 'area|href', 'area|ping', 'audio|src', 'a|href', 'a|ping', 'blockquote|cite', 'body|background', 'del|cite', 'form|action', 'img|src', 'img|srcset', 'input|src', 'ins|cite', 'q|cite', 'source|src', 'source|srcset', 'track|src', 'video|poster', 'video|src']);
  registerContext(_angular_core.SecurityContext.RESOURCE_URL, ['applet|code', 'applet|codebase', 'base|href', 'embed|src', 'frame|src', 'head|profile', 'html|manifest', 'iframe|src', 'link|href', 'media|src', 'object|codebase', 'object|data', 'script|src']);
  var __extends$20 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var __decorate$14 = (this && this.__decorate) || function(decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __metadata$14 = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var BOOLEAN = 'boolean';
  var NUMBER = 'number';
  var STRING = 'string';
  var OBJECT = 'object';
  var SCHEMA = ['[Element]|textContent,%classList,className,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*copy,*cut,*paste,*search,*selectstart,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerHTML,#scrollLeft,#scrollTop', '[HTMLElement]^[Element]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate', 'abbr,address,article,aside,b,bdi,bdo,cite,code,dd,dfn,dt,em,figcaption,figure,footer,header,i,kbd,main,mark,nav,noscript,rb,rp,rt,rtc,ruby,s,samp,section,small,strong,sub,sup,u,var,wbr^[HTMLElement]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate', 'media^[HTMLElement]|!autoplay,!controls,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,#playbackRate,preload,src,%srcObject,#volume', ':svg:^[HTMLElement]|*abort,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,%style,#tabIndex', ':svg:graphics^:svg:|', ':svg:animation^:svg:|*begin,*end,*repeat', ':svg:geometry^:svg:|', ':svg:componentTransferFunction^:svg:|', ':svg:gradient^:svg:|', ':svg:textContent^:svg:graphics|', ':svg:textPositioning^:svg:textContent|', 'a^[HTMLElement]|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerPolicy,rel,rev,search,shape,target,text,type,username', 'area^[HTMLElement]|alt,coords,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerPolicy,search,shape,target,username', 'audio^media|', 'br^[HTMLElement]|clear', 'base^[HTMLElement]|href,target', 'body^[HTMLElement]|aLink,background,bgColor,link,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink', 'button^[HTMLElement]|!autofocus,!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value', 'canvas^[HTMLElement]|#height,#width', 'content^[HTMLElement]|select', 'dl^[HTMLElement]|!compact', 'datalist^[HTMLElement]|', 'details^[HTMLElement]|!open', 'dialog^[HTMLElement]|!open,returnValue', 'dir^[HTMLElement]|!compact', 'div^[HTMLElement]|align', 'embed^[HTMLElement]|align,height,name,src,type,width', 'fieldset^[HTMLElement]|!disabled,name', 'font^[HTMLElement]|color,face,size', 'form^[HTMLElement]|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target', 'frame^[HTMLElement]|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src', 'frameset^[HTMLElement]|cols,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows', 'hr^[HTMLElement]|align,color,!noShade,size,width', 'head^[HTMLElement]|', 'h1,h2,h3,h4,h5,h6^[HTMLElement]|align', 'html^[HTMLElement]|version', 'iframe^[HTMLElement]|align,!allowFullscreen,frameBorder,height,longDesc,marginHeight,marginWidth,name,referrerPolicy,%sandbox,scrolling,src,srcdoc,width', 'img^[HTMLElement]|align,alt,border,%crossOrigin,#height,#hspace,!isMap,longDesc,lowsrc,name,referrerPolicy,sizes,src,srcset,useMap,#vspace,#width', 'input^[HTMLElement]|accept,align,alt,autocapitalize,autocomplete,!autofocus,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width', 'keygen^[HTMLElement]|!autofocus,challenge,!disabled,keytype,name', 'li^[HTMLElement]|type,#value', 'label^[HTMLElement]|htmlFor', 'legend^[HTMLElement]|align', 'link^[HTMLElement]|as,charset,%crossOrigin,!disabled,href,hreflang,integrity,media,rel,%relList,rev,%sizes,target,type', 'map^[HTMLElement]|name', 'marquee^[HTMLElement]|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width', 'menu^[HTMLElement]|!compact', 'meta^[HTMLElement]|content,httpEquiv,name,scheme', 'meter^[HTMLElement]|#high,#low,#max,#min,#optimum,#value', 'ins,del^[HTMLElement]|cite,dateTime', 'ol^[HTMLElement]|!compact,!reversed,#start,type', 'object^[HTMLElement]|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width', 'optgroup^[HTMLElement]|!disabled,label', 'option^[HTMLElement]|!defaultSelected,!disabled,label,!selected,text,value', 'output^[HTMLElement]|defaultValue,%htmlFor,name,value', 'p^[HTMLElement]|align', 'param^[HTMLElement]|name,type,value,valueType', 'picture^[HTMLElement]|', 'pre^[HTMLElement]|#width', 'progress^[HTMLElement]|#max,#value', 'q,blockquote,cite^[HTMLElement]|', 'script^[HTMLElement]|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,src,text,type', 'select^[HTMLElement]|!autofocus,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value', 'shadow^[HTMLElement]|', 'source^[HTMLElement]|media,sizes,src,srcset,type', 'span^[HTMLElement]|', 'style^[HTMLElement]|!disabled,media,type', 'caption^[HTMLElement]|align', 'th,td^[HTMLElement]|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width', 'col,colgroup^[HTMLElement]|align,ch,chOff,#span,vAlign,width', 'table^[HTMLElement]|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width', 'tr^[HTMLElement]|align,bgColor,ch,chOff,vAlign', 'tfoot,thead,tbody^[HTMLElement]|align,ch,chOff,vAlign', 'template^[HTMLElement]|', 'textarea^[HTMLElement]|autocapitalize,!autofocus,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap', 'title^[HTMLElement]|text', 'track^[HTMLElement]|!default,kind,label,src,srclang', 'ul^[HTMLElement]|!compact,type', 'unknown^[HTMLElement]|', 'video^media|#height,poster,#width', ':svg:a^:svg:graphics|', ':svg:animate^:svg:animation|', ':svg:animateMotion^:svg:animation|', ':svg:animateTransform^:svg:animation|', ':svg:circle^:svg:geometry|', ':svg:clipPath^:svg:graphics|', ':svg:cursor^:svg:|', ':svg:defs^:svg:graphics|', ':svg:desc^:svg:|', ':svg:discard^:svg:|', ':svg:ellipse^:svg:geometry|', ':svg:feBlend^:svg:|', ':svg:feColorMatrix^:svg:|', ':svg:feComponentTransfer^:svg:|', ':svg:feComposite^:svg:|', ':svg:feConvolveMatrix^:svg:|', ':svg:feDiffuseLighting^:svg:|', ':svg:feDisplacementMap^:svg:|', ':svg:feDistantLight^:svg:|', ':svg:feDropShadow^:svg:|', ':svg:feFlood^:svg:|', ':svg:feFuncA^:svg:componentTransferFunction|', ':svg:feFuncB^:svg:componentTransferFunction|', ':svg:feFuncG^:svg:componentTransferFunction|', ':svg:feFuncR^:svg:componentTransferFunction|', ':svg:feGaussianBlur^:svg:|', ':svg:feImage^:svg:|', ':svg:feMerge^:svg:|', ':svg:feMergeNode^:svg:|', ':svg:feMorphology^:svg:|', ':svg:feOffset^:svg:|', ':svg:fePointLight^:svg:|', ':svg:feSpecularLighting^:svg:|', ':svg:feSpotLight^:svg:|', ':svg:feTile^:svg:|', ':svg:feTurbulence^:svg:|', ':svg:filter^:svg:|', ':svg:foreignObject^:svg:graphics|', ':svg:g^:svg:graphics|', ':svg:image^:svg:graphics|', ':svg:line^:svg:geometry|', ':svg:linearGradient^:svg:gradient|', ':svg:mpath^:svg:|', ':svg:marker^:svg:|', ':svg:mask^:svg:|', ':svg:metadata^:svg:|', ':svg:path^:svg:geometry|', ':svg:pattern^:svg:|', ':svg:polygon^:svg:geometry|', ':svg:polyline^:svg:geometry|', ':svg:radialGradient^:svg:gradient|', ':svg:rect^:svg:geometry|', ':svg:svg^:svg:graphics|#currentScale,#zoomAndPan', ':svg:script^:svg:|type', ':svg:set^:svg:animation|', ':svg:stop^:svg:|', ':svg:style^:svg:|!disabled,media,title,type', ':svg:switch^:svg:graphics|', ':svg:symbol^:svg:|', ':svg:tspan^:svg:textPositioning|', ':svg:text^:svg:textPositioning|', ':svg:textPath^:svg:textContent|', ':svg:title^:svg:|', ':svg:use^:svg:graphics|', ':svg:view^:svg:|#zoomAndPan', 'data^[HTMLElement]|value', 'menuitem^[HTMLElement]|type,label,icon,!disabled,!checked,radiogroup,!default', 'summary^[HTMLElement]|', 'time^[HTMLElement]|dateTime'];
  var _ATTR_TO_PROP = {
    'class': 'className',
    'for': 'htmlFor',
    'formaction': 'formAction',
    'innerHtml': 'innerHTML',
    'readonly': 'readOnly',
    'tabindex': 'tabIndex'
  };
  var DomElementSchemaRegistry = (function(_super) {
    __extends$20(DomElementSchemaRegistry, _super);
    function DomElementSchemaRegistry() {
      var _this = this;
      _super.call(this);
      this._schema = {};
      SCHEMA.forEach(function(encodedType) {
        var type = {};
        var _a = encodedType.split('|'),
            strType = _a[0],
            strProperties = _a[1];
        var properties = strProperties.split(',');
        var _b = strType.split('^'),
            typeNames = _b[0],
            superName = _b[1];
        typeNames.split(',').forEach(function(tag) {
          return _this._schema[tag.toLowerCase()] = type;
        });
        var superType = superName && _this._schema[superName.toLowerCase()];
        if (superType) {
          Object.keys(superType).forEach(function(prop) {
            type[prop] = superType[prop];
          });
        }
        properties.forEach(function(property) {
          if (property.length > 0) {
            switch (property[0]) {
              case '*':
                break;
              case '!':
                type[property.substring(1)] = BOOLEAN;
                break;
              case '#':
                type[property.substring(1)] = NUMBER;
                break;
              case '%':
                type[property.substring(1)] = OBJECT;
                break;
              default:
                type[property] = STRING;
            }
          }
        });
      });
    }
    DomElementSchemaRegistry.prototype.hasProperty = function(tagName, propName, schemaMetas) {
      if (schemaMetas.some(function(schema) {
        return schema.name === _angular_core.NO_ERRORS_SCHEMA.name;
      })) {
        return true;
      }
      if (tagName.indexOf('-') > -1) {
        if (tagName === 'ng-container' || tagName === 'ng-content') {
          return false;
        }
        if (schemaMetas.some(function(schema) {
          return schema.name === _angular_core.CUSTOM_ELEMENTS_SCHEMA.name;
        })) {
          return true;
        }
      }
      var elementProperties = this._schema[tagName.toLowerCase()] || this._schema['unknown'];
      return !!elementProperties[propName];
    };
    DomElementSchemaRegistry.prototype.hasElement = function(tagName, schemaMetas) {
      if (schemaMetas.some(function(schema) {
        return schema.name === _angular_core.NO_ERRORS_SCHEMA.name;
      })) {
        return true;
      }
      if (tagName.indexOf('-') > -1) {
        if (tagName === 'ng-container' || tagName === 'ng-content') {
          return true;
        }
        if (schemaMetas.some(function(schema) {
          return schema.name === _angular_core.CUSTOM_ELEMENTS_SCHEMA.name;
        })) {
          return true;
        }
      }
      return !!this._schema[tagName.toLowerCase()];
    };
    DomElementSchemaRegistry.prototype.securityContext = function(tagName, propName, isAttribute) {
      if (isAttribute) {
        propName = this.getMappedPropName(propName);
      }
      tagName = tagName.toLowerCase();
      propName = propName.toLowerCase();
      var ctx = SECURITY_SCHEMA[tagName + '|' + propName];
      if (ctx) {
        return ctx;
      }
      ctx = SECURITY_SCHEMA['*|' + propName];
      return ctx ? ctx : _angular_core.SecurityContext.NONE;
    };
    DomElementSchemaRegistry.prototype.getMappedPropName = function(propName) {
      return _ATTR_TO_PROP[propName] || propName;
    };
    DomElementSchemaRegistry.prototype.getDefaultComponentElementName = function() {
      return 'ng-component';
    };
    DomElementSchemaRegistry.prototype.validateProperty = function(name) {
      if (name.toLowerCase().startsWith('on')) {
        var msg = ("Binding to event property '" + name + "' is disallowed for security reasons, ") + ("please use (" + name.slice(2) + ")=...") + ("\nIf '" + name + "' is a directive input, make sure the directive is imported by the") + " current module.";
        return {
          error: true,
          msg: msg
        };
      } else {
        return {error: false};
      }
    };
    DomElementSchemaRegistry.prototype.validateAttribute = function(name) {
      if (name.toLowerCase().startsWith('on')) {
        var msg = ("Binding to event attribute '" + name + "' is disallowed for security reasons, ") + ("please use (" + name.slice(2) + ")=...");
        return {
          error: true,
          msg: msg
        };
      } else {
        return {error: false};
      }
    };
    DomElementSchemaRegistry.prototype.allKnownElementNames = function() {
      return Object.keys(this._schema);
    };
    DomElementSchemaRegistry.prototype.normalizeAnimationStyleProperty = function(propName) {
      return dashCaseToCamelCase(propName);
    };
    DomElementSchemaRegistry.prototype.normalizeAnimationStyleValue = function(camelCaseProp, userProvidedProp, val) {
      var unit = '';
      var strVal = val.toString().trim();
      var errorMsg = null;
      if (_isPixelDimensionStyle(camelCaseProp) && val !== 0 && val !== '0') {
        if (typeof val === 'number') {
          unit = 'px';
        } else {
          var valAndSuffixMatch = val.match(/^[+-]?[\d\.]+([a-z]*)$/);
          if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {
            errorMsg = "Please provide a CSS unit value for " + userProvidedProp + ":" + val;
          }
        }
      }
      return {
        error: errorMsg,
        value: strVal + unit
      };
    };
    DomElementSchemaRegistry = __decorate$14([CompilerInjectable(), __metadata$14('design:paramtypes', [])], DomElementSchemaRegistry);
    return DomElementSchemaRegistry;
  }(ElementSchemaRegistry));
  function _isPixelDimensionStyle(prop) {
    switch (prop) {
      case 'width':
      case 'height':
      case 'minWidth':
      case 'minHeight':
      case 'maxWidth':
      case 'maxHeight':
      case 'left':
      case 'top':
      case 'bottom':
      case 'right':
      case 'fontSize':
      case 'outlineWidth':
      case 'outlineOffset':
      case 'paddingTop':
      case 'paddingLeft':
      case 'paddingBottom':
      case 'paddingRight':
      case 'marginTop':
      case 'marginLeft':
      case 'marginBottom':
      case 'marginRight':
      case 'borderRadius':
      case 'borderWidth':
      case 'borderTopWidth':
      case 'borderLeftWidth':
      case 'borderRightWidth':
      case 'borderBottomWidth':
      case 'textIndent':
        return true;
      default:
        return false;
    }
  }
  var ShadowCss = (function() {
    function ShadowCss() {
      this.strictStyling = true;
    }
    ShadowCss.prototype.shimCssText = function(cssText, selector, hostSelector) {
      if (hostSelector === void 0) {
        hostSelector = '';
      }
      var sourceMappingUrl = extractSourceMappingUrl(cssText);
      cssText = stripComments(cssText);
      cssText = this._insertDirectives(cssText);
      return this._scopeCssText(cssText, selector, hostSelector) + sourceMappingUrl;
    };
    ShadowCss.prototype._insertDirectives = function(cssText) {
      cssText = this._insertPolyfillDirectivesInCssText(cssText);
      return this._insertPolyfillRulesInCssText(cssText);
    };
    ShadowCss.prototype._insertPolyfillDirectivesInCssText = function(cssText) {
      return cssText.replace(_cssContentNextSelectorRe, function() {
        var m = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          m[_i - 0] = arguments[_i];
        }
        return m[2] + '{';
      });
    };
    ShadowCss.prototype._insertPolyfillRulesInCssText = function(cssText) {
      return cssText.replace(_cssContentRuleRe, function() {
        var m = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          m[_i - 0] = arguments[_i];
        }
        var rule = m[0].replace(m[1], '').replace(m[2], '');
        return m[4] + rule;
      });
    };
    ShadowCss.prototype._scopeCssText = function(cssText, scopeSelector, hostSelector) {
      var unscopedRules = this._extractUnscopedRulesFromCssText(cssText);
      cssText = this._insertPolyfillHostInCssText(cssText);
      cssText = this._convertColonHost(cssText);
      cssText = this._convertColonHostContext(cssText);
      cssText = this._convertShadowDOMSelectors(cssText);
      if (scopeSelector) {
        cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector);
      }
      cssText = cssText + '\n' + unscopedRules;
      return cssText.trim();
    };
    ShadowCss.prototype._extractUnscopedRulesFromCssText = function(cssText) {
      var r = '';
      var m;
      _cssContentUnscopedRuleRe.lastIndex = 0;
      while ((m = _cssContentUnscopedRuleRe.exec(cssText)) !== null) {
        var rule = m[0].replace(m[2], '').replace(m[1], m[4]);
        r += rule + '\n\n';
      }
      return r;
    };
    ShadowCss.prototype._convertColonHost = function(cssText) {
      return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);
    };
    ShadowCss.prototype._convertColonHostContext = function(cssText) {
      return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);
    };
    ShadowCss.prototype._convertColonRule = function(cssText, regExp, partReplacer) {
      return cssText.replace(regExp, function() {
        var m = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          m[_i - 0] = arguments[_i];
        }
        if (m[2]) {
          var parts = m[2].split(',');
          var r = [];
          for (var i = 0; i < parts.length; i++) {
            var p = parts[i].trim();
            if (!p)
              break;
            r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));
          }
          return r.join(',');
        } else {
          return _polyfillHostNoCombinator + m[3];
        }
      });
    };
    ShadowCss.prototype._colonHostContextPartReplacer = function(host, part, suffix) {
      if (part.indexOf(_polyfillHost) > -1) {
        return this._colonHostPartReplacer(host, part, suffix);
      } else {
        return host + part + suffix + ', ' + part + ' ' + host + suffix;
      }
    };
    ShadowCss.prototype._colonHostPartReplacer = function(host, part, suffix) {
      return host + part.replace(_polyfillHost, '') + suffix;
    };
    ShadowCss.prototype._convertShadowDOMSelectors = function(cssText) {
      return _shadowDOMSelectorsRe.reduce(function(result, pattern) {
        return result.replace(pattern, ' ');
      }, cssText);
    };
    ShadowCss.prototype._scopeSelectors = function(cssText, scopeSelector, hostSelector) {
      var _this = this;
      return processRules(cssText, function(rule) {
        var selector = rule.selector;
        var content = rule.content;
        if (rule.selector[0] != '@') {
          selector = _this._scopeSelector(rule.selector, scopeSelector, hostSelector, _this.strictStyling);
        } else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {
          content = _this._scopeSelectors(rule.content, scopeSelector, hostSelector);
        }
        return new CssRule(selector, content);
      });
    };
    ShadowCss.prototype._scopeSelector = function(selector, scopeSelector, hostSelector, strict) {
      var _this = this;
      return selector.split(',').map(function(part) {
        return part.trim().split(_shadowDeepSelectors);
      }).map(function(deepParts) {
        var shallowPart = deepParts[0],
            otherParts = deepParts.slice(1);
        var applyScope = function(shallowPart) {
          if (_this._selectorNeedsScoping(shallowPart, scopeSelector)) {
            return strict ? _this._applyStrictSelectorScope(shallowPart, scopeSelector, hostSelector) : _this._applySelectorScope(shallowPart, scopeSelector, hostSelector);
          } else {
            return shallowPart;
          }
        };
        return [applyScope(shallowPart)].concat(otherParts).join(' ');
      }).join(', ');
    };
    ShadowCss.prototype._selectorNeedsScoping = function(selector, scopeSelector) {
      var re = this._makeScopeMatcher(scopeSelector);
      return !re.test(selector);
    };
    ShadowCss.prototype._makeScopeMatcher = function(scopeSelector) {
      var lre = /\[/g;
      var rre = /\]/g;
      scopeSelector = scopeSelector.replace(lre, '\\[').replace(rre, '\\]');
      return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');
    };
    ShadowCss.prototype._applySelectorScope = function(selector, scopeSelector, hostSelector) {
      return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);
    };
    ShadowCss.prototype._applySimpleSelectorScope = function(selector, scopeSelector, hostSelector) {
      _polyfillHostRe.lastIndex = 0;
      if (_polyfillHostRe.test(selector)) {
        var replaceBy_1 = this.strictStyling ? "[" + hostSelector + "]" : scopeSelector;
        return selector.replace(_polyfillHostNoCombinatorRe, function(hnc, selector) {
          return selector.replace(/([^:]*)(:*)(.*)/, function(_, before, colon, after) {
            return before + replaceBy_1 + colon + after;
          });
        }).replace(_polyfillHostRe, replaceBy_1 + ' ');
      }
      return scopeSelector + ' ' + selector;
    };
    ShadowCss.prototype._applyStrictSelectorScope = function(selector, scopeSelector, hostSelector) {
      var _this = this;
      var isRe = /\[is=([^\]]*)\]/g;
      scopeSelector = scopeSelector.replace(isRe, function(_) {
        var parts = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          parts[_i - 1] = arguments[_i];
        }
        return parts[0];
      });
      var attrName = '[' + scopeSelector + ']';
      var _scopeSelectorPart = function(p) {
        var scopedP = p.trim();
        if (!scopedP) {
          return '';
        }
        if (p.indexOf(_polyfillHostNoCombinator) > -1) {
          scopedP = _this._applySimpleSelectorScope(p, scopeSelector, hostSelector);
        } else {
          var t = p.replace(_polyfillHostRe, '');
          if (t.length > 0) {
            var matches = t.match(/([^:]*)(:*)(.*)/);
            if (matches) {
              scopedP = matches[1] + attrName + matches[2] + matches[3];
            }
          }
        }
        return scopedP;
      };
      var safeContent = new SafeSelector(selector);
      selector = safeContent.content();
      var scopedSelector = '';
      var startIndex = 0;
      var res;
      var sep = /( |>|\+|~(?!=))\s*/g;
      var scopeAfter = selector.indexOf(_polyfillHostNoCombinator);
      while ((res = sep.exec(selector)) !== null) {
        var separator = res[1];
        var part = selector.slice(startIndex, res.index).trim();
        var scopedPart = startIndex >= scopeAfter ? _scopeSelectorPart(part) : part;
        scopedSelector += scopedPart + " " + separator + " ";
        startIndex = sep.lastIndex;
      }
      scopedSelector += _scopeSelectorPart(selector.substring(startIndex));
      return safeContent.restore(scopedSelector);
    };
    ShadowCss.prototype._insertPolyfillHostInCssText = function(selector) {
      return selector.replace(_colonHostContextRe, _polyfillHostContext).replace(_colonHostRe, _polyfillHost);
    };
    return ShadowCss;
  }());
  var SafeSelector = (function() {
    function SafeSelector(selector) {
      var _this = this;
      this.placeholders = [];
      this.index = 0;
      selector = selector.replace(/(\[[^\]]*\])/g, function(_, keep) {
        var replaceBy = "__ph-" + _this.index + "__";
        _this.placeholders.push(keep);
        _this.index++;
        return replaceBy;
      });
      this._content = selector.replace(/(:nth-[-\w]+)(\([^)]+\))/g, function(_, pseudo, exp) {
        var replaceBy = "__ph-" + _this.index + "__";
        _this.placeholders.push(exp);
        _this.index++;
        return pseudo + replaceBy;
      });
    }
    ;
    SafeSelector.prototype.restore = function(content) {
      var _this = this;
      return content.replace(/__ph-(\d+)__/g, function(ph, index) {
        return _this.placeholders[+index];
      });
    };
    SafeSelector.prototype.content = function() {
      return this._content;
    };
    return SafeSelector;
  }());
  var _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\s]*?(['"])(.*?)\1[;\s]*}([^{]*?){/gim;
  var _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;
  var _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;
  var _polyfillHost = '-shadowcsshost';
  var _polyfillHostContext = '-shadowcsscontext';
  var _parenSuffix = ')(?:\\((' + '(?:\\([^)(]*\\)|[^)(]*)+?' + ')\\))?([^,{]*)';
  var _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');
  var _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');
  var _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';
  var _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\s]*)/;
  var _shadowDOMSelectorsRe = [/::shadow/g, /::content/g, /\/shadow-deep\//g, /\/shadow\//g];
  var _shadowDeepSelectors = /(?:>>>)|(?:\/deep\/)/g;
  var _selectorReSuffix = '([>\\s~+\[.,{:][\\s\\S]*)?$';
  var _polyfillHostRe = /-shadowcsshost/gim;
  var _colonHostRe = /:host/gim;
  var _colonHostContextRe = /:host-context/gim;
  var _commentRe = /\/\*\s*[\s\S]*?\*\//g;
  function stripComments(input) {
    return input.replace(_commentRe, '');
  }
  var _sourceMappingUrlRe = /\/\*\s*#\s*sourceMappingURL=[\s\S]+?\*\//;
  function extractSourceMappingUrl(input) {
    var matcher = input.match(_sourceMappingUrlRe);
    return matcher ? matcher[0] : '';
  }
  var _ruleRe = /(\s*)([^;\{\}]+?)(\s*)((?:{%BLOCK%}?\s*;?)|(?:\s*;))/g;
  var _curlyRe = /([{}])/g;
  var OPEN_CURLY = '{';
  var CLOSE_CURLY = '}';
  var BLOCK_PLACEHOLDER = '%BLOCK%';
  var CssRule = (function() {
    function CssRule(selector, content) {
      this.selector = selector;
      this.content = content;
    }
    return CssRule;
  }());
  function processRules(input, ruleCallback) {
    var inputWithEscapedBlocks = escapeBlocks(input);
    var nextBlockIndex = 0;
    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, function() {
      var m = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        m[_i - 0] = arguments[_i];
      }
      var selector = m[2];
      var content = '';
      var suffix = m[4];
      var contentPrefix = '';
      if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {
        content = inputWithEscapedBlocks.blocks[nextBlockIndex++];
        suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);
        contentPrefix = '{';
      }
      var rule = ruleCallback(new CssRule(selector, content));
      return "" + m[1] + rule.selector + m[3] + contentPrefix + rule.content + suffix;
    });
  }
  var StringWithEscapedBlocks = (function() {
    function StringWithEscapedBlocks(escapedString, blocks) {
      this.escapedString = escapedString;
      this.blocks = blocks;
    }
    return StringWithEscapedBlocks;
  }());
  function escapeBlocks(input) {
    var inputParts = input.split(_curlyRe);
    var resultParts = [];
    var escapedBlocks = [];
    var bracketCount = 0;
    var currentBlockParts = [];
    for (var partIndex = 0; partIndex < inputParts.length; partIndex++) {
      var part = inputParts[partIndex];
      if (part == CLOSE_CURLY) {
        bracketCount--;
      }
      if (bracketCount > 0) {
        currentBlockParts.push(part);
      } else {
        if (currentBlockParts.length > 0) {
          escapedBlocks.push(currentBlockParts.join(''));
          resultParts.push(BLOCK_PLACEHOLDER);
          currentBlockParts = [];
        }
        resultParts.push(part);
      }
      if (part == OPEN_CURLY) {
        bracketCount++;
      }
    }
    if (currentBlockParts.length > 0) {
      escapedBlocks.push(currentBlockParts.join(''));
      resultParts.push(BLOCK_PLACEHOLDER);
    }
    return new StringWithEscapedBlocks(resultParts.join(''), escapedBlocks);
  }
  var __decorate$15 = (this && this.__decorate) || function(decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __metadata$15 = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var COMPONENT_VARIABLE = '%COMP%';
  var HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
  var CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
  var StylesCompileDependency = (function() {
    function StylesCompileDependency(name, moduleUrl, isShimmed, valuePlaceholder) {
      this.name = name;
      this.moduleUrl = moduleUrl;
      this.isShimmed = isShimmed;
      this.valuePlaceholder = valuePlaceholder;
    }
    return StylesCompileDependency;
  }());
  var StylesCompileResult = (function() {
    function StylesCompileResult(componentStylesheet, externalStylesheets) {
      this.componentStylesheet = componentStylesheet;
      this.externalStylesheets = externalStylesheets;
    }
    return StylesCompileResult;
  }());
  var CompiledStylesheet = (function() {
    function CompiledStylesheet(statements, stylesVar, dependencies, isShimmed, meta) {
      this.statements = statements;
      this.stylesVar = stylesVar;
      this.dependencies = dependencies;
      this.isShimmed = isShimmed;
      this.meta = meta;
    }
    return CompiledStylesheet;
  }());
  var StyleCompiler = (function() {
    function StyleCompiler(_urlResolver) {
      this._urlResolver = _urlResolver;
      this._shadowCss = new ShadowCss();
    }
    StyleCompiler.prototype.compileComponent = function(comp) {
      var _this = this;
      var externalStylesheets = [];
      var componentStylesheet = this._compileStyles(comp, new CompileStylesheetMetadata({
        styles: comp.template.styles,
        styleUrls: comp.template.styleUrls,
        moduleUrl: identifierModuleUrl(comp.type)
      }), true);
      comp.template.externalStylesheets.forEach(function(stylesheetMeta) {
        var compiledStylesheet = _this._compileStyles(comp, stylesheetMeta, false);
        externalStylesheets.push(compiledStylesheet);
      });
      return new StylesCompileResult(componentStylesheet, externalStylesheets);
    };
    StyleCompiler.prototype._compileStyles = function(comp, stylesheet, isComponentStylesheet) {
      var _this = this;
      var shim = comp.template.encapsulation === _angular_core.ViewEncapsulation.Emulated;
      var styleExpressions = stylesheet.styles.map(function(plainStyle) {
        return literal(_this._shimIfNeeded(plainStyle, shim));
      });
      var dependencies = [];
      for (var i = 0; i < stylesheet.styleUrls.length; i++) {
        var identifier = {reference: null};
        dependencies.push(new StylesCompileDependency(getStylesVarName(null), stylesheet.styleUrls[i], shim, identifier));
        styleExpressions.push(new ExternalExpr(identifier));
      }
      var stylesVar = getStylesVarName(isComponentStylesheet ? comp : null);
      var stmt = variable(stylesVar).set(literalArr(styleExpressions, new ArrayType(DYNAMIC_TYPE, [TypeModifier.Const]))).toDeclStmt(null, [StmtModifier.Final]);
      return new CompiledStylesheet([stmt], stylesVar, dependencies, shim, stylesheet);
    };
    StyleCompiler.prototype._shimIfNeeded = function(style, shim) {
      return shim ? this._shadowCss.shimCssText(style, CONTENT_ATTR, HOST_ATTR) : style;
    };
    StyleCompiler = __decorate$15([CompilerInjectable(), __metadata$15('design:paramtypes', [UrlResolver])], StyleCompiler);
    return StyleCompiler;
  }());
  function getStylesVarName(component) {
    var result = "styles";
    if (component) {
      result += "_" + identifierName(component.type);
    }
    return result;
  }
  var _DebugState = (function() {
    function _DebugState(nodeIndex, sourceAst) {
      this.nodeIndex = nodeIndex;
      this.sourceAst = sourceAst;
    }
    return _DebugState;
  }());
  var NULL_DEBUG_STATE = new _DebugState(null, null);
  var CompileMethod = (function() {
    function CompileMethod(_view) {
      this._view = _view;
      this._newState = NULL_DEBUG_STATE;
      this._currState = NULL_DEBUG_STATE;
      this._bodyStatements = [];
      this._debugEnabled = this._view.genConfig.genDebugInfo;
    }
    CompileMethod.prototype._updateDebugContextIfNeeded = function() {
      if (this._newState.nodeIndex !== this._currState.nodeIndex || this._newState.sourceAst !== this._currState.sourceAst) {
        var expr = this._updateDebugContext(this._newState);
        if (isPresent(expr)) {
          this._bodyStatements.push(expr.toStmt());
        }
      }
    };
    CompileMethod.prototype._updateDebugContext = function(newState) {
      this._currState = this._newState = newState;
      if (this._debugEnabled) {
        var sourceLocation = isPresent(newState.sourceAst) ? newState.sourceAst.sourceSpan.start : null;
        return THIS_EXPR.callMethod('debug', [literal(newState.nodeIndex), isPresent(sourceLocation) ? literal(sourceLocation.line) : NULL_EXPR, isPresent(sourceLocation) ? literal(sourceLocation.col) : NULL_EXPR]);
      } else {
        return null;
      }
    };
    CompileMethod.prototype.resetDebugInfoExpr = function(nodeIndex, templateAst) {
      var res = this._updateDebugContext(new _DebugState(nodeIndex, templateAst));
      return res || NULL_EXPR;
    };
    CompileMethod.prototype.resetDebugInfo = function(nodeIndex, templateAst) {
      this._newState = new _DebugState(nodeIndex, templateAst);
    };
    CompileMethod.prototype.push = function() {
      var stmts = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        stmts[_i - 0] = arguments[_i];
      }
      this.addStmts(stmts);
    };
    CompileMethod.prototype.addStmt = function(stmt) {
      this._updateDebugContextIfNeeded();
      this._bodyStatements.push(stmt);
    };
    CompileMethod.prototype.addStmts = function(stmts) {
      this._updateDebugContextIfNeeded();
      (_a = this._bodyStatements).push.apply(_a, stmts);
      var _a;
    };
    CompileMethod.prototype.finish = function() {
      return this._bodyStatements;
    };
    CompileMethod.prototype.isEmpty = function() {
      return this._bodyStatements.length === 0;
    };
    return CompileMethod;
  }());
  var __extends$22 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  function getPropertyInView(property, callingView, definedView) {
    if (callingView === definedView) {
      return property;
    } else {
      var viewProp = THIS_EXPR;
      var currView = callingView;
      while (currView !== definedView && isPresent(currView.declarationElement.view)) {
        currView = currView.declarationElement.view;
        viewProp = viewProp.prop('parentView');
      }
      if (currView !== definedView) {
        throw new Error("Internal error: Could not calculate a property in a parent view: " + property);
      }
      return property.visitExpression(new _ReplaceViewTransformer(viewProp, definedView), null);
    }
  }
  var _ReplaceViewTransformer = (function(_super) {
    __extends$22(_ReplaceViewTransformer, _super);
    function _ReplaceViewTransformer(_viewExpr, _view) {
      _super.call(this);
      this._viewExpr = _viewExpr;
      this._view = _view;
    }
    _ReplaceViewTransformer.prototype._isThis = function(expr) {
      return expr instanceof ReadVarExpr && expr.builtin === BuiltinVar.This;
    };
    _ReplaceViewTransformer.prototype.visitReadVarExpr = function(ast, context) {
      return this._isThis(ast) ? this._viewExpr : ast;
    };
    _ReplaceViewTransformer.prototype.visitReadPropExpr = function(ast, context) {
      if (this._isThis(ast.receiver)) {
        if (this._view.fields.some(function(field) {
          return field.name == ast.name;
        }) || this._view.getters.some(function(field) {
          return field.name == ast.name;
        })) {
          return this._viewExpr.cast(this._view.classType).prop(ast.name);
        }
      }
      return _super.prototype.visitReadPropExpr.call(this, ast, context);
    };
    return _ReplaceViewTransformer;
  }(ExpressionTransformer));
  function injectFromViewParentInjector(view, token, optional) {
    var viewExpr;
    if (view.viewType === ViewType.HOST) {
      viewExpr = THIS_EXPR;
    } else {
      viewExpr = THIS_EXPR.prop('parentView');
    }
    var args = [createDiTokenExpression(token), THIS_EXPR.prop('parentIndex')];
    if (optional) {
      args.push(NULL_EXPR);
    }
    return viewExpr.callMethod('injectorGet', args);
  }
  function getViewClassName(component, embeddedTemplateIndex) {
    return "View_" + identifierName(component.type) + embeddedTemplateIndex;
  }
  function getHandleEventMethodName(elementIndex) {
    return "handleEvent_" + elementIndex;
  }
  var ViewQueryValues = (function() {
    function ViewQueryValues(view, values) {
      this.view = view;
      this.values = values;
    }
    return ViewQueryValues;
  }());
  var CompileQuery = (function() {
    function CompileQuery(meta, queryList, ownerDirectiveExpression, view) {
      this.meta = meta;
      this.queryList = queryList;
      this.ownerDirectiveExpression = ownerDirectiveExpression;
      this.view = view;
      this._values = new ViewQueryValues(view, []);
    }
    CompileQuery.prototype.addValue = function(value, view) {
      var currentView = view;
      var elPath = [];
      while (isPresent(currentView) && currentView !== this.view) {
        var parentEl = currentView.declarationElement;
        elPath.unshift(parentEl);
        currentView = parentEl.view;
      }
      var queryListForDirtyExpr = getPropertyInView(this.queryList, view, this.view);
      var viewValues = this._values;
      elPath.forEach(function(el) {
        var last = viewValues.values.length > 0 ? viewValues.values[viewValues.values.length - 1] : null;
        if (last instanceof ViewQueryValues && last.view === el.embeddedView) {
          viewValues = last;
        } else {
          var newViewValues = new ViewQueryValues(el.embeddedView, []);
          viewValues.values.push(newViewValues);
          viewValues = newViewValues;
        }
      });
      viewValues.values.push(value);
      if (elPath.length > 0) {
        view.dirtyParentQueriesMethod.addStmt(queryListForDirtyExpr.callMethod('setDirty', []).toStmt());
      }
    };
    CompileQuery.prototype._isStatic = function() {
      return !this._values.values.some(function(value) {
        return value instanceof ViewQueryValues;
      });
    };
    CompileQuery.prototype.generateStatements = function(targetStaticMethod, targetDynamicMethod) {
      var values = createQueryValues(this._values);
      var updateStmts = [this.queryList.callMethod('reset', [literalArr(values)]).toStmt()];
      if (isPresent(this.ownerDirectiveExpression)) {
        var valueExpr = this.meta.first ? this.queryList.prop('first') : this.queryList;
        updateStmts.push(this.ownerDirectiveExpression.prop(this.meta.propertyName).set(valueExpr).toStmt());
      }
      if (!this.meta.first) {
        updateStmts.push(this.queryList.callMethod('notifyOnChanges', []).toStmt());
      }
      if (this.meta.first && this._isStatic()) {
        targetStaticMethod.addStmts(updateStmts);
      } else {
        targetDynamicMethod.addStmt(new IfStmt(this.queryList.prop('dirty'), updateStmts));
      }
    };
    return CompileQuery;
  }());
  function createQueryValues(viewValues) {
    return ListWrapper.flatten(viewValues.values.map(function(entry) {
      if (entry instanceof ViewQueryValues) {
        return mapNestedViews(entry.view.declarationElement.viewContainer, entry.view, createQueryValues(entry));
      } else {
        return (entry);
      }
    }));
  }
  function mapNestedViews(viewContainer, view, expressions) {
    var adjustedExpressions = expressions.map(function(expr) {
      return replaceVarInExpression(THIS_EXPR.name, variable('nestedView'), expr);
    });
    return viewContainer.callMethod('mapNestedViews', [variable(view.className), fn([new FnParam('nestedView', view.classType)], [new ReturnStatement(literalArr(adjustedExpressions))], DYNAMIC_TYPE)]);
  }
  function createQueryList(query, directiveInstance, propertyName, compileView) {
    compileView.fields.push(new ClassField(propertyName, importType(createIdentifier(Identifiers.QueryList), [DYNAMIC_TYPE])));
    var expr = THIS_EXPR.prop(propertyName);
    compileView.createMethod.addStmt(THIS_EXPR.prop(propertyName).set(importExpr(createIdentifier(Identifiers.QueryList), [DYNAMIC_TYPE]).instantiate([])).toStmt());
    return expr;
  }
  function addQueryToTokenMap(map, query) {
    query.meta.selectors.forEach(function(selector) {
      var entry = map.get(tokenReference(selector));
      if (!entry) {
        entry = [];
        map.set(tokenReference(selector), entry);
      }
      entry.push(query);
    });
  }
  var ViewTypeEnum = (function() {
    function ViewTypeEnum() {}
    ViewTypeEnum.fromValue = function(value) {
      return createEnumExpression(Identifiers.ViewType, value);
    };
    return ViewTypeEnum;
  }());
  var ViewEncapsulationEnum = (function() {
    function ViewEncapsulationEnum() {}
    ViewEncapsulationEnum.fromValue = function(value) {
      return createEnumExpression(Identifiers.ViewEncapsulation, value);
    };
    return ViewEncapsulationEnum;
  }());
  var ChangeDetectorStatusEnum = (function() {
    function ChangeDetectorStatusEnum() {}
    ChangeDetectorStatusEnum.fromValue = function(value) {
      return createEnumExpression(Identifiers.ChangeDetectorStatus, value);
    };
    return ChangeDetectorStatusEnum;
  }());
  var ViewConstructorVars = (function() {
    function ViewConstructorVars() {}
    ViewConstructorVars.viewUtils = variable('viewUtils');
    ViewConstructorVars.parentView = variable('parentView');
    ViewConstructorVars.parentIndex = variable('parentIndex');
    ViewConstructorVars.parentElement = variable('parentElement');
    return ViewConstructorVars;
  }());
  var ViewProperties = (function() {
    function ViewProperties() {}
    ViewProperties.renderer = THIS_EXPR.prop('renderer');
    ViewProperties.viewUtils = THIS_EXPR.prop('viewUtils');
    return ViewProperties;
  }());
  var InjectMethodVars$1 = (function() {
    function InjectMethodVars() {}
    InjectMethodVars.token = variable('token');
    InjectMethodVars.requestNodeIndex = variable('requestNodeIndex');
    InjectMethodVars.notFoundResult = variable('notFoundResult');
    return InjectMethodVars;
  }());
  var DetectChangesVars = (function() {
    function DetectChangesVars() {}
    DetectChangesVars.throwOnChange = variable("throwOnChange");
    DetectChangesVars.changes = variable("changes");
    DetectChangesVars.changed = variable("changed");
    return DetectChangesVars;
  }());
  var ViewClassDependency = (function() {
    function ViewClassDependency(comp, name, placeholder) {
      this.comp = comp;
      this.name = name;
      this.placeholder = placeholder;
    }
    return ViewClassDependency;
  }());
  var ComponentFactoryDependency$1 = (function() {
    function ComponentFactoryDependency(comp, placeholder) {
      this.comp = comp;
      this.placeholder = placeholder;
    }
    return ComponentFactoryDependency;
  }());
  var DirectiveWrapperDependency = (function() {
    function DirectiveWrapperDependency(dir, name, placeholder) {
      this.dir = dir;
      this.name = name;
      this.placeholder = placeholder;
    }
    return DirectiveWrapperDependency;
  }());
  var __extends$21 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var CompileNode = (function() {
    function CompileNode(parent, view, nodeIndex, renderNode, sourceAst) {
      this.parent = parent;
      this.view = view;
      this.nodeIndex = nodeIndex;
      this.renderNode = renderNode;
      this.sourceAst = sourceAst;
    }
    CompileNode.prototype.isNull = function() {
      return !this.renderNode;
    };
    CompileNode.prototype.isRootElement = function() {
      return this.view != this.parent.view;
    };
    return CompileNode;
  }());
  var CompileElement = (function(_super) {
    __extends$21(CompileElement, _super);
    function CompileElement(parent, view, nodeIndex, renderNode, sourceAst, component, _directives, _resolvedProvidersArray, hasViewContainer, hasEmbeddedView, references) {
      var _this = this;
      _super.call(this, parent, view, nodeIndex, renderNode, sourceAst);
      this.component = component;
      this._directives = _directives;
      this._resolvedProvidersArray = _resolvedProvidersArray;
      this.hasViewContainer = hasViewContainer;
      this.hasEmbeddedView = hasEmbeddedView;
      this.compViewExpr = null;
      this.instances = new Map();
      this.directiveWrapperInstance = new Map();
      this._queryCount = 0;
      this._queries = new Map();
      this.contentNodesByNgContentIndex = null;
      this.referenceTokens = {};
      references.forEach(function(ref) {
        return _this.referenceTokens[ref.name] = ref.value;
      });
      this.elementRef = importExpr(createIdentifier(Identifiers.ElementRef)).instantiate([this.renderNode]);
      this.instances.set(resolveIdentifier(Identifiers.ElementRef), this.elementRef);
      this.instances.set(resolveIdentifier(Identifiers.Injector), THIS_EXPR.callMethod('injector', [literal(this.nodeIndex)]));
      this.instances.set(resolveIdentifier(Identifiers.Renderer), THIS_EXPR.prop('renderer'));
      if (this.hasViewContainer || this.hasEmbeddedView) {
        this._createViewContainer();
      }
      if (this.component) {
        this._createComponentFactoryResolver();
      }
    }
    CompileElement.createNull = function() {
      return new CompileElement(null, null, null, null, null, null, [], [], false, false, []);
    };
    CompileElement.prototype._createViewContainer = function() {
      var fieldName = "_vc_" + this.nodeIndex;
      var parentNodeIndex = this.isRootElement() ? null : this.parent.nodeIndex;
      this.view.fields.push(new ClassField(fieldName, importType(createIdentifier(Identifiers.ViewContainer)), [StmtModifier.Private]));
      var statement = THIS_EXPR.prop(fieldName).set(importExpr(createIdentifier(Identifiers.ViewContainer)).instantiate([literal(this.nodeIndex), literal(parentNodeIndex), THIS_EXPR, this.renderNode])).toStmt();
      this.view.createMethod.addStmt(statement);
      this.viewContainer = THIS_EXPR.prop(fieldName);
      this.instances.set(resolveIdentifier(Identifiers.ViewContainer), this.viewContainer);
      this.view.viewContainers.push(this.viewContainer);
    };
    CompileElement.prototype._createComponentFactoryResolver = function() {
      var _this = this;
      var entryComponents = this.component.entryComponents.map(function(entryComponent) {
        var id = {reference: null};
        _this.view.targetDependencies.push(new ComponentFactoryDependency$1(entryComponent, id));
        return id;
      });
      if (!entryComponents || entryComponents.length === 0) {
        return;
      }
      var createComponentFactoryResolverExpr = importExpr(createIdentifier(Identifiers.CodegenComponentFactoryResolver)).instantiate([literalArr(entryComponents.map(function(entryComponent) {
        return importExpr(entryComponent);
      })), injectFromViewParentInjector(this.view, createIdentifierToken(Identifiers.ComponentFactoryResolver), false)]);
      var provider = {
        token: createIdentifierToken(Identifiers.ComponentFactoryResolver),
        useValue: createComponentFactoryResolverExpr
      };
      this._resolvedProvidersArray.unshift(new ProviderAst(provider.token, false, true, [provider], ProviderAstType.PrivateService, [], this.sourceAst.sourceSpan));
    };
    CompileElement.prototype.setComponentView = function(compViewExpr) {
      this.compViewExpr = compViewExpr;
      this.contentNodesByNgContentIndex = new Array(this.component.template.ngContentSelectors.length);
      for (var i = 0; i < this.contentNodesByNgContentIndex.length; i++) {
        this.contentNodesByNgContentIndex[i] = [];
      }
    };
    CompileElement.prototype.setEmbeddedView = function(embeddedView) {
      this.embeddedView = embeddedView;
      if (isPresent(embeddedView)) {
        var createTemplateRefExpr = importExpr(createIdentifier(Identifiers.TemplateRef_)).instantiate([THIS_EXPR, literal(this.nodeIndex), this.renderNode]);
        var provider = {
          token: createIdentifierToken(Identifiers.TemplateRef),
          useValue: createTemplateRefExpr
        };
        this._resolvedProvidersArray.unshift(new ProviderAst(provider.token, false, true, [provider], ProviderAstType.Builtin, [], this.sourceAst.sourceSpan));
      }
    };
    CompileElement.prototype.beforeChildren = function() {
      var _this = this;
      if (this.hasViewContainer) {
        this.instances.set(resolveIdentifier(Identifiers.ViewContainerRef), this.viewContainer.prop('vcRef'));
      }
      this._resolvedProviders = new Map();
      this._resolvedProvidersArray.forEach(function(provider) {
        return _this._resolvedProviders.set(tokenReference(provider.token), provider);
      });
      Array.from(this._resolvedProviders.values()).forEach(function(resolvedProvider) {
        var isDirectiveWrapper = resolvedProvider.providerType === ProviderAstType.Component || resolvedProvider.providerType === ProviderAstType.Directive;
        var providerValueExpressions = resolvedProvider.providers.map(function(provider) {
          if (provider.useExisting) {
            return _this._getDependency(resolvedProvider.providerType, {token: provider.useExisting});
          } else if (provider.useFactory) {
            var deps = provider.deps || provider.useFactory.diDeps;
            var depsExpr = deps.map(function(dep) {
              return _this._getDependency(resolvedProvider.providerType, dep);
            });
            return importExpr(provider.useFactory).callFn(depsExpr);
          } else if (provider.useClass) {
            var deps = provider.deps || provider.useClass.diDeps;
            var depsExpr = deps.map(function(dep) {
              return _this._getDependency(resolvedProvider.providerType, dep);
            });
            if (isDirectiveWrapper) {
              var directiveWrapperIdentifier = {reference: null};
              _this.view.targetDependencies.push(new DirectiveWrapperDependency(provider.useClass, DirectiveWrapperCompiler.dirWrapperClassName(provider.useClass), directiveWrapperIdentifier));
              return DirectiveWrapperExpressions.create(directiveWrapperIdentifier, depsExpr);
            } else {
              return importExpr(provider.useClass).instantiate(depsExpr, importType(provider.useClass));
            }
          } else {
            return convertValueToOutputAst(provider.useValue);
          }
        });
        var propName = "_" + tokenName(resolvedProvider.token) + "_" + _this.nodeIndex + "_" + _this.instances.size;
        var instance = createProviderProperty(propName, resolvedProvider, providerValueExpressions, resolvedProvider.multiProvider, resolvedProvider.eager, _this);
        if (isDirectiveWrapper) {
          _this.directiveWrapperInstance.set(tokenReference(resolvedProvider.token), instance);
          _this.instances.set(tokenReference(resolvedProvider.token), DirectiveWrapperExpressions.context(instance));
        } else {
          _this.instances.set(tokenReference(resolvedProvider.token), instance);
        }
      });
      var _loop_1 = function(i) {
        var directive = this_1._directives[i];
        var directiveInstance = this_1.instances.get(tokenReference(identifierToken(directive.type)));
        directive.queries.forEach(function(queryMeta) {
          _this._addQuery(queryMeta, directiveInstance);
        });
      };
      var this_1 = this;
      for (var i = 0; i < this._directives.length; i++) {
        _loop_1(i);
      }
      Object.keys(this.referenceTokens).forEach(function(varName) {
        var token = _this.referenceTokens[varName];
        var varValue;
        if (token) {
          varValue = _this.instances.get(tokenReference(token));
        } else {
          varValue = _this.renderNode;
        }
        _this.view.locals.set(varName, varValue);
      });
    };
    CompileElement.prototype.afterChildren = function(childNodeCount) {
      var _this = this;
      Array.from(this._resolvedProviders.values()).forEach(function(resolvedProvider) {
        var providerExpr = _this.instances.get(tokenReference(resolvedProvider.token));
        var providerChildNodeCount = resolvedProvider.providerType === ProviderAstType.PrivateService ? 0 : childNodeCount;
        _this.view.injectorGetMethod.addStmt(createInjectInternalCondition(_this.nodeIndex, providerChildNodeCount, resolvedProvider, providerExpr));
      });
    };
    CompileElement.prototype.finish = function() {
      var _this = this;
      Array.from(this._queries.values()).forEach(function(queries) {
        return queries.forEach(function(q) {
          return q.generateStatements(_this.view.createMethod, _this.view.updateContentQueriesMethod);
        });
      });
    };
    CompileElement.prototype.addContentNode = function(ngContentIndex, nodeExpr) {
      this.contentNodesByNgContentIndex[ngContentIndex].push(nodeExpr);
    };
    CompileElement.prototype.getComponent = function() {
      return isPresent(this.component) ? this.instances.get(tokenReference(identifierToken(this.component.type))) : null;
    };
    CompileElement.prototype.getProviderTokens = function() {
      return Array.from(this._resolvedProviders.values()).map(function(provider) {
        return provider.token;
      });
    };
    CompileElement.prototype.getQueriesFor = function(token) {
      var result = [];
      var currentEl = this;
      var distance = 0;
      var queries;
      while (!currentEl.isNull()) {
        queries = currentEl._queries.get(tokenReference(token));
        if (isPresent(queries)) {
          result.push.apply(result, queries.filter(function(query) {
            return query.meta.descendants || distance <= 1;
          }));
        }
        if (currentEl._directives.length > 0) {
          distance++;
        }
        currentEl = currentEl.parent;
      }
      queries = this.view.componentView.viewQueries.get(tokenReference(token));
      if (isPresent(queries)) {
        result.push.apply(result, queries);
      }
      return result;
    };
    CompileElement.prototype._addQuery = function(queryMeta, directiveInstance) {
      var propName = "_query_" + tokenName(queryMeta.selectors[0]) + "_" + this.nodeIndex + "_" + this._queryCount++;
      var queryList = createQueryList(queryMeta, directiveInstance, propName, this.view);
      var query = new CompileQuery(queryMeta, queryList, directiveInstance, this.view);
      addQueryToTokenMap(this._queries, query);
      return query;
    };
    CompileElement.prototype._getLocalDependency = function(requestingProviderType, dep) {
      var result = null;
      if (isPresent(dep.token)) {
        if (!result) {
          if (tokenReference(dep.token) === resolveIdentifier(Identifiers.ChangeDetectorRef)) {
            if (requestingProviderType === ProviderAstType.Component) {
              return this.compViewExpr.prop('ref');
            } else {
              return getPropertyInView(THIS_EXPR.prop('ref'), this.view, this.view.componentView);
            }
          }
        }
        if (!result) {
          var resolvedProvider = this._resolvedProviders.get(tokenReference(dep.token));
          if (resolvedProvider && (requestingProviderType === ProviderAstType.Directive || requestingProviderType === ProviderAstType.PublicService) && resolvedProvider.providerType === ProviderAstType.PrivateService) {
            return null;
          }
          result = this.instances.get(tokenReference(dep.token));
        }
      }
      return result;
    };
    CompileElement.prototype._getDependency = function(requestingProviderType, dep) {
      var currElement = this;
      var result = null;
      if (dep.isValue) {
        result = literal(dep.value);
      }
      if (!result && !dep.isSkipSelf) {
        result = this._getLocalDependency(requestingProviderType, dep);
      }
      while (!result && !currElement.parent.isNull()) {
        currElement = currElement.parent;
        result = currElement._getLocalDependency(ProviderAstType.PublicService, {token: dep.token});
      }
      if (!result) {
        result = injectFromViewParentInjector(this.view, dep.token, dep.isOptional);
      }
      if (!result) {
        result = NULL_EXPR;
      }
      return getPropertyInView(result, this.view, currElement.view);
    };
    return CompileElement;
  }(CompileNode));
  function createInjectInternalCondition(nodeIndex, childNodeCount, provider, providerExpr) {
    var indexCondition;
    if (childNodeCount > 0) {
      indexCondition = literal(nodeIndex).lowerEquals(InjectMethodVars$1.requestNodeIndex).and(InjectMethodVars$1.requestNodeIndex.lowerEquals(literal(nodeIndex + childNodeCount)));
    } else {
      indexCondition = literal(nodeIndex).identical(InjectMethodVars$1.requestNodeIndex);
    }
    return new IfStmt(InjectMethodVars$1.token.identical(createDiTokenExpression(provider.token)).and(indexCondition), [new ReturnStatement(providerExpr)]);
  }
  function createProviderProperty(propName, provider, providerValueExpressions, isMulti, isEager, compileElement) {
    var view = compileElement.view;
    var resolvedProviderValueExpr;
    var type;
    if (isMulti) {
      resolvedProviderValueExpr = literalArr(providerValueExpressions);
      type = new ArrayType(DYNAMIC_TYPE);
    } else {
      resolvedProviderValueExpr = providerValueExpressions[0];
      type = providerValueExpressions[0].type;
    }
    if (!type) {
      type = DYNAMIC_TYPE;
    }
    if (isEager) {
      view.fields.push(new ClassField(propName, type));
      view.createMethod.addStmt(THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());
    } else {
      var internalField = "_" + propName;
      view.fields.push(new ClassField(internalField, type));
      var getter = new CompileMethod(view);
      getter.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
      getter.addStmt(new IfStmt(THIS_EXPR.prop(internalField).isBlank(), [THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt()]));
      getter.addStmt(new ReturnStatement(THIS_EXPR.prop(internalField)));
      view.getters.push(new ClassGetter(propName, getter.finish(), type));
    }
    return THIS_EXPR.prop(propName);
  }
  var CompilePipe = (function() {
    function CompilePipe(view, meta) {
      var _this = this;
      this.view = view;
      this.meta = meta;
      this._purePipeProxyCount = 0;
      this.instance = THIS_EXPR.prop("_pipe_" + meta.name + "_" + view.pipeCount++);
      var deps = this.meta.type.diDeps.map(function(diDep) {
        if (tokenReference(diDep.token) === resolveIdentifier(Identifiers.ChangeDetectorRef)) {
          return getPropertyInView(THIS_EXPR.prop('ref'), _this.view, _this.view.componentView);
        }
        return injectFromViewParentInjector(view, diDep.token, false);
      });
      this.view.fields.push(new ClassField(this.instance.name, importType(this.meta.type)));
      this.view.createMethod.resetDebugInfo(null, null);
      this.view.createMethod.addStmt(THIS_EXPR.prop(this.instance.name).set(importExpr(this.meta.type).instantiate(deps)).toStmt());
    }
    CompilePipe.call = function(view, name, args) {
      var compView = view.componentView;
      var meta = _findPipeMeta(compView, name);
      var pipe;
      if (meta.pure) {
        pipe = compView.purePipes.get(name);
        if (!pipe) {
          pipe = new CompilePipe(compView, meta);
          compView.purePipes.set(name, pipe);
          compView.pipes.push(pipe);
        }
      } else {
        pipe = new CompilePipe(view, meta);
        view.pipes.push(pipe);
      }
      return pipe._call(view, args);
    };
    Object.defineProperty(CompilePipe.prototype, "pure", {
      get: function() {
        return this.meta.pure;
      },
      enumerable: true,
      configurable: true
    });
    CompilePipe.prototype._call = function(callingView, args) {
      if (this.meta.pure) {
        var purePipeProxyInstance = THIS_EXPR.prop(this.instance.name + "_" + this._purePipeProxyCount++);
        var pipeInstanceSeenFromPureProxy = getPropertyInView(this.instance, callingView, this.view);
        createPureProxy(pipeInstanceSeenFromPureProxy.prop('transform').callMethod(BuiltinMethod.Bind, [pipeInstanceSeenFromPureProxy]), args.length, purePipeProxyInstance, {
          fields: callingView.fields,
          ctorStmts: callingView.createMethod
        });
        return importExpr(createIdentifier(Identifiers.castByValue)).callFn([purePipeProxyInstance, pipeInstanceSeenFromPureProxy.prop('transform')]).callFn(args);
      } else {
        return getPropertyInView(this.instance, callingView, this.view).callMethod('transform', args);
      }
    };
    return CompilePipe;
  }());
  function _findPipeMeta(view, name) {
    var pipeMeta = null;
    for (var i = view.pipeMetas.length - 1; i >= 0; i--) {
      var localPipeMeta = view.pipeMetas[i];
      if (localPipeMeta.name == name) {
        pipeMeta = localPipeMeta;
        break;
      }
    }
    if (!pipeMeta) {
      throw new Error("Illegal state: Could not find pipe " + name + " although the parser should have detected this error!");
    }
    return pipeMeta;
  }
  var CompileViewRootNodeType = {};
  CompileViewRootNodeType.Node = 0;
  CompileViewRootNodeType.ViewContainer = 1;
  CompileViewRootNodeType.NgContent = 2;
  CompileViewRootNodeType[CompileViewRootNodeType.Node] = "Node";
  CompileViewRootNodeType[CompileViewRootNodeType.ViewContainer] = "ViewContainer";
  CompileViewRootNodeType[CompileViewRootNodeType.NgContent] = "NgContent";
  var CompileViewRootNode = (function() {
    function CompileViewRootNode(type, expr, ngContentIndex) {
      this.type = type;
      this.expr = expr;
      this.ngContentIndex = ngContentIndex;
    }
    return CompileViewRootNode;
  }());
  var CompileView = (function() {
    function CompileView(component, genConfig, pipeMetas, styles, animations, viewIndex, declarationElement, templateVariableBindings, targetDependencies) {
      var _this = this;
      this.component = component;
      this.genConfig = genConfig;
      this.pipeMetas = pipeMetas;
      this.styles = styles;
      this.animations = animations;
      this.viewIndex = viewIndex;
      this.declarationElement = declarationElement;
      this.templateVariableBindings = templateVariableBindings;
      this.targetDependencies = targetDependencies;
      this.viewChildren = [];
      this.nodes = [];
      this.rootNodes = [];
      this.lastRenderNode = NULL_EXPR;
      this.viewContainers = [];
      this.methods = [];
      this.ctorStmts = [];
      this.fields = [];
      this.getters = [];
      this.disposables = [];
      this.purePipes = new Map();
      this.pipes = [];
      this.locals = new Map();
      this.literalArrayCount = 0;
      this.literalMapCount = 0;
      this.pipeCount = 0;
      this.createMethod = new CompileMethod(this);
      this.animationBindingsMethod = new CompileMethod(this);
      this.injectorGetMethod = new CompileMethod(this);
      this.updateContentQueriesMethod = new CompileMethod(this);
      this.dirtyParentQueriesMethod = new CompileMethod(this);
      this.updateViewQueriesMethod = new CompileMethod(this);
      this.detectChangesInInputsMethod = new CompileMethod(this);
      this.detectChangesRenderPropertiesMethod = new CompileMethod(this);
      this.afterContentLifecycleCallbacksMethod = new CompileMethod(this);
      this.afterViewLifecycleCallbacksMethod = new CompileMethod(this);
      this.destroyMethod = new CompileMethod(this);
      this.detachMethod = new CompileMethod(this);
      this.viewType = getViewType(component, viewIndex);
      this.className = getViewClassName(component, viewIndex);
      this.classType = expressionType(variable(this.className));
      this.classExpr = variable(this.className);
      if (this.viewType === ViewType.COMPONENT || this.viewType === ViewType.HOST) {
        this.componentView = this;
      } else {
        this.componentView = this.declarationElement.view.componentView;
      }
      this.componentContext = getPropertyInView(THIS_EXPR.prop('context'), this, this.componentView);
      var viewQueries = new Map();
      if (this.viewType === ViewType.COMPONENT) {
        var directiveInstance_1 = THIS_EXPR.prop('context');
        this.component.viewQueries.forEach(function(queryMeta, queryIndex) {
          var propName = "_viewQuery_" + tokenName(queryMeta.selectors[0]) + "_" + queryIndex;
          var queryList = createQueryList(queryMeta, directiveInstance_1, propName, _this);
          var query = new CompileQuery(queryMeta, queryList, directiveInstance_1, _this);
          addQueryToTokenMap(viewQueries, query);
        });
      }
      this.viewQueries = viewQueries;
      templateVariableBindings.forEach(function(entry) {
        _this.locals.set(entry[1], THIS_EXPR.prop('context').prop(entry[0]));
      });
      if (!this.declarationElement.isNull()) {
        this.declarationElement.setEmbeddedView(this);
      }
    }
    CompileView.prototype.callPipe = function(name, input, args) {
      return CompilePipe.call(this, name, [input].concat(args));
    };
    CompileView.prototype.getLocal = function(name) {
      if (name == EventHandlerVars.event.name) {
        return EventHandlerVars.event;
      }
      var currView = this;
      var result = currView.locals.get(name);
      while (!result && isPresent(currView.declarationElement.view)) {
        currView = currView.declarationElement.view;
        result = currView.locals.get(name);
      }
      if (isPresent(result)) {
        return getPropertyInView(result, this, currView);
      } else {
        return null;
      }
    };
    CompileView.prototype.finish = function() {
      var _this = this;
      Array.from(this.viewQueries.values()).forEach(function(queries) {
        return queries.forEach(function(q) {
          return q.generateStatements(_this.createMethod, _this.updateViewQueriesMethod);
        });
      });
    };
    return CompileView;
  }());
  function getViewType(component, embeddedTemplateIndex) {
    if (embeddedTemplateIndex > 0) {
      return ViewType.EMBEDDED;
    }
    if (component.isHost) {
      return ViewType.HOST;
    }
    return ViewType.COMPONENT;
  }
  function bindOutputs(boundEvents, directives, compileElement, bindToRenderer) {
    var usedEvents = collectEvents(boundEvents, directives);
    if (!usedEvents.size) {
      return false;
    }
    if (bindToRenderer) {
      subscribeToRenderEvents(usedEvents, compileElement);
    }
    subscribeToDirectiveEvents(usedEvents, directives, compileElement);
    generateHandleEventMethod(boundEvents, directives, compileElement);
    return true;
  }
  function collectEvents(boundEvents, directives) {
    var usedEvents = new Map();
    boundEvents.forEach(function(event) {
      usedEvents.set(event.fullName, event);
    });
    directives.forEach(function(dirAst) {
      dirAst.hostEvents.forEach(function(event) {
        usedEvents.set(event.fullName, event);
      });
    });
    return usedEvents;
  }
  function subscribeToRenderEvents(usedEvents, compileElement) {
    var eventAndTargetExprs = [];
    usedEvents.forEach(function(event) {
      if (!event.phase) {
        eventAndTargetExprs.push(literal(event.name), literal(event.target));
      }
    });
    if (eventAndTargetExprs.length) {
      var disposableVar = variable("disposable_" + compileElement.view.disposables.length);
      compileElement.view.disposables.push(disposableVar);
      compileElement.view.createMethod.addStmt(disposableVar.set(importExpr(createIdentifier(Identifiers.subscribeToRenderElement)).callFn([THIS_EXPR, compileElement.renderNode, createInlineArray(eventAndTargetExprs), handleEventExpr(compileElement)])).toDeclStmt(FUNCTION_TYPE, [StmtModifier.Private]));
    }
  }
  function subscribeToDirectiveEvents(usedEvents, directives, compileElement) {
    var usedEventNames = Array.from(usedEvents.keys());
    directives.forEach(function(dirAst) {
      var dirWrapper = compileElement.directiveWrapperInstance.get(dirAst.directive.type.reference);
      compileElement.view.createMethod.addStmts(DirectiveWrapperExpressions.subscribe(dirAst.directive, dirAst.hostProperties, usedEventNames, dirWrapper, THIS_EXPR, handleEventExpr(compileElement)));
    });
  }
  function generateHandleEventMethod(boundEvents, directives, compileElement) {
    var hasComponentHostListener = directives.some(function(dirAst) {
      return dirAst.hostEvents.some(function(event) {
        return dirAst.directive.isComponent;
      });
    });
    var markPathToRootStart = hasComponentHostListener ? compileElement.compViewExpr : THIS_EXPR;
    var handleEventStmts = new CompileMethod(compileElement.view);
    handleEventStmts.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
    handleEventStmts.push(markPathToRootStart.callMethod('markPathToRootAsCheckOnce', []).toStmt());
    var eventNameVar = variable('eventName');
    var resultVar = variable('result');
    handleEventStmts.push(resultVar.set(literal(true)).toDeclStmt(BOOL_TYPE));
    directives.forEach(function(dirAst, dirIdx) {
      var dirWrapper = compileElement.directiveWrapperInstance.get(dirAst.directive.type.reference);
      if (dirAst.hostEvents.length > 0) {
        handleEventStmts.push(resultVar.set(DirectiveWrapperExpressions.handleEvent(dirAst.hostEvents, dirWrapper, eventNameVar, EventHandlerVars.event).and(resultVar)).toStmt());
      }
    });
    boundEvents.forEach(function(renderEvent, renderEventIdx) {
      var evalResult = convertActionBinding(compileElement.view, compileElement.view, compileElement.view.componentContext, renderEvent.handler, "sub_" + renderEventIdx);
      var trueStmts = evalResult.stmts;
      if (evalResult.preventDefault) {
        trueStmts.push(resultVar.set(evalResult.preventDefault.and(resultVar)).toStmt());
      }
      handleEventStmts.push(new IfStmt(eventNameVar.equals(literal(renderEvent.fullName)), trueStmts));
    });
    handleEventStmts.push(new ReturnStatement(resultVar));
    compileElement.view.methods.push(new ClassMethod(getHandleEventMethodName(compileElement.nodeIndex), [new FnParam(eventNameVar.name, STRING_TYPE), new FnParam(EventHandlerVars.event.name, DYNAMIC_TYPE)], handleEventStmts.finish(), BOOL_TYPE));
  }
  function handleEventExpr(compileElement) {
    var handleEventMethodName = getHandleEventMethodName(compileElement.nodeIndex);
    return THIS_EXPR.callMethod('eventHandler', [THIS_EXPR.prop(handleEventMethodName)]);
  }
  var STATE_IS_NEVER_CHECKED = THIS_EXPR.prop('numberOfChecks').identical(new LiteralExpr(0));
  var NOT_THROW_ON_CHANGES = not(DetectChangesVars.throwOnChange);
  function bindDirectiveAfterContentLifecycleCallbacks(directiveMeta, directiveInstance, compileElement) {
    var view = compileElement.view;
    var lifecycleHooks = directiveMeta.type.lifecycleHooks;
    var afterContentLifecycleCallbacksMethod = view.afterContentLifecycleCallbacksMethod;
    afterContentLifecycleCallbacksMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
    if (lifecycleHooks.indexOf(LifecycleHooks.AfterContentInit) !== -1) {
      afterContentLifecycleCallbacksMethod.addStmt(new IfStmt(STATE_IS_NEVER_CHECKED, [directiveInstance.callMethod('ngAfterContentInit', []).toStmt()]));
    }
    if (lifecycleHooks.indexOf(LifecycleHooks.AfterContentChecked) !== -1) {
      afterContentLifecycleCallbacksMethod.addStmt(directiveInstance.callMethod('ngAfterContentChecked', []).toStmt());
    }
  }
  function bindDirectiveAfterViewLifecycleCallbacks(directiveMeta, directiveInstance, compileElement) {
    var view = compileElement.view;
    var lifecycleHooks = directiveMeta.type.lifecycleHooks;
    var afterViewLifecycleCallbacksMethod = view.afterViewLifecycleCallbacksMethod;
    afterViewLifecycleCallbacksMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
    if (lifecycleHooks.indexOf(LifecycleHooks.AfterViewInit) !== -1) {
      afterViewLifecycleCallbacksMethod.addStmt(new IfStmt(STATE_IS_NEVER_CHECKED, [directiveInstance.callMethod('ngAfterViewInit', []).toStmt()]));
    }
    if (lifecycleHooks.indexOf(LifecycleHooks.AfterViewChecked) !== -1) {
      afterViewLifecycleCallbacksMethod.addStmt(directiveInstance.callMethod('ngAfterViewChecked', []).toStmt());
    }
  }
  function bindDirectiveWrapperLifecycleCallbacks(dir, directiveWrapperIntance, compileElement) {
    compileElement.view.destroyMethod.addStmts(DirectiveWrapperExpressions.ngOnDestroy(dir.directive, directiveWrapperIntance));
    compileElement.view.detachMethod.addStmts(DirectiveWrapperExpressions.ngOnDetach(dir.hostProperties, directiveWrapperIntance, THIS_EXPR, compileElement.compViewExpr || THIS_EXPR, compileElement.renderNode));
  }
  function bindInjectableDestroyLifecycleCallbacks(provider, providerInstance, compileElement) {
    var onDestroyMethod = compileElement.view.destroyMethod;
    onDestroyMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
    if (provider.providerType !== ProviderAstType.Directive && provider.providerType !== ProviderAstType.Component && provider.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1) {
      onDestroyMethod.addStmt(providerInstance.callMethod('ngOnDestroy', []).toStmt());
    }
  }
  function bindPipeDestroyLifecycleCallbacks(pipeMeta, pipeInstance, view) {
    var onDestroyMethod = view.destroyMethod;
    if (pipeMeta.type.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1) {
      onDestroyMethod.addStmt(pipeInstance.callMethod('ngOnDestroy', []).toStmt());
    }
  }
  function bindRenderText(boundText, compileNode, view) {
    var valueField = createCheckBindingField(view);
    var evalResult = convertPropertyBinding(view, view, view.componentContext, boundText.value, valueField.bindingId);
    if (!evalResult) {
      return null;
    }
    view.detectChangesRenderPropertiesMethod.resetDebugInfo(compileNode.nodeIndex, boundText);
    view.detectChangesRenderPropertiesMethod.addStmts(createCheckBindingStmt(evalResult, valueField.expression, DetectChangesVars.throwOnChange, [THIS_EXPR.prop('renderer').callMethod('setText', [compileNode.renderNode, evalResult.currValExpr]).toStmt()]));
  }
  function bindRenderInputs(boundProps, boundOutputs, hasEvents, compileElement) {
    var view = compileElement.view;
    var renderNode = compileElement.renderNode;
    boundProps.forEach(function(boundProp) {
      var bindingField = createCheckBindingField(view);
      view.detectChangesRenderPropertiesMethod.resetDebugInfo(compileElement.nodeIndex, boundProp);
      var evalResult = convertPropertyBinding(view, view, compileElement.view.componentContext, boundProp.value, bindingField.bindingId);
      if (!evalResult) {
        return;
      }
      var checkBindingStmts = [];
      var compileMethod = view.detectChangesRenderPropertiesMethod;
      switch (boundProp.type) {
        case PropertyBindingType.Property:
        case PropertyBindingType.Attribute:
        case PropertyBindingType.Class:
        case PropertyBindingType.Style:
          checkBindingStmts.push.apply(checkBindingStmts, writeToRenderer(THIS_EXPR, boundProp, renderNode, evalResult.currValExpr, view.genConfig.logBindingUpdate));
          break;
        case PropertyBindingType.Animation:
          compileMethod = view.animationBindingsMethod;
          var _a = triggerAnimation(THIS_EXPR, THIS_EXPR, boundProp, boundOutputs, (hasEvents ? THIS_EXPR.prop(getHandleEventMethodName(compileElement.nodeIndex)) : importExpr(createIdentifier(Identifiers.noop))).callMethod(BuiltinMethod.Bind, [THIS_EXPR]), compileElement.renderNode, evalResult.currValExpr, bindingField.expression),
              updateStmts = _a.updateStmts,
              detachStmts = _a.detachStmts;
          checkBindingStmts.push.apply(checkBindingStmts, updateStmts);
          view.detachMethod.addStmts(detachStmts);
          break;
      }
      compileMethod.addStmts(createCheckBindingStmt(evalResult, bindingField.expression, DetectChangesVars.throwOnChange, checkBindingStmts));
    });
  }
  function bindDirectiveHostProps(directiveAst, directiveWrapperInstance, compileElement, elementName, schemaRegistry) {
    var runtimeSecurityCtxExprs = directiveAst.hostProperties.filter(function(boundProp) {
      return boundProp.needsRuntimeSecurityContext;
    }).map(function(boundProp) {
      var ctx;
      switch (boundProp.type) {
        case PropertyBindingType.Property:
          ctx = schemaRegistry.securityContext(elementName, boundProp.name, false);
          break;
        case PropertyBindingType.Attribute:
          ctx = schemaRegistry.securityContext(elementName, boundProp.name, true);
          break;
        default:
          throw new Error("Illegal state: Only property / attribute bindings can have an unknown security context! Binding " + boundProp.name);
      }
      return createEnumExpression(Identifiers.SecurityContext, ctx);
    });
    compileElement.view.detectChangesRenderPropertiesMethod.addStmts(DirectiveWrapperExpressions.checkHost(directiveAst.hostProperties, directiveWrapperInstance, THIS_EXPR, compileElement.compViewExpr || THIS_EXPR, compileElement.renderNode, DetectChangesVars.throwOnChange, runtimeSecurityCtxExprs));
  }
  function bindDirectiveInputs(directiveAst, directiveWrapperInstance, dirIndex, compileElement) {
    var view = compileElement.view;
    var detectChangesInInputsMethod = view.detectChangesInInputsMethod;
    detectChangesInInputsMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
    directiveAst.inputs.forEach(function(input, inputIdx) {
      var bindingId = compileElement.nodeIndex + "_" + dirIndex + "_" + inputIdx;
      detectChangesInInputsMethod.resetDebugInfo(compileElement.nodeIndex, input);
      var evalResult = convertPropertyBinding(view, view, view.componentContext, input.value, bindingId);
      if (!evalResult) {
        return;
      }
      detectChangesInInputsMethod.addStmts(evalResult.stmts);
      detectChangesInInputsMethod.addStmt(directiveWrapperInstance.callMethod("check_" + input.directiveName, [evalResult.currValExpr, DetectChangesVars.throwOnChange, evalResult.forceUpdate || literal(false)]).toStmt());
    });
    var isOnPushComp = directiveAst.directive.isComponent && !isDefaultChangeDetectionStrategy(directiveAst.directive.changeDetection);
    var directiveDetectChangesExpr = DirectiveWrapperExpressions.ngDoCheck(directiveWrapperInstance, THIS_EXPR, compileElement.renderNode, DetectChangesVars.throwOnChange);
    var directiveDetectChangesStmt = isOnPushComp ? new IfStmt(directiveDetectChangesExpr, [compileElement.compViewExpr.callMethod('markAsCheckOnce', []).toStmt()]) : directiveDetectChangesExpr.toStmt();
    detectChangesInInputsMethod.addStmt(directiveDetectChangesStmt);
  }
  function bindQueryValues(ce) {
    var queriesWithReads = [];
    ce.getProviderTokens().forEach(function(token) {
      var queriesForProvider = ce.getQueriesFor(token);
      queriesWithReads.push.apply(queriesWithReads, queriesForProvider.map(function(query) {
        return new _QueryWithRead(query, token);
      }));
    });
    Object.keys(ce.referenceTokens).forEach(function(varName) {
      var token = ce.referenceTokens[varName];
      var varToken = {value: varName};
      queriesWithReads.push.apply(queriesWithReads, ce.getQueriesFor(varToken).map(function(query) {
        return new _QueryWithRead(query, varToken);
      }));
    });
    queriesWithReads.forEach(function(queryWithRead) {
      var value;
      if (queryWithRead.read.identifier) {
        value = ce.instances.get(tokenReference(queryWithRead.read));
      } else {
        var token = ce.referenceTokens[queryWithRead.read.value];
        if (token) {
          value = ce.instances.get(tokenReference(token));
        } else {
          value = ce.elementRef;
        }
      }
      if (value) {
        queryWithRead.query.addValue(value, ce.view);
      }
    });
  }
  var _QueryWithRead = (function() {
    function _QueryWithRead(query, match) {
      this.query = query;
      this.read = query.meta.read || match;
    }
    return _QueryWithRead;
  }());
  function bindView(view, parsedTemplate, schemaRegistry) {
    var visitor = new ViewBinderVisitor(view, schemaRegistry);
    templateVisitAll(visitor, parsedTemplate);
    view.pipes.forEach(function(pipe) {
      bindPipeDestroyLifecycleCallbacks(pipe.meta, pipe.instance, pipe.view);
    });
  }
  var ViewBinderVisitor = (function() {
    function ViewBinderVisitor(view, _schemaRegistry) {
      this.view = view;
      this._schemaRegistry = _schemaRegistry;
      this._nodeIndex = 0;
    }
    ViewBinderVisitor.prototype.visitBoundText = function(ast, parent) {
      var node = this.view.nodes[this._nodeIndex++];
      bindRenderText(ast, node, this.view);
      return null;
    };
    ViewBinderVisitor.prototype.visitText = function(ast, parent) {
      this._nodeIndex++;
      return null;
    };
    ViewBinderVisitor.prototype.visitNgContent = function(ast, parent) {
      return null;
    };
    ViewBinderVisitor.prototype.visitElement = function(ast, parent) {
      var _this = this;
      var compileElement = (this.view.nodes[this._nodeIndex++]);
      bindQueryValues(compileElement);
      var hasEvents = bindOutputs(ast.outputs, ast.directives, compileElement, true);
      bindRenderInputs(ast.inputs, ast.outputs, hasEvents, compileElement);
      ast.directives.forEach(function(directiveAst, dirIndex) {
        var directiveWrapperInstance = compileElement.directiveWrapperInstance.get(directiveAst.directive.type.reference);
        bindDirectiveInputs(directiveAst, directiveWrapperInstance, dirIndex, compileElement);
        bindDirectiveHostProps(directiveAst, directiveWrapperInstance, compileElement, ast.name, _this._schemaRegistry);
      });
      templateVisitAll(this, ast.children, compileElement);
      ast.directives.forEach(function(directiveAst) {
        var directiveInstance = compileElement.instances.get(directiveAst.directive.type.reference);
        var directiveWrapperInstance = compileElement.directiveWrapperInstance.get(directiveAst.directive.type.reference);
        bindDirectiveAfterContentLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
        bindDirectiveAfterViewLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
        bindDirectiveWrapperLifecycleCallbacks(directiveAst, directiveWrapperInstance, compileElement);
      });
      ast.providers.forEach(function(providerAst) {
        var providerInstance = compileElement.instances.get(tokenReference(providerAst.token));
        bindInjectableDestroyLifecycleCallbacks(providerAst, providerInstance, compileElement);
      });
      return null;
    };
    ViewBinderVisitor.prototype.visitEmbeddedTemplate = function(ast, parent) {
      var compileElement = (this.view.nodes[this._nodeIndex++]);
      bindQueryValues(compileElement);
      bindOutputs(ast.outputs, ast.directives, compileElement, false);
      ast.directives.forEach(function(directiveAst, dirIndex) {
        var directiveInstance = compileElement.instances.get(directiveAst.directive.type.reference);
        var directiveWrapperInstance = compileElement.directiveWrapperInstance.get(directiveAst.directive.type.reference);
        bindDirectiveInputs(directiveAst, directiveWrapperInstance, dirIndex, compileElement);
        bindDirectiveAfterContentLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
        bindDirectiveAfterViewLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
        bindDirectiveWrapperLifecycleCallbacks(directiveAst, directiveWrapperInstance, compileElement);
      });
      ast.providers.forEach(function(providerAst) {
        var providerInstance = compileElement.instances.get(tokenReference(providerAst.token));
        bindInjectableDestroyLifecycleCallbacks(providerAst, providerInstance, compileElement);
      });
      bindView(compileElement.embeddedView, ast.children, this._schemaRegistry);
      return null;
    };
    ViewBinderVisitor.prototype.visitAttr = function(ast, ctx) {
      return null;
    };
    ViewBinderVisitor.prototype.visitDirective = function(ast, ctx) {
      return null;
    };
    ViewBinderVisitor.prototype.visitEvent = function(ast, eventTargetAndNames) {
      return null;
    };
    ViewBinderVisitor.prototype.visitReference = function(ast, ctx) {
      return null;
    };
    ViewBinderVisitor.prototype.visitVariable = function(ast, ctx) {
      return null;
    };
    ViewBinderVisitor.prototype.visitDirectiveProperty = function(ast, context) {
      return null;
    };
    ViewBinderVisitor.prototype.visitElementProperty = function(ast, context) {
      return null;
    };
    return ViewBinderVisitor;
  }());
  var IMPLICIT_TEMPLATE_VAR = '\$implicit';
  var CLASS_ATTR$1 = 'class';
  var STYLE_ATTR = 'style';
  var NG_CONTAINER_TAG = 'ng-container';
  var parentRenderNodeVar = variable('parentRenderNode');
  var rootSelectorVar = variable('rootSelector');
  function buildView(view, template, targetDependencies) {
    var builderVisitor = new ViewBuilderVisitor(view, targetDependencies);
    var parentEl = view.declarationElement.isNull() ? view.declarationElement : view.declarationElement.parent;
    templateVisitAll(builderVisitor, template, parentEl);
    if (view.viewType === ViewType.EMBEDDED || view.viewType === ViewType.HOST) {
      view.lastRenderNode = builderVisitor.getOrCreateLastRenderNode();
    }
    return builderVisitor.nestedViewCount;
  }
  function finishView(view, targetStatements) {
    view.nodes.forEach(function(node) {
      if (node instanceof CompileElement) {
        node.finish();
        if (node.hasEmbeddedView) {
          finishView(node.embeddedView, targetStatements);
        }
      }
    });
    view.finish();
    createViewTopLevelStmts(view, targetStatements);
  }
  var ViewBuilderVisitor = (function() {
    function ViewBuilderVisitor(view, targetDependencies) {
      this.view = view;
      this.targetDependencies = targetDependencies;
      this.nestedViewCount = 0;
    }
    ViewBuilderVisitor.prototype._isRootNode = function(parent) {
      return parent.view !== this.view;
    };
    ViewBuilderVisitor.prototype._addRootNodeAndProject = function(node) {
      var projectedNode = _getOuterContainerOrSelf(node);
      var parent = projectedNode.parent;
      var ngContentIndex = ((projectedNode.sourceAst)).ngContentIndex;
      var viewContainer = (node instanceof CompileElement && node.hasViewContainer) ? node.viewContainer : null;
      if (this._isRootNode(parent)) {
        if (this.view.viewType !== ViewType.COMPONENT) {
          this.view.rootNodes.push(new CompileViewRootNode(viewContainer ? CompileViewRootNodeType.ViewContainer : CompileViewRootNodeType.Node, viewContainer || node.renderNode));
        }
      } else if (isPresent(parent.component) && isPresent(ngContentIndex)) {
        parent.addContentNode(ngContentIndex, new CompileViewRootNode(viewContainer ? CompileViewRootNodeType.ViewContainer : CompileViewRootNodeType.Node, viewContainer || node.renderNode));
      }
    };
    ViewBuilderVisitor.prototype._getParentRenderNode = function(parent) {
      parent = _getOuterContainerParentOrSelf(parent);
      if (this._isRootNode(parent)) {
        if (this.view.viewType === ViewType.COMPONENT) {
          return parentRenderNodeVar;
        } else {
          return NULL_EXPR;
        }
      } else {
        return isPresent(parent.component) && parent.component.template.encapsulation !== _angular_core.ViewEncapsulation.Native ? NULL_EXPR : parent.renderNode;
      }
    };
    ViewBuilderVisitor.prototype.getOrCreateLastRenderNode = function() {
      var view = this.view;
      if (view.rootNodes.length === 0 || view.rootNodes[view.rootNodes.length - 1].type !== CompileViewRootNodeType.Node) {
        var fieldName = "_el_" + view.nodes.length;
        view.fields.push(new ClassField(fieldName, importType(view.genConfig.renderTypes.renderElement)));
        view.createMethod.addStmt(THIS_EXPR.prop(fieldName).set(ViewProperties.renderer.callMethod('createTemplateAnchor', [NULL_EXPR, NULL_EXPR])).toStmt());
        view.rootNodes.push(new CompileViewRootNode(CompileViewRootNodeType.Node, THIS_EXPR.prop(fieldName)));
      }
      return view.rootNodes[view.rootNodes.length - 1].expr;
    };
    ViewBuilderVisitor.prototype.visitBoundText = function(ast, parent) {
      return this._visitText(ast, '', parent);
    };
    ViewBuilderVisitor.prototype.visitText = function(ast, parent) {
      return this._visitText(ast, ast.value, parent);
    };
    ViewBuilderVisitor.prototype._visitText = function(ast, value, parent) {
      var fieldName = "_text_" + this.view.nodes.length;
      this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderText)));
      var renderNode = THIS_EXPR.prop(fieldName);
      var compileNode = new CompileNode(parent, this.view, this.view.nodes.length, renderNode, ast);
      var createRenderNode = THIS_EXPR.prop(fieldName).set(ViewProperties.renderer.callMethod('createText', [this._getParentRenderNode(parent), literal(value), this.view.createMethod.resetDebugInfoExpr(this.view.nodes.length, ast)])).toStmt();
      this.view.nodes.push(compileNode);
      this.view.createMethod.addStmt(createRenderNode);
      this._addRootNodeAndProject(compileNode);
      return renderNode;
    };
    ViewBuilderVisitor.prototype.visitNgContent = function(ast, parent) {
      this.view.createMethod.resetDebugInfo(null, ast);
      var parentRenderNode = this._getParentRenderNode(parent);
      if (parentRenderNode !== NULL_EXPR) {
        this.view.createMethod.addStmt(THIS_EXPR.callMethod('projectNodes', [parentRenderNode, literal(ast.index)]).toStmt());
      } else if (this._isRootNode(parent)) {
        if (this.view.viewType !== ViewType.COMPONENT) {
          this.view.rootNodes.push(new CompileViewRootNode(CompileViewRootNodeType.NgContent, null, ast.index));
        }
      } else {
        if (isPresent(parent.component) && isPresent(ast.ngContentIndex)) {
          parent.addContentNode(ast.ngContentIndex, new CompileViewRootNode(CompileViewRootNodeType.NgContent, null, ast.index));
        }
      }
      return null;
    };
    ViewBuilderVisitor.prototype.visitElement = function(ast, parent) {
      var nodeIndex = this.view.nodes.length;
      var createRenderNodeExpr;
      var debugContextExpr = this.view.createMethod.resetDebugInfoExpr(nodeIndex, ast);
      var directives = ast.directives.map(function(directiveAst) {
        return directiveAst.directive;
      });
      var component = directives.find(function(directive) {
        return directive.isComponent;
      });
      if (ast.name === NG_CONTAINER_TAG) {
        createRenderNodeExpr = ViewProperties.renderer.callMethod('createTemplateAnchor', [this._getParentRenderNode(parent), debugContextExpr]);
      } else {
        var htmlAttrs = _readHtmlAttrs(ast.attrs);
        var attrNameAndValues = createInlineArray(_mergeHtmlAndDirectiveAttrs(htmlAttrs, directives).map(function(v) {
          return literal(v);
        }));
        if (nodeIndex === 0 && this.view.viewType === ViewType.HOST) {
          createRenderNodeExpr = importExpr(createIdentifier(Identifiers.selectOrCreateRenderHostElement)).callFn([ViewProperties.renderer, literal(ast.name), attrNameAndValues, rootSelectorVar, debugContextExpr]);
        } else {
          createRenderNodeExpr = importExpr(createIdentifier(Identifiers.createRenderElement)).callFn([ViewProperties.renderer, this._getParentRenderNode(parent), literal(ast.name), attrNameAndValues, debugContextExpr]);
        }
      }
      var fieldName = "_el_" + nodeIndex;
      this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderElement)));
      this.view.createMethod.addStmt(THIS_EXPR.prop(fieldName).set(createRenderNodeExpr).toStmt());
      var renderNode = THIS_EXPR.prop(fieldName);
      var compileElement = new CompileElement(parent, this.view, nodeIndex, renderNode, ast, component, directives, ast.providers, ast.hasViewContainer, false, ast.references);
      this.view.nodes.push(compileElement);
      var compViewExpr = null;
      if (isPresent(component)) {
        var nestedComponentIdentifier = {reference: null};
        this.targetDependencies.push(new ViewClassDependency(component.type, getViewClassName(component, 0), nestedComponentIdentifier));
        compViewExpr = THIS_EXPR.prop("compView_" + nodeIndex);
        this.view.fields.push(new ClassField(compViewExpr.name, importType(createIdentifier(Identifiers.AppView), [importType(component.type)])));
        this.view.viewChildren.push(compViewExpr);
        compileElement.setComponentView(compViewExpr);
        this.view.createMethod.addStmt(compViewExpr.set(importExpr(nestedComponentIdentifier).instantiate([ViewProperties.viewUtils, THIS_EXPR, literal(nodeIndex), renderNode])).toStmt());
      }
      compileElement.beforeChildren();
      this._addRootNodeAndProject(compileElement);
      templateVisitAll(this, ast.children, compileElement);
      compileElement.afterChildren(this.view.nodes.length - nodeIndex - 1);
      if (isPresent(compViewExpr)) {
        this.view.createMethod.addStmt(compViewExpr.callMethod('create', [compileElement.getComponent()]).toStmt());
      }
      return null;
    };
    ViewBuilderVisitor.prototype.visitEmbeddedTemplate = function(ast, parent) {
      var nodeIndex = this.view.nodes.length;
      var fieldName = "_anchor_" + nodeIndex;
      this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderComment)));
      this.view.createMethod.addStmt(THIS_EXPR.prop(fieldName).set(ViewProperties.renderer.callMethod('createTemplateAnchor', [this._getParentRenderNode(parent), this.view.createMethod.resetDebugInfoExpr(nodeIndex, ast)])).toStmt());
      var renderNode = THIS_EXPR.prop(fieldName);
      var templateVariableBindings = ast.variables.map(function(varAst) {
        return [varAst.value.length > 0 ? varAst.value : IMPLICIT_TEMPLATE_VAR, varAst.name];
      });
      var directives = ast.directives.map(function(directiveAst) {
        return directiveAst.directive;
      });
      var compileElement = new CompileElement(parent, this.view, nodeIndex, renderNode, ast, null, directives, ast.providers, ast.hasViewContainer, true, ast.references);
      this.view.nodes.push(compileElement);
      this.nestedViewCount++;
      var embeddedView = new CompileView(this.view.component, this.view.genConfig, this.view.pipeMetas, NULL_EXPR, this.view.animations, this.view.viewIndex + this.nestedViewCount, compileElement, templateVariableBindings, this.targetDependencies);
      this.nestedViewCount += buildView(embeddedView, ast.children, this.targetDependencies);
      compileElement.beforeChildren();
      this._addRootNodeAndProject(compileElement);
      compileElement.afterChildren(0);
      return null;
    };
    ViewBuilderVisitor.prototype.visitAttr = function(ast, ctx) {
      return null;
    };
    ViewBuilderVisitor.prototype.visitDirective = function(ast, ctx) {
      return null;
    };
    ViewBuilderVisitor.prototype.visitEvent = function(ast, eventTargetAndNames) {
      return null;
    };
    ViewBuilderVisitor.prototype.visitReference = function(ast, ctx) {
      return null;
    };
    ViewBuilderVisitor.prototype.visitVariable = function(ast, ctx) {
      return null;
    };
    ViewBuilderVisitor.prototype.visitDirectiveProperty = function(ast, context) {
      return null;
    };
    ViewBuilderVisitor.prototype.visitElementProperty = function(ast, context) {
      return null;
    };
    return ViewBuilderVisitor;
  }());
  function _getOuterContainerOrSelf(node) {
    var view = node.view;
    while (_isNgContainer(node.parent, view)) {
      node = node.parent;
    }
    return node;
  }
  function _getOuterContainerParentOrSelf(el) {
    var view = el.view;
    while (_isNgContainer(el, view)) {
      el = el.parent;
    }
    return el;
  }
  function _isNgContainer(node, view) {
    return !node.isNull() && ((node.sourceAst)).name === NG_CONTAINER_TAG && node.view === view;
  }
  function _mergeHtmlAndDirectiveAttrs(declaredHtmlAttrs, directives) {
    var mapResult = {};
    Object.keys(declaredHtmlAttrs).forEach(function(key) {
      mapResult[key] = declaredHtmlAttrs[key];
    });
    directives.forEach(function(directiveMeta) {
      Object.keys(directiveMeta.hostAttributes).forEach(function(name) {
        var value = directiveMeta.hostAttributes[name];
        var prevValue = mapResult[name];
        mapResult[name] = isPresent(prevValue) ? mergeAttributeValue(name, prevValue, value) : value;
      });
    });
    var arrResult = [];
    Object.keys(mapResult).sort().forEach(function(attrName) {
      arrResult.push(attrName, mapResult[attrName]);
    });
    return arrResult;
  }
  function _readHtmlAttrs(attrs) {
    var htmlAttrs = {};
    attrs.forEach(function(ast) {
      htmlAttrs[ast.name] = ast.value;
    });
    return htmlAttrs;
  }
  function mergeAttributeValue(attrName, attrValue1, attrValue2) {
    if (attrName == CLASS_ATTR$1 || attrName == STYLE_ATTR) {
      return attrValue1 + " " + attrValue2;
    } else {
      return attrValue2;
    }
  }
  function createViewTopLevelStmts(view, targetStatements) {
    var nodeDebugInfosVar = NULL_EXPR;
    if (view.genConfig.genDebugInfo) {
      nodeDebugInfosVar = variable("nodeDebugInfos_" + identifierName(view.component.type) + view.viewIndex);
      targetStatements.push(((nodeDebugInfosVar)).set(literalArr(view.nodes.map(createStaticNodeDebugInfo), new ArrayType(importType(createIdentifier(Identifiers.StaticNodeDebugInfo)), [TypeModifier.Const]))).toDeclStmt(null, [StmtModifier.Final]));
    }
    var renderCompTypeVar = variable("renderType_" + identifierName(view.component.type));
    if (view.viewIndex === 0) {
      var templateUrlInfo = void 0;
      if (view.component.template.templateUrl == identifierModuleUrl(view.component.type)) {
        templateUrlInfo = identifierModuleUrl(view.component.type) + " class " + identifierName(view.component.type) + " - inline template";
      } else {
        templateUrlInfo = view.component.template.templateUrl;
      }
      targetStatements.push(renderCompTypeVar.set(importExpr(createIdentifier(Identifiers.createRenderComponentType)).callFn([view.genConfig.genDebugInfo ? literal(templateUrlInfo) : literal(''), literal(view.component.template.ngContentSelectors.length), ViewEncapsulationEnum.fromValue(view.component.template.encapsulation), view.styles, literalMap(view.animations.map(function(entry) {
        return [entry.name, entry.fnExp];
      }))])).toDeclStmt(importType(createIdentifier(Identifiers.RenderComponentType))));
    }
    var viewClass = createViewClass(view, renderCompTypeVar, nodeDebugInfosVar);
    targetStatements.push(viewClass);
  }
  function createStaticNodeDebugInfo(node) {
    var compileElement = node instanceof CompileElement ? node : null;
    var providerTokens = [];
    var componentToken = NULL_EXPR;
    var varTokenEntries = [];
    if (isPresent(compileElement)) {
      providerTokens = compileElement.getProviderTokens().map(function(token) {
        return createDiTokenExpression(token);
      });
      if (isPresent(compileElement.component)) {
        componentToken = createDiTokenExpression(identifierToken(compileElement.component.type));
      }
      Object.keys(compileElement.referenceTokens).forEach(function(varName) {
        var token = compileElement.referenceTokens[varName];
        varTokenEntries.push([varName, isPresent(token) ? createDiTokenExpression(token) : NULL_EXPR]);
      });
    }
    return importExpr(createIdentifier(Identifiers.StaticNodeDebugInfo)).instantiate([literalArr(providerTokens, new ArrayType(DYNAMIC_TYPE, [TypeModifier.Const])), componentToken, literalMap(varTokenEntries, new MapType(DYNAMIC_TYPE, [TypeModifier.Const]))], importType(createIdentifier(Identifiers.StaticNodeDebugInfo), null, [TypeModifier.Const]));
  }
  function createViewClass(view, renderCompTypeVar, nodeDebugInfosVar) {
    var viewConstructorArgs = [new FnParam(ViewConstructorVars.viewUtils.name, importType(createIdentifier(Identifiers.ViewUtils))), new FnParam(ViewConstructorVars.parentView.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])), new FnParam(ViewConstructorVars.parentIndex.name, NUMBER_TYPE), new FnParam(ViewConstructorVars.parentElement.name, DYNAMIC_TYPE)];
    var superConstructorArgs = [variable(view.className), renderCompTypeVar, ViewTypeEnum.fromValue(view.viewType), ViewConstructorVars.viewUtils, ViewConstructorVars.parentView, ViewConstructorVars.parentIndex, ViewConstructorVars.parentElement, ChangeDetectorStatusEnum.fromValue(getChangeDetectionMode(view))];
    if (view.genConfig.genDebugInfo) {
      superConstructorArgs.push(nodeDebugInfosVar);
    }
    if (view.viewType === ViewType.EMBEDDED) {
      viewConstructorArgs.push(new FnParam('declaredViewContainer', importType(createIdentifier(Identifiers.ViewContainer))));
      superConstructorArgs.push(variable('declaredViewContainer'));
    }
    var viewMethods = [new ClassMethod('createInternal', [new FnParam(rootSelectorVar.name, STRING_TYPE)], generateCreateMethod(view), importType(createIdentifier(Identifiers.ComponentRef), [DYNAMIC_TYPE])), new ClassMethod('injectorGetInternal', [new FnParam(InjectMethodVars$1.token.name, DYNAMIC_TYPE), new FnParam(InjectMethodVars$1.requestNodeIndex.name, NUMBER_TYPE), new FnParam(InjectMethodVars$1.notFoundResult.name, DYNAMIC_TYPE)], addReturnValuefNotEmpty(view.injectorGetMethod.finish(), InjectMethodVars$1.notFoundResult), DYNAMIC_TYPE), new ClassMethod('detectChangesInternal', [new FnParam(DetectChangesVars.throwOnChange.name, BOOL_TYPE)], generateDetectChangesMethod(view)), new ClassMethod('dirtyParentQueriesInternal', [], view.dirtyParentQueriesMethod.finish()), new ClassMethod('destroyInternal', [], generateDestroyMethod(view)), new ClassMethod('detachInternal', [], view.detachMethod.finish()), generateVisitRootNodesMethod(view), generateVisitProjectableNodesMethod(view), generateCreateEmbeddedViewsMethod(view)].filter(function(method) {
      return method.body.length > 0;
    });
    var superClass = view.genConfig.genDebugInfo ? Identifiers.DebugAppView : Identifiers.AppView;
    var viewClass = createClassStmt({
      name: view.className,
      parent: importExpr(createIdentifier(superClass), [getContextType(view)]),
      parentArgs: superConstructorArgs,
      ctorParams: viewConstructorArgs,
      builders: [{methods: viewMethods}, view]
    });
    return viewClass;
  }
  function generateDestroyMethod(view) {
    var stmts = [];
    view.viewContainers.forEach(function(viewContainer) {
      stmts.push(viewContainer.callMethod('destroyNestedViews', []).toStmt());
    });
    view.viewChildren.forEach(function(viewChild) {
      stmts.push(viewChild.callMethod('destroy', []).toStmt());
    });
    stmts.push.apply(stmts, view.destroyMethod.finish());
    return stmts;
  }
  function generateCreateMethod(view) {
    var parentRenderNodeExpr = NULL_EXPR;
    var parentRenderNodeStmts = [];
    if (view.viewType === ViewType.COMPONENT) {
      parentRenderNodeExpr = ViewProperties.renderer.callMethod('createViewRoot', [THIS_EXPR.prop('parentElement')]);
      parentRenderNodeStmts = [parentRenderNodeVar.set(parentRenderNodeExpr).toDeclStmt(importType(view.genConfig.renderTypes.renderNode), [StmtModifier.Final])];
    }
    var resultExpr;
    if (view.viewType === ViewType.HOST) {
      var hostEl = (view.nodes[0]);
      resultExpr = importExpr(createIdentifier(Identifiers.ComponentRef_), [DYNAMIC_TYPE]).instantiate([literal(hostEl.nodeIndex), THIS_EXPR, hostEl.renderNode, hostEl.getComponent()]);
    } else {
      resultExpr = NULL_EXPR;
    }
    var allNodesExpr = ViewProperties.renderer.cast(DYNAMIC_TYPE).prop('directRenderer').conditional(NULL_EXPR, literalArr(view.nodes.map(function(node) {
      return node.renderNode;
    })));
    return parentRenderNodeStmts.concat(view.createMethod.finish(), [THIS_EXPR.callMethod('init', [view.lastRenderNode, allNodesExpr, view.disposables.length ? literalArr(view.disposables) : NULL_EXPR]).toStmt(), new ReturnStatement(resultExpr)]);
  }
  function generateDetectChangesMethod(view) {
    var stmts = [];
    if (view.animationBindingsMethod.isEmpty() && view.detectChangesInInputsMethod.isEmpty() && view.updateContentQueriesMethod.isEmpty() && view.afterContentLifecycleCallbacksMethod.isEmpty() && view.detectChangesRenderPropertiesMethod.isEmpty() && view.updateViewQueriesMethod.isEmpty() && view.afterViewLifecycleCallbacksMethod.isEmpty() && view.viewContainers.length === 0 && view.viewChildren.length === 0) {
      return stmts;
    }
    stmts.push.apply(stmts, view.animationBindingsMethod.finish());
    stmts.push.apply(stmts, view.detectChangesInInputsMethod.finish());
    view.viewContainers.forEach(function(viewContainer) {
      stmts.push(viewContainer.callMethod('detectChangesInNestedViews', [DetectChangesVars.throwOnChange]).toStmt());
    });
    var afterContentStmts = view.updateContentQueriesMethod.finish().concat(view.afterContentLifecycleCallbacksMethod.finish());
    if (afterContentStmts.length > 0) {
      stmts.push(new IfStmt(not(DetectChangesVars.throwOnChange), afterContentStmts));
    }
    stmts.push.apply(stmts, view.detectChangesRenderPropertiesMethod.finish());
    view.viewChildren.forEach(function(viewChild) {
      stmts.push(viewChild.callMethod('internalDetectChanges', [DetectChangesVars.throwOnChange]).toStmt());
    });
    var afterViewStmts = view.updateViewQueriesMethod.finish().concat(view.afterViewLifecycleCallbacksMethod.finish());
    if (afterViewStmts.length > 0) {
      stmts.push(new IfStmt(not(DetectChangesVars.throwOnChange), afterViewStmts));
    }
    var varStmts = [];
    var readVars = findReadVarNames(stmts);
    if (readVars.has(DetectChangesVars.changed.name)) {
      varStmts.push(DetectChangesVars.changed.set(literal(true)).toDeclStmt(BOOL_TYPE));
    }
    if (readVars.has(DetectChangesVars.changes.name)) {
      varStmts.push(DetectChangesVars.changes.set(NULL_EXPR).toDeclStmt(new MapType(importType(createIdentifier(Identifiers.SimpleChange)))));
    }
    varStmts.push.apply(varStmts, createSharedBindingVariablesIfNeeded(stmts));
    return varStmts.concat(stmts);
  }
  function addReturnValuefNotEmpty(statements, value) {
    if (statements.length > 0) {
      return statements.concat([new ReturnStatement(value)]);
    } else {
      return statements;
    }
  }
  function getContextType(view) {
    if (view.viewType === ViewType.COMPONENT) {
      return importType(view.component.type);
    }
    return DYNAMIC_TYPE;
  }
  function getChangeDetectionMode(view) {
    var mode;
    if (view.viewType === ViewType.COMPONENT) {
      mode = isDefaultChangeDetectionStrategy(view.component.changeDetection) ? ChangeDetectorStatus.CheckAlways : ChangeDetectorStatus.CheckOnce;
    } else {
      mode = ChangeDetectorStatus.CheckAlways;
    }
    return mode;
  }
  function generateVisitRootNodesMethod(view) {
    var cbVar = variable('cb');
    var ctxVar = variable('ctx');
    var stmts = generateVisitNodesStmts(view.rootNodes, cbVar, ctxVar);
    return new ClassMethod('visitRootNodesInternal', [new FnParam(cbVar.name, DYNAMIC_TYPE), new FnParam(ctxVar.name, DYNAMIC_TYPE)], stmts);
  }
  function generateVisitProjectableNodesMethod(view) {
    var nodeIndexVar = variable('nodeIndex');
    var ngContentIndexVar = variable('ngContentIndex');
    var cbVar = variable('cb');
    var ctxVar = variable('ctx');
    var stmts = [];
    view.nodes.forEach(function(node) {
      if (node instanceof CompileElement && node.component) {
        node.contentNodesByNgContentIndex.forEach(function(projectedNodes, ngContentIndex) {
          stmts.push(new IfStmt(nodeIndexVar.equals(literal(node.nodeIndex)).and(ngContentIndexVar.equals(literal(ngContentIndex))), generateVisitNodesStmts(projectedNodes, cbVar, ctxVar)));
        });
      }
    });
    return new ClassMethod('visitProjectableNodesInternal', [new FnParam(nodeIndexVar.name, NUMBER_TYPE), new FnParam(ngContentIndexVar.name, NUMBER_TYPE), new FnParam(cbVar.name, DYNAMIC_TYPE), new FnParam(ctxVar.name, DYNAMIC_TYPE)], stmts);
  }
  function generateVisitNodesStmts(nodes, cb, ctx) {
    var stmts = [];
    nodes.forEach(function(node) {
      switch (node.type) {
        case CompileViewRootNodeType.Node:
          stmts.push(cb.callFn([node.expr, ctx]).toStmt());
          break;
        case CompileViewRootNodeType.ViewContainer:
          stmts.push(cb.callFn([node.expr.prop('nativeElement'), ctx]).toStmt());
          stmts.push(node.expr.callMethod('visitNestedViewRootNodes', [cb, ctx]).toStmt());
          break;
        case CompileViewRootNodeType.NgContent:
          stmts.push(THIS_EXPR.callMethod('visitProjectedNodes', [literal(node.ngContentIndex), cb, ctx]).toStmt());
          break;
      }
    });
    return stmts;
  }
  function generateCreateEmbeddedViewsMethod(view) {
    var nodeIndexVar = variable('nodeIndex');
    var stmts = [];
    view.nodes.forEach(function(node) {
      if (node instanceof CompileElement) {
        if (node.embeddedView) {
          var parentNodeIndex = node.isRootElement() ? null : node.parent.nodeIndex;
          stmts.push(new IfStmt(nodeIndexVar.equals(literal(node.nodeIndex)), [new ReturnStatement(node.embeddedView.classExpr.instantiate([ViewProperties.viewUtils, THIS_EXPR, literal(node.nodeIndex), node.renderNode, node.viewContainer]))]));
        }
      }
    });
    if (stmts.length > 0) {
      stmts.push(new ReturnStatement(NULL_EXPR));
    }
    return new ClassMethod('createEmbeddedViewInternal', [new FnParam(nodeIndexVar.name, NUMBER_TYPE)], stmts, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE]));
  }
  var __decorate$16 = (this && this.__decorate) || function(decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __metadata$16 = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var ViewCompileResult = (function() {
    function ViewCompileResult(statements, viewClassVar, dependencies) {
      this.statements = statements;
      this.viewClassVar = viewClassVar;
      this.dependencies = dependencies;
    }
    return ViewCompileResult;
  }());
  var ViewCompiler = (function() {
    function ViewCompiler(_genConfig, _schemaRegistry) {
      this._genConfig = _genConfig;
      this._schemaRegistry = _schemaRegistry;
    }
    ViewCompiler.prototype.compileComponent = function(component, template, styles, pipes, compiledAnimations) {
      var dependencies = [];
      var view = new CompileView(component, this._genConfig, pipes, styles, compiledAnimations, 0, CompileElement.createNull(), [], dependencies);
      var statements = [];
      buildView(view, template, dependencies);
      bindView(view, template, this._schemaRegistry);
      finishView(view, statements);
      return new ViewCompileResult(statements, view.classExpr.name, dependencies);
    };
    ViewCompiler = __decorate$16([CompilerInjectable(), __metadata$16('design:paramtypes', [CompilerConfig, ElementSchemaRegistry])], ViewCompiler);
    return ViewCompiler;
  }());
  var AnimationEntryCompileResult = (function() {
    function AnimationEntryCompileResult(name, statements, fnExp) {
      this.name = name;
      this.statements = statements;
      this.fnExp = fnExp;
    }
    return AnimationEntryCompileResult;
  }());
  var AnimationCompiler = (function() {
    function AnimationCompiler() {}
    AnimationCompiler.prototype.compile = function(factoryNamePrefix, parsedAnimations) {
      return parsedAnimations.map(function(entry) {
        var factoryName = factoryNamePrefix + "_" + entry.name;
        var visitor = new _AnimationBuilder(entry.name, factoryName);
        return visitor.build(entry);
      });
    };
    return AnimationCompiler;
  }());
  var _ANIMATION_FACTORY_ELEMENT_VAR = variable('element');
  var _ANIMATION_DEFAULT_STATE_VAR = variable('defaultStateStyles');
  var _ANIMATION_FACTORY_VIEW_VAR = variable('view');
  var _ANIMATION_FACTORY_VIEW_CONTEXT = _ANIMATION_FACTORY_VIEW_VAR.prop('animationContext');
  var _ANIMATION_FACTORY_RENDERER_VAR = _ANIMATION_FACTORY_VIEW_VAR.prop('renderer');
  var _ANIMATION_CURRENT_STATE_VAR = variable('currentState');
  var _ANIMATION_NEXT_STATE_VAR = variable('nextState');
  var _ANIMATION_PLAYER_VAR = variable('player');
  var _ANIMATION_TIME_VAR = variable('totalTime');
  var _ANIMATION_START_STATE_STYLES_VAR = variable('startStateStyles');
  var _ANIMATION_END_STATE_STYLES_VAR = variable('endStateStyles');
  var _ANIMATION_COLLECTED_STYLES = variable('collectedStyles');
  var _PREVIOUS_ANIMATION_PLAYERS = variable('previousPlayers');
  var _EMPTY_MAP = literalMap([]);
  var _EMPTY_ARRAY = literalArr([]);
  var _AnimationBuilder = (function() {
    function _AnimationBuilder(animationName, factoryName) {
      this.animationName = animationName;
      this._fnVarName = factoryName + '_factory';
      this._statesMapVarName = factoryName + '_states';
      this._statesMapVar = variable(this._statesMapVarName);
    }
    _AnimationBuilder.prototype.visitAnimationStyles = function(ast, context) {
      var stylesArr = [];
      if (context.isExpectingFirstStyleStep) {
        stylesArr.push(_ANIMATION_START_STATE_STYLES_VAR);
        context.isExpectingFirstStyleStep = false;
      }
      ast.styles.forEach(function(entry) {
        var entries = Object.keys(entry).map(function(key) {
          return [key, literal(entry[key])];
        });
        stylesArr.push(literalMap(entries, null, true));
      });
      return importExpr(createIdentifier(Identifiers.AnimationStyles)).instantiate([importExpr(createIdentifier(Identifiers.collectAndResolveStyles)).callFn([_ANIMATION_COLLECTED_STYLES, literalArr(stylesArr)])]);
    };
    _AnimationBuilder.prototype.visitAnimationKeyframe = function(ast, context) {
      return importExpr(createIdentifier(Identifiers.AnimationKeyframe)).instantiate([literal(ast.offset), ast.styles.visit(this, context)]);
    };
    _AnimationBuilder.prototype.visitAnimationStep = function(ast, context) {
      var _this = this;
      if (context.endStateAnimateStep === ast) {
        return this._visitEndStateAnimation(ast, context);
      }
      var startingStylesExpr = ast.startingStyles.visit(this, context);
      var keyframeExpressions = ast.keyframes.map(function(keyframeEntry) {
        return keyframeEntry.visit(_this, context);
      });
      return this._callAnimateMethod(ast, startingStylesExpr, literalArr(keyframeExpressions), context);
    };
    _AnimationBuilder.prototype._visitEndStateAnimation = function(ast, context) {
      var _this = this;
      var startingStylesExpr = ast.startingStyles.visit(this, context);
      var keyframeExpressions = ast.keyframes.map(function(keyframe) {
        return keyframe.visit(_this, context);
      });
      var keyframesExpr = importExpr(createIdentifier(Identifiers.balanceAnimationKeyframes)).callFn([_ANIMATION_COLLECTED_STYLES, _ANIMATION_END_STATE_STYLES_VAR, literalArr(keyframeExpressions)]);
      return this._callAnimateMethod(ast, startingStylesExpr, keyframesExpr, context);
    };
    _AnimationBuilder.prototype._callAnimateMethod = function(ast, startingStylesExpr, keyframesExpr, context) {
      var previousStylesValue = _EMPTY_ARRAY;
      if (context.isExpectingFirstAnimateStep) {
        previousStylesValue = _PREVIOUS_ANIMATION_PLAYERS;
        context.isExpectingFirstAnimateStep = false;
      }
      context.totalTransitionTime += ast.duration + ast.delay;
      return _ANIMATION_FACTORY_RENDERER_VAR.callMethod('animate', [_ANIMATION_FACTORY_ELEMENT_VAR, startingStylesExpr, keyframesExpr, literal(ast.duration), literal(ast.delay), literal(ast.easing), previousStylesValue]);
    };
    _AnimationBuilder.prototype.visitAnimationSequence = function(ast, context) {
      var _this = this;
      var playerExprs = ast.steps.map(function(step) {
        return step.visit(_this, context);
      });
      return importExpr(createIdentifier(Identifiers.AnimationSequencePlayer)).instantiate([literalArr(playerExprs)]);
    };
    _AnimationBuilder.prototype.visitAnimationGroup = function(ast, context) {
      var _this = this;
      var playerExprs = ast.steps.map(function(step) {
        return step.visit(_this, context);
      });
      return importExpr(createIdentifier(Identifiers.AnimationGroupPlayer)).instantiate([literalArr(playerExprs)]);
    };
    _AnimationBuilder.prototype.visitAnimationStateDeclaration = function(ast, context) {
      var flatStyles = {};
      _getStylesArray(ast).forEach(function(entry) {
        Object.keys(entry).forEach(function(key) {
          flatStyles[key] = entry[key];
        });
      });
      context.stateMap.registerState(ast.stateName, flatStyles);
    };
    _AnimationBuilder.prototype.visitAnimationStateTransition = function(ast, context) {
      var steps = ast.animation.steps;
      var lastStep = steps[steps.length - 1];
      if (_isEndStateAnimateStep(lastStep)) {
        context.endStateAnimateStep = (lastStep);
      }
      context.totalTransitionTime = 0;
      context.isExpectingFirstStyleStep = true;
      context.isExpectingFirstAnimateStep = true;
      var stateChangePreconditions = [];
      ast.stateChanges.forEach(function(stateChange) {
        stateChangePreconditions.push(_compareToAnimationStateExpr(_ANIMATION_CURRENT_STATE_VAR, stateChange.fromState).and(_compareToAnimationStateExpr(_ANIMATION_NEXT_STATE_VAR, stateChange.toState)));
        if (stateChange.fromState != ANY_STATE) {
          context.stateMap.registerState(stateChange.fromState);
        }
        if (stateChange.toState != ANY_STATE) {
          context.stateMap.registerState(stateChange.toState);
        }
      });
      var animationPlayerExpr = ast.animation.visit(this, context);
      var reducedStateChangesPrecondition = stateChangePreconditions.reduce(function(a, b) {
        return a.or(b);
      });
      var precondition = _ANIMATION_PLAYER_VAR.equals(NULL_EXPR).and(reducedStateChangesPrecondition);
      var animationStmt = _ANIMATION_PLAYER_VAR.set(animationPlayerExpr).toStmt();
      var totalTimeStmt = _ANIMATION_TIME_VAR.set(literal(context.totalTransitionTime)).toStmt();
      return new IfStmt(precondition, [animationStmt, totalTimeStmt]);
    };
    _AnimationBuilder.prototype.visitAnimationEntry = function(ast, context) {
      var _this = this;
      ast.stateDeclarations.forEach(function(def) {
        return def.visit(_this, context);
      });
      context.stateMap.registerState(DEFAULT_STATE, {});
      var statements = [];
      statements.push(_PREVIOUS_ANIMATION_PLAYERS.set(_ANIMATION_FACTORY_VIEW_CONTEXT.callMethod('getAnimationPlayers', [_ANIMATION_FACTORY_ELEMENT_VAR, _ANIMATION_NEXT_STATE_VAR.equals(literal(EMPTY_STATE)).conditional(NULL_EXPR, literal(this.animationName))])).toDeclStmt());
      statements.push(_ANIMATION_COLLECTED_STYLES.set(_EMPTY_MAP).toDeclStmt());
      statements.push(_ANIMATION_PLAYER_VAR.set(NULL_EXPR).toDeclStmt());
      statements.push(_ANIMATION_TIME_VAR.set(literal(0)).toDeclStmt());
      statements.push(_ANIMATION_DEFAULT_STATE_VAR.set(this._statesMapVar.key(literal(DEFAULT_STATE))).toDeclStmt());
      statements.push(_ANIMATION_START_STATE_STYLES_VAR.set(this._statesMapVar.key(_ANIMATION_CURRENT_STATE_VAR)).toDeclStmt());
      statements.push(new IfStmt(_ANIMATION_START_STATE_STYLES_VAR.equals(NULL_EXPR), [_ANIMATION_START_STATE_STYLES_VAR.set(_ANIMATION_DEFAULT_STATE_VAR).toStmt()]));
      statements.push(_ANIMATION_END_STATE_STYLES_VAR.set(this._statesMapVar.key(_ANIMATION_NEXT_STATE_VAR)).toDeclStmt());
      statements.push(new IfStmt(_ANIMATION_END_STATE_STYLES_VAR.equals(NULL_EXPR), [_ANIMATION_END_STATE_STYLES_VAR.set(_ANIMATION_DEFAULT_STATE_VAR).toStmt()]));
      var RENDER_STYLES_FN = importExpr(createIdentifier(Identifiers.renderStyles));
      ast.stateTransitions.forEach(function(transAst) {
        return statements.push(transAst.visit(_this, context));
      });
      statements.push(new IfStmt(_ANIMATION_PLAYER_VAR.equals(NULL_EXPR), [_ANIMATION_PLAYER_VAR.set(importExpr(createIdentifier(Identifiers.NoOpAnimationPlayer)).instantiate([])).toStmt()]));
      statements.push(_ANIMATION_PLAYER_VAR.callMethod('onDone', [fn([], [_ANIMATION_PLAYER_VAR.callMethod('destroy', []).toStmt(), RENDER_STYLES_FN.callFn([_ANIMATION_FACTORY_ELEMENT_VAR, _ANIMATION_FACTORY_RENDERER_VAR, importExpr(createIdentifier(Identifiers.prepareFinalAnimationStyles)).callFn([_ANIMATION_START_STATE_STYLES_VAR, _ANIMATION_END_STATE_STYLES_VAR])]).toStmt()])]).toStmt());
      statements.push(importExpr(createIdentifier(Identifiers.AnimationSequencePlayer)).instantiate([_PREVIOUS_ANIMATION_PLAYERS]).callMethod('destroy', []).toStmt());
      statements.push(RENDER_STYLES_FN.callFn([_ANIMATION_FACTORY_ELEMENT_VAR, _ANIMATION_FACTORY_RENDERER_VAR, importExpr(createIdentifier(Identifiers.clearStyles)).callFn([_ANIMATION_START_STATE_STYLES_VAR])]).toStmt());
      statements.push(_ANIMATION_FACTORY_VIEW_CONTEXT.callMethod('queueAnimation', [_ANIMATION_FACTORY_ELEMENT_VAR, literal(this.animationName), _ANIMATION_PLAYER_VAR]).toStmt());
      statements.push(new ReturnStatement(importExpr(createIdentifier(Identifiers.AnimationTransition)).instantiate([_ANIMATION_PLAYER_VAR, _ANIMATION_CURRENT_STATE_VAR, _ANIMATION_NEXT_STATE_VAR, _ANIMATION_TIME_VAR])));
      return fn([new FnParam(_ANIMATION_FACTORY_VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])), new FnParam(_ANIMATION_FACTORY_ELEMENT_VAR.name, DYNAMIC_TYPE), new FnParam(_ANIMATION_CURRENT_STATE_VAR.name, DYNAMIC_TYPE), new FnParam(_ANIMATION_NEXT_STATE_VAR.name, DYNAMIC_TYPE)], statements, importType(createIdentifier(Identifiers.AnimationTransition)));
    };
    _AnimationBuilder.prototype.build = function(ast) {
      var context = new _AnimationBuilderContext();
      var fnStatement = ast.visit(this, context).toDeclStmt(this._fnVarName);
      var fnVariable = variable(this._fnVarName);
      var lookupMap = [];
      Object.keys(context.stateMap.states).forEach(function(stateName) {
        var value = context.stateMap.states[stateName];
        var variableValue = _EMPTY_MAP;
        if (isPresent(value)) {
          var styleMap_1 = [];
          Object.keys(value).forEach(function(key) {
            styleMap_1.push([key, literal(value[key])]);
          });
          variableValue = literalMap(styleMap_1, null, true);
        }
        lookupMap.push([stateName, variableValue]);
      });
      var compiledStatesMapStmt = this._statesMapVar.set(literalMap(lookupMap, null, true)).toDeclStmt();
      var statements = [compiledStatesMapStmt, fnStatement];
      return new AnimationEntryCompileResult(this.animationName, statements, fnVariable);
    };
    return _AnimationBuilder;
  }());
  var _AnimationBuilderContext = (function() {
    function _AnimationBuilderContext() {
      this.stateMap = new _AnimationBuilderStateMap();
      this.endStateAnimateStep = null;
      this.isExpectingFirstStyleStep = false;
      this.isExpectingFirstAnimateStep = false;
      this.totalTransitionTime = 0;
    }
    return _AnimationBuilderContext;
  }());
  var _AnimationBuilderStateMap = (function() {
    function _AnimationBuilderStateMap() {
      this._states = {};
    }
    Object.defineProperty(_AnimationBuilderStateMap.prototype, "states", {
      get: function() {
        return this._states;
      },
      enumerable: true,
      configurable: true
    });
    _AnimationBuilderStateMap.prototype.registerState = function(name, value) {
      if (value === void 0) {
        value = null;
      }
      var existingEntry = this._states[name];
      if (!existingEntry) {
        this._states[name] = value;
      }
    };
    return _AnimationBuilderStateMap;
  }());
  function _compareToAnimationStateExpr(value, animationState) {
    var emptyStateLiteral = literal(EMPTY_STATE);
    switch (animationState) {
      case EMPTY_STATE:
        return value.equals(emptyStateLiteral);
      case ANY_STATE:
        return literal(true);
      default:
        return value.equals(literal(animationState));
    }
  }
  function _isEndStateAnimateStep(step) {
    if (step instanceof AnimationStepAst && step.duration > 0 && step.keyframes.length == 2) {
      var styles1 = _getStylesArray(step.keyframes[0])[0];
      var styles2 = _getStylesArray(step.keyframes[1])[0];
      return Object.keys(styles1).length === 0 && Object.keys(styles2).length === 0;
    }
    return false;
  }
  function _getStylesArray(obj) {
    return obj.styles.styles;
  }
  var GeneratedFile = (function() {
    function GeneratedFile(srcFileUrl, genFileUrl, source) {
      this.srcFileUrl = srcFileUrl;
      this.genFileUrl = genFileUrl;
      this.source = source;
    }
    return GeneratedFile;
  }());
  var __extends$23 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var STRIP_SRC_FILE_SUFFIXES = /(\.ts|\.d\.ts|\.js|\.jsx|\.tsx)$/;
  function serializeSummaries(host, summaryResolver, symbolResolver, symbols, types) {
    var serializer = new Serializer(host);
    symbols.forEach(function(resolvedSymbol) {
      return serializer.addOrMergeSummary({
        symbol: resolvedSymbol.symbol,
        metadata: resolvedSymbol.metadata
      });
    });
    for (var processedIndex = 0; processedIndex < serializer.symbols.length; processedIndex++) {
      var symbol = serializer.symbols[processedIndex];
      if (!host.isSourceFile(symbol.filePath)) {
        var summary = summaryResolver.resolveSummary(symbol);
        if (!summary) {
          var resolvedSymbol = symbolResolver.resolveSymbol(symbol);
          if (resolvedSymbol) {
            summary = {
              symbol: resolvedSymbol.symbol,
              metadata: resolvedSymbol.metadata
            };
          }
        }
        if (summary) {
          serializer.addOrMergeSummary(summary);
        }
      }
    }
    types.forEach(function(typeSummary) {
      serializer.addOrMergeSummary({
        symbol: typeSummary.type.reference,
        metadata: {__symbolic: 'class'},
        type: typeSummary
      });
      if (typeSummary.summaryKind === CompileSummaryKind.NgModule) {
        var ngModuleSummary = (typeSummary);
        ngModuleSummary.exportedDirectives.concat(ngModuleSummary.exportedPipes).forEach(function(id) {
          var symbol = id.reference;
          if (!host.isSourceFile(symbol.filePath)) {
            serializer.addOrMergeSummary(summaryResolver.resolveSummary(symbol));
          }
        });
      }
    });
    return serializer.serialize();
  }
  function deserializeSummaries(symbolCache, json) {
    var deserializer = new Deserializer(symbolCache);
    return deserializer.deserialize(json);
  }
  function summaryFileName(fileName) {
    var fileNameWithoutSuffix = fileName.replace(STRIP_SRC_FILE_SUFFIXES, '');
    return fileNameWithoutSuffix + ".ngsummary.json";
  }
  var Serializer = (function(_super) {
    __extends$23(Serializer, _super);
    function Serializer(host) {
      _super.call(this);
      this.host = host;
      this.symbols = [];
      this.indexBySymbol = new Map();
      this.processedSummaryBySymbol = new Map();
      this.processedSummaries = [];
    }
    Serializer.prototype.addOrMergeSummary = function(summary) {
      var symbolMeta = summary.metadata;
      if (symbolMeta && symbolMeta.__symbolic === 'class') {
        symbolMeta = {
          __symbolic: 'class',
          statics: symbolMeta.statics
        };
      }
      var processedSummary = this.processedSummaryBySymbol.get(summary.symbol);
      if (!processedSummary) {
        processedSummary = this.processValue({symbol: summary.symbol});
        this.processedSummaries.push(processedSummary);
        this.processedSummaryBySymbol.set(summary.symbol, processedSummary);
      }
      if (processedSummary.metadata == null && symbolMeta != null) {
        processedSummary.metadata = this.processValue(symbolMeta);
      }
      if (processedSummary.type == null && summary.type != null) {
        processedSummary.type = this.processValue(summary.type);
      }
    };
    Serializer.prototype.serialize = function() {
      var _this = this;
      return JSON.stringify({
        summaries: this.processedSummaries,
        symbols: this.symbols.map(function(symbol, index) {
          return {
            __symbol: index,
            name: symbol.name,
            filePath: _this.host.getOutputFileName(symbol.filePath)
          };
        })
      });
    };
    Serializer.prototype.processValue = function(value) {
      return visitValue(value, this, null);
    };
    Serializer.prototype.visitOther = function(value, context) {
      if (value instanceof StaticSymbol) {
        var index = this.indexBySymbol.get(value);
        if (index == null) {
          index = this.indexBySymbol.size;
          this.indexBySymbol.set(value, index);
          this.symbols.push(value);
        }
        return {__symbol: index};
      }
    };
    return Serializer;
  }(ValueTransformer));
  var Deserializer = (function(_super) {
    __extends$23(Deserializer, _super);
    function Deserializer(symbolCache) {
      _super.call(this);
      this.symbolCache = symbolCache;
    }
    Deserializer.prototype.deserialize = function(json) {
      var _this = this;
      var data = JSON.parse(json);
      this.symbols = data.symbols.map(function(serializedSymbol) {
        return _this.symbolCache.get(serializedSymbol.filePath, serializedSymbol.name);
      });
      return visitValue(data.summaries, this, null);
    };
    Deserializer.prototype.visitStringMap = function(map, context) {
      if ('__symbol' in map) {
        return this.symbols[map['__symbol']];
      } else {
        return _super.prototype.visitStringMap.call(this, map, context);
      }
    };
    return Deserializer;
  }(ValueTransformer));
  var AotCompiler = (function() {
    function AotCompiler(_host, _metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _dirWrapperCompiler, _ngModuleCompiler, _outputEmitter, _summaryResolver, _localeId, _translationFormat, _animationParser, _symbolResolver) {
      this._host = _host;
      this._metadataResolver = _metadataResolver;
      this._templateParser = _templateParser;
      this._styleCompiler = _styleCompiler;
      this._viewCompiler = _viewCompiler;
      this._dirWrapperCompiler = _dirWrapperCompiler;
      this._ngModuleCompiler = _ngModuleCompiler;
      this._outputEmitter = _outputEmitter;
      this._summaryResolver = _summaryResolver;
      this._localeId = _localeId;
      this._translationFormat = _translationFormat;
      this._animationParser = _animationParser;
      this._symbolResolver = _symbolResolver;
      this._animationCompiler = new AnimationCompiler();
    }
    AotCompiler.prototype.clearCache = function() {
      this._metadataResolver.clearCache();
    };
    AotCompiler.prototype.compileAll = function(rootFiles) {
      var _this = this;
      var programSymbols = extractProgramSymbols(this._symbolResolver, rootFiles, this._host);
      var _a = analyzeAndValidateNgModules(programSymbols, this._host, this._metadataResolver),
          ngModuleByPipeOrDirective = _a.ngModuleByPipeOrDirective,
          files = _a.files,
          ngModules = _a.ngModules;
      return Promise.all(ngModules.map(function(ngModule) {
        return _this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, false);
      })).then(function() {
        var sourceModules = files.map(function(file) {
          return _this._compileSrcFile(file.srcUrl, ngModuleByPipeOrDirective, file.directives, file.pipes, file.ngModules, file.injectables);
        });
        return ListWrapper.flatten(sourceModules);
      });
    };
    AotCompiler.prototype._compileSrcFile = function(srcFileUrl, ngModuleByPipeOrDirective, directives, pipes, ngModules, injectables) {
      var _this = this;
      var fileSuffix = _splitTypescriptSuffix(srcFileUrl)[1];
      var statements = [];
      var exportedVars = [];
      var generatedFiles = [];
      generatedFiles.push(this._createSummary(srcFileUrl, directives, pipes, ngModules, injectables));
      exportedVars.push.apply(exportedVars, ngModules.map(function(ngModuleType) {
        return _this._compileModule(ngModuleType, statements);
      }));
      exportedVars.push.apply(exportedVars, directives.map(function(directiveType) {
        return _this._compileDirectiveWrapper(directiveType, statements);
      }));
      directives.forEach(function(dirType) {
        var compMeta = _this._metadataResolver.getDirectiveMetadata((dirType));
        if (!compMeta.isComponent) {
          return Promise.resolve(null);
        }
        var ngModule = ngModuleByPipeOrDirective.get(dirType);
        if (!ngModule) {
          throw new Error("Internal Error: cannot determine the module for component " + identifierName(compMeta.type) + "!");
        }
        _assertComponent(compMeta);
        var stylesCompileResults = _this._styleCompiler.compileComponent(compMeta);
        stylesCompileResults.externalStylesheets.forEach(function(compiledStyleSheet) {
          generatedFiles.push(_this._codgenStyles(srcFileUrl, compiledStyleSheet, fileSuffix));
        });
        exportedVars.push(_this._compileComponentFactory(compMeta, ngModule, fileSuffix, statements), _this._compileComponent(compMeta, ngModule, ngModule.transitiveModule.directives, stylesCompileResults.componentStylesheet, fileSuffix, statements));
      });
      if (statements.length > 0) {
        var srcModule = this._codegenSourceModule(srcFileUrl, _ngfactoryModuleUrl(srcFileUrl), statements, exportedVars);
        generatedFiles.unshift(srcModule);
      }
      return generatedFiles;
    };
    AotCompiler.prototype._createSummary = function(srcFileUrl, directives, pipes, ngModules, injectables) {
      var _this = this;
      var symbolSummaries = this._symbolResolver.getSymbolsOf(srcFileUrl).map(function(symbol) {
        return _this._symbolResolver.resolveSymbol(symbol);
      });
      var typeSummaries = ngModules.map(function(ref) {
        return _this._metadataResolver.getNgModuleSummary(ref);
      }).concat(directives.map(function(ref) {
        return _this._metadataResolver.getDirectiveSummary(ref);
      }), pipes.map(function(ref) {
        return _this._metadataResolver.getPipeSummary(ref);
      }), injectables.map(function(ref) {
        return _this._metadataResolver.getInjectableSummary(ref);
      }));
      var json = serializeSummaries(this._host, this._summaryResolver, this._symbolResolver, symbolSummaries, typeSummaries);
      return new GeneratedFile(srcFileUrl, summaryFileName(srcFileUrl), json);
    };
    AotCompiler.prototype._compileModule = function(ngModuleType, targetStatements) {
      var _this = this;
      var ngModule = this._metadataResolver.getNgModuleMetadata(ngModuleType);
      var providers = [];
      if (this._localeId) {
        providers.push({
          token: createIdentifierToken(Identifiers.LOCALE_ID),
          useValue: this._localeId
        });
      }
      if (this._translationFormat) {
        providers.push({
          token: createIdentifierToken(Identifiers.TRANSLATIONS_FORMAT),
          useValue: this._translationFormat
        });
      }
      var appCompileResult = this._ngModuleCompiler.compile(ngModule, providers);
      appCompileResult.dependencies.forEach(function(dep) {
        dep.placeholder.reference = _this._symbolResolver.getStaticSymbol(_ngfactoryModuleUrl(identifierModuleUrl(dep.comp)), _componentFactoryName(dep.comp));
      });
      targetStatements.push.apply(targetStatements, appCompileResult.statements);
      return appCompileResult.ngModuleFactoryVar;
    };
    AotCompiler.prototype._compileDirectiveWrapper = function(directiveType, targetStatements) {
      var dirMeta = this._metadataResolver.getDirectiveMetadata(directiveType);
      var dirCompileResult = this._dirWrapperCompiler.compile(dirMeta);
      targetStatements.push.apply(targetStatements, dirCompileResult.statements);
      return dirCompileResult.dirWrapperClassVar;
    };
    AotCompiler.prototype._compileComponentFactory = function(compMeta, ngModule, fileSuffix, targetStatements) {
      var hostMeta = createHostComponentMeta(this._symbolResolver.getStaticSymbol(identifierModuleUrl(compMeta.type), identifierName(compMeta.type) + "_Host"), compMeta);
      var hostViewFactoryVar = this._compileComponent(hostMeta, ngModule, [compMeta.type], null, fileSuffix, targetStatements);
      var compFactoryVar = _componentFactoryName(compMeta.type);
      targetStatements.push(variable(compFactoryVar).set(importExpr(createIdentifier(Identifiers.ComponentFactory), [importType(compMeta.type)]).instantiate([literal(compMeta.selector), variable(hostViewFactoryVar), importExpr(compMeta.type)], importType(createIdentifier(Identifiers.ComponentFactory), [importType(compMeta.type)], [TypeModifier.Const]))).toDeclStmt(null, [StmtModifier.Final]));
      return compFactoryVar;
    };
    AotCompiler.prototype._compileComponent = function(compMeta, ngModule, directiveIdentifiers, componentStyles, fileSuffix, targetStatements) {
      var _this = this;
      var parsedAnimations = this._animationParser.parseComponent(compMeta);
      var directives = directiveIdentifiers.map(function(dir) {
        return _this._metadataResolver.getDirectiveSummary(dir.reference);
      });
      var pipes = ngModule.transitiveModule.pipes.map(function(pipe) {
        return _this._metadataResolver.getPipeSummary(pipe.reference);
      });
      var parsedTemplate = this._templateParser.parse(compMeta, compMeta.template.template, directives, pipes, ngModule.schemas, identifierName(compMeta.type));
      var stylesExpr = componentStyles ? variable(componentStyles.stylesVar) : literalArr([]);
      var compiledAnimations = this._animationCompiler.compile(identifierName(compMeta.type), parsedAnimations);
      var viewResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, stylesExpr, pipes, compiledAnimations);
      if (componentStyles) {
        targetStatements.push.apply(targetStatements, _resolveStyleStatements(this._symbolResolver, componentStyles, fileSuffix));
      }
      compiledAnimations.forEach(function(entry) {
        return targetStatements.push.apply(targetStatements, entry.statements);
      });
      targetStatements.push.apply(targetStatements, _resolveViewStatements(this._symbolResolver, viewResult));
      return viewResult.viewClassVar;
    };
    AotCompiler.prototype._codgenStyles = function(fileUrl, stylesCompileResult, fileSuffix) {
      _resolveStyleStatements(this._symbolResolver, stylesCompileResult, fileSuffix);
      return this._codegenSourceModule(fileUrl, _stylesModuleUrl(stylesCompileResult.meta.moduleUrl, stylesCompileResult.isShimmed, fileSuffix), stylesCompileResult.statements, [stylesCompileResult.stylesVar]);
    };
    AotCompiler.prototype._codegenSourceModule = function(srcFileUrl, genFileUrl, statements, exportedVars) {
      return new GeneratedFile(srcFileUrl, genFileUrl, this._outputEmitter.emitStatements(genFileUrl, statements, exportedVars));
    };
    return AotCompiler;
  }());
  function _resolveViewStatements(reflector, compileResult) {
    compileResult.dependencies.forEach(function(dep) {
      if (dep instanceof ViewClassDependency) {
        var vfd = (dep);
        vfd.placeholder.reference = reflector.getStaticSymbol(_ngfactoryModuleUrl(identifierModuleUrl(vfd.comp)), dep.name);
      } else if (dep instanceof ComponentFactoryDependency$1) {
        var cfd = (dep);
        cfd.placeholder.reference = reflector.getStaticSymbol(_ngfactoryModuleUrl(identifierModuleUrl(cfd.comp)), _componentFactoryName(cfd.comp));
      } else if (dep instanceof DirectiveWrapperDependency) {
        var dwd = (dep);
        dwd.placeholder.reference = reflector.getStaticSymbol(_ngfactoryModuleUrl(identifierModuleUrl(dwd.dir)), dwd.name);
      }
    });
    return compileResult.statements;
  }
  function _resolveStyleStatements(reflector, compileResult, fileSuffix) {
    compileResult.dependencies.forEach(function(dep) {
      dep.valuePlaceholder.reference = reflector.getStaticSymbol(_stylesModuleUrl(dep.moduleUrl, dep.isShimmed, fileSuffix), dep.name);
    });
    return compileResult.statements;
  }
  function _ngfactoryModuleUrl(dirUrl) {
    var urlWithSuffix = _splitTypescriptSuffix(dirUrl);
    return urlWithSuffix[0] + ".ngfactory" + urlWithSuffix[1];
  }
  function _componentFactoryName(comp) {
    return identifierName(comp) + "NgFactory";
  }
  function _stylesModuleUrl(stylesheetUrl, shim, suffix) {
    return "" + stylesheetUrl + (shim ? '.shim' : '') + ".ngstyle" + suffix;
  }
  function _assertComponent(meta) {
    if (!meta.isComponent) {
      throw new Error("Could not compile '" + identifierName(meta.type) + "' because it is not a component.");
    }
  }
  function _splitTypescriptSuffix(path) {
    if (path.endsWith('.d.ts')) {
      return [path.slice(0, -5), '.ts'];
    }
    var lastDot = path.lastIndexOf('.');
    if (lastDot !== -1) {
      return [path.substring(0, lastDot), path.substring(lastDot)];
    }
    return [path, ''];
  }
  function analyzeNgModules(programStaticSymbols, host, metadataResolver) {
    var _a = _createNgModules(programStaticSymbols, host, metadataResolver),
        ngModules = _a.ngModules,
        symbolsMissingModule = _a.symbolsMissingModule;
    return _analyzeNgModules(programStaticSymbols, ngModules, symbolsMissingModule, metadataResolver);
  }
  function analyzeAndValidateNgModules(programStaticSymbols, host, metadataResolver) {
    var result = analyzeNgModules(programStaticSymbols, host, metadataResolver);
    if (result.symbolsMissingModule && result.symbolsMissingModule.length) {
      var messages = result.symbolsMissingModule.map(function(s) {
        return ("Cannot determine the module for class " + s.name + " in " + s.filePath + "!");
      });
      throw new Error(messages.join('\n'));
    }
    return result;
  }
  function _analyzeNgModules(programSymbols, ngModuleMetas, symbolsMissingModule, metadataResolver) {
    var moduleMetasByRef = new Map();
    ngModuleMetas.forEach(function(ngModule) {
      return moduleMetasByRef.set(ngModule.type.reference, ngModule);
    });
    var ngModuleByPipeOrDirective = new Map();
    var ngModulesByFile = new Map();
    var ngDirectivesByFile = new Map();
    var ngPipesByFile = new Map();
    var ngInjectablesByFile = new Map();
    var filePaths = new Set();
    programSymbols.forEach(function(symbol) {
      var filePath = symbol.filePath;
      filePaths.add(filePath);
      if (metadataResolver.isInjectable(symbol)) {
        ngInjectablesByFile.set(filePath, (ngInjectablesByFile.get(filePath) || []).concat(symbol));
      }
    });
    ngModuleMetas.forEach(function(ngModuleMeta) {
      var srcFileUrl = ngModuleMeta.type.reference.filePath;
      filePaths.add(srcFileUrl);
      ngModulesByFile.set(srcFileUrl, (ngModulesByFile.get(srcFileUrl) || []).concat(ngModuleMeta.type.reference));
      ngModuleMeta.declaredDirectives.forEach(function(dirIdentifier) {
        var fileUrl = dirIdentifier.reference.filePath;
        filePaths.add(fileUrl);
        ngDirectivesByFile.set(fileUrl, (ngDirectivesByFile.get(fileUrl) || []).concat(dirIdentifier.reference));
        ngModuleByPipeOrDirective.set(dirIdentifier.reference, ngModuleMeta);
      });
      ngModuleMeta.declaredPipes.forEach(function(pipeIdentifier) {
        var fileUrl = pipeIdentifier.reference.filePath;
        filePaths.add(fileUrl);
        ngPipesByFile.set(fileUrl, (ngPipesByFile.get(fileUrl) || []).concat(pipeIdentifier.reference));
        ngModuleByPipeOrDirective.set(pipeIdentifier.reference, ngModuleMeta);
      });
    });
    var files = [];
    filePaths.forEach(function(srcUrl) {
      var directives = ngDirectivesByFile.get(srcUrl) || [];
      var pipes = ngPipesByFile.get(srcUrl) || [];
      var ngModules = ngModulesByFile.get(srcUrl) || [];
      var injectables = ngInjectablesByFile.get(srcUrl) || [];
      files.push({
        srcUrl: srcUrl,
        directives: directives,
        pipes: pipes,
        ngModules: ngModules,
        injectables: injectables
      });
    });
    return {
      ngModuleByPipeOrDirective: ngModuleByPipeOrDirective,
      files: files,
      ngModules: ngModuleMetas,
      symbolsMissingModule: symbolsMissingModule
    };
  }
  function extractProgramSymbols(staticSymbolResolver, files, host) {
    var staticSymbols = [];
    files.filter(function(fileName) {
      return host.isSourceFile(fileName);
    }).forEach(function(sourceFile) {
      staticSymbolResolver.getSymbolsOf(sourceFile).forEach(function(symbol) {
        var resolvedSymbol = staticSymbolResolver.resolveSymbol(symbol);
        var symbolMeta = resolvedSymbol.metadata;
        if (symbolMeta) {
          if (symbolMeta.__symbolic != 'error') {
            staticSymbols.push(resolvedSymbol.symbol);
          }
        }
      });
    });
    return staticSymbols;
  }
  function _createNgModules(programStaticSymbols, host, metadataResolver) {
    var ngModules = new Map();
    var programPipesAndDirectives = [];
    var ngModulePipesAndDirective = new Set();
    var addNgModule = function(staticSymbol) {
      if (ngModules.has(staticSymbol) || !host.isSourceFile(staticSymbol.filePath)) {
        return false;
      }
      var ngModule = metadataResolver.getNgModuleMetadata(staticSymbol, false);
      if (ngModule) {
        ngModules.set(ngModule.type.reference, ngModule);
        ngModule.declaredDirectives.forEach(function(dir) {
          return ngModulePipesAndDirective.add(dir.reference);
        });
        ngModule.declaredPipes.forEach(function(pipe) {
          return ngModulePipesAndDirective.add(pipe.reference);
        });
        ngModule.transitiveModule.modules.forEach(function(modMeta) {
          return addNgModule(modMeta.reference);
        });
      }
      return !!ngModule;
    };
    programStaticSymbols.forEach(function(staticSymbol) {
      if (!addNgModule(staticSymbol) && (metadataResolver.isDirective(staticSymbol) || metadataResolver.isPipe(staticSymbol))) {
        programPipesAndDirectives.push(staticSymbol);
      }
    });
    var symbolsMissingModule = programPipesAndDirectives.filter(function(s) {
      return !ngModulePipesAndDirective.has(s);
    });
    return {
      ngModules: Array.from(ngModules.values()),
      symbolsMissingModule: symbolsMissingModule
    };
  }
  var StaticAndDynamicReflectionCapabilities = (function() {
    function StaticAndDynamicReflectionCapabilities(staticDelegate) {
      this.staticDelegate = staticDelegate;
      this.dynamicDelegate = new ReflectionCapabilities();
    }
    StaticAndDynamicReflectionCapabilities.install = function(staticDelegate) {
      reflector.updateCapabilities(new StaticAndDynamicReflectionCapabilities(staticDelegate));
    };
    StaticAndDynamicReflectionCapabilities.prototype.isReflectionEnabled = function() {
      return true;
    };
    StaticAndDynamicReflectionCapabilities.prototype.factory = function(type) {
      return this.dynamicDelegate.factory(type);
    };
    StaticAndDynamicReflectionCapabilities.prototype.hasLifecycleHook = function(type, lcProperty) {
      return isStaticType(type) ? this.staticDelegate.hasLifecycleHook(type, lcProperty) : this.dynamicDelegate.hasLifecycleHook(type, lcProperty);
    };
    StaticAndDynamicReflectionCapabilities.prototype.parameters = function(type) {
      return isStaticType(type) ? this.staticDelegate.parameters(type) : this.dynamicDelegate.parameters(type);
    };
    StaticAndDynamicReflectionCapabilities.prototype.annotations = function(type) {
      return isStaticType(type) ? this.staticDelegate.annotations(type) : this.dynamicDelegate.annotations(type);
    };
    StaticAndDynamicReflectionCapabilities.prototype.propMetadata = function(typeOrFunc) {
      return isStaticType(typeOrFunc) ? this.staticDelegate.propMetadata(typeOrFunc) : this.dynamicDelegate.propMetadata(typeOrFunc);
    };
    StaticAndDynamicReflectionCapabilities.prototype.getter = function(name) {
      return this.dynamicDelegate.getter(name);
    };
    StaticAndDynamicReflectionCapabilities.prototype.setter = function(name) {
      return this.dynamicDelegate.setter(name);
    };
    StaticAndDynamicReflectionCapabilities.prototype.method = function(name) {
      return this.dynamicDelegate.method(name);
    };
    StaticAndDynamicReflectionCapabilities.prototype.importUri = function(type) {
      return this.staticDelegate.importUri(type);
    };
    StaticAndDynamicReflectionCapabilities.prototype.resolveIdentifier = function(name, moduleUrl, runtime) {
      return this.staticDelegate.resolveIdentifier(name, moduleUrl);
    };
    StaticAndDynamicReflectionCapabilities.prototype.resolveEnum = function(enumIdentifier, name) {
      if (isStaticType(enumIdentifier)) {
        return this.staticDelegate.resolveEnum(enumIdentifier, name);
      } else {
        return null;
      }
    };
    return StaticAndDynamicReflectionCapabilities;
  }());
  function isStaticType(type) {
    return typeof type === 'object' && type.name && type.filePath;
  }
  var __extends$24 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var ANGULAR_IMPORT_LOCATIONS = {
    coreDecorators: '@angular/core/src/metadata',
    diDecorators: '@angular/core/src/di/metadata',
    diMetadata: '@angular/core/src/di/metadata',
    diOpaqueToken: '@angular/core/src/di/opaque_token',
    animationMetadata: '@angular/core/src/animation/metadata',
    provider: '@angular/core/src/di/provider'
  };
  var HIDDEN_KEY = /^\$.*\$$/;
  var StaticReflector = (function() {
    function StaticReflector(symbolResolver, knownMetadataClasses, knownMetadataFunctions, errorRecorder) {
      var _this = this;
      if (knownMetadataClasses === void 0) {
        knownMetadataClasses = [];
      }
      if (knownMetadataFunctions === void 0) {
        knownMetadataFunctions = [];
      }
      this.symbolResolver = symbolResolver;
      this.errorRecorder = errorRecorder;
      this.annotationCache = new Map();
      this.propertyCache = new Map();
      this.parameterCache = new Map();
      this.methodCache = new Map();
      this.conversionMap = new Map();
      this.initializeConversionMap();
      knownMetadataClasses.forEach(function(kc) {
        return _this._registerDecoratorOrConstructor(_this.getStaticSymbol(kc.filePath, kc.name), kc.ctor);
      });
      knownMetadataFunctions.forEach(function(kf) {
        return _this._registerFunction(_this.getStaticSymbol(kf.filePath, kf.name), kf.fn);
      });
    }
    StaticReflector.prototype.importUri = function(typeOrFunc) {
      var staticSymbol = this.findSymbolDeclaration(typeOrFunc);
      return staticSymbol ? staticSymbol.filePath : null;
    };
    StaticReflector.prototype.resolveIdentifier = function(name, moduleUrl) {
      return this.findDeclaration(moduleUrl, name);
    };
    StaticReflector.prototype.findDeclaration = function(moduleUrl, name, containingFile) {
      return this.findSymbolDeclaration(this.symbolResolver.getSymbolByModule(moduleUrl, name, containingFile));
    };
    StaticReflector.prototype.findSymbolDeclaration = function(symbol) {
      var resolvedSymbol = this.symbolResolver.resolveSymbol(symbol);
      if (resolvedSymbol && resolvedSymbol.metadata instanceof StaticSymbol) {
        return this.findSymbolDeclaration(resolvedSymbol.metadata);
      } else {
        return symbol;
      }
    };
    StaticReflector.prototype.resolveEnum = function(enumIdentifier, name) {
      var staticSymbol = enumIdentifier;
      return this.getStaticSymbol(staticSymbol.filePath, staticSymbol.name, [name]);
    };
    StaticReflector.prototype.annotations = function(type) {
      var annotations = this.annotationCache.get(type);
      if (!annotations) {
        annotations = [];
        var classMetadata = this.getTypeMetadata(type);
        if (classMetadata['extends']) {
          var parentAnnotations = this.annotations(this.simplify(type, classMetadata['extends']));
          annotations.push.apply(annotations, parentAnnotations);
        }
        if (classMetadata['decorators']) {
          var ownAnnotations = this.simplify(type, classMetadata['decorators']);
          annotations.push.apply(annotations, ownAnnotations);
        }
        this.annotationCache.set(type, annotations.filter(function(ann) {
          return !!ann;
        }));
      }
      return annotations;
    };
    StaticReflector.prototype.propMetadata = function(type) {
      var _this = this;
      var propMetadata = this.propertyCache.get(type);
      if (!propMetadata) {
        var classMetadata = this.getTypeMetadata(type);
        propMetadata = {};
        if (classMetadata['extends']) {
          var parentPropMetadata_1 = this.propMetadata(this.simplify(type, classMetadata['extends']));
          Object.keys(parentPropMetadata_1).forEach(function(parentProp) {
            propMetadata[parentProp] = parentPropMetadata_1[parentProp];
          });
        }
        var members_1 = classMetadata['members'] || {};
        Object.keys(members_1).forEach(function(propName) {
          var propData = members_1[propName];
          var prop = ((propData)).find(function(a) {
            return a['__symbolic'] == 'property' || a['__symbolic'] == 'method';
          });
          var decorators = [];
          if (propMetadata[propName]) {
            decorators.push.apply(decorators, propMetadata[propName]);
          }
          propMetadata[propName] = decorators;
          if (prop && prop['decorators']) {
            decorators.push.apply(decorators, _this.simplify(type, prop['decorators']));
          }
        });
        this.propertyCache.set(type, propMetadata);
      }
      return propMetadata;
    };
    StaticReflector.prototype.parameters = function(type) {
      if (!(type instanceof StaticSymbol)) {
        this.reportError(new Error("parameters received " + JSON.stringify(type) + " which is not a StaticSymbol"), type);
        return [];
      }
      try {
        var parameters_1 = this.parameterCache.get(type);
        if (!parameters_1) {
          var classMetadata = this.getTypeMetadata(type);
          var members = classMetadata ? classMetadata['members'] : null;
          var ctorData = members ? members['__ctor__'] : null;
          if (ctorData) {
            var ctor = ((ctorData)).find(function(a) {
              return a['__symbolic'] == 'constructor';
            });
            var parameterTypes = (this.simplify(type, ctor['parameters'] || []));
            var parameterDecorators_1 = (this.simplify(type, ctor['parameterDecorators'] || []));
            parameters_1 = [];
            parameterTypes.forEach(function(paramType, index) {
              var nestedResult = [];
              if (paramType) {
                nestedResult.push(paramType);
              }
              var decorators = parameterDecorators_1 ? parameterDecorators_1[index] : null;
              if (decorators) {
                nestedResult.push.apply(nestedResult, decorators);
              }
              parameters_1.push(nestedResult);
            });
          } else if (classMetadata['extends']) {
            parameters_1 = this.parameters(this.simplify(type, classMetadata['extends']));
          }
          if (!parameters_1) {
            parameters_1 = [];
          }
          this.parameterCache.set(type, parameters_1);
        }
        return parameters_1;
      } catch (e) {
        console.error("Failed on type " + JSON.stringify(type) + " with error " + e);
        throw e;
      }
    };
    StaticReflector.prototype._methodNames = function(type) {
      var methodNames = this.methodCache.get(type);
      if (!methodNames) {
        var classMetadata = this.getTypeMetadata(type);
        methodNames = {};
        if (classMetadata['extends']) {
          var parentMethodNames_1 = this._methodNames(this.simplify(type, classMetadata['extends']));
          Object.keys(parentMethodNames_1).forEach(function(parentProp) {
            methodNames[parentProp] = parentMethodNames_1[parentProp];
          });
        }
        var members_2 = classMetadata['members'] || {};
        Object.keys(members_2).forEach(function(propName) {
          var propData = members_2[propName];
          var isMethod = ((propData)).some(function(a) {
            return a['__symbolic'] == 'method';
          });
          methodNames[propName] = methodNames[propName] || isMethod;
        });
        this.methodCache.set(type, methodNames);
      }
      return methodNames;
    };
    StaticReflector.prototype.hasLifecycleHook = function(type, lcProperty) {
      if (!(type instanceof StaticSymbol)) {
        this.reportError(new Error("hasLifecycleHook received " + JSON.stringify(type) + " which is not a StaticSymbol"), type);
      }
      try {
        return !!this._methodNames(type)[lcProperty];
      } catch (e) {
        console.error("Failed on type " + JSON.stringify(type) + " with error " + e);
        throw e;
      }
    };
    StaticReflector.prototype._registerDecoratorOrConstructor = function(type, ctor) {
      this.conversionMap.set(type, function(context, args) {
        return new (ctor.bind.apply(ctor, [void 0].concat(args)))();
      });
    };
    StaticReflector.prototype._registerFunction = function(type, fn) {
      this.conversionMap.set(type, function(context, args) {
        return fn.apply(undefined, args);
      });
    };
    StaticReflector.prototype.initializeConversionMap = function() {
      var coreDecorators = ANGULAR_IMPORT_LOCATIONS.coreDecorators,
          diDecorators = ANGULAR_IMPORT_LOCATIONS.diDecorators,
          diMetadata = ANGULAR_IMPORT_LOCATIONS.diMetadata,
          diOpaqueToken = ANGULAR_IMPORT_LOCATIONS.diOpaqueToken,
          animationMetadata = ANGULAR_IMPORT_LOCATIONS.animationMetadata,
          provider = ANGULAR_IMPORT_LOCATIONS.provider;
      this.opaqueToken = this.findDeclaration(diOpaqueToken, 'OpaqueToken');
      this._registerDecoratorOrConstructor(this.findDeclaration(diDecorators, 'Host'), _angular_core.Host);
      this._registerDecoratorOrConstructor(this.findDeclaration(diDecorators, 'Injectable'), _angular_core.Injectable);
      this._registerDecoratorOrConstructor(this.findDeclaration(diDecorators, 'Self'), _angular_core.Self);
      this._registerDecoratorOrConstructor(this.findDeclaration(diDecorators, 'SkipSelf'), _angular_core.SkipSelf);
      this._registerDecoratorOrConstructor(this.findDeclaration(diDecorators, 'Inject'), _angular_core.Inject);
      this._registerDecoratorOrConstructor(this.findDeclaration(diDecorators, 'Optional'), _angular_core.Optional);
      this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'Attribute'), _angular_core.Attribute);
      this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'ContentChild'), _angular_core.ContentChild);
      this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'ContentChildren'), _angular_core.ContentChildren);
      this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'ViewChild'), _angular_core.ViewChild);
      this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'ViewChildren'), _angular_core.ViewChildren);
      this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'Input'), _angular_core.Input);
      this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'Output'), _angular_core.Output);
      this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'Pipe'), _angular_core.Pipe);
      this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'HostBinding'), _angular_core.HostBinding);
      this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'HostListener'), _angular_core.HostListener);
      this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'Directive'), _angular_core.Directive);
      this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'Component'), _angular_core.Component);
      this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'NgModule'), _angular_core.NgModule);
      this._registerDecoratorOrConstructor(this.findDeclaration(diMetadata, 'Host'), _angular_core.Host);
      this._registerDecoratorOrConstructor(this.findDeclaration(diMetadata, 'Self'), _angular_core.Self);
      this._registerDecoratorOrConstructor(this.findDeclaration(diMetadata, 'SkipSelf'), _angular_core.SkipSelf);
      this._registerDecoratorOrConstructor(this.findDeclaration(diMetadata, 'Optional'), _angular_core.Optional);
      this._registerFunction(this.findDeclaration(animationMetadata, 'trigger'), _angular_core.trigger);
      this._registerFunction(this.findDeclaration(animationMetadata, 'state'), _angular_core.state);
      this._registerFunction(this.findDeclaration(animationMetadata, 'transition'), _angular_core.transition);
      this._registerFunction(this.findDeclaration(animationMetadata, 'style'), _angular_core.style);
      this._registerFunction(this.findDeclaration(animationMetadata, 'animate'), _angular_core.animate);
      this._registerFunction(this.findDeclaration(animationMetadata, 'keyframes'), _angular_core.keyframes);
      this._registerFunction(this.findDeclaration(animationMetadata, 'sequence'), _angular_core.sequence);
      this._registerFunction(this.findDeclaration(animationMetadata, 'group'), _angular_core.group);
    };
    StaticReflector.prototype.getStaticSymbol = function(declarationFile, name, members) {
      return this.symbolResolver.getStaticSymbol(declarationFile, name, members);
    };
    StaticReflector.prototype.reportError = function(error, context, path) {
      if (this.errorRecorder) {
        this.errorRecorder(error, (context && context.filePath) || path);
      } else {
        throw error;
      }
    };
    StaticReflector.prototype.simplify = function(context, value) {
      var _this = this;
      var self = this;
      var scope = BindingScope.empty;
      var calling = new Map();
      function simplifyInContext(context, value, depth) {
        function resolveReferenceValue(staticSymbol) {
          var resolvedSymbol = self.symbolResolver.resolveSymbol(staticSymbol);
          return resolvedSymbol ? resolvedSymbol.metadata : null;
        }
        function simplifyCall(functionSymbol, targetFunction, args) {
          if (targetFunction && targetFunction['__symbolic'] == 'function') {
            if (calling.get(functionSymbol)) {
              throw new Error('Recursion not supported');
            }
            calling.set(functionSymbol, true);
            try {
              var value_1 = targetFunction['value'];
              if (value_1 && (depth != 0 || value_1.__symbolic != 'error')) {
                var parameters = targetFunction['parameters'];
                var defaults = targetFunction.defaults;
                if (defaults && defaults.length > args.length) {
                  args.push.apply(args, defaults.slice(args.length).map(function(value) {
                    return simplify(value);
                  }));
                }
                var functionScope = BindingScope.build();
                for (var i = 0; i < parameters.length; i++) {
                  functionScope.define(parameters[i], args[i]);
                }
                var oldScope = scope;
                var result_1;
                try {
                  scope = functionScope.done();
                  result_1 = simplifyInContext(functionSymbol, value_1, depth + 1);
                } finally {
                  scope = oldScope;
                }
                return result_1;
              }
            } finally {
              calling.delete(functionSymbol);
            }
          }
          if (depth === 0) {
            return {__symbolic: 'ignore'};
          }
          return simplify({
            __symbolic: 'error',
            message: 'Function call not supported',
            context: functionSymbol
          });
        }
        function simplify(expression) {
          if (isPrimitive$1(expression)) {
            return expression;
          }
          if (expression instanceof Array) {
            var result_2 = [];
            for (var _i = 0,
                _a = ((expression)); _i < _a.length; _i++) {
              var item = _a[_i];
              if (item && item.__symbolic === 'spread') {
                var spreadArray = simplify(item.expression);
                if (Array.isArray(spreadArray)) {
                  for (var _b = 0,
                      spreadArray_1 = spreadArray; _b < spreadArray_1.length; _b++) {
                    var spreadItem = spreadArray_1[_b];
                    result_2.push(spreadItem);
                  }
                  continue;
                }
              }
              var value_2 = simplify(item);
              if (shouldIgnore(value_2)) {
                continue;
              }
              result_2.push(value_2);
            }
            return result_2;
          }
          if (expression instanceof StaticSymbol) {
            if (expression === self.opaqueToken || self.conversionMap.has(expression)) {
              return expression;
            } else {
              var staticSymbol = expression;
              var declarationValue = resolveReferenceValue(staticSymbol);
              if (declarationValue) {
                return simplifyInContext(staticSymbol, declarationValue, depth + 1);
              } else {
                return staticSymbol;
              }
            }
          }
          if (expression) {
            if (expression['__symbolic']) {
              var staticSymbol = void 0;
              switch (expression['__symbolic']) {
                case 'binop':
                  var left = simplify(expression['left']);
                  if (shouldIgnore(left))
                    return left;
                  var right = simplify(expression['right']);
                  if (shouldIgnore(right))
                    return right;
                  switch (expression['operator']) {
                    case '&&':
                      return left && right;
                    case '||':
                      return left || right;
                    case '|':
                      return left | right;
                    case '^':
                      return left ^ right;
                    case '&':
                      return left & right;
                    case '==':
                      return left == right;
                    case '!=':
                      return left != right;
                    case '===':
                      return left === right;
                    case '!==':
                      return left !== right;
                    case '<':
                      return left < right;
                    case '>':
                      return left > right;
                    case '<=':
                      return left <= right;
                    case '>=':
                      return left >= right;
                    case '<<':
                      return left << right;
                    case '>>':
                      return left >> right;
                    case '+':
                      return left + right;
                    case '-':
                      return left - right;
                    case '*':
                      return left * right;
                    case '/':
                      return left / right;
                    case '%':
                      return left % right;
                  }
                  return null;
                case 'if':
                  var condition = simplify(expression['condition']);
                  return condition ? simplify(expression['thenExpression']) : simplify(expression['elseExpression']);
                case 'pre':
                  var operand = simplify(expression['operand']);
                  if (shouldIgnore(operand))
                    return operand;
                  switch (expression['operator']) {
                    case '+':
                      return operand;
                    case '-':
                      return -operand;
                    case '!':
                      return !operand;
                    case '~':
                      return ~operand;
                  }
                  return null;
                case 'index':
                  var indexTarget = simplify(expression['expression']);
                  var index = simplify(expression['index']);
                  if (indexTarget && isPrimitive$1(index))
                    return indexTarget[index];
                  return null;
                case 'select':
                  var member = expression['member'];
                  var selectContext = context;
                  var selectTarget = simplify(expression['expression']);
                  if (selectTarget instanceof StaticSymbol) {
                    var members = selectTarget.members.concat(member);
                    selectContext = self.getStaticSymbol(selectTarget.filePath, selectTarget.name, members);
                    var declarationValue = resolveReferenceValue(selectContext);
                    if (declarationValue) {
                      return simplifyInContext(selectContext, declarationValue, depth + 1);
                    } else {
                      return selectContext;
                    }
                  }
                  if (selectTarget && isPrimitive$1(member))
                    return simplifyInContext(selectContext, selectTarget[member], depth + 1);
                  return null;
                case 'reference':
                  var name_1 = expression['name'];
                  var localValue = scope.resolve(name_1);
                  if (localValue != BindingScope.missing) {
                    return localValue;
                  }
                  break;
                case 'class':
                  return context;
                case 'function':
                  return context;
                case 'new':
                case 'call':
                  staticSymbol = simplifyInContext(context, expression['expression'], depth + 1);
                  if (staticSymbol instanceof StaticSymbol) {
                    if (staticSymbol === self.opaqueToken) {
                      return context;
                    }
                    var argExpressions = expression['arguments'] || [];
                    var args = argExpressions.map(function(arg) {
                      return simplifyInContext(context, arg, depth + 1);
                    });
                    var converter = self.conversionMap.get(staticSymbol);
                    if (converter) {
                      return converter(context, args);
                    } else {
                      var targetFunction = resolveReferenceValue(staticSymbol);
                      return simplifyCall(staticSymbol, targetFunction, args);
                    }
                  }
                  break;
                case 'error':
                  var message = produceErrorMessage(expression);
                  if (expression['line']) {
                    message = message + " (position " + (expression['line'] + 1) + ":" + (expression['character'] + 1) + " in the original .ts file)";
                    throw positionalError(message, context.filePath, expression['line'], expression['character']);
                  }
                  throw new Error(message);
              }
              return null;
            }
            return mapStringMap(expression, function(value, name) {
              return simplify(value);
            });
          }
          return null;
        }
        try {
          return simplify(value);
        } catch (e) {
          var members = context.members.length ? "." + context.members.join('.') : '';
          var message = e.message + ", resolving symbol " + context.name + members + " in " + context.filePath;
          if (e.fileName) {
            throw positionalError(message, e.fileName, e.line, e.column);
          }
          throw new Error(message);
        }
      }
      var recordedSimplifyInContext = function(context, value, depth) {
        try {
          return simplifyInContext(context, value, depth);
        } catch (e) {
          _this.reportError(e, context);
        }
      };
      var result = this.errorRecorder ? recordedSimplifyInContext(context, value, 0) : simplifyInContext(context, value, 0);
      if (shouldIgnore(result)) {
        return undefined;
      }
      return result;
    };
    StaticReflector.prototype.getTypeMetadata = function(type) {
      var resolvedSymbol = this.symbolResolver.resolveSymbol(type);
      return resolvedSymbol && resolvedSymbol.metadata ? resolvedSymbol.metadata : {__symbolic: 'class'};
    };
    return StaticReflector;
  }());
  function expandedMessage(error) {
    switch (error.message) {
      case 'Reference to non-exported class':
        if (error.context && error.context.className) {
          return "Reference to a non-exported class " + error.context.className + ". Consider exporting the class";
        }
        break;
      case 'Variable not initialized':
        return 'Only initialized variables and constants can be referenced because the value of this variable is needed by the template compiler';
      case 'Destructuring not supported':
        return 'Referencing an exported destructured variable or constant is not supported by the template compiler. Consider simplifying this to avoid destructuring';
      case 'Could not resolve type':
        if (error.context && error.context.typeName) {
          return "Could not resolve type " + error.context.typeName;
        }
        break;
      case 'Function call not supported':
        var prefix = error.context && error.context.name ? "Calling function '" + error.context.name + "', f" : 'F';
        return prefix + 'unction calls are not supported. Consider replacing the function or lambda with a reference to an exported function';
      case 'Reference to a local symbol':
        if (error.context && error.context.name) {
          return "Reference to a local (non-exported) symbol '" + error.context.name + "'. Consider exporting the symbol";
        }
        break;
    }
    return error.message;
  }
  function produceErrorMessage(error) {
    return "Error encountered resolving symbol values statically. " + expandedMessage(error);
  }
  function mapStringMap(input, transform) {
    if (!input)
      return {};
    var result = {};
    Object.keys(input).forEach(function(key) {
      var value = transform(input[key], key);
      if (!shouldIgnore(value)) {
        if (HIDDEN_KEY.test(key)) {
          Object.defineProperty(result, key, {
            enumerable: false,
            configurable: true,
            value: value
          });
        } else {
          result[key] = value;
        }
      }
    });
    return result;
  }
  function isPrimitive$1(o) {
    return o === null || (typeof o !== 'function' && typeof o !== 'object');
  }
  var BindingScope = (function() {
    function BindingScope() {}
    BindingScope.prototype.resolve = function(name) {};
    BindingScope.build = function() {
      var current = new Map();
      return {
        define: function(name, value) {
          current.set(name, value);
          return this;
        },
        done: function() {
          return current.size > 0 ? new PopulatedScope(current) : BindingScope.empty;
        }
      };
    };
    BindingScope.missing = {};
    BindingScope.empty = {resolve: function(name) {
        return BindingScope.missing;
      }};
    return BindingScope;
  }());
  var PopulatedScope = (function(_super) {
    __extends$24(PopulatedScope, _super);
    function PopulatedScope(bindings) {
      _super.call(this);
      this.bindings = bindings;
    }
    PopulatedScope.prototype.resolve = function(name) {
      return this.bindings.has(name) ? this.bindings.get(name) : BindingScope.missing;
    };
    return PopulatedScope;
  }(BindingScope));
  function shouldIgnore(value) {
    return value && value.__symbolic == 'ignore';
  }
  function positionalError(message, fileName, line, column) {
    var result = new Error(message);
    ((result)).fileName = fileName;
    ((result)).line = line;
    ((result)).column = column;
    return result;
  }
  var __extends$25 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var ResolvedStaticSymbol = (function() {
    function ResolvedStaticSymbol(symbol, metadata) {
      this.symbol = symbol;
      this.metadata = metadata;
    }
    return ResolvedStaticSymbol;
  }());
  var SUPPORTED_SCHEMA_VERSION = 3;
  var StaticSymbolResolver = (function() {
    function StaticSymbolResolver(host, staticSymbolCache, summaryResolver, errorRecorder) {
      this.host = host;
      this.staticSymbolCache = staticSymbolCache;
      this.summaryResolver = summaryResolver;
      this.errorRecorder = errorRecorder;
      this.metadataCache = new Map();
      this.resolvedSymbols = new Map();
      this.resolvedFilePaths = new Set();
    }
    StaticSymbolResolver.prototype.resolveSymbol = function(staticSymbol) {
      if (staticSymbol.members.length > 0) {
        return this._resolveSymbolMembers(staticSymbol);
      }
      var result = this._resolveSymbolFromSummary(staticSymbol);
      if (!result) {
        this._createSymbolsOf(staticSymbol.filePath);
        result = this.resolvedSymbols.get(staticSymbol);
      }
      return result;
    };
    StaticSymbolResolver.prototype._resolveSymbolMembers = function(staticSymbol) {
      var members = staticSymbol.members;
      var baseResolvedSymbol = this.resolveSymbol(this.getStaticSymbol(staticSymbol.filePath, staticSymbol.name));
      if (!baseResolvedSymbol) {
        return null;
      }
      var baseMetadata = baseResolvedSymbol.metadata;
      if (baseMetadata instanceof StaticSymbol) {
        return new ResolvedStaticSymbol(staticSymbol, this.getStaticSymbol(baseMetadata.filePath, baseMetadata.name, members));
      } else if (baseMetadata && baseMetadata.__symbolic === 'class') {
        if (baseMetadata.statics && members.length === 1) {
          return new ResolvedStaticSymbol(staticSymbol, baseMetadata.statics[members[0]]);
        }
      } else {
        var value = baseMetadata;
        for (var i = 0; i < members.length && value; i++) {
          value = value[members[i]];
        }
        return new ResolvedStaticSymbol(staticSymbol, value);
      }
      return null;
    };
    StaticSymbolResolver.prototype._resolveSymbolFromSummary = function(staticSymbol) {
      var summary = this.summaryResolver.resolveSummary(staticSymbol);
      return summary ? new ResolvedStaticSymbol(staticSymbol, summary.metadata) : null;
    };
    StaticSymbolResolver.prototype.getStaticSymbol = function(declarationFile, name, members) {
      return this.staticSymbolCache.get(declarationFile, name, members);
    };
    StaticSymbolResolver.prototype.getSymbolsOf = function(filePath) {
      var symbols = new Set(this.summaryResolver.getSymbolsOf(filePath));
      this._createSymbolsOf(filePath);
      this.resolvedSymbols.forEach(function(resolvedSymbol) {
        if (resolvedSymbol.symbol.filePath === filePath) {
          symbols.add(resolvedSymbol.symbol);
        }
      });
      return Array.from(symbols);
    };
    StaticSymbolResolver.prototype._createSymbolsOf = function(filePath) {
      var _this = this;
      if (this.resolvedFilePaths.has(filePath)) {
        return;
      }
      this.resolvedFilePaths.add(filePath);
      var resolvedSymbols = [];
      var metadata = this.getModuleMetadata(filePath);
      if (metadata['metadata']) {
        Object.keys(metadata['metadata']).forEach(function(symbolName) {
          var symbolMeta = metadata['metadata'][symbolName];
          resolvedSymbols.push(_this.createResolvedSymbol(_this.getStaticSymbol(filePath, symbolName), symbolMeta));
        });
      }
      if (metadata['exports']) {
        var _loop_1 = function(moduleExport) {
          if (moduleExport.export) {
            moduleExport.export.forEach(function(exportSymbol) {
              var symbolName;
              if (typeof exportSymbol === 'string') {
                symbolName = exportSymbol;
              } else {
                symbolName = exportSymbol.as;
              }
              var symName = symbolName;
              if (typeof exportSymbol !== 'string') {
                symName = exportSymbol.name;
              }
              var resolvedModule = _this.resolveModule(moduleExport.from, filePath);
              if (resolvedModule) {
                var targetSymbol = _this.getStaticSymbol(resolvedModule, symName);
                var sourceSymbol = _this.getStaticSymbol(filePath, symbolName);
                resolvedSymbols.push(new ResolvedStaticSymbol(sourceSymbol, targetSymbol));
              }
            });
          } else {
            var resolvedModule = this_1.resolveModule(moduleExport.from, filePath);
            if (resolvedModule) {
              var nestedExports = this_1.getSymbolsOf(resolvedModule);
              nestedExports.forEach(function(targetSymbol) {
                var sourceSymbol = _this.getStaticSymbol(filePath, targetSymbol.name);
                resolvedSymbols.push(new ResolvedStaticSymbol(sourceSymbol, targetSymbol));
              });
            }
          }
        };
        var this_1 = this;
        for (var _i = 0,
            _a = metadata['exports']; _i < _a.length; _i++) {
          var moduleExport = _a[_i];
          _loop_1(moduleExport);
        }
      }
      resolvedSymbols.forEach(function(resolvedSymbol) {
        return _this.resolvedSymbols.set(resolvedSymbol.symbol, resolvedSymbol);
      });
    };
    StaticSymbolResolver.prototype.createResolvedSymbol = function(sourceSymbol, metadata) {
      var self = this;
      var ReferenceTransformer = (function(_super) {
        __extends$25(ReferenceTransformer, _super);
        function ReferenceTransformer() {
          _super.apply(this, arguments);
        }
        ReferenceTransformer.prototype.visitStringMap = function(map, functionParams) {
          var symbolic = map['__symbolic'];
          if (symbolic === 'function') {
            var oldLen = functionParams.length;
            functionParams.push.apply(functionParams, (map['parameters'] || []));
            var result = _super.prototype.visitStringMap.call(this, map, functionParams);
            functionParams.length = oldLen;
            return result;
          } else if (symbolic === 'reference') {
            var module_1 = map['module'];
            var name_1 = map['name'];
            if (!name_1) {
              return null;
            }
            var filePath = void 0;
            if (module_1) {
              filePath = self.resolveModule(module_1, sourceSymbol.filePath);
              if (!filePath) {
                return {
                  __symbolic: 'error',
                  message: "Could not resolve " + module_1 + " relative to " + sourceSymbol.filePath + "."
                };
              }
            } else {
              var isFunctionParam = functionParams.indexOf(name_1) >= 0;
              if (!isFunctionParam) {
                filePath = sourceSymbol.filePath;
              }
            }
            if (filePath) {
              return self.getStaticSymbol(filePath, name_1);
            } else {
              return {
                __symbolic: 'reference',
                name: name_1
              };
            }
          } else {
            return _super.prototype.visitStringMap.call(this, map, functionParams);
          }
        };
        return ReferenceTransformer;
      }(ValueTransformer));
      var transformedMeta = visitValue(metadata, new ReferenceTransformer(), []);
      return new ResolvedStaticSymbol(sourceSymbol, transformedMeta);
    };
    StaticSymbolResolver.prototype.reportError = function(error, context, path) {
      if (this.errorRecorder) {
        this.errorRecorder(error, (context && context.filePath) || path);
      } else {
        throw error;
      }
    };
    StaticSymbolResolver.prototype.getModuleMetadata = function(module) {
      var moduleMetadata = this.metadataCache.get(module);
      if (!moduleMetadata) {
        var moduleMetadatas = this.host.getMetadataFor(module);
        if (moduleMetadatas) {
          var maxVersion_1 = -1;
          moduleMetadatas.forEach(function(md) {
            if (md['version'] > maxVersion_1) {
              maxVersion_1 = md['version'];
              moduleMetadata = md;
            }
          });
        }
        if (!moduleMetadata) {
          moduleMetadata = {
            __symbolic: 'module',
            version: SUPPORTED_SCHEMA_VERSION,
            module: module,
            metadata: {}
          };
        }
        if (moduleMetadata['version'] != SUPPORTED_SCHEMA_VERSION) {
          var errorMessage = moduleMetadata['version'] == 2 ? "Unsupported metadata version " + moduleMetadata['version'] + " for module " + module + ". This module should be compiled with a newer version of ngc" : "Metadata version mismatch for module " + module + ", found version " + moduleMetadata['version'] + ", expected " + SUPPORTED_SCHEMA_VERSION;
          this.reportError(new Error(errorMessage), null);
        }
        this.metadataCache.set(module, moduleMetadata);
      }
      return moduleMetadata;
    };
    StaticSymbolResolver.prototype.getSymbolByModule = function(module, symbolName, containingFile) {
      var filePath = this.resolveModule(module, containingFile);
      if (!filePath) {
        throw new Error("Could not resolve module " + module + " relative to " + containingFile);
      }
      return this.getStaticSymbol(filePath, symbolName);
    };
    StaticSymbolResolver.prototype.resolveModule = function(module, containingFile) {
      try {
        return this.host.moduleNameToFileName(module, containingFile);
      } catch (e) {
        console.error("Could not resolve module '" + module + "' relative to file " + containingFile);
        this.reportError(new e, null, containingFile);
      }
    };
    return StaticSymbolResolver;
  }());
  var AotSummaryResolver = (function() {
    function AotSummaryResolver(host, staticSymbolCache) {
      this.host = host;
      this.staticSymbolCache = staticSymbolCache;
      this.summaryCache = new Map();
      this.loadedFilePaths = new Set();
    }
    AotSummaryResolver.prototype._assertNoMembers = function(symbol) {
      if (symbol.members.length) {
        throw new Error("Internal state: StaticSymbols in summaries can't have members! " + JSON.stringify(symbol));
      }
    };
    AotSummaryResolver.prototype.resolveSummary = function(staticSymbol) {
      this._assertNoMembers(staticSymbol);
      var summary = this.summaryCache.get(staticSymbol);
      if (!summary) {
        this._loadSummaryFile(staticSymbol.filePath);
        summary = this.summaryCache.get(staticSymbol);
      }
      return summary;
    };
    AotSummaryResolver.prototype.getSymbolsOf = function(filePath) {
      this._loadSummaryFile(filePath);
      return Array.from(this.summaryCache.keys()).filter(function(symbol) {
        return symbol.filePath === filePath;
      });
    };
    AotSummaryResolver.prototype._loadSummaryFile = function(filePath) {
      var _this = this;
      if (this.loadedFilePaths.has(filePath)) {
        return;
      }
      this.loadedFilePaths.add(filePath);
      if (!this.host.isSourceFile(filePath)) {
        var summaryFilePath = summaryFileName(filePath);
        var json = void 0;
        try {
          json = this.host.loadSummary(summaryFilePath);
        } catch (e) {
          console.error("Error loading summary file " + summaryFilePath);
          throw e;
        }
        if (json) {
          var readSummaries = deserializeSummaries(this.staticSymbolCache, json);
          readSummaries.forEach(function(summary) {
            _this.summaryCache.set(summary.symbol, summary);
          });
        }
      }
    };
    return AotSummaryResolver;
  }());
  function createAotCompiler(compilerHost, options) {
    var translations = options.translations || '';
    var urlResolver = createOfflineCompileUrlResolver();
    var symbolCache = new StaticSymbolCache();
    var summaryResolver = new AotSummaryResolver(compilerHost, symbolCache);
    var symbolResolver = new StaticSymbolResolver(compilerHost, symbolCache, summaryResolver);
    var staticReflector = new StaticReflector(symbolResolver);
    StaticAndDynamicReflectionCapabilities.install(staticReflector);
    var htmlParser = new I18NHtmlParser(new HtmlParser(), translations, options.i18nFormat);
    var config = new CompilerConfig({
      genDebugInfo: options.debug === true,
      defaultEncapsulation: _angular_core.ViewEncapsulation.Emulated,
      logBindingUpdate: false,
      useJit: false
    });
    var normalizer = new DirectiveNormalizer({get: function(url) {
        return compilerHost.loadResource(url);
      }}, urlResolver, htmlParser, config);
    var expressionParser = new Parser(new Lexer());
    var elementSchemaRegistry = new DomElementSchemaRegistry();
    var console = new Console();
    var tmplParser = new TemplateParser(expressionParser, elementSchemaRegistry, htmlParser, console, []);
    var resolver = new CompileMetadataResolver(new NgModuleResolver(staticReflector), new DirectiveResolver(staticReflector), new PipeResolver(staticReflector), summaryResolver, elementSchemaRegistry, normalizer, staticReflector);
    var compiler = new AotCompiler(compilerHost, resolver, tmplParser, new StyleCompiler(urlResolver), new ViewCompiler(config, elementSchemaRegistry), new DirectiveWrapperCompiler(config, expressionParser, elementSchemaRegistry, console), new NgModuleCompiler(), new TypeScriptEmitter(compilerHost), summaryResolver, options.locale, options.i18nFormat, new AnimationParser(elementSchemaRegistry), symbolResolver);
    return {
      compiler: compiler,
      reflector: staticReflector
    };
  }
  function interpretStatements(statements, resultVar) {
    var stmtsWithReturn = statements.concat([new ReturnStatement(variable(resultVar))]);
    var ctx = new _ExecutionContext(null, null, null, new Map());
    var visitor = new StatementInterpreter();
    var result = visitor.visitAllStatements(stmtsWithReturn, ctx);
    return isPresent(result) ? result.value : null;
  }
  function _executeFunctionStatements(varNames, varValues, statements, ctx, visitor) {
    var childCtx = ctx.createChildWihtLocalVars();
    for (var i = 0; i < varNames.length; i++) {
      childCtx.vars.set(varNames[i], varValues[i]);
    }
    var result = visitor.visitAllStatements(statements, childCtx);
    return isPresent(result) ? result.value : null;
  }
  var _ExecutionContext = (function() {
    function _ExecutionContext(parent, instance, className, vars) {
      this.parent = parent;
      this.instance = instance;
      this.className = className;
      this.vars = vars;
    }
    _ExecutionContext.prototype.createChildWihtLocalVars = function() {
      return new _ExecutionContext(this, this.instance, this.className, new Map());
    };
    return _ExecutionContext;
  }());
  var ReturnValue = (function() {
    function ReturnValue(value) {
      this.value = value;
    }
    return ReturnValue;
  }());
  function createDynamicClass(_classStmt, _ctx, _visitor) {
    var propertyDescriptors = {};
    _classStmt.getters.forEach(function(getter) {
      propertyDescriptors[getter.name] = {
        configurable: false,
        get: function() {
          var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
          return _executeFunctionStatements([], [], getter.body, instanceCtx, _visitor);
        }
      };
    });
    _classStmt.methods.forEach(function(method) {
      var paramNames = method.params.map(function(param) {
        return param.name;
      });
      propertyDescriptors[method.name] = {
        writable: false,
        configurable: false,
        value: function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
          }
          var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
          return _executeFunctionStatements(paramNames, args, method.body, instanceCtx, _visitor);
        }
      };
    });
    var ctorParamNames = _classStmt.constructorMethod.params.map(function(param) {
      return param.name;
    });
    var ctor = function() {
      var _this = this;
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i - 0] = arguments[_i];
      }
      var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
      _classStmt.fields.forEach(function(field) {
        _this[field.name] = undefined;
      });
      _executeFunctionStatements(ctorParamNames, args, _classStmt.constructorMethod.body, instanceCtx, _visitor);
    };
    var superClass = _classStmt.parent ? _classStmt.parent.visitExpression(_visitor, _ctx) : Object;
    ctor.prototype = Object.create(superClass.prototype, propertyDescriptors);
    return ctor;
  }
  var StatementInterpreter = (function() {
    function StatementInterpreter() {}
    StatementInterpreter.prototype.debugAst = function(ast) {
      return debugOutputAstAsTypeScript(ast);
    };
    StatementInterpreter.prototype.visitDeclareVarStmt = function(stmt, ctx) {
      ctx.vars.set(stmt.name, stmt.value.visitExpression(this, ctx));
      return null;
    };
    StatementInterpreter.prototype.visitWriteVarExpr = function(expr, ctx) {
      var value = expr.value.visitExpression(this, ctx);
      var currCtx = ctx;
      while (currCtx != null) {
        if (currCtx.vars.has(expr.name)) {
          currCtx.vars.set(expr.name, value);
          return value;
        }
        currCtx = currCtx.parent;
      }
      throw new Error("Not declared variable " + expr.name);
    };
    StatementInterpreter.prototype.visitReadVarExpr = function(ast, ctx) {
      var varName = ast.name;
      if (isPresent(ast.builtin)) {
        switch (ast.builtin) {
          case BuiltinVar.Super:
            return ctx.instance.__proto__;
          case BuiltinVar.This:
            return ctx.instance;
          case BuiltinVar.CatchError:
            varName = CATCH_ERROR_VAR$2;
            break;
          case BuiltinVar.CatchStack:
            varName = CATCH_STACK_VAR$2;
            break;
          default:
            throw new Error("Unknown builtin variable " + ast.builtin);
        }
      }
      var currCtx = ctx;
      while (currCtx != null) {
        if (currCtx.vars.has(varName)) {
          return currCtx.vars.get(varName);
        }
        currCtx = currCtx.parent;
      }
      throw new Error("Not declared variable " + varName);
    };
    StatementInterpreter.prototype.visitWriteKeyExpr = function(expr, ctx) {
      var receiver = expr.receiver.visitExpression(this, ctx);
      var index = expr.index.visitExpression(this, ctx);
      var value = expr.value.visitExpression(this, ctx);
      receiver[index] = value;
      return value;
    };
    StatementInterpreter.prototype.visitWritePropExpr = function(expr, ctx) {
      var receiver = expr.receiver.visitExpression(this, ctx);
      var value = expr.value.visitExpression(this, ctx);
      receiver[expr.name] = value;
      return value;
    };
    StatementInterpreter.prototype.visitInvokeMethodExpr = function(expr, ctx) {
      var receiver = expr.receiver.visitExpression(this, ctx);
      var args = this.visitAllExpressions(expr.args, ctx);
      var result;
      if (isPresent(expr.builtin)) {
        switch (expr.builtin) {
          case BuiltinMethod.ConcatArray:
            result = receiver.concat.apply(receiver, args);
            break;
          case BuiltinMethod.SubscribeObservable:
            result = receiver.subscribe({next: args[0]});
            break;
          case BuiltinMethod.Bind:
            result = receiver.bind.apply(receiver, args);
            break;
          default:
            throw new Error("Unknown builtin method " + expr.builtin);
        }
      } else {
        result = receiver[expr.name].apply(receiver, args);
      }
      return result;
    };
    StatementInterpreter.prototype.visitInvokeFunctionExpr = function(stmt, ctx) {
      var args = this.visitAllExpressions(stmt.args, ctx);
      var fnExpr = stmt.fn;
      if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {
        ctx.instance.constructor.prototype.constructor.apply(ctx.instance, args);
        return null;
      } else {
        var fn = stmt.fn.visitExpression(this, ctx);
        return fn.apply(null, args);
      }
    };
    StatementInterpreter.prototype.visitReturnStmt = function(stmt, ctx) {
      return new ReturnValue(stmt.value.visitExpression(this, ctx));
    };
    StatementInterpreter.prototype.visitDeclareClassStmt = function(stmt, ctx) {
      var clazz = createDynamicClass(stmt, ctx, this);
      ctx.vars.set(stmt.name, clazz);
      return null;
    };
    StatementInterpreter.prototype.visitExpressionStmt = function(stmt, ctx) {
      return stmt.expr.visitExpression(this, ctx);
    };
    StatementInterpreter.prototype.visitIfStmt = function(stmt, ctx) {
      var condition = stmt.condition.visitExpression(this, ctx);
      if (condition) {
        return this.visitAllStatements(stmt.trueCase, ctx);
      } else if (isPresent(stmt.falseCase)) {
        return this.visitAllStatements(stmt.falseCase, ctx);
      }
      return null;
    };
    StatementInterpreter.prototype.visitTryCatchStmt = function(stmt, ctx) {
      try {
        return this.visitAllStatements(stmt.bodyStmts, ctx);
      } catch (e) {
        var childCtx = ctx.createChildWihtLocalVars();
        childCtx.vars.set(CATCH_ERROR_VAR$2, e);
        childCtx.vars.set(CATCH_STACK_VAR$2, e.stack);
        return this.visitAllStatements(stmt.catchStmts, childCtx);
      }
    };
    StatementInterpreter.prototype.visitThrowStmt = function(stmt, ctx) {
      throw stmt.error.visitExpression(this, ctx);
    };
    StatementInterpreter.prototype.visitCommentStmt = function(stmt, context) {
      return null;
    };
    StatementInterpreter.prototype.visitInstantiateExpr = function(ast, ctx) {
      var args = this.visitAllExpressions(ast.args, ctx);
      var clazz = ast.classExpr.visitExpression(this, ctx);
      return new (clazz.bind.apply(clazz, [void 0].concat(args)))();
    };
    StatementInterpreter.prototype.visitLiteralExpr = function(ast, ctx) {
      return ast.value;
    };
    StatementInterpreter.prototype.visitExternalExpr = function(ast, ctx) {
      return ast.value.reference;
    };
    StatementInterpreter.prototype.visitConditionalExpr = function(ast, ctx) {
      if (ast.condition.visitExpression(this, ctx)) {
        return ast.trueCase.visitExpression(this, ctx);
      } else if (isPresent(ast.falseCase)) {
        return ast.falseCase.visitExpression(this, ctx);
      }
      return null;
    };
    StatementInterpreter.prototype.visitNotExpr = function(ast, ctx) {
      return !ast.condition.visitExpression(this, ctx);
    };
    StatementInterpreter.prototype.visitCastExpr = function(ast, ctx) {
      return ast.value.visitExpression(this, ctx);
    };
    StatementInterpreter.prototype.visitFunctionExpr = function(ast, ctx) {
      var paramNames = ast.params.map(function(param) {
        return param.name;
      });
      return _declareFn(paramNames, ast.statements, ctx, this);
    };
    StatementInterpreter.prototype.visitDeclareFunctionStmt = function(stmt, ctx) {
      var paramNames = stmt.params.map(function(param) {
        return param.name;
      });
      ctx.vars.set(stmt.name, _declareFn(paramNames, stmt.statements, ctx, this));
      return null;
    };
    StatementInterpreter.prototype.visitBinaryOperatorExpr = function(ast, ctx) {
      var _this = this;
      var lhs = function() {
        return ast.lhs.visitExpression(_this, ctx);
      };
      var rhs = function() {
        return ast.rhs.visitExpression(_this, ctx);
      };
      switch (ast.operator) {
        case BinaryOperator.Equals:
          return lhs() == rhs();
        case BinaryOperator.Identical:
          return lhs() === rhs();
        case BinaryOperator.NotEquals:
          return lhs() != rhs();
        case BinaryOperator.NotIdentical:
          return lhs() !== rhs();
        case BinaryOperator.And:
          return lhs() && rhs();
        case BinaryOperator.Or:
          return lhs() || rhs();
        case BinaryOperator.Plus:
          return lhs() + rhs();
        case BinaryOperator.Minus:
          return lhs() - rhs();
        case BinaryOperator.Divide:
          return lhs() / rhs();
        case BinaryOperator.Multiply:
          return lhs() * rhs();
        case BinaryOperator.Modulo:
          return lhs() % rhs();
        case BinaryOperator.Lower:
          return lhs() < rhs();
        case BinaryOperator.LowerEquals:
          return lhs() <= rhs();
        case BinaryOperator.Bigger:
          return lhs() > rhs();
        case BinaryOperator.BiggerEquals:
          return lhs() >= rhs();
        default:
          throw new Error("Unknown operator " + ast.operator);
      }
    };
    StatementInterpreter.prototype.visitReadPropExpr = function(ast, ctx) {
      var result;
      var receiver = ast.receiver.visitExpression(this, ctx);
      result = receiver[ast.name];
      return result;
    };
    StatementInterpreter.prototype.visitReadKeyExpr = function(ast, ctx) {
      var receiver = ast.receiver.visitExpression(this, ctx);
      var prop = ast.index.visitExpression(this, ctx);
      return receiver[prop];
    };
    StatementInterpreter.prototype.visitLiteralArrayExpr = function(ast, ctx) {
      return this.visitAllExpressions(ast.entries, ctx);
    };
    StatementInterpreter.prototype.visitLiteralMapExpr = function(ast, ctx) {
      var _this = this;
      var result = {};
      ast.entries.forEach(function(entry) {
        return ((result))[entry.key] = entry.value.visitExpression(_this, ctx);
      });
      return result;
    };
    StatementInterpreter.prototype.visitAllExpressions = function(expressions, ctx) {
      var _this = this;
      return expressions.map(function(expr) {
        return expr.visitExpression(_this, ctx);
      });
    };
    StatementInterpreter.prototype.visitAllStatements = function(statements, ctx) {
      for (var i = 0; i < statements.length; i++) {
        var stmt = statements[i];
        var val = stmt.visitStatement(this, ctx);
        if (val instanceof ReturnValue) {
          return val;
        }
      }
      return null;
    };
    return StatementInterpreter;
  }());
  function _declareFn(varNames, statements, ctx, visitor) {
    return function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i - 0] = arguments[_i];
      }
      return _executeFunctionStatements(varNames, args, statements, ctx, visitor);
    };
  }
  var CATCH_ERROR_VAR$2 = 'error';
  var CATCH_STACK_VAR$2 = 'stack';
  var __extends$27 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var AbstractJsEmitterVisitor = (function(_super) {
    __extends$27(AbstractJsEmitterVisitor, _super);
    function AbstractJsEmitterVisitor() {
      _super.call(this, false);
    }
    AbstractJsEmitterVisitor.prototype.visitDeclareClassStmt = function(stmt, ctx) {
      var _this = this;
      ctx.pushClass(stmt);
      this._visitClassConstructor(stmt, ctx);
      if (isPresent(stmt.parent)) {
        ctx.print(stmt.name + ".prototype = Object.create(");
        stmt.parent.visitExpression(this, ctx);
        ctx.println(".prototype);");
      }
      stmt.getters.forEach(function(getter) {
        return _this._visitClassGetter(stmt, getter, ctx);
      });
      stmt.methods.forEach(function(method) {
        return _this._visitClassMethod(stmt, method, ctx);
      });
      ctx.popClass();
      return null;
    };
    AbstractJsEmitterVisitor.prototype._visitClassConstructor = function(stmt, ctx) {
      ctx.print("function " + stmt.name + "(");
      if (isPresent(stmt.constructorMethod)) {
        this._visitParams(stmt.constructorMethod.params, ctx);
      }
      ctx.println(") {");
      ctx.incIndent();
      if (isPresent(stmt.constructorMethod)) {
        if (stmt.constructorMethod.body.length > 0) {
          ctx.println("var self = this;");
          this.visitAllStatements(stmt.constructorMethod.body, ctx);
        }
      }
      ctx.decIndent();
      ctx.println("}");
    };
    AbstractJsEmitterVisitor.prototype._visitClassGetter = function(stmt, getter, ctx) {
      ctx.println("Object.defineProperty(" + stmt.name + ".prototype, '" + getter.name + "', { get: function() {");
      ctx.incIndent();
      if (getter.body.length > 0) {
        ctx.println("var self = this;");
        this.visitAllStatements(getter.body, ctx);
      }
      ctx.decIndent();
      ctx.println("}});");
    };
    AbstractJsEmitterVisitor.prototype._visitClassMethod = function(stmt, method, ctx) {
      ctx.print(stmt.name + ".prototype." + method.name + " = function(");
      this._visitParams(method.params, ctx);
      ctx.println(") {");
      ctx.incIndent();
      if (method.body.length > 0) {
        ctx.println("var self = this;");
        this.visitAllStatements(method.body, ctx);
      }
      ctx.decIndent();
      ctx.println("};");
    };
    AbstractJsEmitterVisitor.prototype.visitReadVarExpr = function(ast, ctx) {
      if (ast.builtin === BuiltinVar.This) {
        ctx.print('self');
      } else if (ast.builtin === BuiltinVar.Super) {
        throw new Error("'super' needs to be handled at a parent ast node, not at the variable level!");
      } else {
        _super.prototype.visitReadVarExpr.call(this, ast, ctx);
      }
      return null;
    };
    AbstractJsEmitterVisitor.prototype.visitDeclareVarStmt = function(stmt, ctx) {
      ctx.print("var " + stmt.name + " = ");
      stmt.value.visitExpression(this, ctx);
      ctx.println(";");
      return null;
    };
    AbstractJsEmitterVisitor.prototype.visitCastExpr = function(ast, ctx) {
      ast.value.visitExpression(this, ctx);
      return null;
    };
    AbstractJsEmitterVisitor.prototype.visitInvokeFunctionExpr = function(expr, ctx) {
      var fnExpr = expr.fn;
      if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {
        ctx.currentClass.parent.visitExpression(this, ctx);
        ctx.print(".call(this");
        if (expr.args.length > 0) {
          ctx.print(", ");
          this.visitAllExpressions(expr.args, ctx, ',');
        }
        ctx.print(")");
      } else {
        _super.prototype.visitInvokeFunctionExpr.call(this, expr, ctx);
      }
      return null;
    };
    AbstractJsEmitterVisitor.prototype.visitFunctionExpr = function(ast, ctx) {
      ctx.print("function(");
      this._visitParams(ast.params, ctx);
      ctx.println(") {");
      ctx.incIndent();
      this.visitAllStatements(ast.statements, ctx);
      ctx.decIndent();
      ctx.print("}");
      return null;
    };
    AbstractJsEmitterVisitor.prototype.visitDeclareFunctionStmt = function(stmt, ctx) {
      ctx.print("function " + stmt.name + "(");
      this._visitParams(stmt.params, ctx);
      ctx.println(") {");
      ctx.incIndent();
      this.visitAllStatements(stmt.statements, ctx);
      ctx.decIndent();
      ctx.println("}");
      return null;
    };
    AbstractJsEmitterVisitor.prototype.visitTryCatchStmt = function(stmt, ctx) {
      ctx.println("try {");
      ctx.incIndent();
      this.visitAllStatements(stmt.bodyStmts, ctx);
      ctx.decIndent();
      ctx.println("} catch (" + CATCH_ERROR_VAR$1.name + ") {");
      ctx.incIndent();
      var catchStmts = [(CATCH_STACK_VAR$1.set(CATCH_ERROR_VAR$1.prop('stack')).toDeclStmt(null, [StmtModifier.Final]))].concat(stmt.catchStmts);
      this.visitAllStatements(catchStmts, ctx);
      ctx.decIndent();
      ctx.println("}");
      return null;
    };
    AbstractJsEmitterVisitor.prototype._visitParams = function(params, ctx) {
      this.visitAllObjects(function(param) {
        return ctx.print(param.name);
      }, params, ctx, ',');
    };
    AbstractJsEmitterVisitor.prototype.getBuiltinMethodName = function(method) {
      var name;
      switch (method) {
        case BuiltinMethod.ConcatArray:
          name = 'concat';
          break;
        case BuiltinMethod.SubscribeObservable:
          name = 'subscribe';
          break;
        case BuiltinMethod.Bind:
          name = 'bind';
          break;
        default:
          throw new Error("Unknown builtin method: " + method);
      }
      return name;
    };
    return AbstractJsEmitterVisitor;
  }(AbstractEmitterVisitor));
  var __extends$26 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  function evalExpression(sourceUrl, expr, declarations, vars) {
    var fnBody = declarations + "\nreturn " + expr + "\n//# sourceURL=" + sourceUrl;
    var fnArgNames = [];
    var fnArgValues = [];
    for (var argName in vars) {
      fnArgNames.push(argName);
      fnArgValues.push(vars[argName]);
    }
    return new (Function.bind.apply(Function, [void 0].concat(fnArgNames.concat(fnBody))))().apply(void 0, fnArgValues);
  }
  function jitStatements(sourceUrl, statements, resultVar) {
    var converter = new JitEmitterVisitor();
    var ctx = EmitterVisitorContext.createRoot([resultVar]);
    converter.visitAllStatements(statements, ctx);
    return evalExpression(sourceUrl, resultVar, ctx.toSource(), converter.getArgs());
  }
  var JitEmitterVisitor = (function(_super) {
    __extends$26(JitEmitterVisitor, _super);
    function JitEmitterVisitor() {
      _super.apply(this, arguments);
      this._evalArgNames = [];
      this._evalArgValues = [];
    }
    JitEmitterVisitor.prototype.getArgs = function() {
      var result = {};
      for (var i = 0; i < this._evalArgNames.length; i++) {
        result[this._evalArgNames[i]] = this._evalArgValues[i];
      }
      return result;
    };
    JitEmitterVisitor.prototype.visitExternalExpr = function(ast, ctx) {
      var value = ast.value.reference;
      var id = this._evalArgValues.indexOf(value);
      if (id === -1) {
        id = this._evalArgValues.length;
        this._evalArgValues.push(value);
        var name_1 = identifierName(ast.value) || 'val';
        this._evalArgNames.push("jit_" + name_1 + id);
      }
      ctx.print(this._evalArgNames[id]);
      return null;
    };
    return JitEmitterVisitor;
  }(AbstractJsEmitterVisitor));
  var __decorate$17 = (this && this.__decorate) || function(decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __metadata$17 = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var JitCompiler = (function() {
    function JitCompiler(_injector, _metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _ngModuleCompiler, _directiveWrapperCompiler, _compilerConfig, _animationParser) {
      this._injector = _injector;
      this._metadataResolver = _metadataResolver;
      this._templateParser = _templateParser;
      this._styleCompiler = _styleCompiler;
      this._viewCompiler = _viewCompiler;
      this._ngModuleCompiler = _ngModuleCompiler;
      this._directiveWrapperCompiler = _directiveWrapperCompiler;
      this._compilerConfig = _compilerConfig;
      this._animationParser = _animationParser;
      this._compiledTemplateCache = new Map();
      this._compiledHostTemplateCache = new Map();
      this._compiledDirectiveWrapperCache = new Map();
      this._compiledNgModuleCache = new Map();
      this._animationCompiler = new AnimationCompiler();
    }
    Object.defineProperty(JitCompiler.prototype, "injector", {
      get: function() {
        return this._injector;
      },
      enumerable: true,
      configurable: true
    });
    JitCompiler.prototype.compileModuleSync = function(moduleType) {
      return this._compileModuleAndComponents(moduleType, true).syncResult;
    };
    JitCompiler.prototype.compileModuleAsync = function(moduleType) {
      return this._compileModuleAndComponents(moduleType, false).asyncResult;
    };
    JitCompiler.prototype.compileModuleAndAllComponentsSync = function(moduleType) {
      return this._compileModuleAndAllComponents(moduleType, true).syncResult;
    };
    JitCompiler.prototype.compileModuleAndAllComponentsAsync = function(moduleType) {
      return this._compileModuleAndAllComponents(moduleType, false).asyncResult;
    };
    JitCompiler.prototype.getNgContentSelectors = function(component) {
      var template = this._compiledTemplateCache.get(component);
      if (!template) {
        throw new Error("The component " + stringify(component) + " is not yet compiled!");
      }
      return template.compMeta.template.ngContentSelectors;
    };
    JitCompiler.prototype._compileModuleAndComponents = function(moduleType, isSync) {
      var _this = this;
      var loadingPromise = this._loadModules(moduleType, isSync);
      var createResult = function() {
        _this._compileComponents(moduleType, null);
        return _this._compileModule(moduleType);
      };
      if (isSync) {
        return new SyncAsyncResult(createResult());
      } else {
        return new SyncAsyncResult(null, loadingPromise.then(createResult));
      }
    };
    JitCompiler.prototype._compileModuleAndAllComponents = function(moduleType, isSync) {
      var _this = this;
      var loadingPromise = this._loadModules(moduleType, isSync);
      var createResult = function() {
        var componentFactories = [];
        _this._compileComponents(moduleType, componentFactories);
        return new _angular_core.ModuleWithComponentFactories(_this._compileModule(moduleType), componentFactories);
      };
      if (isSync) {
        return new SyncAsyncResult(createResult());
      } else {
        return new SyncAsyncResult(null, loadingPromise.then(createResult));
      }
    };
    JitCompiler.prototype._loadModules = function(mainModule, isSync) {
      var _this = this;
      var loadingPromises = [];
      var ngModule = this._metadataResolver.getNgModuleMetadata(mainModule);
      ngModule.transitiveModule.modules.forEach(function(localModuleMeta) {
        loadingPromises.push(_this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(localModuleMeta.reference, isSync));
      });
      return Promise.all(loadingPromises);
    };
    JitCompiler.prototype._compileModule = function(moduleType) {
      var _this = this;
      var ngModuleFactory = this._compiledNgModuleCache.get(moduleType);
      if (!ngModuleFactory) {
        var moduleMeta_1 = this._metadataResolver.getNgModuleMetadata(moduleType);
        var extraProviders = [this._metadataResolver.getProviderMetadata(new ProviderMeta(_angular_core.Compiler, {useFactory: function() {
            return new ModuleBoundCompiler(_this, moduleMeta_1.type.reference);
          }}))];
        var compileResult = this._ngModuleCompiler.compile(moduleMeta_1, extraProviders);
        compileResult.dependencies.forEach(function(dep) {
          dep.placeholder.reference = _this._assertComponentKnown(dep.comp.reference, true).proxyComponentFactory;
        });
        if (!this._compilerConfig.useJit) {
          ngModuleFactory = interpretStatements(compileResult.statements, compileResult.ngModuleFactoryVar);
        } else {
          ngModuleFactory = jitStatements("/" + identifierName(moduleMeta_1.type) + "/module.ngfactory.js", compileResult.statements, compileResult.ngModuleFactoryVar);
        }
        this._compiledNgModuleCache.set(moduleMeta_1.type.reference, ngModuleFactory);
      }
      return ngModuleFactory;
    };
    JitCompiler.prototype._compileComponents = function(mainModule, allComponentFactories) {
      var _this = this;
      var ngModule = this._metadataResolver.getNgModuleMetadata(mainModule);
      var moduleByDirective = new Map();
      var templates = new Set();
      ngModule.transitiveModule.modules.forEach(function(localModuleSummary) {
        var localModuleMeta = _this._metadataResolver.getNgModuleMetadata(localModuleSummary.reference);
        localModuleMeta.declaredDirectives.forEach(function(dirIdentifier) {
          moduleByDirective.set(dirIdentifier.reference, localModuleMeta);
          var dirMeta = _this._metadataResolver.getDirectiveMetadata(dirIdentifier.reference);
          _this._compileDirectiveWrapper(dirMeta, localModuleMeta);
          if (dirMeta.isComponent) {
            templates.add(_this._createCompiledTemplate(dirMeta, localModuleMeta));
            if (allComponentFactories) {
              var template = _this._createCompiledHostTemplate(dirMeta.type.reference, localModuleMeta);
              templates.add(template);
              allComponentFactories.push(template.proxyComponentFactory);
            }
          }
        });
      });
      ngModule.transitiveModule.modules.forEach(function(localModuleSummary) {
        var localModuleMeta = _this._metadataResolver.getNgModuleMetadata(localModuleSummary.reference);
        localModuleMeta.declaredDirectives.forEach(function(dirIdentifier) {
          var dirMeta = _this._metadataResolver.getDirectiveMetadata(dirIdentifier.reference);
          if (dirMeta.isComponent) {
            dirMeta.entryComponents.forEach(function(entryComponentType) {
              var moduleMeta = moduleByDirective.get(entryComponentType.reference);
              templates.add(_this._createCompiledHostTemplate(entryComponentType.reference, moduleMeta));
            });
          }
        });
        localModuleMeta.entryComponents.forEach(function(entryComponentType) {
          var moduleMeta = moduleByDirective.get(entryComponentType.reference);
          templates.add(_this._createCompiledHostTemplate(entryComponentType.reference, moduleMeta));
        });
      });
      templates.forEach(function(template) {
        return _this._compileTemplate(template);
      });
    };
    JitCompiler.prototype.clearCacheFor = function(type) {
      this._compiledNgModuleCache.delete(type);
      this._metadataResolver.clearCacheFor(type);
      this._compiledHostTemplateCache.delete(type);
      var compiledTemplate = this._compiledTemplateCache.get(type);
      if (compiledTemplate) {
        this._compiledTemplateCache.delete(type);
      }
    };
    JitCompiler.prototype.clearCache = function() {
      this._metadataResolver.clearCache();
      this._compiledTemplateCache.clear();
      this._compiledHostTemplateCache.clear();
      this._compiledNgModuleCache.clear();
    };
    JitCompiler.prototype._createCompiledHostTemplate = function(compType, ngModule) {
      if (!ngModule) {
        throw new Error("Component " + stringify(compType) + " is not part of any NgModule or the module has not been imported into your module.");
      }
      var compiledTemplate = this._compiledHostTemplateCache.get(compType);
      if (!compiledTemplate) {
        var compMeta = this._metadataResolver.getDirectiveMetadata(compType);
        assertComponent(compMeta);
        var HostClass = function HostClass() {};
        ((HostClass)).overriddenName = identifierName(compMeta.type) + "_Host";
        var hostMeta = createHostComponentMeta(HostClass, compMeta);
        compiledTemplate = new CompiledTemplate(true, compMeta.selector, compMeta.type, hostMeta, ngModule, [compMeta.type]);
        this._compiledHostTemplateCache.set(compType, compiledTemplate);
      }
      return compiledTemplate;
    };
    JitCompiler.prototype._createCompiledTemplate = function(compMeta, ngModule) {
      var compiledTemplate = this._compiledTemplateCache.get(compMeta.type.reference);
      if (!compiledTemplate) {
        assertComponent(compMeta);
        compiledTemplate = new CompiledTemplate(false, compMeta.selector, compMeta.type, compMeta, ngModule, ngModule.transitiveModule.directives);
        this._compiledTemplateCache.set(compMeta.type.reference, compiledTemplate);
      }
      return compiledTemplate;
    };
    JitCompiler.prototype._assertComponentKnown = function(compType, isHost) {
      var compiledTemplate = isHost ? this._compiledHostTemplateCache.get(compType) : this._compiledTemplateCache.get(compType);
      if (!compiledTemplate) {
        throw new Error("Illegal state: Compiled view for component " + stringify(compType) + " (host: " + isHost + ") does not exist!");
      }
      return compiledTemplate;
    };
    JitCompiler.prototype._assertDirectiveWrapper = function(dirType) {
      var dirWrapper = this._compiledDirectiveWrapperCache.get(dirType);
      if (!dirWrapper) {
        throw new Error("Illegal state: Directive wrapper for " + stringify(dirType) + " has not been compiled!");
      }
      return dirWrapper;
    };
    JitCompiler.prototype._compileDirectiveWrapper = function(dirMeta, moduleMeta) {
      var compileResult = this._directiveWrapperCompiler.compile(dirMeta);
      var statements = compileResult.statements;
      var directiveWrapperClass;
      if (!this._compilerConfig.useJit) {
        directiveWrapperClass = interpretStatements(statements, compileResult.dirWrapperClassVar);
      } else {
        directiveWrapperClass = jitStatements("/" + identifierName(moduleMeta.type) + "/" + identifierName(dirMeta.type) + "/wrapper.ngfactory.js", statements, compileResult.dirWrapperClassVar);
      }
      this._compiledDirectiveWrapperCache.set(dirMeta.type.reference, directiveWrapperClass);
    };
    JitCompiler.prototype._compileTemplate = function(template) {
      var _this = this;
      if (template.isCompiled) {
        return;
      }
      var compMeta = template.compMeta;
      var externalStylesheetsByModuleUrl = new Map();
      var stylesCompileResult = this._styleCompiler.compileComponent(compMeta);
      stylesCompileResult.externalStylesheets.forEach(function(r) {
        externalStylesheetsByModuleUrl.set(r.meta.moduleUrl, r);
      });
      this._resolveStylesCompileResult(stylesCompileResult.componentStylesheet, externalStylesheetsByModuleUrl);
      var parsedAnimations = this._animationParser.parseComponent(compMeta);
      var directives = template.directives.map(function(dir) {
        return _this._metadataResolver.getDirectiveSummary(dir.reference);
      });
      var pipes = template.ngModule.transitiveModule.pipes.map(function(pipe) {
        return _this._metadataResolver.getPipeSummary(pipe.reference);
      });
      var parsedTemplate = this._templateParser.parse(compMeta, compMeta.template.template, directives, pipes, template.ngModule.schemas, identifierName(compMeta.type));
      var compiledAnimations = this._animationCompiler.compile(identifierName(compMeta.type), parsedAnimations);
      var compileResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, variable(stylesCompileResult.componentStylesheet.stylesVar), pipes, compiledAnimations);
      compileResult.dependencies.forEach(function(dep) {
        var depTemplate;
        if (dep instanceof ViewClassDependency) {
          var vfd = (dep);
          depTemplate = _this._assertComponentKnown(vfd.comp.reference, false);
          vfd.placeholder.reference = depTemplate.proxyViewClass;
        } else if (dep instanceof ComponentFactoryDependency$1) {
          var cfd = (dep);
          depTemplate = _this._assertComponentKnown(cfd.comp.reference, true);
          cfd.placeholder.reference = depTemplate.proxyComponentFactory;
        } else if (dep instanceof DirectiveWrapperDependency) {
          var dwd = (dep);
          dwd.placeholder.reference = _this._assertDirectiveWrapper(dwd.dir.reference);
        }
      });
      var statements = (_a = stylesCompileResult.componentStylesheet.statements).concat.apply(_a, compiledAnimations.map(function(ca) {
        return ca.statements;
      })).concat(compileResult.statements);
      var viewClass;
      if (!this._compilerConfig.useJit) {
        viewClass = interpretStatements(statements, compileResult.viewClassVar);
      } else {
        viewClass = jitStatements("/" + identifierName(template.ngModule.type) + "/" + identifierName(template.compType) + "/" + (template.isHost ? 'host' : 'component') + ".ngfactory.js", statements, compileResult.viewClassVar);
      }
      template.compiled(viewClass);
      var _a;
    };
    JitCompiler.prototype._resolveStylesCompileResult = function(result, externalStylesheetsByModuleUrl) {
      var _this = this;
      result.dependencies.forEach(function(dep, i) {
        var nestedCompileResult = externalStylesheetsByModuleUrl.get(dep.moduleUrl);
        var nestedStylesArr = _this._resolveAndEvalStylesCompileResult(nestedCompileResult, externalStylesheetsByModuleUrl);
        dep.valuePlaceholder.reference = nestedStylesArr;
      });
    };
    JitCompiler.prototype._resolveAndEvalStylesCompileResult = function(result, externalStylesheetsByModuleUrl) {
      this._resolveStylesCompileResult(result, externalStylesheetsByModuleUrl);
      if (!this._compilerConfig.useJit) {
        return interpretStatements(result.statements, result.stylesVar);
      } else {
        return jitStatements("/" + result.meta.moduleUrl + ".ngstyle.js", result.statements, result.stylesVar);
      }
    };
    JitCompiler = __decorate$17([CompilerInjectable(), __metadata$17('design:paramtypes', [_angular_core.Injector, CompileMetadataResolver, TemplateParser, StyleCompiler, ViewCompiler, NgModuleCompiler, DirectiveWrapperCompiler, CompilerConfig, AnimationParser])], JitCompiler);
    return JitCompiler;
  }());
  var CompiledTemplate = (function() {
    function CompiledTemplate(isHost, selector, compType, compMeta, ngModule, directives) {
      this.isHost = isHost;
      this.compType = compType;
      this.compMeta = compMeta;
      this.ngModule = ngModule;
      this.directives = directives;
      this._viewClass = null;
      this.isCompiled = false;
      var self = this;
      this.proxyViewClass = function() {
        if (!self._viewClass) {
          throw new Error("Illegal state: CompiledTemplate for " + stringify(self.compType) + " is not compiled yet!");
        }
        return self._viewClass.apply(this, arguments);
      };
      this.proxyComponentFactory = isHost ? new _angular_core.ComponentFactory(selector, this.proxyViewClass, compType.reference) : null;
    }
    CompiledTemplate.prototype.compiled = function(viewClass) {
      this._viewClass = viewClass;
      this.proxyViewClass.prototype = viewClass.prototype;
      this.isCompiled = true;
    };
    return CompiledTemplate;
  }());
  function assertComponent(meta) {
    if (!meta.isComponent) {
      throw new Error("Could not compile '" + identifierName(meta.type) + "' because it is not a component.");
    }
  }
  var ModuleBoundCompiler = (function() {
    function ModuleBoundCompiler(_delegate, _ngModule) {
      this._delegate = _delegate;
      this._ngModule = _ngModule;
    }
    Object.defineProperty(ModuleBoundCompiler.prototype, "_injector", {
      get: function() {
        return this._delegate.injector;
      },
      enumerable: true,
      configurable: true
    });
    ModuleBoundCompiler.prototype.compileModuleSync = function(moduleType) {
      return this._delegate.compileModuleSync(moduleType);
    };
    ModuleBoundCompiler.prototype.compileModuleAsync = function(moduleType) {
      return this._delegate.compileModuleAsync(moduleType);
    };
    ModuleBoundCompiler.prototype.compileModuleAndAllComponentsSync = function(moduleType) {
      return this._delegate.compileModuleAndAllComponentsSync(moduleType);
    };
    ModuleBoundCompiler.prototype.compileModuleAndAllComponentsAsync = function(moduleType) {
      return this._delegate.compileModuleAndAllComponentsAsync(moduleType);
    };
    ModuleBoundCompiler.prototype.getNgContentSelectors = function(component) {
      return this._delegate.getNgContentSelectors(component);
    };
    ModuleBoundCompiler.prototype.clearCache = function() {
      this._delegate.clearCache();
    };
    ModuleBoundCompiler.prototype.clearCacheFor = function(type) {
      this._delegate.clearCacheFor(type);
    };
    return ModuleBoundCompiler;
  }());
  var MessageBundle = (function() {
    function MessageBundle(_htmlParser, _implicitTags, _implicitAttrs) {
      this._htmlParser = _htmlParser;
      this._implicitTags = _implicitTags;
      this._implicitAttrs = _implicitAttrs;
      this._messages = [];
    }
    MessageBundle.prototype.updateFromTemplate = function(html, url, interpolationConfig) {
      var htmlParserResult = this._htmlParser.parse(html, url, true, interpolationConfig);
      if (htmlParserResult.errors.length) {
        return htmlParserResult.errors;
      }
      var i18nParserResult = extractMessages(htmlParserResult.rootNodes, interpolationConfig, this._implicitTags, this._implicitAttrs);
      if (i18nParserResult.errors.length) {
        return i18nParserResult.errors;
      }
      (_a = this._messages).push.apply(_a, i18nParserResult.messages);
      var _a;
    };
    MessageBundle.prototype.getMessages = function() {
      return this._messages;
    };
    MessageBundle.prototype.write = function(serializer) {
      return serializer.write(this._messages);
    };
    return MessageBundle;
  }());
  var Extractor = (function() {
    function Extractor(host, staticSymbolResolver, messageBundle, metadataResolver) {
      this.host = host;
      this.staticSymbolResolver = staticSymbolResolver;
      this.messageBundle = messageBundle;
      this.metadataResolver = metadataResolver;
    }
    Extractor.prototype.extract = function(rootFiles) {
      var _this = this;
      var programSymbols = extractProgramSymbols(this.staticSymbolResolver, rootFiles, this.host);
      var _a = analyzeAndValidateNgModules(programSymbols, this.host, this.metadataResolver),
          ngModuleByPipeOrDirective = _a.ngModuleByPipeOrDirective,
          files = _a.files,
          ngModules = _a.ngModules;
      return Promise.all(ngModules.map(function(ngModule) {
        return _this.metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, false);
      })).then(function() {
        var errors = [];
        files.forEach(function(file) {
          var compMetas = [];
          file.directives.forEach(function(directiveType) {
            var dirMeta = _this.metadataResolver.getDirectiveMetadata(directiveType);
            if (dirMeta && dirMeta.isComponent) {
              compMetas.push(dirMeta);
            }
          });
          compMetas.forEach(function(compMeta) {
            var html = compMeta.template.template;
            var interpolationConfig = InterpolationConfig.fromArray(compMeta.template.interpolation);
            errors.push.apply(errors, _this.messageBundle.updateFromTemplate(html, file.srcUrl, interpolationConfig));
          });
        });
        if (errors.length) {
          throw new Error(errors.map(function(e) {
            return e.toString();
          }).join('\n'));
        }
        return _this.messageBundle;
      });
    };
    Extractor.create = function(host) {
      var htmlParser = new I18NHtmlParser(new HtmlParser());
      var urlResolver = createOfflineCompileUrlResolver();
      var symbolCache = new StaticSymbolCache();
      var summaryResolver = new AotSummaryResolver(host, symbolCache);
      var staticSymbolResolver = new StaticSymbolResolver(host, symbolCache, summaryResolver);
      var staticReflector = new StaticReflector(staticSymbolResolver);
      StaticAndDynamicReflectionCapabilities.install(staticReflector);
      var config = new CompilerConfig({
        genDebugInfo: false,
        defaultEncapsulation: _angular_core.ViewEncapsulation.Emulated,
        logBindingUpdate: false,
        useJit: false
      });
      var normalizer = new DirectiveNormalizer({get: function(url) {
          return host.loadResource(url);
        }}, urlResolver, htmlParser, config);
      var elementSchemaRegistry = new DomElementSchemaRegistry();
      var resolver = new CompileMetadataResolver(new NgModuleResolver(staticReflector), new DirectiveResolver(staticReflector), new PipeResolver(staticReflector), summaryResolver, elementSchemaRegistry, normalizer, staticReflector);
      var messageBundle = new MessageBundle(htmlParser, [], {});
      var extractor = new Extractor(host, staticSymbolResolver, messageBundle, resolver);
      return {
        extractor: extractor,
        staticReflector: staticReflector
      };
    };
    return Extractor;
  }());
  var __decorate$18 = (this && this.__decorate) || function(decorators, target, key, desc) {
    var c = arguments.length,
        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
        d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __metadata$18 = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var _NO_RESOURCE_LOADER = {get: function(url) {
      throw new Error("No ResourceLoader implementation has been provided. Can't read the url \"" + url + "\"");
    }};
  var COMPILER_PROVIDERS = [{
    provide: Reflector,
    useValue: reflector
  }, {
    provide: ReflectorReader,
    useExisting: Reflector
  }, {
    provide: ResourceLoader,
    useValue: _NO_RESOURCE_LOADER
  }, SummaryResolver, Console, Lexer, Parser, HtmlParser, {
    provide: I18NHtmlParser,
    useFactory: function(parser, translations, format) {
      return new I18NHtmlParser(parser, translations, format);
    },
    deps: [HtmlParser, [new _angular_core.Optional(), new _angular_core.Inject(_angular_core.TRANSLATIONS)], [new _angular_core.Optional(), new _angular_core.Inject(_angular_core.TRANSLATIONS_FORMAT)]]
  }, TemplateParser, DirectiveNormalizer, CompileMetadataResolver, DEFAULT_PACKAGE_URL_PROVIDER, StyleCompiler, ViewCompiler, NgModuleCompiler, DirectiveWrapperCompiler, {
    provide: CompilerConfig,
    useValue: new CompilerConfig()
  }, JitCompiler, {
    provide: _angular_core.Compiler,
    useExisting: JitCompiler
  }, DomElementSchemaRegistry, {
    provide: ElementSchemaRegistry,
    useExisting: DomElementSchemaRegistry
  }, UrlResolver, DirectiveResolver, PipeResolver, NgModuleResolver, AnimationParser];
  var JitCompilerFactory = (function() {
    function JitCompilerFactory(defaultOptions) {
      this._defaultOptions = [{
        useDebug: _angular_core.isDevMode(),
        useJit: true,
        defaultEncapsulation: _angular_core.ViewEncapsulation.Emulated
      }].concat(defaultOptions);
    }
    JitCompilerFactory.prototype.createCompiler = function(options) {
      if (options === void 0) {
        options = [];
      }
      var mergedOptions = _mergeOptions(this._defaultOptions.concat(options));
      var injector = _angular_core.ReflectiveInjector.resolveAndCreate([COMPILER_PROVIDERS, {
        provide: CompilerConfig,
        useFactory: function() {
          return new CompilerConfig({
            genDebugInfo: mergedOptions.useDebug,
            useJit: mergedOptions.useJit,
            defaultEncapsulation: mergedOptions.defaultEncapsulation,
            logBindingUpdate: mergedOptions.useDebug
          });
        },
        deps: []
      }, mergedOptions.providers]);
      return injector.get(_angular_core.Compiler);
    };
    JitCompilerFactory.ctorParameters = function() {
      return [{
        type: Array,
        decorators: [{
          type: _angular_core.Inject,
          args: [_angular_core.COMPILER_OPTIONS]
        }]
      }];
    };
    JitCompilerFactory = __decorate$18([CompilerInjectable(), __metadata$18('design:paramtypes', [Array])], JitCompilerFactory);
    return JitCompilerFactory;
  }());
  function _initReflector() {
    reflector.reflectionCapabilities = new ReflectionCapabilities();
  }
  var platformCoreDynamic = _angular_core.createPlatformFactory(_angular_core.platformCore, 'coreDynamic', [{
    provide: _angular_core.COMPILER_OPTIONS,
    useValue: {},
    multi: true
  }, {
    provide: _angular_core.CompilerFactory,
    useClass: JitCompilerFactory
  }, {
    provide: _angular_core.PLATFORM_INITIALIZER,
    useValue: _initReflector,
    multi: true
  }]);
  function _mergeOptions(optionsArr) {
    return {
      useDebug: _lastDefined(optionsArr.map(function(options) {
        return options.useDebug;
      })),
      useJit: _lastDefined(optionsArr.map(function(options) {
        return options.useJit;
      })),
      defaultEncapsulation: _lastDefined(optionsArr.map(function(options) {
        return options.defaultEncapsulation;
      })),
      providers: _mergeArrays(optionsArr.map(function(options) {
        return options.providers;
      }))
    };
  }
  function _lastDefined(args) {
    for (var i = args.length - 1; i >= 0; i--) {
      if (args[i] !== undefined) {
        return args[i];
      }
    }
    return undefined;
  }
  function _mergeArrays(parts) {
    var result = [];
    parts.forEach(function(part) {
      return part && result.push.apply(result, part);
    });
    return result;
  }
  var ImportResolver = (function() {
    function ImportResolver() {}
    ImportResolver.prototype.fileNameToModuleName = function(importedFilePath, containingFilePath) {};
    return ImportResolver;
  }());
  exports.VERSION = VERSION;
  exports.TextAst = TextAst;
  exports.BoundTextAst = BoundTextAst;
  exports.AttrAst = AttrAst;
  exports.BoundElementPropertyAst = BoundElementPropertyAst;
  exports.BoundEventAst = BoundEventAst;
  exports.ReferenceAst = ReferenceAst;
  exports.VariableAst = VariableAst;
  exports.ElementAst = ElementAst;
  exports.EmbeddedTemplateAst = EmbeddedTemplateAst;
  exports.BoundDirectivePropertyAst = BoundDirectivePropertyAst;
  exports.DirectiveAst = DirectiveAst;
  exports.ProviderAst = ProviderAst;
  exports.ProviderAstType = ProviderAstType;
  exports.NgContentAst = NgContentAst;
  exports.PropertyBindingType = PropertyBindingType;
  exports.templateVisitAll = templateVisitAll;
  exports.TEMPLATE_TRANSFORMS = TEMPLATE_TRANSFORMS;
  exports.CompilerConfig = CompilerConfig;
  exports.RenderTypes = RenderTypes;
  exports.CompileAnimationEntryMetadata = CompileAnimationEntryMetadata;
  exports.CompileAnimationStateMetadata = CompileAnimationStateMetadata;
  exports.CompileAnimationStateDeclarationMetadata = CompileAnimationStateDeclarationMetadata;
  exports.CompileAnimationStateTransitionMetadata = CompileAnimationStateTransitionMetadata;
  exports.CompileAnimationMetadata = CompileAnimationMetadata;
  exports.CompileAnimationKeyframesSequenceMetadata = CompileAnimationKeyframesSequenceMetadata;
  exports.CompileAnimationStyleMetadata = CompileAnimationStyleMetadata;
  exports.CompileAnimationAnimateMetadata = CompileAnimationAnimateMetadata;
  exports.CompileAnimationWithStepsMetadata = CompileAnimationWithStepsMetadata;
  exports.CompileAnimationSequenceMetadata = CompileAnimationSequenceMetadata;
  exports.CompileAnimationGroupMetadata = CompileAnimationGroupMetadata;
  exports.identifierName = identifierName;
  exports.identifierModuleUrl = identifierModuleUrl;
  exports.CompileSummaryKind = CompileSummaryKind;
  exports.tokenName = tokenName;
  exports.tokenReference = tokenReference;
  exports.CompileStylesheetMetadata = CompileStylesheetMetadata;
  exports.CompileTemplateMetadata = CompileTemplateMetadata;
  exports.CompileDirectiveMetadata = CompileDirectiveMetadata;
  exports.createHostComponentMeta = createHostComponentMeta;
  exports.CompilePipeMetadata = CompilePipeMetadata;
  exports.CompileNgModuleMetadata = CompileNgModuleMetadata;
  exports.TransitiveCompileNgModuleMetadata = TransitiveCompileNgModuleMetadata;
  exports.ProviderMeta = ProviderMeta;
  exports.createAotCompiler = createAotCompiler;
  exports.AotCompiler = AotCompiler;
  exports.analyzeNgModules = analyzeNgModules;
  exports.analyzeAndValidateNgModules = analyzeAndValidateNgModules;
  exports.extractProgramSymbols = extractProgramSymbols;
  exports.StaticReflector = StaticReflector;
  exports.StaticAndDynamicReflectionCapabilities = StaticAndDynamicReflectionCapabilities;
  exports.StaticSymbol = StaticSymbol;
  exports.StaticSymbolCache = StaticSymbolCache;
  exports.ResolvedStaticSymbol = ResolvedStaticSymbol;
  exports.StaticSymbolResolver = StaticSymbolResolver;
  exports.AotSummaryResolver = AotSummaryResolver;
  exports.SummaryResolver = SummaryResolver;
  exports.JitCompiler = JitCompiler;
  exports.COMPILER_PROVIDERS = COMPILER_PROVIDERS;
  exports.JitCompilerFactory = JitCompilerFactory;
  exports.platformCoreDynamic = platformCoreDynamic;
  exports.createUrlResolverWithoutPackagePrefix = createUrlResolverWithoutPackagePrefix;
  exports.createOfflineCompileUrlResolver = createOfflineCompileUrlResolver;
  exports.DEFAULT_PACKAGE_URL_PROVIDER = DEFAULT_PACKAGE_URL_PROVIDER;
  exports.UrlResolver = UrlResolver;
  exports.getUrlScheme = getUrlScheme;
  exports.ResourceLoader = ResourceLoader;
  exports.DirectiveResolver = DirectiveResolver;
  exports.PipeResolver = PipeResolver;
  exports.NgModuleResolver = NgModuleResolver;
  exports.DEFAULT_INTERPOLATION_CONFIG = DEFAULT_INTERPOLATION_CONFIG;
  exports.InterpolationConfig = InterpolationConfig;
  exports.ElementSchemaRegistry = ElementSchemaRegistry;
  exports.Extractor = Extractor;
  exports.I18NHtmlParser = I18NHtmlParser;
  exports.MessageBundle = MessageBundle;
  exports.Xliff = Xliff;
  exports.Xmb = Xmb;
  exports.Xtb = Xtb;
  exports.DirectiveNormalizer = DirectiveNormalizer;
  exports.TokenType = TokenType;
  exports.Lexer = Lexer;
  exports.Token = Token;
  exports.EOF = EOF;
  exports.isIdentifier = isIdentifier;
  exports.isQuote = isQuote;
  exports.SplitInterpolation = SplitInterpolation;
  exports.TemplateBindingParseResult = TemplateBindingParseResult;
  exports.Parser = Parser;
  exports._ParseAST = _ParseAST;
  exports.ERROR_COLLECTOR_TOKEN = ERROR_COLLECTOR_TOKEN;
  exports.CompileMetadataResolver = CompileMetadataResolver;
  exports.componentModuleUrl = componentModuleUrl;
  exports.ParseTreeResult = ParseTreeResult;
  exports.TreeError = TreeError;
  exports.HtmlParser = HtmlParser;
  exports.NgModuleCompiler = NgModuleCompiler;
  exports.DirectiveWrapperCompiler = DirectiveWrapperCompiler;
  exports.ImportResolver = ImportResolver;
  exports.debugOutputAstAsTypeScript = debugOutputAstAsTypeScript;
  exports.TypeScriptEmitter = TypeScriptEmitter;
  exports.ParseLocation = ParseLocation;
  exports.ParseSourceFile = ParseSourceFile;
  exports.ParseSourceSpan = ParseSourceSpan;
  exports.ParseErrorLevel = ParseErrorLevel;
  exports.ParseError = ParseError;
  exports.DomElementSchemaRegistry = DomElementSchemaRegistry;
  exports.CssSelector = CssSelector;
  exports.SelectorMatcher = SelectorMatcher;
  exports.SelectorListContext = SelectorListContext;
  exports.SelectorContext = SelectorContext;
  exports.StylesCompileDependency = StylesCompileDependency;
  exports.StylesCompileResult = StylesCompileResult;
  exports.CompiledStylesheet = CompiledStylesheet;
  exports.StyleCompiler = StyleCompiler;
  exports.TemplateParseError = TemplateParseError;
  exports.TemplateParseResult = TemplateParseResult;
  exports.TemplateParser = TemplateParser;
  exports.splitClasses = splitClasses;
  exports.createElementCssSelector = createElementCssSelector;
  exports.removeSummaryDuplicates = removeSummaryDuplicates;
  exports.ViewCompiler = ViewCompiler;
  exports.AnimationParser = AnimationParser;
  exports.SyntaxError = SyntaxError;
}));

})();
(function() {
var define = $__System.amdDefine;
(function(global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/compiler'), require('@angular/core'), require('@angular/platform-browser')) : typeof define === 'function' && define.amd ? define("npm:@angular/platform-browser-dynamic/bundles/platform-browser-dynamic.umd.js", ["exports", "npm:@angular/compiler/bundles/compiler.umd.js", "npm:@angular/core/bundles/core.umd.js", "npm:@angular/platform-browser/bundles/platform-browser.umd.js"], factory) : (factory((global.ng = global.ng || {}, global.ng.platformBrowserDynamic = global.ng.platformBrowserDynamic || {}), global.ng.compiler, global.ng.core, global.ng.platformBrowser));
}(this, function(exports, _angular_compiler, _angular_core, _angular_platformBrowser) {
  'use strict';
  var INTERNAL_BROWSER_PLATFORM_PROVIDERS = _angular_platformBrowser.__platform_browser_private__.INTERNAL_BROWSER_PLATFORM_PROVIDERS;
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var ResourceLoaderImpl = (function(_super) {
    __extends(ResourceLoaderImpl, _super);
    function ResourceLoaderImpl() {
      _super.apply(this, arguments);
    }
    ResourceLoaderImpl.prototype.get = function(url) {
      var resolve;
      var reject;
      var promise = new Promise(function(res, rej) {
        resolve = res;
        reject = rej;
      });
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, true);
      xhr.responseType = 'text';
      xhr.onload = function() {
        var response = xhr.response || xhr.responseText;
        var status = xhr.status === 1223 ? 204 : xhr.status;
        if (status === 0) {
          status = response ? 200 : 0;
        }
        if (200 <= status && status <= 300) {
          resolve(response);
        } else {
          reject("Failed to load " + url);
        }
      };
      xhr.onerror = function() {
        reject("Failed to load " + url);
      };
      xhr.send();
      return promise;
    };
    ResourceLoaderImpl.decorators = [{type: _angular_core.Injectable}];
    ResourceLoaderImpl.ctorParameters = function() {
      return [];
    };
    return ResourceLoaderImpl;
  }(_angular_compiler.ResourceLoader));
  var INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS = [INTERNAL_BROWSER_PLATFORM_PROVIDERS, {
    provide: _angular_core.COMPILER_OPTIONS,
    useValue: {providers: [{
        provide: _angular_compiler.ResourceLoader,
        useClass: ResourceLoaderImpl
      }]},
    multi: true
  }];
  var globalScope;
  if (typeof window === 'undefined') {
    if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
      globalScope = self;
    } else {
      globalScope = global;
    }
  } else {
    globalScope = window;
  }
  var _global = globalScope;
  _global.assert = function assert(condition) {};
  var __extends$1 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var CachedResourceLoader = (function(_super) {
    __extends$1(CachedResourceLoader, _super);
    function CachedResourceLoader() {
      _super.call(this);
      this._cache = _global.$templateCache;
      if (this._cache == null) {
        throw new Error('CachedResourceLoader: Template cache was not found in $templateCache.');
      }
    }
    CachedResourceLoader.prototype.get = function(url) {
      if (this._cache.hasOwnProperty(url)) {
        return Promise.resolve(this._cache[url]);
      } else {
        return Promise.reject('CachedResourceLoader: Did not find cached template for ' + url);
      }
    };
    return CachedResourceLoader;
  }(_angular_compiler.ResourceLoader));
  var __platform_browser_dynamic_private__ = {
    INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS: INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS,
    ResourceLoaderImpl: ResourceLoaderImpl
  };
  var VERSION = new _angular_core.Version('2.4.2');
  var RESOURCE_CACHE_PROVIDER = [{
    provide: _angular_compiler.ResourceLoader,
    useClass: CachedResourceLoader
  }];
  var platformBrowserDynamic = _angular_core.createPlatformFactory(_angular_compiler.platformCoreDynamic, 'browserDynamic', INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);
  exports.RESOURCE_CACHE_PROVIDER = RESOURCE_CACHE_PROVIDER;
  exports.platformBrowserDynamic = platformBrowserDynamic;
  exports.VERSION = VERSION;
  exports.__platform_browser_dynamic_private__ = __platform_browser_dynamic_private__;
}));

})();
$__System.registerDynamic("npm:ng-semantic/ng-semantic/menu/menu.js", ["npm:@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var SemanticMenuComponent = function () {
        function SemanticMenuComponent() {
            this.logoClass = "logo";
        }
        SemanticMenuComponent.prototype.ngAfterViewInit = function () {
            Array.from(this.innerElement.nativeElement.childNodes).filter(function (element) {
                return element.nodeName === "SM-MENU";
            }).map(function (element) {
                return element.firstElementChild.classList.remove("ui");
            });
        };
        __decorate([core_1.Input(), __metadata('design:type', String)], SemanticMenuComponent.prototype, "logo", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], SemanticMenuComponent.prototype, "class", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], SemanticMenuComponent.prototype, "logoClass", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], SemanticMenuComponent.prototype, "title", void 0);
        __decorate([core_1.ViewChild("innerElement"), __metadata('design:type', core_1.ElementRef)], SemanticMenuComponent.prototype, "innerElement", void 0);
        SemanticMenuComponent = __decorate([core_1.Component({
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            selector: "sm-menu",
            template: "<div class=\"ui menu {{class}}\" #innerElement>\n<a href=\"#/\" *ngIf=\"logo\" class=\"header item\">\n    <img class=\"{{logoClass}}\" alt=\"{{title}}\" src=\"{{logo}}\">\n</a>\n\n<a href=\"#/\" *ngIf=\"title && !logo\" class=\"header item\">\n    {{title}}\n</a>\n\n<ng-content></ng-content>\n</div>\n"
        }), __metadata('design:paramtypes', [])], SemanticMenuComponent);
        return SemanticMenuComponent;
    }();
    exports.SemanticMenuComponent = SemanticMenuComponent;
    return module.exports;
});
$__System.registerDynamic("npm:ng-semantic/ng-semantic/message/message.js", ["npm:@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var SemanticMessageComponent = function () {
        function SemanticMessageComponent(renderer) {
            this.renderer = renderer;
        }
        SemanticMessageComponent.prototype.close = function () {
            this.renderer.detachView([this.message.nativeElement]);
        };
        __decorate([core_1.Input(), __metadata('design:type', String)], SemanticMessageComponent.prototype, "icon", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], SemanticMessageComponent.prototype, "class", void 0);
        __decorate([core_1.ViewChild("message"), __metadata('design:type', core_1.ElementRef)], SemanticMessageComponent.prototype, "message", void 0);
        SemanticMessageComponent = __decorate([core_1.Component({
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            encapsulation: core_1.ViewEncapsulation.None,
            selector: "sm-message",
            styles: ["sm-message { display: block; margin: 1em 0; } message-header {display: block}"],
            template: "<div class=\"ui message {{class}}\" [ngClass]=\"{'icon': icon}\" #message>\n<i class=\"close icon\" (click)=\"close()\"></i>\n<i *ngIf=\"icon\" class=\"icon {{icon}}\"></i>\n  <div class=\"content\">\n    <div class=\"header\">\n      <ng-content select=\"message-header\"></ng-content>\n    </div>\n    <ng-content select=\"message-content\"></ng-content>\n  </div>\n</div>"
        }), __metadata('design:paramtypes', [core_1.Renderer])], SemanticMessageComponent);
        return SemanticMessageComponent;
    }();
    exports.SemanticMessageComponent = SemanticMessageComponent;
    return module.exports;
});
$__System.registerDynamic("npm:ng-semantic/ng-semantic/popup/tooltip.js", ["npm:@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var SMTooltipDirective = function () {
        function SMTooltipDirective(element) {
            this.element = element;
        }
        SMTooltipDirective.prototype.ngOnInit = function () {
            this.element.element.nativeElement.setAttribute("data-position", this.smDirPosition || "top center");
            this.element.element.nativeElement.setAttribute("data-tooltip", this.smDirTooltip);
        };
        __decorate([core_1.Input(), __metadata('design:type', String)], SMTooltipDirective.prototype, "smDirTooltip", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], SMTooltipDirective.prototype, "smDirPosition", void 0);
        SMTooltipDirective = __decorate([core_1.Directive({
            selector: "[smDirTooltip]"
        }), __metadata('design:paramtypes', [core_1.ViewContainerRef])], SMTooltipDirective);
        return SMTooltipDirective;
    }();
    exports.SMTooltipDirective = SMTooltipDirective;
    return module.exports;
});
$__System.registerDynamic("npm:ng-semantic/ng-semantic/popup/popup.js", ["npm:@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var SemanticPopupComponent = function () {
        function SemanticPopupComponent() {
            this.visible = false;
        }
        SemanticPopupComponent.prototype.show = function (element, data) {
            var _this = this;
            if (data === void 0) {
                data = {};
            }
            if (!this.visible) {
                this.visible = true;
                this.element = element.target;
                var options = Object.assign({
                    closable: true,
                    exclusive: true,
                    lastResort: true,
                    on: "click",
                    onHide: function () {
                        return _this.hide();
                    },
                    popup: this.popup.nativeElement,
                    position: "bottom center",
                    preserve: true
                }, data);
                jQuery(this.element).popup(options).popup("show");
            }
        };
        SemanticPopupComponent.prototype.hide = function () {
            if (this.visible && this.element) {
                this.visible = false;
                jQuery(this.element).popup("hide");
            }
        };
        __decorate([core_1.ViewChild("popup"), __metadata('design:type', core_1.ElementRef)], SemanticPopupComponent.prototype, "popup", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], SemanticPopupComponent.prototype, "class", void 0);
        SemanticPopupComponent = __decorate([core_1.Component({
            selector: "sm-popup",
            template: "<div class=\"ui popup very wide {{class}}\" #popup>\n    <div class=\"content\">\n        <ng-content></ng-content>\n    </div>\n</div>"
        }), __metadata('design:paramtypes', [])], SemanticPopupComponent);
        return SemanticPopupComponent;
    }();
    exports.SemanticPopupComponent = SemanticPopupComponent;
    return module.exports;
});
$__System.registerDynamic("npm:ng-semantic/ng-semantic/modal/modal.js", ["npm:@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var SemanticModalComponent = function () {
        function SemanticModalComponent() {}
        SemanticModalComponent.prototype.show = function (data) {
            jQuery(this.modal.nativeElement).modal(data || {}).modal("toggle");
        };
        SemanticModalComponent.prototype.hide = function () {
            jQuery(this.modal.nativeElement).modal("hide");
        };
        __decorate([core_1.Input(), __metadata('design:type', String)], SemanticModalComponent.prototype, "class", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], SemanticModalComponent.prototype, "title", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], SemanticModalComponent.prototype, "icon", void 0);
        __decorate([core_1.ViewChild("modal"), __metadata('design:type', core_1.ElementRef)], SemanticModalComponent.prototype, "modal", void 0);
        SemanticModalComponent = __decorate([core_1.Component({
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            selector: "sm-modal",
            template: "<div class=\"ui modal {{class}}\" #modal>\n    <i class=\"close icon\"></i>\n    <div [ngClass]=\"{'icon': icon}\" class=\"ui header\">\n        <i *ngIf=\"icon\" class=\"icon {{icon}}\"></i>\n        {{title}}\n    </div>\n    <div class=\"content\">\n        <ng-content select=\"modal-content\"></ng-content>\n    </div>\n    <div class=\"actions\">\n        <ng-content select=\"modal-actions\"></ng-content>\n    </div>\n</div>"
        }), __metadata('design:paramtypes', [])], SemanticModalComponent);
        return SemanticModalComponent;
    }();
    exports.SemanticModalComponent = SemanticModalComponent;
    return module.exports;
});
$__System.registerDynamic("npm:ng-semantic/ng-semantic/segment/segment.js", ["npm:@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var SemanticSegmentComponent = function () {
        function SemanticSegmentComponent() {}
        __decorate([core_1.Input("class"), __metadata('design:type', String)], SemanticSegmentComponent.prototype, "class", void 0);
        SemanticSegmentComponent = __decorate([core_1.Component({
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            selector: "sm-segment",
            template: "<div class=\"ui segment {{class}}\">\n  <p><ng-content></ng-content></p>\n</div>"
        }), __metadata('design:paramtypes', [])], SemanticSegmentComponent);
        return SemanticSegmentComponent;
    }();
    exports.SemanticSegmentComponent = SemanticSegmentComponent;
    return module.exports;
});
$__System.registerDynamic("npm:ng-semantic/ng-semantic/list/list.js", ["npm:@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var SemanticListComponent = function () {
        function SemanticListComponent() {}
        SemanticListComponent.prototype.ngAfterViewInit = function () {
            Array.from(this.innerElement.nativeElement.childNodes).filter(function (element) {
                return element.nodeName === "SM-LIST";
            }).map(function (element) {
                return element.firstElementChild.classList.remove("ui");
            });
        };
        __decorate([core_1.Input(), __metadata('design:type', String)], SemanticListComponent.prototype, "class", void 0);
        __decorate([core_1.ViewChild("innerElement"), __metadata('design:type', core_1.ElementRef)], SemanticListComponent.prototype, "innerElement", void 0);
        SemanticListComponent = __decorate([core_1.Component({
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            selector: "sm-list",
            template: "\n<div class=\"ui list {{class}}\" #innerElement>\n<ng-content></ng-content>\n</div>\n"
        }), __metadata('design:paramtypes', [])], SemanticListComponent);
        return SemanticListComponent;
    }();
    exports.SemanticListComponent = SemanticListComponent;
    return module.exports;
});
$__System.registerDynamic("npm:ng-semantic/ng-semantic/button/button.js", ["npm:@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var SemanticButtonComponent = function () {
        function SemanticButtonComponent() {
            this.disabled = false;
        }
        __decorate([core_1.Input("class"), __metadata('design:type', String)], SemanticButtonComponent.prototype, "class", void 0);
        __decorate([core_1.Input("icon"), __metadata('design:type', String)], SemanticButtonComponent.prototype, "icon", void 0);
        __decorate([core_1.Input("disabled"), __metadata('design:type', Boolean)], SemanticButtonComponent.prototype, "disabled", void 0);
        SemanticButtonComponent = __decorate([core_1.Component({
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            selector: "sm-button",
            template: "<button [ngClass]=\"{icon: icon}\" [attr.disabled]=\"disabled ? true : null\" class=\"ui {{class}} button\">\n  <i *ngIf=\"icon\" class=\"{{icon}} icon\"></i>\n    <ng-content></ng-content>\n</button>"
        }), __metadata('design:paramtypes', [])], SemanticButtonComponent);
        return SemanticButtonComponent;
    }();
    exports.SemanticButtonComponent = SemanticButtonComponent;
    return module.exports;
});
$__System.registerDynamic("npm:ng-semantic/ng-semantic/item/item.js", ["npm:@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var SemanticItemComponent = function () {
        function SemanticItemComponent() {}
        SemanticItemComponent.prototype.ngAfterViewInit = function () {
            this.innerItemElement.nativeElement.parentElement.classList.add("item");
        };
        __decorate([core_1.Input(), __metadata('design:type', String)], SemanticItemComponent.prototype, "icon", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], SemanticItemComponent.prototype, "header", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], SemanticItemComponent.prototype, "image", void 0);
        __decorate([core_1.ViewChild("innerItemElement"), __metadata('design:type', core_1.ElementRef)], SemanticItemComponent.prototype, "innerItemElement", void 0);
        SemanticItemComponent = __decorate([core_1.Component({
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            selector: "a[sm-item], sm-item",
            template: "<i *ngIf=\"icon\" class=\"{{icon}} icon\"></i>\n<img *ngIf=\"image\" class=\"ui avatar image\" src=\"{{image}}\">\n<div class=\"content\" #innerItemElement>\n  <div *ngIf=\"header\" class=\"header\">\n    {{header}}\n  </div>\n  <ng-content></ng-content>\n</div>"
        }), __metadata('design:paramtypes', [])], SemanticItemComponent);
        return SemanticItemComponent;
    }();
    exports.SemanticItemComponent = SemanticItemComponent;
    return module.exports;
});
$__System.registerDynamic("npm:ng-semantic/ng-semantic/visibility/visibility.js", ["npm:@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var SMVisibilityDirective = function () {
        function SMVisibilityDirective(element) {
            this.element = element;
            this.onTopVisible = new core_1.EventEmitter();
            this.onTopPassed = new core_1.EventEmitter();
            this.onUpdate = new core_1.EventEmitter();
        }
        SMVisibilityDirective.prototype.ngOnInit = function () {
            var _this = this;
            if (this.element.element.nativeElement) {
                jQuery(this.element.element.nativeElement).visibility({
                    onTopPassed: function (calculations) {
                        return _this.onTopPassed.emit(calculations);
                    },
                    onTopVisible: function (calculations) {
                        return _this.onTopVisible.emit(calculations);
                    },
                    onUpdate: function (calculations) {
                        return _this.onUpdate.emit(calculations);
                    }
                });
            }
        };
        __decorate([core_1.Input(), __metadata('design:type', Object)], SMVisibilityDirective.prototype, "smDirVisibility", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], SMVisibilityDirective.prototype, "onTopVisible", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], SMVisibilityDirective.prototype, "onTopPassed", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], SMVisibilityDirective.prototype, "onUpdate", void 0);
        SMVisibilityDirective = __decorate([core_1.Directive({
            selector: "[smDirVisibility]"
        }), __metadata('design:paramtypes', [core_1.ViewContainerRef])], SMVisibilityDirective);
        return SMVisibilityDirective;
    }();
    exports.SMVisibilityDirective = SMVisibilityDirective;
    var SMDeviceVisibilityDirective = function () {
        function SMDeviceVisibilityDirective(element) {
            this.element = element;
        }
        SMDeviceVisibilityDirective.prototype.ngOnInit = function () {
            (_a = this.element.element.nativeElement.classList).add.apply(_a, this.smDeviceVisibility.split(" "));
            var _a;
        };
        __decorate([core_1.Input(), __metadata('design:type', String)], SMDeviceVisibilityDirective.prototype, "smDeviceVisibility", void 0);
        SMDeviceVisibilityDirective = __decorate([core_1.Directive({
            selector: "[smDeviceVisibility]"
        }), __metadata('design:paramtypes', [core_1.ViewContainerRef])], SMDeviceVisibilityDirective);
        return SMDeviceVisibilityDirective;
    }();
    exports.SMDeviceVisibilityDirective = SMDeviceVisibilityDirective;
    return module.exports;
});
$__System.registerDynamic("npm:ng-semantic/ng-semantic/dropdown/dropdown.js", ["npm:@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var SemanticDropdownComponent = function () {
        function SemanticDropdownComponent() {
            this.options = {};
            this.onChange = new core_1.EventEmitter();
        }
        SemanticDropdownComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            var options = Object.assign({
                onChange: function (value, a, b) {
                    if (b.length) {
                        _this.onChange.emit(b[0].innerText);
                    }
                }
            }, this.options);
            jQuery(this.dropdown.nativeElement).dropdown(options);
        };
        __decorate([core_1.Input(), __metadata('design:type', String)], SemanticDropdownComponent.prototype, "class", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], SemanticDropdownComponent.prototype, "title", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Array)], SemanticDropdownComponent.prototype, "items", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], SemanticDropdownComponent.prototype, "options", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], SemanticDropdownComponent.prototype, "onChange", void 0);
        __decorate([core_1.ViewChild("dropdown"), __metadata('design:type', core_1.ElementRef)], SemanticDropdownComponent.prototype, "dropdown", void 0);
        SemanticDropdownComponent = __decorate([core_1.Component({
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            selector: "sm-dropdown",
            template: "\n    <div class=\"ui {{class}} dropdown item\" #dropdown>\n    <div *ngIf=\"title\" class=\"text\">{{title}}</div>\n    <i class=\"dropdown icon\"></i>\n    <div class=\"menu\">\n        <ng-content></ng-content>\n    </div>\n  </div>\n"
        }), __metadata('design:paramtypes', [])], SemanticDropdownComponent);
        return SemanticDropdownComponent;
    }();
    exports.SemanticDropdownComponent = SemanticDropdownComponent;
    return module.exports;
});
$__System.registerDynamic("npm:ng-semantic/ng-semantic/select/select.js", ["npm:@angular/core/bundles/core.umd.js", "npm:@angular/forms/bundles/forms.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var forms_1 = $__require("npm:@angular/forms/bundles/forms.umd.js");
    var SemanticSelectComponent = function () {
        function SemanticSelectComponent() {
            this.control = new forms_1.FormControl();
            this.options = {};
            this.modelChange = new core_1.EventEmitter();
            this.onChange = new core_1.EventEmitter();
            this.multiple = false;
        }
        Object.defineProperty(SemanticSelectComponent.prototype, "model", {
            set: function (data) {
                var _this = this;
                if (data) {
                    setTimeout(function () {
                        jQuery(_this.select.nativeElement).dropdown("set selected", data);
                    }, 1);
                }
            },
            enumerable: true,
            configurable: true
        });
        SemanticSelectComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            if (typeof this.class === "string" && this.class.search("multiple") >= 0) {
                this.select.nativeElement.setAttribute("multiple", true);
            }
            var options = Object.assign({
                onChange: function (value) {
                    _this.onChange.emit(value);
                    _this.modelChange.emit(value);
                },
                onHide: function () {
                    return _this.control.markAsTouched();
                }
            }, this.options);
            jQuery(this.select.nativeElement).dropdown(options);
        };
        __decorate([core_1.Input(), __metadata('design:type', forms_1.FormControl)], SemanticSelectComponent.prototype, "control", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], SemanticSelectComponent.prototype, "class", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], SemanticSelectComponent.prototype, "label", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], SemanticSelectComponent.prototype, "options", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], SemanticSelectComponent.prototype, "placeholder", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], SemanticSelectComponent.prototype, "modelChange", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], SemanticSelectComponent.prototype, "onChange", void 0);
        __decorate([core_1.ViewChild("select"), __metadata('design:type', core_1.ElementRef)], SemanticSelectComponent.prototype, "select", void 0);
        __decorate([core_1.Input("model"), __metadata('design:type', Object), __metadata('design:paramtypes', [Object])], SemanticSelectComponent.prototype, "model", null);
        SemanticSelectComponent = __decorate([core_1.Component({
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            selector: "sm-select",
            template: "<div class=\"field\" [ngClass]=\"{error: (!control?.valid && control?.touched) }\">\n  <label *ngIf=\"label\">{{label}}</label>\n<select [formControl]=\"control\" class=\"ui {{class}} dropdown\"  #select>\n    <option value=\"\">{{placeholder}}</option>\n    <ng-content></ng-content>\n</select>\n</div>"
        }), __metadata('design:paramtypes', [])], SemanticSelectComponent);
        return SemanticSelectComponent;
    }();
    exports.SemanticSelectComponent = SemanticSelectComponent;
    return module.exports;
});
$__System.registerDynamic('npm:rxjs/scheduler/async.js', ['npm:rxjs/scheduler/AsyncAction.js', 'npm:rxjs/scheduler/AsyncScheduler.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var AsyncAction_1 = $__require('npm:rxjs/scheduler/AsyncAction.js');
  var AsyncScheduler_1 = $__require('npm:rxjs/scheduler/AsyncScheduler.js');
  exports.async = new AsyncScheduler_1.AsyncScheduler(AsyncAction_1.AsyncAction);
  

  return module.exports;
});
$__System.registerDynamic('npm:rxjs/operator/debounceTime.js', ['npm:rxjs/Subscriber.js', 'npm:rxjs/scheduler/async.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('npm:rxjs/Subscriber.js');
    var async_1 = $__require('npm:rxjs/scheduler/async.js');
    /**
     * Emits a value from the source Observable only after a particular time span
     * has passed without another source emission.
     *
     * <span class="informal">It's like {@link delay}, but passes only the most
     * recent value from each burst of emissions.</span>
     *
     * <img src="./img/debounceTime.png" width="100%">
     *
     * `debounceTime` delays values emitted by the source Observable, but drops
     * previous pending delayed emissions if a new value arrives on the source
     * Observable. This operator keeps track of the most recent value from the
     * source Observable, and emits that only when `dueTime` enough time has passed
     * without any other value appearing on the source Observable. If a new value
     * appears before `dueTime` silence occurs, the previous value will be dropped
     * and will not be emitted on the output Observable.
     *
     * This is a rate-limiting operator, because it is impossible for more than one
     * value to be emitted in any time window of duration `dueTime`, but it is also
     * a delay-like operator since output emissions do not occur at the same time as
     * they did on the source Observable. Optionally takes a {@link IScheduler} for
     * managing timers.
     *
     * @example <caption>Emit the most recent click after a burst of clicks</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = clicks.debounceTime(1000);
     * result.subscribe(x => console.log(x));
     *
     * @see {@link auditTime}
     * @see {@link debounce}
     * @see {@link delay}
     * @see {@link sampleTime}
     * @see {@link throttleTime}
     *
     * @param {number} dueTime The timeout duration in milliseconds (or the time
     * unit determined internally by the optional `scheduler`) for the window of
     * time required to wait for emission silence before emitting the most recent
     * source value.
     * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for
     * managing the timers that handle the timeout for each value.
     * @return {Observable} An Observable that delays the emissions of the source
     * Observable by the specified `dueTime`, and may drop some values if they occur
     * too frequently.
     * @method debounceTime
     * @owner Observable
     */
    function debounceTime(dueTime, scheduler) {
        if (scheduler === void 0) {
            scheduler = async_1.async;
        }
        return this.lift(new DebounceTimeOperator(dueTime, scheduler));
    }
    exports.debounceTime = debounceTime;
    var DebounceTimeOperator = function () {
        function DebounceTimeOperator(dueTime, scheduler) {
            this.dueTime = dueTime;
            this.scheduler = scheduler;
        }
        DebounceTimeOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));
        };
        return DebounceTimeOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var DebounceTimeSubscriber = function (_super) {
        __extends(DebounceTimeSubscriber, _super);
        function DebounceTimeSubscriber(destination, dueTime, scheduler) {
            _super.call(this, destination);
            this.dueTime = dueTime;
            this.scheduler = scheduler;
            this.debouncedSubscription = null;
            this.lastValue = null;
            this.hasValue = false;
        }
        DebounceTimeSubscriber.prototype._next = function (value) {
            this.clearDebounce();
            this.lastValue = value;
            this.hasValue = true;
            this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));
        };
        DebounceTimeSubscriber.prototype._complete = function () {
            this.debouncedNext();
            this.destination.complete();
        };
        DebounceTimeSubscriber.prototype.debouncedNext = function () {
            this.clearDebounce();
            if (this.hasValue) {
                this.destination.next(this.lastValue);
                this.lastValue = null;
                this.hasValue = false;
            }
        };
        DebounceTimeSubscriber.prototype.clearDebounce = function () {
            var debouncedSubscription = this.debouncedSubscription;
            if (debouncedSubscription !== null) {
                this.remove(debouncedSubscription);
                debouncedSubscription.unsubscribe();
                this.debouncedSubscription = null;
            }
        };
        return DebounceTimeSubscriber;
    }(Subscriber_1.Subscriber);
    function dispatchNext(subscriber) {
        subscriber.debouncedNext();
    }
    

    return module.exports;
});
$__System.registerDynamic('npm:rxjs/add/operator/debounceTime.js', ['npm:rxjs/Observable.js', 'npm:rxjs/operator/debounceTime.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('npm:rxjs/Observable.js');
  var debounceTime_1 = $__require('npm:rxjs/operator/debounceTime.js');
  Observable_1.Observable.prototype.debounceTime = debounceTime_1.debounceTime;
  

  return module.exports;
});
$__System.registerDynamic('npm:rxjs/operator/distinctUntilChanged.js', ['npm:rxjs/Subscriber.js', 'npm:rxjs/util/tryCatch.js', 'npm:rxjs/util/errorObject.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('npm:rxjs/Subscriber.js');
    var tryCatch_1 = $__require('npm:rxjs/util/tryCatch.js');
    var errorObject_1 = $__require('npm:rxjs/util/errorObject.js');
    /* tslint:disable:max-line-length */
    /**
     * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.
     *
     * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.
     *
     * If a comparator function is not provided, an equality check is used by default.
     *
     * @example <caption>A simple example with numbers</caption>
     * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)
     *   .distinctUntilChanged()
     *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4
     *
     * @example <caption>An example using a compare function</caption>
     * interface Person {
     *    age: number,
     *    name: string
     * }
     *
     * Observable.of<Person>(
     *     { age: 4, name: 'Foo'},
     *     { age: 7, name: 'Bar'},
     *     { age: 5, name: 'Foo'})
     *     { age: 6, name: 'Foo'})
     *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)
     *     .subscribe(x => console.log(x));
     *
     * // displays:
     * // { age: 4, name: 'Foo' }
     * // { age: 7, name: 'Bar' }
     * // { age: 5, name: 'Foo' }
     *
     * @see {@link distinct}
     * @see {@link distinctUntilKeyChanged}
     *
     * @param {function} [compare] optional comparison function called to test if an item is distinct from the previous item in the source.
     * @return {Observable} an Observable that emits items from the source Observable with distinct values.
     * @method distinctUntilChanged
     * @owner Observable
     */
    function distinctUntilChanged(compare, keySelector) {
        return this.lift(new DistinctUntilChangedOperator(compare, keySelector));
    }
    exports.distinctUntilChanged = distinctUntilChanged;
    var DistinctUntilChangedOperator = function () {
        function DistinctUntilChangedOperator(compare, keySelector) {
            this.compare = compare;
            this.keySelector = keySelector;
        }
        DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));
        };
        return DistinctUntilChangedOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var DistinctUntilChangedSubscriber = function (_super) {
        __extends(DistinctUntilChangedSubscriber, _super);
        function DistinctUntilChangedSubscriber(destination, compare, keySelector) {
            _super.call(this, destination);
            this.keySelector = keySelector;
            this.hasKey = false;
            if (typeof compare === 'function') {
                this.compare = compare;
            }
        }
        DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {
            return x === y;
        };
        DistinctUntilChangedSubscriber.prototype._next = function (value) {
            var keySelector = this.keySelector;
            var key = value;
            if (keySelector) {
                key = tryCatch_1.tryCatch(this.keySelector)(value);
                if (key === errorObject_1.errorObject) {
                    return this.destination.error(errorObject_1.errorObject.e);
                }
            }
            var result = false;
            if (this.hasKey) {
                result = tryCatch_1.tryCatch(this.compare)(this.key, key);
                if (result === errorObject_1.errorObject) {
                    return this.destination.error(errorObject_1.errorObject.e);
                }
            } else {
                this.hasKey = true;
            }
            if (Boolean(result) === false) {
                this.key = key;
                this.destination.next(value);
            }
        };
        return DistinctUntilChangedSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('npm:rxjs/add/operator/distinctUntilChanged.js', ['npm:rxjs/Observable.js', 'npm:rxjs/operator/distinctUntilChanged.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('npm:rxjs/Observable.js');
  var distinctUntilChanged_1 = $__require('npm:rxjs/operator/distinctUntilChanged.js');
  Observable_1.Observable.prototype.distinctUntilChanged = distinctUntilChanged_1.distinctUntilChanged;
  

  return module.exports;
});
$__System.registerDynamic("npm:ng-semantic/ng-semantic/search/search.js", ["npm:@angular/core/bundles/core.umd.js", "npm:@angular/forms/bundles/forms.umd.js", "npm:rxjs/add/operator/debounceTime.js", "npm:rxjs/add/operator/distinctUntilChanged.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var forms_1 = $__require("npm:@angular/forms/bundles/forms.umd.js");
    $__require("npm:rxjs/add/operator/debounceTime.js");
    $__require("npm:rxjs/add/operator/distinctUntilChanged.js");
    var SemanticSearchComponent = function () {
        function SemanticSearchComponent() {
            this.debounce = 0;
            this.onSearch = new core_1.EventEmitter();
            this.searchControl = new forms_1.FormControl();
        }
        SemanticSearchComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.searchControl.valueChanges.distinctUntilChanged().debounceTime(this.debounce).subscribe(function (data) {
                return _this.onSearch.emit(data);
            });
        };
        __decorate([core_1.Input(), __metadata('design:type', String)], SemanticSearchComponent.prototype, "class", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], SemanticSearchComponent.prototype, "icon", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], SemanticSearchComponent.prototype, "loading", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], SemanticSearchComponent.prototype, "debounce", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], SemanticSearchComponent.prototype, "placeholder", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], SemanticSearchComponent.prototype, "onSearch", void 0);
        SemanticSearchComponent = __decorate([core_1.Component({
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            selector: "sm-search",
            template: "<div class=\"ui search\" [ngClass]=\"{'loading': loading}\">\n <div class=\"ui icon input {{class}} \">\n  <input class=\"prompt\" [formControl]=\"searchControl\" type=\"text\" [attr.placeholder]=\"placeholder\">\n  <i *ngIf=\"icon\" class=\"search icon\"></i>\n  </div>\n  <div class=\"results\"></div>\n</div>"
        }), __metadata('design:paramtypes', [])], SemanticSearchComponent);
        return SemanticSearchComponent;
    }();
    exports.SemanticSearchComponent = SemanticSearchComponent;
    return module.exports;
});
$__System.registerDynamic("npm:ng-semantic/ng-semantic/loader/loader.js", ["npm:@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var SemanticLoaderComponent = function () {
        function SemanticLoaderComponent() {
            this.complete = false;
        }
        __decorate([core_1.Input("class"), __metadata('design:type', String)], SemanticLoaderComponent.prototype, "class", void 0);
        __decorate([core_1.Input("text"), __metadata('design:type', String)], SemanticLoaderComponent.prototype, "text", void 0);
        __decorate([core_1.Input("complete"), __metadata('design:type', Boolean)], SemanticLoaderComponent.prototype, "complete", void 0);
        SemanticLoaderComponent = __decorate([core_1.Component({
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            selector: "sm-loader",
            template: "<div *ngIf=\"!complete\" class=\"ui active dimmer {{class}}\">\n    <div [ngClass]=\"{text: text}\" class=\"ui loader\">{{text}}</div>\n  </div>"
        }), __metadata('design:paramtypes', [])], SemanticLoaderComponent);
        return SemanticLoaderComponent;
    }();
    exports.SemanticLoaderComponent = SemanticLoaderComponent;
    return module.exports;
});
$__System.registerDynamic("npm:ng-semantic/ng-semantic/card/card.js", ["npm:@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var SemanticCardComponent = function () {
        function SemanticCardComponent() {}
        __decorate([core_1.Input(), __metadata('design:type', String)], SemanticCardComponent.prototype, "class", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], SemanticCardComponent.prototype, "image", void 0);
        SemanticCardComponent = __decorate([core_1.Component({
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            selector: "sm-card",
            template: "<div class=\"ui {{class}}\">\n<div class=\"image\" *ngIf=\"image\">\n    <img src=\"{{image}}\">\n  </div>\n  <div class=\"content\">\n    <ng-content select=\"card-title\"></ng-content>\n    <div class=\"meta\">\n      <ng-content select=\"card-subtitle\"></ng-content>\n    </div>\n    <div class=\"description\">\n      <ng-content select=\"card-content\"></ng-content>\n    </div>\n  </div>\n  <div class=\"extra content\">\n    <ng-content select=\"card-extra\"></ng-content>\n  </div>\n  <ng-content></ng-content>\n</div>"
        }), __metadata('design:paramtypes', [])], SemanticCardComponent);
        return SemanticCardComponent;
    }();
    exports.SemanticCardComponent = SemanticCardComponent;
    var SemanticCardsComponent = function () {
        function SemanticCardsComponent() {}
        __decorate([core_1.Input(), __metadata('design:type', String)], SemanticCardsComponent.prototype, "class", void 0);
        SemanticCardsComponent = __decorate([core_1.Component({
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            selector: "sm-cards",
            template: "<div class=\"ui cards {{class}}\"><ng-content></ng-content></div>"
        }), __metadata('design:paramtypes', [])], SemanticCardsComponent);
        return SemanticCardsComponent;
    }();
    exports.SemanticCardsComponent = SemanticCardsComponent;
    return module.exports;
});
$__System.registerDynamic("npm:ng-semantic/ng-semantic/input/input.js", ["npm:@angular/core/bundles/core.umd.js", "npm:@angular/forms/bundles/forms.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var forms_1 = $__require("npm:@angular/forms/bundles/forms.umd.js");
    var SemanticInputComponent = function () {
        function SemanticInputComponent(viewRef) {
            this.viewRef = viewRef;
            this.type = "text";
            this.control = new forms_1.FormControl();
            this.modelChange = new core_1.EventEmitter();
            this.isInsideForm = false;
        }
        SemanticInputComponent.prototype.ngOnInit = function () {
            if (this.inForm(this.viewRef.element.nativeElement, "form")) {
                this.isInsideForm = true;
            }
        };
        SemanticInputComponent.prototype.inForm = function (el, classname) {
            if (el.parentNode) {
                if (el.parentNode.nodeName.toLowerCase() === classname.toLowerCase()) {
                    return !!el.parentNode;
                } else {
                    return this.inForm(el.parentNode, classname);
                }
            } else {
                return false;
            }
        };
        __decorate([core_1.Input(), __metadata('design:type', String)], SemanticInputComponent.prototype, "label", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], SemanticInputComponent.prototype, "class", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], SemanticInputComponent.prototype, "icon", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], SemanticInputComponent.prototype, "type", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], SemanticInputComponent.prototype, "placeholder", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], SemanticInputComponent.prototype, "model", void 0);
        __decorate([core_1.Input(), __metadata('design:type', forms_1.FormControl)], SemanticInputComponent.prototype, "control", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], SemanticInputComponent.prototype, "modelChange", void 0);
        SemanticInputComponent = __decorate([core_1.Component({
            selector: "sm-input",
            template: "<div class=\"field\" [ngClass]=\"{error: (!control.valid && control.dirty && isInsideForm) }\">\n  <label *ngIf=\"label && isInsideForm\">{{label}}</label>\n  <div class=\"ui input {{class}}\" [ngClass]=\"{'icon': icon, 'error': (!control.valid && control.dirty &&!isInsideForm)}\">\n  <label *ngIf=\"label && !isInsideForm\" class=\"ui label\">{{label}}</label>\n  <input [type]=\"type\" [formControl]=\"control\" (keyup)=\"modelChange.emit(input.value)\" #input placeholder=\"{{placeholder}}\">\n  <i *ngIf=\"icon\" class=\"{{icon}} icon\"></i>\n</div>\n</div>"
        }), __metadata('design:paramtypes', [core_1.ViewContainerRef])], SemanticInputComponent);
        return SemanticInputComponent;
    }();
    exports.SemanticInputComponent = SemanticInputComponent;
    var SemanticCheckboxComponent = function () {
        function SemanticCheckboxComponent() {
            this.inputType = "checkbox";
            this.classType = "checkbox";
        }
        Object.defineProperty(SemanticCheckboxComponent.prototype, "type", {
            set: function (data) {
                if (data && data !== "checkbox") {
                    this.classType = data;
                    if (data === "radio") {
                        this.inputType = data;
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        __decorate([core_1.Input(), __metadata('design:type', forms_1.FormControl)], SemanticCheckboxComponent.prototype, "control", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], SemanticCheckboxComponent.prototype, "label", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], SemanticCheckboxComponent.prototype, "disabled", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], SemanticCheckboxComponent.prototype, "value", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], SemanticCheckboxComponent.prototype, "name", void 0);
        __decorate([core_1.Input("type"), __metadata('design:type', String), __metadata('design:paramtypes', [String])], SemanticCheckboxComponent.prototype, "type", null);
        SemanticCheckboxComponent = __decorate([core_1.Component({
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            selector: "sm-checkbox",
            template: "<div class=\"field\" [ngClass]=\"{error: (!control.value && control?.validator) }\">\n    <div class=\"ui {{classType}} checkbox\">\n      <input type=\"checkbox\" \n      [attr.value]=\"value\"\n      [attr.type]=\"inputType\" tabindex=\"0\" [attr.name]=\"name\" [formControl]=\"control\" [attr.disabled]=\"disabled\">\n      <label *ngIf=\"label\">{{label}}</label>\n    </div>\n  </div>"
        }), __metadata('design:paramtypes', [])], SemanticCheckboxComponent);
        return SemanticCheckboxComponent;
    }();
    exports.SemanticCheckboxComponent = SemanticCheckboxComponent;
    var SemanticTextareaComponent = function () {
        function SemanticTextareaComponent() {}
        __decorate([core_1.Input(), __metadata('design:type', forms_1.FormControl)], SemanticTextareaComponent.prototype, "control", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], SemanticTextareaComponent.prototype, "label", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], SemanticTextareaComponent.prototype, "rows", void 0);
        SemanticTextareaComponent = __decorate([core_1.Component({
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            selector: "sm-textarea",
            template: "<div class=\"field\" [ngClass]=\"{error: (!control.valid && control.dirty) }\">\n    <label *ngIf=\"label\">{{label}}</label>\n    <textarea rows=\"{{rows}}\" [formControl]=\"control\"></textarea>\n  </div>"
        }), __metadata('design:paramtypes', [])], SemanticTextareaComponent);
        return SemanticTextareaComponent;
    }();
    exports.SemanticTextareaComponent = SemanticTextareaComponent;
    return module.exports;
});
$__System.registerDynamic("npm:ng-semantic/ng-semantic/sidebar/sidebar.js", ["npm:@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    jQuery.fn.fixSidebar = function () {
        var allModules = jQuery(this);
        allModules.each(function () {
            var selector = { pusher: ".pusher" },
                module = jQuery(this),
                context = jQuery("body");
            if (module.nextAll(selector.pusher).length === 0) {
                module.detach().prependTo(context);
            }
        });
        return this;
    };
    var SemanticSidebarComponent = function () {
        function SemanticSidebarComponent(renderer) {
            this.renderer = renderer;
        }
        SemanticSidebarComponent.prototype.show = function (options) {
            jQuery(this.sidebar.nativeElement).sidebar(options || {}).sidebar("toggle");
        };
        SemanticSidebarComponent.prototype.hide = function () {
            jQuery(this.sidebar.nativeElement).sidebar("hide");
        };
        SemanticSidebarComponent.prototype.ngOnInit = function () {
            jQuery(this.sidebar.nativeElement).fixSidebar();
        };
        SemanticSidebarComponent.prototype.ngOnDestroy = function () {
            this.renderer.detachView([this.sidebar.nativeElement]);
        };
        __decorate([core_1.Input(), __metadata('design:type', String)], SemanticSidebarComponent.prototype, "class", void 0);
        __decorate([core_1.ViewChild("sidebar"), __metadata('design:type', core_1.ElementRef)], SemanticSidebarComponent.prototype, "sidebar", void 0);
        SemanticSidebarComponent = __decorate([core_1.Component({
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            selector: "sm-sidebar",
            template: "<div class=\"ui sidebar {{class}}\" #sidebar>\n<ng-content></ng-content>\n</div>"
        }), __metadata('design:paramtypes', [core_1.Renderer])], SemanticSidebarComponent);
        return SemanticSidebarComponent;
    }();
    exports.SemanticSidebarComponent = SemanticSidebarComponent;
    return module.exports;
});
$__System.registerDynamic("npm:ng-semantic/ng-semantic/tab/tab.js", ["npm:@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var SemanticTabComponent = function () {
        function SemanticTabComponent() {}
        SemanticTabComponent.prototype.ngAfterViewInit = function () {
            this.tabEl.nativeElement.parentElement.classList.add("ui", "tab", "bottom", "attached", "segment");
            if (this.active) {
                this.tabEl.nativeElement.parentElement.classList.add("active");
            }
        };
        __decorate([core_1.Input(), __metadata('design:type', Number)], SemanticTabComponent.prototype, "tab", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], SemanticTabComponent.prototype, "title", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], SemanticTabComponent.prototype, "active", void 0);
        __decorate([core_1.ViewChild("tab"), __metadata('design:type', core_1.ElementRef)], SemanticTabComponent.prototype, "tabEl", void 0);
        SemanticTabComponent = __decorate([core_1.Component({
            selector: "sm-tab",
            template: "\n<div #tab>\n    <ng-content></ng-content>\n</div>  "
        }), __metadata('design:paramtypes', [])], SemanticTabComponent);
        return SemanticTabComponent;
    }();
    exports.SemanticTabComponent = SemanticTabComponent;
    var SemanticTabsComponent = function () {
        function SemanticTabsComponent(elementRef) {
            this.elementRef = elementRef;
            this.options = {};
        }
        SemanticTabsComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.initItemsIndices();
            this.initTabs();
            this.updateTabContentIndices();
            this.tabs.changes.debounceTime(100).subscribe(function () {
                _this.initItemsIndices();
                _this.updateTabContentIndices();
            });
        };
        SemanticTabsComponent.prototype.initItemsIndices = function () {
            Array.from(this.menu.nativeElement.getElementsByClassName("item")).map(function (element, index) {
                element.setAttribute("data-tab", "tab-" + index);
                jQuery(element).data("tab", "tab-" + index);
            });
        };
        SemanticTabsComponent.prototype.updateTabContentIndices = function () {
            this.tabs.map(function (cmp, index) {
                cmp.tabEl.nativeElement.parentElement.setAttribute("data-tab", "tab-" + index.toString());
            });
            this.initTabs();
        };
        SemanticTabsComponent.prototype.initTabs = function () {
            this.options = Object.assign({
                childrenOnly: true,
                context: this.elementRef.nativeElement
            }, this.options);
            var tab = jQuery(this.menu.nativeElement.getElementsByClassName("item")).tab(this.options);
            if (!this.menu.nativeElement.getElementsByClassName("item active").length) {
                tab.tab("change tab", "tab-0");
            }
        };
        __decorate([core_1.ContentChildren(SemanticTabComponent), __metadata('design:type', core_1.QueryList)], SemanticTabsComponent.prototype, "tabs", void 0);
        __decorate([core_1.ViewChild("menu"), __metadata('design:type', core_1.ElementRef)], SemanticTabsComponent.prototype, "menu", void 0);
        __decorate([core_1.Input("options"), __metadata('design:type', Object)], SemanticTabsComponent.prototype, "options", void 0);
        SemanticTabsComponent = __decorate([core_1.Component({
            selector: "sm-tabs",
            template: "<div class=\"ui top attached tabular menu\" #menu>\n  <a class=\"item\" [ngClass]=\"{'active': tab.active}\" *ngFor=\"let tab of tabs\">{{tab.title}}</a>\n</div>\n<ng-content></ng-content>\n"
        }), __metadata('design:paramtypes', [core_1.ElementRef])], SemanticTabsComponent);
        return SemanticTabsComponent;
    }();
    exports.SemanticTabsComponent = SemanticTabsComponent;
    return module.exports;
});
$__System.registerDynamic("npm:ng-semantic/ng-semantic/flag/flag.js", ["npm:@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var SemanticFlagComponent = function () {
        function SemanticFlagComponent() {}
        __decorate([core_1.Input("flag"), __metadata('design:type', String)], SemanticFlagComponent.prototype, "flag", void 0);
        SemanticFlagComponent = __decorate([core_1.Component({
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            selector: "sm-flag",
            template: "<i class=\"{{flag}} flag\"></i>"
        }), __metadata('design:paramtypes', [])], SemanticFlagComponent);
        return SemanticFlagComponent;
    }();
    exports.SemanticFlagComponent = SemanticFlagComponent;
    return module.exports;
});
$__System.registerDynamic("npm:ng-semantic/ng-semantic/contextmenu/contextmenu.js", ["npm:@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var SemanticContextMenuComponent = function () {
        function SemanticContextMenuComponent() {
            this._position = { x: 0, y: 0 };
            this.show = false;
        }
        Object.defineProperty(SemanticContextMenuComponent.prototype, "position", {
            set: function (data) {
                if (data) {
                    this._position = data;
                    this.show = true;
                }
            },
            enumerable: true,
            configurable: true
        });
        SemanticContextMenuComponent.prototype.clickedOutside = function () {
            this.show = false;
        };
        __decorate([core_1.Input(), __metadata('design:type', Array)], SemanticContextMenuComponent.prototype, "items", void 0);
        __decorate([core_1.Input("position"), __metadata('design:type', Object), __metadata('design:paramtypes', [Object])], SemanticContextMenuComponent.prototype, "position", null);
        __decorate([core_1.HostListener("document:click"), __metadata('design:type', Function), __metadata('design:paramtypes', []), __metadata('design:returntype', void 0)], SemanticContextMenuComponent.prototype, "clickedOutside", null);
        SemanticContextMenuComponent = __decorate([core_1.Component({
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            selector: "sm-contextmenu",
            styles: [".sm-contextmenu { position: fixed; z-index: 1000; }"],
            template: "<div \n[style.left.px]=\"_position?.x\" [style.top.px]=\"_position?.y\"\n[ngClass]=\"{'active visible': show}\" class=\"ui dropdown sm-contextmenu\">\n <div \n [ngClass]=\"{'visible animating slide down in': show, 'hidden': !show}\"  class=\"ui menu transition\">\n <a (click)=\"menu.action()\" *ngFor=\"let menu of items\" class=\"item\">\n <i class=\"{{menu.icon}} icon\"></i>\n {{menu.title}}\n </a>\n </div>\n </div>\n"
        }), __metadata('design:paramtypes', [])], SemanticContextMenuComponent);
        return SemanticContextMenuComponent;
    }();
    exports.SemanticContextMenuComponent = SemanticContextMenuComponent;
    return module.exports;
});
$__System.registerDynamic("npm:ng-semantic/ng-semantic/progress/progress.js", ["npm:@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var SemanticProgressComponent = function () {
        function SemanticProgressComponent() {
            this._progress = 0;
        }
        Object.defineProperty(SemanticProgressComponent.prototype, "progress", {
            set: function (value) {
                this._progress = value >= 100 ? 100 : value;
            },
            enumerable: true,
            configurable: true
        });
        __decorate([core_1.Input(), __metadata('design:type', String)], SemanticProgressComponent.prototype, "label", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], SemanticProgressComponent.prototype, "class", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number), __metadata('design:paramtypes', [Number])], SemanticProgressComponent.prototype, "progress", null);
        SemanticProgressComponent = __decorate([core_1.Component({
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            selector: "sm-progress",
            template: "<div [ngClass]=\"{'success': _progress === 100}\" class=\"ui {{class}} progress\" [attr.data-percent]=\"_progress\">\n  <div class=\"bar\" [ngStyle]=\"{'width': _progress + '%'}\">\n    <div class=\"progress\">{{_progress}}%</div>\n  </div>\n  <div class=\"label\" *ngIf=\"label\">{{label}}</div>\n</div>"
        }), __metadata('design:paramtypes', [])], SemanticProgressComponent);
        return SemanticProgressComponent;
    }();
    exports.SemanticProgressComponent = SemanticProgressComponent;
    return module.exports;
});
$__System.registerDynamic("npm:ng-semantic/ng-semantic/dimmer/dimmer.js", ["npm:@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var SemanticDimmerComponent = function () {
        function SemanticDimmerComponent() {}
        SemanticDimmerComponent.prototype.show = function (options) {
            jQuery(this.dimmer.nativeElement).dimmer(options || {}).dimmer("toggle");
        };
        __decorate([core_1.ViewChild("dimmer"), __metadata('design:type', core_1.ElementRef)], SemanticDimmerComponent.prototype, "dimmer", void 0);
        SemanticDimmerComponent = __decorate([core_1.Component({
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            selector: "sm-dimmer",
            template: "<div class=\"ui page dimmer\" #dimmer>\n  <div class=\"content\">\n    <ng-content></ng-content>\n  </div>\n</div>"
        }), __metadata('design:paramtypes', [])], SemanticDimmerComponent);
        return SemanticDimmerComponent;
    }();
    exports.SemanticDimmerComponent = SemanticDimmerComponent;
    return module.exports;
});
$__System.registerDynamic("npm:ng-semantic/ng-semantic/transition/transition.js", ["npm:@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var SemanticTransitionComponent = function () {
        function SemanticTransitionComponent() {}
        SemanticTransitionComponent.prototype.show = function (animation) {
            jQuery(this.transition.nativeElement).transition(animation || "fade out");
        };
        __decorate([core_1.ViewChild("transition"), __metadata('design:type', core_1.ElementRef)], SemanticTransitionComponent.prototype, "transition", void 0);
        SemanticTransitionComponent = __decorate([core_1.Component({
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            selector: "sm-transition",
            template: "\n    <div #transition>\n        <ng-content></ng-content>\n    </div>\n    "
        }), __metadata('design:paramtypes', [])], SemanticTransitionComponent);
        return SemanticTransitionComponent;
    }();
    exports.SemanticTransitionComponent = SemanticTransitionComponent;
    return module.exports;
});
$__System.registerDynamic("npm:ng-semantic/ng-semantic/shape/shape.js", ["npm:@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var SemanticShapeComponent = function () {
        function SemanticShapeComponent() {
            this.options = {};
            this.beforeChange = new core_1.EventEmitter();
            this.onChange = new core_1.EventEmitter();
        }
        SemanticShapeComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.options = Object.assign({
                beforeChange: function () {
                    return _this.beforeChange.emit(true);
                },
                onChange: function () {
                    return _this.onChange.emit(true);
                }
            }, this.options);
        };
        SemanticShapeComponent.prototype.show = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            jQuery(this.shape.nativeElement).shape(this.options).shape(args.join(","));
        };
        __decorate([core_1.Input(), __metadata('design:type', String)], SemanticShapeComponent.prototype, "class", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], SemanticShapeComponent.prototype, "options", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], SemanticShapeComponent.prototype, "beforeChange", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], SemanticShapeComponent.prototype, "onChange", void 0);
        __decorate([core_1.ViewChild("shape"), __metadata('design:type', core_1.ElementRef)], SemanticShapeComponent.prototype, "shape", void 0);
        SemanticShapeComponent = __decorate([core_1.Component({
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            selector: "sm-shape",
            template: "\n    <div #shape class=\"ui shape {{class}}\">\n        <ng-content></ng-content>\n    </div>\n    "
        }), __metadata('design:paramtypes', [])], SemanticShapeComponent);
        return SemanticShapeComponent;
    }();
    exports.SemanticShapeComponent = SemanticShapeComponent;
    return module.exports;
});
$__System.registerDynamic("npm:ng-semantic/ng-semantic/accordion/accordion.js", ["npm:@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var SemanticAccordionComponent = function () {
        function SemanticAccordionComponent() {}
        SemanticAccordionComponent.prototype.ngAfterViewInit = function () {
            var inAccordion = this.inAccordion(this.accordion.nativeElement, "accordion");
            if (inAccordion) {
                this.accordion.nativeElement.classList.remove("ui");
                jQuery(inAccordion).accordion(this.options || {});
            } else {
                jQuery(this.accordion.nativeElement).accordion(this.options || {});
            }
        };
        SemanticAccordionComponent.prototype.inAccordion = function (el, className) {
            if (el.parentNode) {
                if (el.parentNode.classList && el.parentNode.classList.contains(className)) {
                    return el.parentNode;
                } else {
                    return this.inAccordion(el.parentNode, className);
                }
            } else {
                return false;
            }
        };
        __decorate([core_1.Input(), __metadata('design:type', String)], SemanticAccordionComponent.prototype, "class", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], SemanticAccordionComponent.prototype, "options", void 0);
        __decorate([core_1.ViewChild("accordion"), __metadata('design:type', core_1.ElementRef)], SemanticAccordionComponent.prototype, "accordion", void 0);
        SemanticAccordionComponent = __decorate([core_1.Component({
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            selector: "sm-accordion",
            styles: ["sm-accordion sm-accordion-item:first-child .title { border-top: none !important; }"],
            template: "\n<div class=\"ui accordion {{class}}\" #accordion>\n    <ng-content></ng-content>\n</div>\n"
        }), __metadata('design:paramtypes', [])], SemanticAccordionComponent);
        return SemanticAccordionComponent;
    }();
    exports.SemanticAccordionComponent = SemanticAccordionComponent;
    var SemanticAccordionItemComponent = function () {
        function SemanticAccordionItemComponent() {}
        __decorate([core_1.Input(), __metadata('design:type', String)], SemanticAccordionItemComponent.prototype, "class", void 0);
        SemanticAccordionItemComponent = __decorate([core_1.Component({
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            selector: "sm-accordion-item",
            template: "\n<div class=\"{{class}} title\">\n    <i class=\"dropdown icon\"></i>\n    <ng-content select=\"accordion-title\"></ng-content>\n</div>\n<div class=\"{{class}} content\">\n    <ng-content select=\"accordion-content\"></ng-content>\n</div>\n"
        }), __metadata('design:paramtypes', [])], SemanticAccordionItemComponent);
        return SemanticAccordionItemComponent;
    }();
    exports.SemanticAccordionItemComponent = SemanticAccordionItemComponent;
    return module.exports;
});
$__System.registerDynamic("npm:ng-semantic/ng-semantic/rating/rating.js", ["npm:@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var SemanticRatingComponent = function () {
        function SemanticRatingComponent() {
            this.onRate = new core_1.EventEmitter();
        }
        SemanticRatingComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            jQuery(this.rating.nativeElement).rating({
                initialRating: this.initialRating || 0,
                maxRating: this.maxRating || 5,
                onRate: function (value) {
                    _this.onRate.emit(value);
                }
            });
        };
        __decorate([core_1.Input(), __metadata('design:type', String)], SemanticRatingComponent.prototype, "class", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], SemanticRatingComponent.prototype, "initialRating", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], SemanticRatingComponent.prototype, "maxRating", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], SemanticRatingComponent.prototype, "onRate", void 0);
        __decorate([core_1.ViewChild("rating"), __metadata('design:type', core_1.ElementRef)], SemanticRatingComponent.prototype, "rating", void 0);
        SemanticRatingComponent = __decorate([core_1.Component({
            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
            selector: "sm-rating",
            template: "<div class=\"ui {{class}} rating\" #rating></div>"
        }), __metadata('design:paramtypes', [])], SemanticRatingComponent);
        return SemanticRatingComponent;
    }();
    exports.SemanticRatingComponent = SemanticRatingComponent;
    return module.exports;
});
$__System.registerDynamic("npm:ng-semantic/ng-semantic.js", ["npm:ng-semantic/ng-semantic/menu/menu.js", "npm:ng-semantic/ng-semantic/message/message.js", "npm:ng-semantic/ng-semantic/popup/tooltip.js", "npm:ng-semantic/ng-semantic/popup/popup.js", "npm:ng-semantic/ng-semantic/modal/modal.js", "npm:ng-semantic/ng-semantic/segment/segment.js", "npm:ng-semantic/ng-semantic/list/list.js", "npm:ng-semantic/ng-semantic/button/button.js", "npm:ng-semantic/ng-semantic/item/item.js", "npm:ng-semantic/ng-semantic/visibility/visibility.js", "npm:ng-semantic/ng-semantic/dropdown/dropdown.js", "npm:ng-semantic/ng-semantic/select/select.js", "npm:ng-semantic/ng-semantic/search/search.js", "npm:ng-semantic/ng-semantic/loader/loader.js", "npm:ng-semantic/ng-semantic/card/card.js", "npm:ng-semantic/ng-semantic/input/input.js", "npm:ng-semantic/ng-semantic/sidebar/sidebar.js", "npm:ng-semantic/ng-semantic/tab/tab.js", "npm:ng-semantic/ng-semantic/flag/flag.js", "npm:ng-semantic/ng-semantic/contextmenu/contextmenu.js", "npm:ng-semantic/ng-semantic/progress/progress.js", "npm:ng-semantic/ng-semantic/dimmer/dimmer.js", "npm:ng-semantic/ng-semantic/transition/transition.js", "npm:ng-semantic/ng-semantic/shape/shape.js", "npm:ng-semantic/ng-semantic/accordion/accordion.js", "npm:ng-semantic/ng-semantic/rating/rating.js", "npm:@angular/core/bundles/core.umd.js", "npm:@angular/common/bundles/common.umd.js", "npm:@angular/forms/bundles/forms.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    var menu_1 = $__require("npm:ng-semantic/ng-semantic/menu/menu.js");
    var message_1 = $__require("npm:ng-semantic/ng-semantic/message/message.js");
    var tooltip_1 = $__require("npm:ng-semantic/ng-semantic/popup/tooltip.js");
    var popup_1 = $__require("npm:ng-semantic/ng-semantic/popup/popup.js");
    var modal_1 = $__require("npm:ng-semantic/ng-semantic/modal/modal.js");
    var segment_1 = $__require("npm:ng-semantic/ng-semantic/segment/segment.js");
    var list_1 = $__require("npm:ng-semantic/ng-semantic/list/list.js");
    var button_1 = $__require("npm:ng-semantic/ng-semantic/button/button.js");
    var item_1 = $__require("npm:ng-semantic/ng-semantic/item/item.js");
    var visibility_1 = $__require("npm:ng-semantic/ng-semantic/visibility/visibility.js");
    var dropdown_1 = $__require("npm:ng-semantic/ng-semantic/dropdown/dropdown.js");
    var select_1 = $__require("npm:ng-semantic/ng-semantic/select/select.js");
    var search_1 = $__require("npm:ng-semantic/ng-semantic/search/search.js");
    var loader_1 = $__require("npm:ng-semantic/ng-semantic/loader/loader.js");
    var card_1 = $__require("npm:ng-semantic/ng-semantic/card/card.js");
    var input_1 = $__require("npm:ng-semantic/ng-semantic/input/input.js");
    var sidebar_1 = $__require("npm:ng-semantic/ng-semantic/sidebar/sidebar.js");
    var tab_1 = $__require("npm:ng-semantic/ng-semantic/tab/tab.js");
    var flag_1 = $__require("npm:ng-semantic/ng-semantic/flag/flag.js");
    var contextmenu_1 = $__require("npm:ng-semantic/ng-semantic/contextmenu/contextmenu.js");
    var progress_1 = $__require("npm:ng-semantic/ng-semantic/progress/progress.js");
    var dimmer_1 = $__require("npm:ng-semantic/ng-semantic/dimmer/dimmer.js");
    var transition_1 = $__require("npm:ng-semantic/ng-semantic/transition/transition.js");
    var shape_1 = $__require("npm:ng-semantic/ng-semantic/shape/shape.js");
    var accordion_1 = $__require("npm:ng-semantic/ng-semantic/accordion/accordion.js");
    var rating_1 = $__require("npm:ng-semantic/ng-semantic/rating/rating.js");
    __export($__require("npm:ng-semantic/ng-semantic/menu/menu.js"));
    __export($__require("npm:ng-semantic/ng-semantic/contextmenu/contextmenu.js"));
    __export($__require("npm:ng-semantic/ng-semantic/message/message.js"));
    __export($__require("npm:ng-semantic/ng-semantic/popup/tooltip.js"));
    __export($__require("npm:ng-semantic/ng-semantic/popup/popup.js"));
    __export($__require("npm:ng-semantic/ng-semantic/visibility/visibility.js"));
    __export($__require("npm:ng-semantic/ng-semantic/modal/modal.js"));
    __export($__require("npm:ng-semantic/ng-semantic/segment/segment.js"));
    __export($__require("npm:ng-semantic/ng-semantic/rating/rating.js"));
    __export($__require("npm:ng-semantic/ng-semantic/list/list.js"));
    __export($__require("npm:ng-semantic/ng-semantic/button/button.js"));
    __export($__require("npm:ng-semantic/ng-semantic/search/search.js"));
    __export($__require("npm:ng-semantic/ng-semantic/item/item.js"));
    __export($__require("npm:ng-semantic/ng-semantic/dropdown/dropdown.js"));
    __export($__require("npm:ng-semantic/ng-semantic/select/select.js"));
    __export($__require("npm:ng-semantic/ng-semantic/loader/loader.js"));
    __export($__require("npm:ng-semantic/ng-semantic/card/card.js"));
    __export($__require("npm:ng-semantic/ng-semantic/input/input.js"));
    __export($__require("npm:ng-semantic/ng-semantic/sidebar/sidebar.js"));
    __export($__require("npm:ng-semantic/ng-semantic/tab/tab.js"));
    __export($__require("npm:ng-semantic/ng-semantic/flag/flag.js"));
    __export($__require("npm:ng-semantic/ng-semantic/progress/progress.js"));
    __export($__require("npm:ng-semantic/ng-semantic/dimmer/dimmer.js"));
    __export($__require("npm:ng-semantic/ng-semantic/transition/transition.js"));
    __export($__require("npm:ng-semantic/ng-semantic/shape/shape.js"));
    __export($__require("npm:ng-semantic/ng-semantic/accordion/accordion.js"));
    exports.SEMANTIC_COMPONENTS = [card_1.SemanticCardComponent, card_1.SemanticCardsComponent, contextmenu_1.SemanticContextMenuComponent, input_1.SemanticInputComponent, input_1.SemanticTextareaComponent, input_1.SemanticCheckboxComponent, menu_1.SemanticMenuComponent, message_1.SemanticMessageComponent, segment_1.SemanticSegmentComponent, dimmer_1.SemanticDimmerComponent, transition_1.SemanticTransitionComponent, shape_1.SemanticShapeComponent, popup_1.SemanticPopupComponent, dropdown_1.SemanticDropdownComponent, list_1.SemanticListComponent, select_1.SemanticSelectComponent, flag_1.SemanticFlagComponent, search_1.SemanticSearchComponent, item_1.SemanticItemComponent, sidebar_1.SemanticSidebarComponent, progress_1.SemanticProgressComponent, modal_1.SemanticModalComponent, tab_1.SemanticTabsComponent, tab_1.SemanticTabComponent, button_1.SemanticButtonComponent, loader_1.SemanticLoaderComponent, accordion_1.SemanticAccordionComponent, accordion_1.SemanticAccordionItemComponent, rating_1.SemanticRatingComponent];
    exports.SEMANTIC_DIRECTIVES = [tooltip_1.SMTooltipDirective, visibility_1.SMVisibilityDirective, visibility_1.SMDeviceVisibilityDirective];
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var common_1 = $__require("npm:@angular/common/bundles/common.umd.js");
    var forms_1 = $__require("npm:@angular/forms/bundles/forms.umd.js");
    var NgSemanticModule = function () {
        function NgSemanticModule() {}
        NgSemanticModule = __decorate([core_1.NgModule({
            declarations: [exports.SEMANTIC_DIRECTIVES, exports.SEMANTIC_COMPONENTS],
            exports: [exports.SEMANTIC_COMPONENTS, exports.SEMANTIC_DIRECTIVES],
            imports: [common_1.CommonModule, forms_1.FormsModule, forms_1.ReactiveFormsModule]
        }), __metadata('design:paramtypes', [])], NgSemanticModule);
        return NgSemanticModule;
    }();
    exports.NgSemanticModule = NgSemanticModule;
    return module.exports;
});
(function() {
var define = $__System.amdDefine;
(function(global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs/operator/toPromise'), require('rxjs/Subject'), require('rxjs/Observable'), require('rxjs/observable/fromPromise')) : typeof define === 'function' && define.amd ? define("npm:@angular/forms/bundles/forms.umd.js", ["exports", "npm:@angular/core/bundles/core.umd.js", "npm:rxjs/operator/toPromise.js", "npm:rxjs/Subject.js", "npm:rxjs/Observable.js", "npm:rxjs/observable/fromPromise.js"], factory) : (factory((global.ng = global.ng || {}, global.ng.forms = global.ng.forms || {}), global.ng.core, global.Rx.Observable.prototype, global.Rx, global.Rx, global.Rx.Observable));
}(this, function(exports, _angular_core, rxjs_operator_toPromise, rxjs_Subject, rxjs_Observable, rxjs_observable_fromPromise) {
  'use strict';
  var AbstractControlDirective = (function() {
    function AbstractControlDirective() {}
    Object.defineProperty(AbstractControlDirective.prototype, "control", {
      get: function() {
        throw new Error('unimplemented');
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "value", {
      get: function() {
        return this.control ? this.control.value : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "valid", {
      get: function() {
        return this.control ? this.control.valid : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "invalid", {
      get: function() {
        return this.control ? this.control.invalid : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "pending", {
      get: function() {
        return this.control ? this.control.pending : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "errors", {
      get: function() {
        return this.control ? this.control.errors : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "pristine", {
      get: function() {
        return this.control ? this.control.pristine : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "dirty", {
      get: function() {
        return this.control ? this.control.dirty : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "touched", {
      get: function() {
        return this.control ? this.control.touched : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "untouched", {
      get: function() {
        return this.control ? this.control.untouched : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "disabled", {
      get: function() {
        return this.control ? this.control.disabled : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "enabled", {
      get: function() {
        return this.control ? this.control.enabled : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "statusChanges", {
      get: function() {
        return this.control ? this.control.statusChanges : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "valueChanges", {
      get: function() {
        return this.control ? this.control.valueChanges : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "path", {
      get: function() {
        return null;
      },
      enumerable: true,
      configurable: true
    });
    AbstractControlDirective.prototype.reset = function(value) {
      if (value === void 0) {
        value = undefined;
      }
      if (this.control)
        this.control.reset(value);
    };
    AbstractControlDirective.prototype.hasError = function(errorCode, path) {
      if (path === void 0) {
        path = null;
      }
      return this.control ? this.control.hasError(errorCode, path) : false;
    };
    AbstractControlDirective.prototype.getError = function(errorCode, path) {
      if (path === void 0) {
        path = null;
      }
      return this.control ? this.control.getError(errorCode, path) : null;
    };
    return AbstractControlDirective;
  }());
  var __extends$1 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var ControlContainer = (function(_super) {
    __extends$1(ControlContainer, _super);
    function ControlContainer() {
      _super.apply(this, arguments);
    }
    Object.defineProperty(ControlContainer.prototype, "formDirective", {
      get: function() {
        return null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ControlContainer.prototype, "path", {
      get: function() {
        return null;
      },
      enumerable: true,
      configurable: true
    });
    return ControlContainer;
  }(AbstractControlDirective));
  function isPresent(obj) {
    return obj != null;
  }
  function isBlank(obj) {
    return obj == null;
  }
  function looseIdentical(a, b) {
    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
  }
  function isJsObject(o) {
    return o !== null && (typeof o === 'function' || typeof o === 'object');
  }
  function isPrimitive(obj) {
    return !isJsObject(obj);
  }
  var StringMapWrapper = (function() {
    function StringMapWrapper() {}
    StringMapWrapper.merge = function(m1, m2) {
      var m = {};
      for (var _i = 0,
          _a = Object.keys(m1); _i < _a.length; _i++) {
        var k = _a[_i];
        m[k] = m1[k];
      }
      for (var _b = 0,
          _c = Object.keys(m2); _b < _c.length; _b++) {
        var k = _c[_b];
        m[k] = m2[k];
      }
      return m;
    };
    StringMapWrapper.equals = function(m1, m2) {
      var k1 = Object.keys(m1);
      var k2 = Object.keys(m2);
      if (k1.length != k2.length) {
        return false;
      }
      for (var i = 0; i < k1.length; i++) {
        var key = k1[i];
        if (m1[key] !== m2[key]) {
          return false;
        }
      }
      return true;
    };
    return StringMapWrapper;
  }());
  var ListWrapper = (function() {
    function ListWrapper() {}
    ListWrapper.findLast = function(arr, condition) {
      for (var i = arr.length - 1; i >= 0; i--) {
        if (condition(arr[i])) {
          return arr[i];
        }
      }
      return null;
    };
    ListWrapper.removeAll = function(list, items) {
      for (var i = 0; i < items.length; ++i) {
        var index = list.indexOf(items[i]);
        if (index > -1) {
          list.splice(index, 1);
        }
      }
    };
    ListWrapper.remove = function(list, el) {
      var index = list.indexOf(el);
      if (index > -1) {
        list.splice(index, 1);
        return true;
      }
      return false;
    };
    ListWrapper.equals = function(a, b) {
      if (a.length != b.length)
        return false;
      for (var i = 0; i < a.length; ++i) {
        if (a[i] !== b[i])
          return false;
      }
      return true;
    };
    ListWrapper.flatten = function(list) {
      return list.reduce(function(flat, item) {
        var flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item;
        return ((flat)).concat(flatItem);
      }, []);
    };
    return ListWrapper;
  }());
  var isPromise = _angular_core.__core_private__.isPromise;
  function isEmptyInputValue(value) {
    return value == null || value.length === 0;
  }
  var NG_VALIDATORS = new _angular_core.OpaqueToken('NgValidators');
  var NG_ASYNC_VALIDATORS = new _angular_core.OpaqueToken('NgAsyncValidators');
  var Validators = (function() {
    function Validators() {}
    Validators.required = function(control) {
      return isEmptyInputValue(control.value) ? {'required': true} : null;
    };
    Validators.requiredTrue = function(control) {
      return control.value === true ? null : {'required': true};
    };
    Validators.minLength = function(minLength) {
      return function(control) {
        if (isEmptyInputValue(control.value)) {
          return null;
        }
        var length = control.value ? control.value.length : 0;
        return length < minLength ? {'minlength': {
            'requiredLength': minLength,
            'actualLength': length
          }} : null;
      };
    };
    Validators.maxLength = function(maxLength) {
      return function(control) {
        var length = control.value ? control.value.length : 0;
        return length > maxLength ? {'maxlength': {
            'requiredLength': maxLength,
            'actualLength': length
          }} : null;
      };
    };
    Validators.pattern = function(pattern) {
      if (!pattern)
        return Validators.nullValidator;
      var regex;
      var regexStr;
      if (typeof pattern === 'string') {
        regexStr = "^" + pattern + "$";
        regex = new RegExp(regexStr);
      } else {
        regexStr = pattern.toString();
        regex = pattern;
      }
      return function(control) {
        if (isEmptyInputValue(control.value)) {
          return null;
        }
        var value = control.value;
        return regex.test(value) ? null : {'pattern': {
            'requiredPattern': regexStr,
            'actualValue': value
          }};
      };
    };
    Validators.nullValidator = function(c) {
      return null;
    };
    Validators.compose = function(validators) {
      if (!validators)
        return null;
      var presentValidators = validators.filter(isPresent);
      if (presentValidators.length == 0)
        return null;
      return function(control) {
        return _mergeErrors(_executeValidators(control, presentValidators));
      };
    };
    Validators.composeAsync = function(validators) {
      if (!validators)
        return null;
      var presentValidators = validators.filter(isPresent);
      if (presentValidators.length == 0)
        return null;
      return function(control) {
        var promises = _executeAsyncValidators(control, presentValidators).map(_convertToPromise);
        return Promise.all(promises).then(_mergeErrors);
      };
    };
    return Validators;
  }());
  function _convertToPromise(obj) {
    return isPromise(obj) ? obj : rxjs_operator_toPromise.toPromise.call(obj);
  }
  function _executeValidators(control, validators) {
    return validators.map(function(v) {
      return v(control);
    });
  }
  function _executeAsyncValidators(control, validators) {
    return validators.map(function(v) {
      return v(control);
    });
  }
  function _mergeErrors(arrayOfErrors) {
    var res = arrayOfErrors.reduce(function(res, errors) {
      return isPresent(errors) ? StringMapWrapper.merge(res, errors) : res;
    }, {});
    return Object.keys(res).length === 0 ? null : res;
  }
  var NG_VALUE_ACCESSOR = new _angular_core.OpaqueToken('NgValueAccessor');
  var CHECKBOX_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: _angular_core.forwardRef(function() {
      return CheckboxControlValueAccessor;
    }),
    multi: true
  };
  var CheckboxControlValueAccessor = (function() {
    function CheckboxControlValueAccessor(_renderer, _elementRef) {
      this._renderer = _renderer;
      this._elementRef = _elementRef;
      this.onChange = function(_) {};
      this.onTouched = function() {};
    }
    CheckboxControlValueAccessor.prototype.writeValue = function(value) {
      this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', value);
    };
    CheckboxControlValueAccessor.prototype.registerOnChange = function(fn) {
      this.onChange = fn;
    };
    CheckboxControlValueAccessor.prototype.registerOnTouched = function(fn) {
      this.onTouched = fn;
    };
    CheckboxControlValueAccessor.prototype.setDisabledState = function(isDisabled) {
      this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
    };
    CheckboxControlValueAccessor.decorators = [{
      type: _angular_core.Directive,
      args: [{
        selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',
        host: {
          '(change)': 'onChange($event.target.checked)',
          '(blur)': 'onTouched()'
        },
        providers: [CHECKBOX_VALUE_ACCESSOR]
      }]
    }];
    CheckboxControlValueAccessor.ctorParameters = function() {
      return [{type: _angular_core.Renderer}, {type: _angular_core.ElementRef}];
    };
    return CheckboxControlValueAccessor;
  }());
  var DEFAULT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: _angular_core.forwardRef(function() {
      return DefaultValueAccessor;
    }),
    multi: true
  };
  var DefaultValueAccessor = (function() {
    function DefaultValueAccessor(_renderer, _elementRef) {
      this._renderer = _renderer;
      this._elementRef = _elementRef;
      this.onChange = function(_) {};
      this.onTouched = function() {};
    }
    DefaultValueAccessor.prototype.writeValue = function(value) {
      var normalizedValue = value == null ? '' : value;
      this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);
    };
    DefaultValueAccessor.prototype.registerOnChange = function(fn) {
      this.onChange = fn;
    };
    DefaultValueAccessor.prototype.registerOnTouched = function(fn) {
      this.onTouched = fn;
    };
    DefaultValueAccessor.prototype.setDisabledState = function(isDisabled) {
      this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
    };
    DefaultValueAccessor.decorators = [{
      type: _angular_core.Directive,
      args: [{
        selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',
        host: {
          '(input)': 'onChange($event.target.value)',
          '(blur)': 'onTouched()'
        },
        providers: [DEFAULT_VALUE_ACCESSOR]
      }]
    }];
    DefaultValueAccessor.ctorParameters = function() {
      return [{type: _angular_core.Renderer}, {type: _angular_core.ElementRef}];
    };
    return DefaultValueAccessor;
  }());
  function normalizeValidator(validator) {
    if (((validator)).validate) {
      return function(c) {
        return ((validator)).validate(c);
      };
    } else {
      return (validator);
    }
  }
  function normalizeAsyncValidator(validator) {
    if (((validator)).validate) {
      return function(c) {
        return ((validator)).validate(c);
      };
    } else {
      return (validator);
    }
  }
  var NUMBER_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: _angular_core.forwardRef(function() {
      return NumberValueAccessor;
    }),
    multi: true
  };
  var NumberValueAccessor = (function() {
    function NumberValueAccessor(_renderer, _elementRef) {
      this._renderer = _renderer;
      this._elementRef = _elementRef;
      this.onChange = function(_) {};
      this.onTouched = function() {};
    }
    NumberValueAccessor.prototype.writeValue = function(value) {
      var normalizedValue = value == null ? '' : value;
      this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);
    };
    NumberValueAccessor.prototype.registerOnChange = function(fn) {
      this.onChange = function(value) {
        fn(value == '' ? null : parseFloat(value));
      };
    };
    NumberValueAccessor.prototype.registerOnTouched = function(fn) {
      this.onTouched = fn;
    };
    NumberValueAccessor.prototype.setDisabledState = function(isDisabled) {
      this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
    };
    NumberValueAccessor.decorators = [{
      type: _angular_core.Directive,
      args: [{
        selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',
        host: {
          '(change)': 'onChange($event.target.value)',
          '(input)': 'onChange($event.target.value)',
          '(blur)': 'onTouched()'
        },
        providers: [NUMBER_VALUE_ACCESSOR]
      }]
    }];
    NumberValueAccessor.ctorParameters = function() {
      return [{type: _angular_core.Renderer}, {type: _angular_core.ElementRef}];
    };
    return NumberValueAccessor;
  }());
  var __extends$2 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  function unimplemented() {
    throw new Error('unimplemented');
  }
  var NgControl = (function(_super) {
    __extends$2(NgControl, _super);
    function NgControl() {
      _super.apply(this, arguments);
      this._parent = null;
      this.name = null;
      this.valueAccessor = null;
      this._rawValidators = [];
      this._rawAsyncValidators = [];
    }
    Object.defineProperty(NgControl.prototype, "validator", {
      get: function() {
        return (unimplemented());
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgControl.prototype, "asyncValidator", {
      get: function() {
        return (unimplemented());
      },
      enumerable: true,
      configurable: true
    });
    NgControl.prototype.viewToModelUpdate = function(newValue) {};
    return NgControl;
  }(AbstractControlDirective));
  var RADIO_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: _angular_core.forwardRef(function() {
      return RadioControlValueAccessor;
    }),
    multi: true
  };
  var RadioControlRegistry = (function() {
    function RadioControlRegistry() {
      this._accessors = [];
    }
    RadioControlRegistry.prototype.add = function(control, accessor) {
      this._accessors.push([control, accessor]);
    };
    RadioControlRegistry.prototype.remove = function(accessor) {
      for (var i = this._accessors.length - 1; i >= 0; --i) {
        if (this._accessors[i][1] === accessor) {
          this._accessors.splice(i, 1);
          return;
        }
      }
    };
    RadioControlRegistry.prototype.select = function(accessor) {
      var _this = this;
      this._accessors.forEach(function(c) {
        if (_this._isSameGroup(c, accessor) && c[1] !== accessor) {
          c[1].fireUncheck(accessor.value);
        }
      });
    };
    RadioControlRegistry.prototype._isSameGroup = function(controlPair, accessor) {
      if (!controlPair[0].control)
        return false;
      return controlPair[0]._parent === accessor._control._parent && controlPair[1].name === accessor.name;
    };
    RadioControlRegistry.decorators = [{type: _angular_core.Injectable}];
    RadioControlRegistry.ctorParameters = function() {
      return [];
    };
    return RadioControlRegistry;
  }());
  var RadioControlValueAccessor = (function() {
    function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {
      this._renderer = _renderer;
      this._elementRef = _elementRef;
      this._registry = _registry;
      this._injector = _injector;
      this.onChange = function() {};
      this.onTouched = function() {};
    }
    RadioControlValueAccessor.prototype.ngOnInit = function() {
      this._control = this._injector.get(NgControl);
      this._checkName();
      this._registry.add(this._control, this);
    };
    RadioControlValueAccessor.prototype.ngOnDestroy = function() {
      this._registry.remove(this);
    };
    RadioControlValueAccessor.prototype.writeValue = function(value) {
      this._state = value === this.value;
      this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', this._state);
    };
    RadioControlValueAccessor.prototype.registerOnChange = function(fn) {
      var _this = this;
      this._fn = fn;
      this.onChange = function() {
        fn(_this.value);
        _this._registry.select(_this);
      };
    };
    RadioControlValueAccessor.prototype.fireUncheck = function(value) {
      this.writeValue(value);
    };
    RadioControlValueAccessor.prototype.registerOnTouched = function(fn) {
      this.onTouched = fn;
    };
    RadioControlValueAccessor.prototype.setDisabledState = function(isDisabled) {
      this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
    };
    RadioControlValueAccessor.prototype._checkName = function() {
      if (this.name && this.formControlName && this.name !== this.formControlName) {
        this._throwNameError();
      }
      if (!this.name && this.formControlName)
        this.name = this.formControlName;
    };
    RadioControlValueAccessor.prototype._throwNameError = function() {
      throw new Error("\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type=\"radio\" formControlName=\"food\" name=\"food\">\n    ");
    };
    RadioControlValueAccessor.decorators = [{
      type: _angular_core.Directive,
      args: [{
        selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',
        host: {
          '(change)': 'onChange()',
          '(blur)': 'onTouched()'
        },
        providers: [RADIO_VALUE_ACCESSOR]
      }]
    }];
    RadioControlValueAccessor.ctorParameters = function() {
      return [{type: _angular_core.Renderer}, {type: _angular_core.ElementRef}, {type: RadioControlRegistry}, {type: _angular_core.Injector}];
    };
    RadioControlValueAccessor.propDecorators = {
      'name': [{type: _angular_core.Input}],
      'formControlName': [{type: _angular_core.Input}],
      'value': [{type: _angular_core.Input}]
    };
    return RadioControlValueAccessor;
  }());
  var RANGE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: _angular_core.forwardRef(function() {
      return RangeValueAccessor;
    }),
    multi: true
  };
  var RangeValueAccessor = (function() {
    function RangeValueAccessor(_renderer, _elementRef) {
      this._renderer = _renderer;
      this._elementRef = _elementRef;
      this.onChange = function(_) {};
      this.onTouched = function() {};
    }
    RangeValueAccessor.prototype.writeValue = function(value) {
      this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', parseFloat(value));
    };
    RangeValueAccessor.prototype.registerOnChange = function(fn) {
      this.onChange = function(value) {
        fn(value == '' ? null : parseFloat(value));
      };
    };
    RangeValueAccessor.prototype.registerOnTouched = function(fn) {
      this.onTouched = fn;
    };
    RangeValueAccessor.prototype.setDisabledState = function(isDisabled) {
      this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
    };
    RangeValueAccessor.decorators = [{
      type: _angular_core.Directive,
      args: [{
        selector: 'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',
        host: {
          '(change)': 'onChange($event.target.value)',
          '(input)': 'onChange($event.target.value)',
          '(blur)': 'onTouched()'
        },
        providers: [RANGE_VALUE_ACCESSOR]
      }]
    }];
    RangeValueAccessor.ctorParameters = function() {
      return [{type: _angular_core.Renderer}, {type: _angular_core.ElementRef}];
    };
    return RangeValueAccessor;
  }());
  var SELECT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: _angular_core.forwardRef(function() {
      return SelectControlValueAccessor;
    }),
    multi: true
  };
  function _buildValueString(id, value) {
    if (id == null)
      return "" + value;
    if (!isPrimitive(value))
      value = 'Object';
    return (id + ": " + value).slice(0, 50);
  }
  function _extractId(valueString) {
    return valueString.split(':')[0];
  }
  var SelectControlValueAccessor = (function() {
    function SelectControlValueAccessor(_renderer, _elementRef) {
      this._renderer = _renderer;
      this._elementRef = _elementRef;
      this._optionMap = new Map();
      this._idCounter = 0;
      this.onChange = function(_) {};
      this.onTouched = function() {};
    }
    SelectControlValueAccessor.prototype.writeValue = function(value) {
      this.value = value;
      var valueString = _buildValueString(this._getOptionId(value), value);
      this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', valueString);
    };
    SelectControlValueAccessor.prototype.registerOnChange = function(fn) {
      var _this = this;
      this.onChange = function(valueString) {
        _this.value = valueString;
        fn(_this._getOptionValue(valueString));
      };
    };
    SelectControlValueAccessor.prototype.registerOnTouched = function(fn) {
      this.onTouched = fn;
    };
    SelectControlValueAccessor.prototype.setDisabledState = function(isDisabled) {
      this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
    };
    SelectControlValueAccessor.prototype._registerOption = function() {
      return (this._idCounter++).toString();
    };
    SelectControlValueAccessor.prototype._getOptionId = function(value) {
      for (var _i = 0,
          _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {
        var id = _a[_i];
        if (looseIdentical(this._optionMap.get(id), value))
          return id;
      }
      return null;
    };
    SelectControlValueAccessor.prototype._getOptionValue = function(valueString) {
      var id = _extractId(valueString);
      return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;
    };
    SelectControlValueAccessor.decorators = [{
      type: _angular_core.Directive,
      args: [{
        selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',
        host: {
          '(change)': 'onChange($event.target.value)',
          '(blur)': 'onTouched()'
        },
        providers: [SELECT_VALUE_ACCESSOR]
      }]
    }];
    SelectControlValueAccessor.ctorParameters = function() {
      return [{type: _angular_core.Renderer}, {type: _angular_core.ElementRef}];
    };
    return SelectControlValueAccessor;
  }());
  var NgSelectOption = (function() {
    function NgSelectOption(_element, _renderer, _select) {
      this._element = _element;
      this._renderer = _renderer;
      this._select = _select;
      if (this._select)
        this.id = this._select._registerOption();
    }
    Object.defineProperty(NgSelectOption.prototype, "ngValue", {
      set: function(value) {
        if (this._select == null)
          return;
        this._select._optionMap.set(this.id, value);
        this._setElementValue(_buildValueString(this.id, value));
        this._select.writeValue(this._select.value);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgSelectOption.prototype, "value", {
      set: function(value) {
        this._setElementValue(value);
        if (this._select)
          this._select.writeValue(this._select.value);
      },
      enumerable: true,
      configurable: true
    });
    NgSelectOption.prototype._setElementValue = function(value) {
      this._renderer.setElementProperty(this._element.nativeElement, 'value', value);
    };
    NgSelectOption.prototype.ngOnDestroy = function() {
      if (this._select) {
        this._select._optionMap.delete(this.id);
        this._select.writeValue(this._select.value);
      }
    };
    NgSelectOption.decorators = [{
      type: _angular_core.Directive,
      args: [{selector: 'option'}]
    }];
    NgSelectOption.ctorParameters = function() {
      return [{type: _angular_core.ElementRef}, {type: _angular_core.Renderer}, {
        type: SelectControlValueAccessor,
        decorators: [{type: _angular_core.Optional}, {type: _angular_core.Host}]
      }];
    };
    NgSelectOption.propDecorators = {
      'ngValue': [{
        type: _angular_core.Input,
        args: ['ngValue']
      }],
      'value': [{
        type: _angular_core.Input,
        args: ['value']
      }]
    };
    return NgSelectOption;
  }());
  var SELECT_MULTIPLE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: _angular_core.forwardRef(function() {
      return SelectMultipleControlValueAccessor;
    }),
    multi: true
  };
  function _buildValueString$1(id, value) {
    if (id == null)
      return "" + value;
    if (typeof value === 'string')
      value = "'" + value + "'";
    if (!isPrimitive(value))
      value = 'Object';
    return (id + ": " + value).slice(0, 50);
  }
  function _extractId$1(valueString) {
    return valueString.split(':')[0];
  }
  var SelectMultipleControlValueAccessor = (function() {
    function SelectMultipleControlValueAccessor(_renderer, _elementRef) {
      this._renderer = _renderer;
      this._elementRef = _elementRef;
      this._optionMap = new Map();
      this._idCounter = 0;
      this.onChange = function(_) {};
      this.onTouched = function() {};
    }
    SelectMultipleControlValueAccessor.prototype.writeValue = function(value) {
      var _this = this;
      this.value = value;
      var optionSelectedStateSetter;
      if (Array.isArray(value)) {
        var ids_1 = value.map(function(v) {
          return _this._getOptionId(v);
        });
        optionSelectedStateSetter = function(opt, o) {
          opt._setSelected(ids_1.indexOf(o.toString()) > -1);
        };
      } else {
        optionSelectedStateSetter = function(opt, o) {
          opt._setSelected(false);
        };
      }
      this._optionMap.forEach(optionSelectedStateSetter);
    };
    SelectMultipleControlValueAccessor.prototype.registerOnChange = function(fn) {
      var _this = this;
      this.onChange = function(_) {
        var selected = [];
        if (_.hasOwnProperty('selectedOptions')) {
          var options = _.selectedOptions;
          for (var i = 0; i < options.length; i++) {
            var opt = options.item(i);
            var val = _this._getOptionValue(opt.value);
            selected.push(val);
          }
        } else {
          var options = (_.options);
          for (var i = 0; i < options.length; i++) {
            var opt = options.item(i);
            if (opt.selected) {
              var val = _this._getOptionValue(opt.value);
              selected.push(val);
            }
          }
        }
        _this.value = selected;
        fn(selected);
      };
    };
    SelectMultipleControlValueAccessor.prototype.registerOnTouched = function(fn) {
      this.onTouched = fn;
    };
    SelectMultipleControlValueAccessor.prototype.setDisabledState = function(isDisabled) {
      this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
    };
    SelectMultipleControlValueAccessor.prototype._registerOption = function(value) {
      var id = (this._idCounter++).toString();
      this._optionMap.set(id, value);
      return id;
    };
    SelectMultipleControlValueAccessor.prototype._getOptionId = function(value) {
      for (var _i = 0,
          _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {
        var id = _a[_i];
        if (looseIdentical(this._optionMap.get(id)._value, value))
          return id;
      }
      return null;
    };
    SelectMultipleControlValueAccessor.prototype._getOptionValue = function(valueString) {
      var id = _extractId$1(valueString);
      return this._optionMap.has(id) ? this._optionMap.get(id)._value : valueString;
    };
    SelectMultipleControlValueAccessor.decorators = [{
      type: _angular_core.Directive,
      args: [{
        selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',
        host: {
          '(change)': 'onChange($event.target)',
          '(blur)': 'onTouched()'
        },
        providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]
      }]
    }];
    SelectMultipleControlValueAccessor.ctorParameters = function() {
      return [{type: _angular_core.Renderer}, {type: _angular_core.ElementRef}];
    };
    return SelectMultipleControlValueAccessor;
  }());
  var NgSelectMultipleOption = (function() {
    function NgSelectMultipleOption(_element, _renderer, _select) {
      this._element = _element;
      this._renderer = _renderer;
      this._select = _select;
      if (this._select) {
        this.id = this._select._registerOption(this);
      }
    }
    Object.defineProperty(NgSelectMultipleOption.prototype, "ngValue", {
      set: function(value) {
        if (this._select == null)
          return;
        this._value = value;
        this._setElementValue(_buildValueString$1(this.id, value));
        this._select.writeValue(this._select.value);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgSelectMultipleOption.prototype, "value", {
      set: function(value) {
        if (this._select) {
          this._value = value;
          this._setElementValue(_buildValueString$1(this.id, value));
          this._select.writeValue(this._select.value);
        } else {
          this._setElementValue(value);
        }
      },
      enumerable: true,
      configurable: true
    });
    NgSelectMultipleOption.prototype._setElementValue = function(value) {
      this._renderer.setElementProperty(this._element.nativeElement, 'value', value);
    };
    NgSelectMultipleOption.prototype._setSelected = function(selected) {
      this._renderer.setElementProperty(this._element.nativeElement, 'selected', selected);
    };
    NgSelectMultipleOption.prototype.ngOnDestroy = function() {
      if (this._select) {
        this._select._optionMap.delete(this.id);
        this._select.writeValue(this._select.value);
      }
    };
    NgSelectMultipleOption.decorators = [{
      type: _angular_core.Directive,
      args: [{selector: 'option'}]
    }];
    NgSelectMultipleOption.ctorParameters = function() {
      return [{type: _angular_core.ElementRef}, {type: _angular_core.Renderer}, {
        type: SelectMultipleControlValueAccessor,
        decorators: [{type: _angular_core.Optional}, {type: _angular_core.Host}]
      }];
    };
    NgSelectMultipleOption.propDecorators = {
      'ngValue': [{
        type: _angular_core.Input,
        args: ['ngValue']
      }],
      'value': [{
        type: _angular_core.Input,
        args: ['value']
      }]
    };
    return NgSelectMultipleOption;
  }());
  function controlPath(name, parent) {
    return parent.path.concat([name]);
  }
  function setUpControl(control, dir) {
    if (!control)
      _throwError(dir, 'Cannot find control with');
    if (!dir.valueAccessor)
      _throwError(dir, 'No value accessor for form control with');
    control.validator = Validators.compose([control.validator, dir.validator]);
    control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);
    dir.valueAccessor.writeValue(control.value);
    dir.valueAccessor.registerOnChange(function(newValue) {
      dir.viewToModelUpdate(newValue);
      control.markAsDirty();
      control.setValue(newValue, {emitModelToViewChange: false});
    });
    dir.valueAccessor.registerOnTouched(function() {
      return control.markAsTouched();
    });
    control.registerOnChange(function(newValue, emitModelEvent) {
      dir.valueAccessor.writeValue(newValue);
      if (emitModelEvent)
        dir.viewToModelUpdate(newValue);
    });
    if (dir.valueAccessor.setDisabledState) {
      control.registerOnDisabledChange(function(isDisabled) {
        dir.valueAccessor.setDisabledState(isDisabled);
      });
    }
    dir._rawValidators.forEach(function(validator) {
      if (((validator)).registerOnValidatorChange)
        ((validator)).registerOnValidatorChange(function() {
          return control.updateValueAndValidity();
        });
    });
    dir._rawAsyncValidators.forEach(function(validator) {
      if (((validator)).registerOnValidatorChange)
        ((validator)).registerOnValidatorChange(function() {
          return control.updateValueAndValidity();
        });
    });
  }
  function cleanUpControl(control, dir) {
    dir.valueAccessor.registerOnChange(function() {
      return _noControlError(dir);
    });
    dir.valueAccessor.registerOnTouched(function() {
      return _noControlError(dir);
    });
    dir._rawValidators.forEach(function(validator) {
      if (validator.registerOnValidatorChange) {
        validator.registerOnValidatorChange(null);
      }
    });
    dir._rawAsyncValidators.forEach(function(validator) {
      if (validator.registerOnValidatorChange) {
        validator.registerOnValidatorChange(null);
      }
    });
    if (control)
      control._clearChangeFns();
  }
  function setUpFormContainer(control, dir) {
    if (isBlank(control))
      _throwError(dir, 'Cannot find control with');
    control.validator = Validators.compose([control.validator, dir.validator]);
    control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);
  }
  function _noControlError(dir) {
    return _throwError(dir, 'There is no FormControl instance attached to form control element with');
  }
  function _throwError(dir, message) {
    var messageEnd;
    if (dir.path.length > 1) {
      messageEnd = "path: '" + dir.path.join(' -> ') + "'";
    } else if (dir.path[0]) {
      messageEnd = "name: '" + dir.path + "'";
    } else {
      messageEnd = 'unspecified name attribute';
    }
    throw new Error(message + " " + messageEnd);
  }
  function composeValidators(validators) {
    return isPresent(validators) ? Validators.compose(validators.map(normalizeValidator)) : null;
  }
  function composeAsyncValidators(validators) {
    return isPresent(validators) ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) : null;
  }
  function isPropertyUpdated(changes, viewModel) {
    if (!changes.hasOwnProperty('model'))
      return false;
    var change = changes['model'];
    if (change.isFirstChange())
      return true;
    return !looseIdentical(viewModel, change.currentValue);
  }
  var BUILTIN_ACCESSORS = [CheckboxControlValueAccessor, RangeValueAccessor, NumberValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor];
  function isBuiltInAccessor(valueAccessor) {
    return BUILTIN_ACCESSORS.some(function(a) {
      return valueAccessor.constructor === a;
    });
  }
  function selectValueAccessor(dir, valueAccessors) {
    if (!valueAccessors)
      return null;
    var defaultAccessor;
    var builtinAccessor;
    var customAccessor;
    valueAccessors.forEach(function(v) {
      if (v.constructor === DefaultValueAccessor) {
        defaultAccessor = v;
      } else if (isBuiltInAccessor(v)) {
        if (builtinAccessor)
          _throwError(dir, 'More than one built-in value accessor matches form control with');
        builtinAccessor = v;
      } else {
        if (customAccessor)
          _throwError(dir, 'More than one custom value accessor matches form control with');
        customAccessor = v;
      }
    });
    if (customAccessor)
      return customAccessor;
    if (builtinAccessor)
      return builtinAccessor;
    if (defaultAccessor)
      return defaultAccessor;
    _throwError(dir, 'No valid value accessor for form control with');
    return null;
  }
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var AbstractFormGroupDirective = (function(_super) {
    __extends(AbstractFormGroupDirective, _super);
    function AbstractFormGroupDirective() {
      _super.apply(this, arguments);
    }
    AbstractFormGroupDirective.prototype.ngOnInit = function() {
      this._checkParentType();
      this.formDirective.addFormGroup(this);
    };
    AbstractFormGroupDirective.prototype.ngOnDestroy = function() {
      if (this.formDirective) {
        this.formDirective.removeFormGroup(this);
      }
    };
    Object.defineProperty(AbstractFormGroupDirective.prototype, "control", {
      get: function() {
        return this.formDirective.getFormGroup(this);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractFormGroupDirective.prototype, "path", {
      get: function() {
        return controlPath(this.name, this._parent);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractFormGroupDirective.prototype, "formDirective", {
      get: function() {
        return this._parent ? this._parent.formDirective : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractFormGroupDirective.prototype, "validator", {
      get: function() {
        return composeValidators(this._validators);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractFormGroupDirective.prototype, "asyncValidator", {
      get: function() {
        return composeAsyncValidators(this._asyncValidators);
      },
      enumerable: true,
      configurable: true
    });
    AbstractFormGroupDirective.prototype._checkParentType = function() {};
    return AbstractFormGroupDirective;
  }(ControlContainer));
  var __extends$3 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var AbstractControlStatus = (function() {
    function AbstractControlStatus(cd) {
      this._cd = cd;
    }
    Object.defineProperty(AbstractControlStatus.prototype, "ngClassUntouched", {
      get: function() {
        return this._cd.control ? this._cd.control.untouched : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlStatus.prototype, "ngClassTouched", {
      get: function() {
        return this._cd.control ? this._cd.control.touched : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlStatus.prototype, "ngClassPristine", {
      get: function() {
        return this._cd.control ? this._cd.control.pristine : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlStatus.prototype, "ngClassDirty", {
      get: function() {
        return this._cd.control ? this._cd.control.dirty : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlStatus.prototype, "ngClassValid", {
      get: function() {
        return this._cd.control ? this._cd.control.valid : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlStatus.prototype, "ngClassInvalid", {
      get: function() {
        return this._cd.control ? this._cd.control.invalid : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlStatus.prototype, "ngClassPending", {
      get: function() {
        return this._cd.control ? this._cd.control.pending : false;
      },
      enumerable: true,
      configurable: true
    });
    return AbstractControlStatus;
  }());
  var ngControlStatusHost = {
    '[class.ng-untouched]': 'ngClassUntouched',
    '[class.ng-touched]': 'ngClassTouched',
    '[class.ng-pristine]': 'ngClassPristine',
    '[class.ng-dirty]': 'ngClassDirty',
    '[class.ng-valid]': 'ngClassValid',
    '[class.ng-invalid]': 'ngClassInvalid',
    '[class.ng-pending]': 'ngClassPending'
  };
  var NgControlStatus = (function(_super) {
    __extends$3(NgControlStatus, _super);
    function NgControlStatus(cd) {
      _super.call(this, cd);
    }
    NgControlStatus.decorators = [{
      type: _angular_core.Directive,
      args: [{
        selector: '[formControlName],[ngModel],[formControl]',
        host: ngControlStatusHost
      }]
    }];
    NgControlStatus.ctorParameters = function() {
      return [{
        type: NgControl,
        decorators: [{type: _angular_core.Self}]
      }];
    };
    return NgControlStatus;
  }(AbstractControlStatus));
  var NgControlStatusGroup = (function(_super) {
    __extends$3(NgControlStatusGroup, _super);
    function NgControlStatusGroup(cd) {
      _super.call(this, cd);
    }
    NgControlStatusGroup.decorators = [{
      type: _angular_core.Directive,
      args: [{
        selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',
        host: ngControlStatusHost
      }]
    }];
    NgControlStatusGroup.ctorParameters = function() {
      return [{
        type: ControlContainer,
        decorators: [{type: _angular_core.Self}]
      }];
    };
    return NgControlStatusGroup;
  }(AbstractControlStatus));
  var __extends$5 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var EventEmitter = (function(_super) {
    __extends$5(EventEmitter, _super);
    function EventEmitter(isAsync) {
      if (isAsync === void 0) {
        isAsync = false;
      }
      _super.call(this);
      this.__isAsync = isAsync;
    }
    EventEmitter.prototype.emit = function(value) {
      _super.prototype.next.call(this, value);
    };
    EventEmitter.prototype.subscribe = function(generatorOrNext, error, complete) {
      var schedulerFn;
      var errorFn = function(err) {
        return null;
      };
      var completeFn = function() {
        return null;
      };
      if (generatorOrNext && typeof generatorOrNext === 'object') {
        schedulerFn = this.__isAsync ? function(value) {
          setTimeout(function() {
            return generatorOrNext.next(value);
          });
        } : function(value) {
          generatorOrNext.next(value);
        };
        if (generatorOrNext.error) {
          errorFn = this.__isAsync ? function(err) {
            setTimeout(function() {
              return generatorOrNext.error(err);
            });
          } : function(err) {
            generatorOrNext.error(err);
          };
        }
        if (generatorOrNext.complete) {
          completeFn = this.__isAsync ? function() {
            setTimeout(function() {
              return generatorOrNext.complete();
            });
          } : function() {
            generatorOrNext.complete();
          };
        }
      } else {
        schedulerFn = this.__isAsync ? function(value) {
          setTimeout(function() {
            return generatorOrNext(value);
          });
        } : function(value) {
          generatorOrNext(value);
        };
        if (error) {
          errorFn = this.__isAsync ? function(err) {
            setTimeout(function() {
              return error(err);
            });
          } : function(err) {
            error(err);
          };
        }
        if (complete) {
          completeFn = this.__isAsync ? function() {
            setTimeout(function() {
              return complete();
            });
          } : function() {
            complete();
          };
        }
      }
      return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
    };
    return EventEmitter;
  }(rxjs_Subject.Subject));
  var __extends$6 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var VALID = 'VALID';
  var INVALID = 'INVALID';
  var PENDING = 'PENDING';
  var DISABLED = 'DISABLED';
  function _find(control, path, delimiter) {
    if (path == null)
      return null;
    if (!(path instanceof Array)) {
      path = ((path)).split(delimiter);
    }
    if (path instanceof Array && (path.length === 0))
      return null;
    return ((path)).reduce(function(v, name) {
      if (v instanceof FormGroup) {
        return v.controls[name] || null;
      }
      if (v instanceof FormArray) {
        return v.at((name)) || null;
      }
      return null;
    }, control);
  }
  function toObservable(r) {
    return isPromise(r) ? rxjs_observable_fromPromise.fromPromise(r) : r;
  }
  function coerceToValidator(validator) {
    return Array.isArray(validator) ? composeValidators(validator) : validator;
  }
  function coerceToAsyncValidator(asyncValidator) {
    return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) : asyncValidator;
  }
  var AbstractControl = (function() {
    function AbstractControl(validator, asyncValidator) {
      this.validator = validator;
      this.asyncValidator = asyncValidator;
      this._onCollectionChange = function() {};
      this._pristine = true;
      this._touched = false;
      this._onDisabledChange = [];
    }
    Object.defineProperty(AbstractControl.prototype, "value", {
      get: function() {
        return this._value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "parent", {
      get: function() {
        return this._parent;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "status", {
      get: function() {
        return this._status;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "valid", {
      get: function() {
        return this._status === VALID;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "invalid", {
      get: function() {
        return this._status === INVALID;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "pending", {
      get: function() {
        return this._status == PENDING;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "disabled", {
      get: function() {
        return this._status === DISABLED;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "enabled", {
      get: function() {
        return this._status !== DISABLED;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "errors", {
      get: function() {
        return this._errors;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "pristine", {
      get: function() {
        return this._pristine;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "dirty", {
      get: function() {
        return !this.pristine;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "touched", {
      get: function() {
        return this._touched;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "untouched", {
      get: function() {
        return !this._touched;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "valueChanges", {
      get: function() {
        return this._valueChanges;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "statusChanges", {
      get: function() {
        return this._statusChanges;
      },
      enumerable: true,
      configurable: true
    });
    AbstractControl.prototype.setValidators = function(newValidator) {
      this.validator = coerceToValidator(newValidator);
    };
    AbstractControl.prototype.setAsyncValidators = function(newValidator) {
      this.asyncValidator = coerceToAsyncValidator(newValidator);
    };
    AbstractControl.prototype.clearValidators = function() {
      this.validator = null;
    };
    AbstractControl.prototype.clearAsyncValidators = function() {
      this.asyncValidator = null;
    };
    AbstractControl.prototype.markAsTouched = function(_a) {
      var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
      this._touched = true;
      if (this._parent && !onlySelf) {
        this._parent.markAsTouched({onlySelf: onlySelf});
      }
    };
    AbstractControl.prototype.markAsUntouched = function(_a) {
      var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
      this._touched = false;
      this._forEachChild(function(control) {
        control.markAsUntouched({onlySelf: true});
      });
      if (this._parent && !onlySelf) {
        this._parent._updateTouched({onlySelf: onlySelf});
      }
    };
    AbstractControl.prototype.markAsDirty = function(_a) {
      var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
      this._pristine = false;
      if (this._parent && !onlySelf) {
        this._parent.markAsDirty({onlySelf: onlySelf});
      }
    };
    AbstractControl.prototype.markAsPristine = function(_a) {
      var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
      this._pristine = true;
      this._forEachChild(function(control) {
        control.markAsPristine({onlySelf: true});
      });
      if (this._parent && !onlySelf) {
        this._parent._updatePristine({onlySelf: onlySelf});
      }
    };
    AbstractControl.prototype.markAsPending = function(_a) {
      var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
      this._status = PENDING;
      if (this._parent && !onlySelf) {
        this._parent.markAsPending({onlySelf: onlySelf});
      }
    };
    AbstractControl.prototype.disable = function(_a) {
      var _b = _a === void 0 ? {} : _a,
          onlySelf = _b.onlySelf,
          emitEvent = _b.emitEvent;
      this._status = DISABLED;
      this._errors = null;
      this._forEachChild(function(control) {
        control.disable({onlySelf: true});
      });
      this._updateValue();
      if (emitEvent !== false) {
        this._valueChanges.emit(this._value);
        this._statusChanges.emit(this._status);
      }
      this._updateAncestors(onlySelf);
      this._onDisabledChange.forEach(function(changeFn) {
        return changeFn(true);
      });
    };
    AbstractControl.prototype.enable = function(_a) {
      var _b = _a === void 0 ? {} : _a,
          onlySelf = _b.onlySelf,
          emitEvent = _b.emitEvent;
      this._status = VALID;
      this._forEachChild(function(control) {
        control.enable({onlySelf: true});
      });
      this.updateValueAndValidity({
        onlySelf: true,
        emitEvent: emitEvent
      });
      this._updateAncestors(onlySelf);
      this._onDisabledChange.forEach(function(changeFn) {
        return changeFn(false);
      });
    };
    AbstractControl.prototype._updateAncestors = function(onlySelf) {
      if (this._parent && !onlySelf) {
        this._parent.updateValueAndValidity();
        this._parent._updatePristine();
        this._parent._updateTouched();
      }
    };
    AbstractControl.prototype.setParent = function(parent) {
      this._parent = parent;
    };
    AbstractControl.prototype.setValue = function(value, options) {};
    AbstractControl.prototype.patchValue = function(value, options) {};
    AbstractControl.prototype.reset = function(value, options) {};
    AbstractControl.prototype.updateValueAndValidity = function(_a) {
      var _b = _a === void 0 ? {} : _a,
          onlySelf = _b.onlySelf,
          emitEvent = _b.emitEvent;
      this._setInitialStatus();
      this._updateValue();
      if (this.enabled) {
        this._errors = this._runValidator();
        this._status = this._calculateStatus();
        if (this._status === VALID || this._status === PENDING) {
          this._runAsyncValidator(emitEvent);
        }
      }
      if (emitEvent !== false) {
        this._valueChanges.emit(this._value);
        this._statusChanges.emit(this._status);
      }
      if (this._parent && !onlySelf) {
        this._parent.updateValueAndValidity({
          onlySelf: onlySelf,
          emitEvent: emitEvent
        });
      }
    };
    AbstractControl.prototype._updateTreeValidity = function(_a) {
      var emitEvent = (_a === void 0 ? {emitEvent: true} : _a).emitEvent;
      this._forEachChild(function(ctrl) {
        return ctrl._updateTreeValidity({emitEvent: emitEvent});
      });
      this.updateValueAndValidity({
        onlySelf: true,
        emitEvent: emitEvent
      });
    };
    AbstractControl.prototype._setInitialStatus = function() {
      this._status = this._allControlsDisabled() ? DISABLED : VALID;
    };
    AbstractControl.prototype._runValidator = function() {
      return this.validator ? this.validator(this) : null;
    };
    AbstractControl.prototype._runAsyncValidator = function(emitEvent) {
      var _this = this;
      if (this.asyncValidator) {
        this._status = PENDING;
        this._cancelExistingSubscription();
        var obs = toObservable(this.asyncValidator(this));
        this._asyncValidationSubscription = obs.subscribe({next: function(res) {
            return _this.setErrors(res, {emitEvent: emitEvent});
          }});
      }
    };
    AbstractControl.prototype._cancelExistingSubscription = function() {
      if (this._asyncValidationSubscription) {
        this._asyncValidationSubscription.unsubscribe();
      }
    };
    AbstractControl.prototype.setErrors = function(errors, _a) {
      var emitEvent = (_a === void 0 ? {} : _a).emitEvent;
      this._errors = errors;
      this._updateControlsErrors(emitEvent !== false);
    };
    AbstractControl.prototype.get = function(path) {
      return _find(this, path, '.');
    };
    AbstractControl.prototype.getError = function(errorCode, path) {
      if (path === void 0) {
        path = null;
      }
      var control = path ? this.get(path) : this;
      return control && control._errors ? control._errors[errorCode] : null;
    };
    AbstractControl.prototype.hasError = function(errorCode, path) {
      if (path === void 0) {
        path = null;
      }
      return !!this.getError(errorCode, path);
    };
    Object.defineProperty(AbstractControl.prototype, "root", {
      get: function() {
        var x = this;
        while (x._parent) {
          x = x._parent;
        }
        return x;
      },
      enumerable: true,
      configurable: true
    });
    AbstractControl.prototype._updateControlsErrors = function(emitEvent) {
      this._status = this._calculateStatus();
      if (emitEvent) {
        this._statusChanges.emit(this._status);
      }
      if (this._parent) {
        this._parent._updateControlsErrors(emitEvent);
      }
    };
    AbstractControl.prototype._initObservables = function() {
      this._valueChanges = new EventEmitter();
      this._statusChanges = new EventEmitter();
    };
    AbstractControl.prototype._calculateStatus = function() {
      if (this._allControlsDisabled())
        return DISABLED;
      if (this._errors)
        return INVALID;
      if (this._anyControlsHaveStatus(PENDING))
        return PENDING;
      if (this._anyControlsHaveStatus(INVALID))
        return INVALID;
      return VALID;
    };
    AbstractControl.prototype._updateValue = function() {};
    AbstractControl.prototype._forEachChild = function(cb) {};
    AbstractControl.prototype._anyControls = function(condition) {};
    AbstractControl.prototype._allControlsDisabled = function() {};
    AbstractControl.prototype._anyControlsHaveStatus = function(status) {
      return this._anyControls(function(control) {
        return control.status === status;
      });
    };
    AbstractControl.prototype._anyControlsDirty = function() {
      return this._anyControls(function(control) {
        return control.dirty;
      });
    };
    AbstractControl.prototype._anyControlsTouched = function() {
      return this._anyControls(function(control) {
        return control.touched;
      });
    };
    AbstractControl.prototype._updatePristine = function(_a) {
      var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
      this._pristine = !this._anyControlsDirty();
      if (this._parent && !onlySelf) {
        this._parent._updatePristine({onlySelf: onlySelf});
      }
    };
    AbstractControl.prototype._updateTouched = function(_a) {
      var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
      this._touched = this._anyControlsTouched();
      if (this._parent && !onlySelf) {
        this._parent._updateTouched({onlySelf: onlySelf});
      }
    };
    AbstractControl.prototype._isBoxedValue = function(formState) {
      return typeof formState === 'object' && formState !== null && Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;
    };
    AbstractControl.prototype._registerOnCollectionChange = function(fn) {
      this._onCollectionChange = fn;
    };
    return AbstractControl;
  }());
  var FormControl = (function(_super) {
    __extends$6(FormControl, _super);
    function FormControl(formState, validator, asyncValidator) {
      if (formState === void 0) {
        formState = null;
      }
      if (validator === void 0) {
        validator = null;
      }
      if (asyncValidator === void 0) {
        asyncValidator = null;
      }
      _super.call(this, coerceToValidator(validator), coerceToAsyncValidator(asyncValidator));
      this._onChange = [];
      this._applyFormState(formState);
      this.updateValueAndValidity({
        onlySelf: true,
        emitEvent: false
      });
      this._initObservables();
    }
    FormControl.prototype.setValue = function(value, _a) {
      var _this = this;
      var _b = _a === void 0 ? {} : _a,
          onlySelf = _b.onlySelf,
          emitEvent = _b.emitEvent,
          emitModelToViewChange = _b.emitModelToViewChange,
          emitViewToModelChange = _b.emitViewToModelChange;
      this._value = value;
      if (this._onChange.length && emitModelToViewChange !== false) {
        this._onChange.forEach(function(changeFn) {
          return changeFn(_this._value, emitViewToModelChange !== false);
        });
      }
      this.updateValueAndValidity({
        onlySelf: onlySelf,
        emitEvent: emitEvent
      });
    };
    FormControl.prototype.patchValue = function(value, options) {
      if (options === void 0) {
        options = {};
      }
      this.setValue(value, options);
    };
    FormControl.prototype.reset = function(formState, _a) {
      if (formState === void 0) {
        formState = null;
      }
      var _b = _a === void 0 ? {} : _a,
          onlySelf = _b.onlySelf,
          emitEvent = _b.emitEvent;
      this._applyFormState(formState);
      this.markAsPristine({onlySelf: onlySelf});
      this.markAsUntouched({onlySelf: onlySelf});
      this.setValue(this._value, {
        onlySelf: onlySelf,
        emitEvent: emitEvent
      });
    };
    FormControl.prototype._updateValue = function() {};
    FormControl.prototype._anyControls = function(condition) {
      return false;
    };
    FormControl.prototype._allControlsDisabled = function() {
      return this.disabled;
    };
    FormControl.prototype.registerOnChange = function(fn) {
      this._onChange.push(fn);
    };
    FormControl.prototype._clearChangeFns = function() {
      this._onChange = [];
      this._onDisabledChange = [];
      this._onCollectionChange = function() {};
    };
    FormControl.prototype.registerOnDisabledChange = function(fn) {
      this._onDisabledChange.push(fn);
    };
    FormControl.prototype._forEachChild = function(cb) {};
    FormControl.prototype._applyFormState = function(formState) {
      if (this._isBoxedValue(formState)) {
        this._value = formState.value;
        formState.disabled ? this.disable({
          onlySelf: true,
          emitEvent: false
        }) : this.enable({
          onlySelf: true,
          emitEvent: false
        });
      } else {
        this._value = formState;
      }
    };
    return FormControl;
  }(AbstractControl));
  var FormGroup = (function(_super) {
    __extends$6(FormGroup, _super);
    function FormGroup(controls, validator, asyncValidator) {
      if (validator === void 0) {
        validator = null;
      }
      if (asyncValidator === void 0) {
        asyncValidator = null;
      }
      _super.call(this, validator, asyncValidator);
      this.controls = controls;
      this._initObservables();
      this._setUpControls();
      this.updateValueAndValidity({
        onlySelf: true,
        emitEvent: false
      });
    }
    FormGroup.prototype.registerControl = function(name, control) {
      if (this.controls[name])
        return this.controls[name];
      this.controls[name] = control;
      control.setParent(this);
      control._registerOnCollectionChange(this._onCollectionChange);
      return control;
    };
    FormGroup.prototype.addControl = function(name, control) {
      this.registerControl(name, control);
      this.updateValueAndValidity();
      this._onCollectionChange();
    };
    FormGroup.prototype.removeControl = function(name) {
      if (this.controls[name])
        this.controls[name]._registerOnCollectionChange(function() {});
      delete(this.controls[name]);
      this.updateValueAndValidity();
      this._onCollectionChange();
    };
    FormGroup.prototype.setControl = function(name, control) {
      if (this.controls[name])
        this.controls[name]._registerOnCollectionChange(function() {});
      delete(this.controls[name]);
      if (control)
        this.registerControl(name, control);
      this.updateValueAndValidity();
      this._onCollectionChange();
    };
    FormGroup.prototype.contains = function(controlName) {
      return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;
    };
    FormGroup.prototype.setValue = function(value, _a) {
      var _this = this;
      var _b = _a === void 0 ? {} : _a,
          onlySelf = _b.onlySelf,
          emitEvent = _b.emitEvent;
      this._checkAllValuesPresent(value);
      Object.keys(value).forEach(function(name) {
        _this._throwIfControlMissing(name);
        _this.controls[name].setValue(value[name], {
          onlySelf: true,
          emitEvent: emitEvent
        });
      });
      this.updateValueAndValidity({
        onlySelf: onlySelf,
        emitEvent: emitEvent
      });
    };
    FormGroup.prototype.patchValue = function(value, _a) {
      var _this = this;
      var _b = _a === void 0 ? {} : _a,
          onlySelf = _b.onlySelf,
          emitEvent = _b.emitEvent;
      Object.keys(value).forEach(function(name) {
        if (_this.controls[name]) {
          _this.controls[name].patchValue(value[name], {
            onlySelf: true,
            emitEvent: emitEvent
          });
        }
      });
      this.updateValueAndValidity({
        onlySelf: onlySelf,
        emitEvent: emitEvent
      });
    };
    FormGroup.prototype.reset = function(value, _a) {
      if (value === void 0) {
        value = {};
      }
      var _b = _a === void 0 ? {} : _a,
          onlySelf = _b.onlySelf,
          emitEvent = _b.emitEvent;
      this._forEachChild(function(control, name) {
        control.reset(value[name], {
          onlySelf: true,
          emitEvent: emitEvent
        });
      });
      this.updateValueAndValidity({
        onlySelf: onlySelf,
        emitEvent: emitEvent
      });
      this._updatePristine({onlySelf: onlySelf});
      this._updateTouched({onlySelf: onlySelf});
    };
    FormGroup.prototype.getRawValue = function() {
      return this._reduceChildren({}, function(acc, control, name) {
        acc[name] = control.value;
        return acc;
      });
    };
    FormGroup.prototype._throwIfControlMissing = function(name) {
      if (!Object.keys(this.controls).length) {
        throw new Error("\n        There are no form controls registered with this group yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      ");
      }
      if (!this.controls[name]) {
        throw new Error("Cannot find form control with name: " + name + ".");
      }
    };
    FormGroup.prototype._forEachChild = function(cb) {
      var _this = this;
      Object.keys(this.controls).forEach(function(k) {
        return cb(_this.controls[k], k);
      });
    };
    FormGroup.prototype._setUpControls = function() {
      var _this = this;
      this._forEachChild(function(control) {
        control.setParent(_this);
        control._registerOnCollectionChange(_this._onCollectionChange);
      });
    };
    FormGroup.prototype._updateValue = function() {
      this._value = this._reduceValue();
    };
    FormGroup.prototype._anyControls = function(condition) {
      var _this = this;
      var res = false;
      this._forEachChild(function(control, name) {
        res = res || (_this.contains(name) && condition(control));
      });
      return res;
    };
    FormGroup.prototype._reduceValue = function() {
      var _this = this;
      return this._reduceChildren({}, function(acc, control, name) {
        if (control.enabled || _this.disabled) {
          acc[name] = control.value;
        }
        return acc;
      });
    };
    FormGroup.prototype._reduceChildren = function(initValue, fn) {
      var res = initValue;
      this._forEachChild(function(control, name) {
        res = fn(res, control, name);
      });
      return res;
    };
    FormGroup.prototype._allControlsDisabled = function() {
      for (var _i = 0,
          _a = Object.keys(this.controls); _i < _a.length; _i++) {
        var controlName = _a[_i];
        if (this.controls[controlName].enabled) {
          return false;
        }
      }
      return Object.keys(this.controls).length > 0 || this.disabled;
    };
    FormGroup.prototype._checkAllValuesPresent = function(value) {
      this._forEachChild(function(control, name) {
        if (value[name] === undefined) {
          throw new Error("Must supply a value for form control with name: '" + name + "'.");
        }
      });
    };
    return FormGroup;
  }(AbstractControl));
  var FormArray = (function(_super) {
    __extends$6(FormArray, _super);
    function FormArray(controls, validator, asyncValidator) {
      if (validator === void 0) {
        validator = null;
      }
      if (asyncValidator === void 0) {
        asyncValidator = null;
      }
      _super.call(this, validator, asyncValidator);
      this.controls = controls;
      this._initObservables();
      this._setUpControls();
      this.updateValueAndValidity({
        onlySelf: true,
        emitEvent: false
      });
    }
    FormArray.prototype.at = function(index) {
      return this.controls[index];
    };
    FormArray.prototype.push = function(control) {
      this.controls.push(control);
      this._registerControl(control);
      this.updateValueAndValidity();
      this._onCollectionChange();
    };
    FormArray.prototype.insert = function(index, control) {
      this.controls.splice(index, 0, control);
      this._registerControl(control);
      this.updateValueAndValidity();
      this._onCollectionChange();
    };
    FormArray.prototype.removeAt = function(index) {
      if (this.controls[index])
        this.controls[index]._registerOnCollectionChange(function() {});
      this.controls.splice(index, 1);
      this.updateValueAndValidity();
      this._onCollectionChange();
    };
    FormArray.prototype.setControl = function(index, control) {
      if (this.controls[index])
        this.controls[index]._registerOnCollectionChange(function() {});
      this.controls.splice(index, 1);
      if (control) {
        this.controls.splice(index, 0, control);
        this._registerControl(control);
      }
      this.updateValueAndValidity();
      this._onCollectionChange();
    };
    Object.defineProperty(FormArray.prototype, "length", {
      get: function() {
        return this.controls.length;
      },
      enumerable: true,
      configurable: true
    });
    FormArray.prototype.setValue = function(value, _a) {
      var _this = this;
      var _b = _a === void 0 ? {} : _a,
          onlySelf = _b.onlySelf,
          emitEvent = _b.emitEvent;
      this._checkAllValuesPresent(value);
      value.forEach(function(newValue, index) {
        _this._throwIfControlMissing(index);
        _this.at(index).setValue(newValue, {
          onlySelf: true,
          emitEvent: emitEvent
        });
      });
      this.updateValueAndValidity({
        onlySelf: onlySelf,
        emitEvent: emitEvent
      });
    };
    FormArray.prototype.patchValue = function(value, _a) {
      var _this = this;
      var _b = _a === void 0 ? {} : _a,
          onlySelf = _b.onlySelf,
          emitEvent = _b.emitEvent;
      value.forEach(function(newValue, index) {
        if (_this.at(index)) {
          _this.at(index).patchValue(newValue, {
            onlySelf: true,
            emitEvent: emitEvent
          });
        }
      });
      this.updateValueAndValidity({
        onlySelf: onlySelf,
        emitEvent: emitEvent
      });
    };
    FormArray.prototype.reset = function(value, _a) {
      if (value === void 0) {
        value = [];
      }
      var _b = _a === void 0 ? {} : _a,
          onlySelf = _b.onlySelf,
          emitEvent = _b.emitEvent;
      this._forEachChild(function(control, index) {
        control.reset(value[index], {
          onlySelf: true,
          emitEvent: emitEvent
        });
      });
      this.updateValueAndValidity({
        onlySelf: onlySelf,
        emitEvent: emitEvent
      });
      this._updatePristine({onlySelf: onlySelf});
      this._updateTouched({onlySelf: onlySelf});
    };
    FormArray.prototype.getRawValue = function() {
      return this.controls.map(function(control) {
        return control.value;
      });
    };
    FormArray.prototype._throwIfControlMissing = function(index) {
      if (!this.controls.length) {
        throw new Error("\n        There are no form controls registered with this array yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      ");
      }
      if (!this.at(index)) {
        throw new Error("Cannot find form control at index " + index);
      }
    };
    FormArray.prototype._forEachChild = function(cb) {
      this.controls.forEach(function(control, index) {
        cb(control, index);
      });
    };
    FormArray.prototype._updateValue = function() {
      var _this = this;
      this._value = this.controls.filter(function(control) {
        return control.enabled || _this.disabled;
      }).map(function(control) {
        return control.value;
      });
    };
    FormArray.prototype._anyControls = function(condition) {
      return this.controls.some(function(control) {
        return control.enabled && condition(control);
      });
    };
    FormArray.prototype._setUpControls = function() {
      var _this = this;
      this._forEachChild(function(control) {
        return _this._registerControl(control);
      });
    };
    FormArray.prototype._checkAllValuesPresent = function(value) {
      this._forEachChild(function(control, i) {
        if (value[i] === undefined) {
          throw new Error("Must supply a value for form control at index: " + i + ".");
        }
      });
    };
    FormArray.prototype._allControlsDisabled = function() {
      for (var _i = 0,
          _a = this.controls; _i < _a.length; _i++) {
        var control = _a[_i];
        if (control.enabled)
          return false;
      }
      return this.controls.length > 0 || this.disabled;
    };
    FormArray.prototype._registerControl = function(control) {
      control.setParent(this);
      control._registerOnCollectionChange(this._onCollectionChange);
    };
    return FormArray;
  }(AbstractControl));
  var __extends$4 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var formDirectiveProvider = {
    provide: ControlContainer,
    useExisting: _angular_core.forwardRef(function() {
      return NgForm;
    })
  };
  var resolvedPromise = Promise.resolve(null);
  var NgForm = (function(_super) {
    __extends$4(NgForm, _super);
    function NgForm(validators, asyncValidators) {
      _super.call(this);
      this._submitted = false;
      this.ngSubmit = new EventEmitter();
      this.form = new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));
    }
    Object.defineProperty(NgForm.prototype, "submitted", {
      get: function() {
        return this._submitted;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgForm.prototype, "formDirective", {
      get: function() {
        return this;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgForm.prototype, "control", {
      get: function() {
        return this.form;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgForm.prototype, "path", {
      get: function() {
        return [];
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgForm.prototype, "controls", {
      get: function() {
        return this.form.controls;
      },
      enumerable: true,
      configurable: true
    });
    NgForm.prototype.addControl = function(dir) {
      var _this = this;
      resolvedPromise.then(function() {
        var container = _this._findContainer(dir.path);
        dir._control = (container.registerControl(dir.name, dir.control));
        setUpControl(dir.control, dir);
        dir.control.updateValueAndValidity({emitEvent: false});
      });
    };
    NgForm.prototype.getControl = function(dir) {
      return (this.form.get(dir.path));
    };
    NgForm.prototype.removeControl = function(dir) {
      var _this = this;
      resolvedPromise.then(function() {
        var container = _this._findContainer(dir.path);
        if (container) {
          container.removeControl(dir.name);
        }
      });
    };
    NgForm.prototype.addFormGroup = function(dir) {
      var _this = this;
      resolvedPromise.then(function() {
        var container = _this._findContainer(dir.path);
        var group = new FormGroup({});
        setUpFormContainer(group, dir);
        container.registerControl(dir.name, group);
        group.updateValueAndValidity({emitEvent: false});
      });
    };
    NgForm.prototype.removeFormGroup = function(dir) {
      var _this = this;
      resolvedPromise.then(function() {
        var container = _this._findContainer(dir.path);
        if (container) {
          container.removeControl(dir.name);
        }
      });
    };
    NgForm.prototype.getFormGroup = function(dir) {
      return (this.form.get(dir.path));
    };
    NgForm.prototype.updateModel = function(dir, value) {
      var _this = this;
      resolvedPromise.then(function() {
        var ctrl = (_this.form.get(dir.path));
        ctrl.setValue(value);
      });
    };
    NgForm.prototype.setValue = function(value) {
      this.control.setValue(value);
    };
    NgForm.prototype.onSubmit = function($event) {
      this._submitted = true;
      this.ngSubmit.emit($event);
      return false;
    };
    NgForm.prototype.onReset = function() {
      this.resetForm();
    };
    NgForm.prototype.resetForm = function(value) {
      if (value === void 0) {
        value = undefined;
      }
      this.form.reset(value);
      this._submitted = false;
    };
    NgForm.prototype._findContainer = function(path) {
      path.pop();
      return path.length ? (this.form.get(path)) : this.form;
    };
    NgForm.decorators = [{
      type: _angular_core.Directive,
      args: [{
        selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]',
        providers: [formDirectiveProvider],
        host: {
          '(submit)': 'onSubmit($event)',
          '(reset)': 'onReset()'
        },
        outputs: ['ngSubmit'],
        exportAs: 'ngForm'
      }]
    }];
    NgForm.ctorParameters = function() {
      return [{
        type: Array,
        decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
          type: _angular_core.Inject,
          args: [NG_VALIDATORS]
        }]
      }, {
        type: Array,
        decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
          type: _angular_core.Inject,
          args: [NG_ASYNC_VALIDATORS]
        }]
      }];
    };
    return NgForm;
  }(ControlContainer));
  var Examples = {
    formControlName: "\n    <div [formGroup]=\"myGroup\">\n      <input formControlName=\"firstName\">\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       firstName: new FormControl()\n    });",
    formGroupName: "\n    <div [formGroup]=\"myGroup\">\n       <div formGroupName=\"person\">\n          <input formControlName=\"firstName\">\n       </div>\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       person: new FormGroup({ firstName: new FormControl() })\n    });",
    formArrayName: "\n    <div [formGroup]=\"myGroup\">\n      <div formArrayName=\"cities\">\n        <div *ngFor=\"let city of cityArray.controls; let i=index\">\n          <input [formControlName]=\"i\">\n        </div>\n      </div>\n    </div>\n\n    In your class:\n\n    this.cityArray = new FormArray([new FormControl('SF')]);\n    this.myGroup = new FormGroup({\n      cities: this.cityArray\n    });",
    ngModelGroup: "\n    <form>\n       <div ngModelGroup=\"person\">\n          <input [(ngModel)]=\"person.name\" name=\"firstName\">\n       </div>\n    </form>",
    ngModelWithFormGroup: "\n    <div [formGroup]=\"myGroup\">\n       <input formControlName=\"firstName\">\n       <input [(ngModel)]=\"showMoreControls\" [ngModelOptions]=\"{standalone: true}\">\n    </div>\n  "
  };
  var TemplateDrivenErrors = (function() {
    function TemplateDrivenErrors() {}
    TemplateDrivenErrors.modelParentException = function() {
      throw new Error("\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\n      formGroup's partner directive \"formControlName\" instead.  Example:\n\n      " + Examples.formControlName + "\n\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\n\n      Example:\n\n      " + Examples.ngModelWithFormGroup);
    };
    TemplateDrivenErrors.formGroupNameException = function() {
      throw new Error("\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\n\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\n\n      " + Examples.formGroupName + "\n\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\n\n      " + Examples.ngModelGroup);
    };
    TemplateDrivenErrors.missingNameException = function() {
      throw new Error("If ngModel is used within a form tag, either the name attribute must be set or the form\n      control must be defined as 'standalone' in ngModelOptions.\n\n      Example 1: <input [(ngModel)]=\"person.firstName\" name=\"first\">\n      Example 2: <input [(ngModel)]=\"person.firstName\" [ngModelOptions]=\"{standalone: true}\">");
    };
    TemplateDrivenErrors.modelGroupParentException = function() {
      throw new Error("\n      ngModelGroup cannot be used with a parent formGroup directive.\n\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\n\n      " + Examples.formGroupName + "\n\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\n\n      " + Examples.ngModelGroup);
    };
    return TemplateDrivenErrors;
  }());
  var __extends$8 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var modelGroupProvider = {
    provide: ControlContainer,
    useExisting: _angular_core.forwardRef(function() {
      return NgModelGroup;
    })
  };
  var NgModelGroup = (function(_super) {
    __extends$8(NgModelGroup, _super);
    function NgModelGroup(parent, validators, asyncValidators) {
      _super.call(this);
      this._parent = parent;
      this._validators = validators;
      this._asyncValidators = asyncValidators;
    }
    NgModelGroup.prototype._checkParentType = function() {
      if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {
        TemplateDrivenErrors.modelGroupParentException();
      }
    };
    NgModelGroup.decorators = [{
      type: _angular_core.Directive,
      args: [{
        selector: '[ngModelGroup]',
        providers: [modelGroupProvider],
        exportAs: 'ngModelGroup'
      }]
    }];
    NgModelGroup.ctorParameters = function() {
      return [{
        type: ControlContainer,
        decorators: [{type: _angular_core.Host}, {type: _angular_core.SkipSelf}]
      }, {
        type: Array,
        decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
          type: _angular_core.Inject,
          args: [NG_VALIDATORS]
        }]
      }, {
        type: Array,
        decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
          type: _angular_core.Inject,
          args: [NG_ASYNC_VALIDATORS]
        }]
      }];
    };
    NgModelGroup.propDecorators = {'name': [{
        type: _angular_core.Input,
        args: ['ngModelGroup']
      }]};
    return NgModelGroup;
  }(AbstractFormGroupDirective));
  var __extends$7 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var formControlBinding = {
    provide: NgControl,
    useExisting: _angular_core.forwardRef(function() {
      return NgModel;
    })
  };
  var resolvedPromise$1 = Promise.resolve(null);
  var NgModel = (function(_super) {
    __extends$7(NgModel, _super);
    function NgModel(parent, validators, asyncValidators, valueAccessors) {
      _super.call(this);
      this._control = new FormControl();
      this._registered = false;
      this.update = new EventEmitter();
      this._parent = parent;
      this._rawValidators = validators || [];
      this._rawAsyncValidators = asyncValidators || [];
      this.valueAccessor = selectValueAccessor(this, valueAccessors);
    }
    NgModel.prototype.ngOnChanges = function(changes) {
      this._checkForErrors();
      if (!this._registered)
        this._setUpControl();
      if ('isDisabled' in changes) {
        this._updateDisabled(changes);
      }
      if (isPropertyUpdated(changes, this.viewModel)) {
        this._updateValue(this.model);
        this.viewModel = this.model;
      }
    };
    NgModel.prototype.ngOnDestroy = function() {
      this.formDirective && this.formDirective.removeControl(this);
    };
    Object.defineProperty(NgModel.prototype, "control", {
      get: function() {
        return this._control;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgModel.prototype, "path", {
      get: function() {
        return this._parent ? controlPath(this.name, this._parent) : [this.name];
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgModel.prototype, "formDirective", {
      get: function() {
        return this._parent ? this._parent.formDirective : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgModel.prototype, "validator", {
      get: function() {
        return composeValidators(this._rawValidators);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgModel.prototype, "asyncValidator", {
      get: function() {
        return composeAsyncValidators(this._rawAsyncValidators);
      },
      enumerable: true,
      configurable: true
    });
    NgModel.prototype.viewToModelUpdate = function(newValue) {
      this.viewModel = newValue;
      this.update.emit(newValue);
    };
    NgModel.prototype._setUpControl = function() {
      this._isStandalone() ? this._setUpStandalone() : this.formDirective.addControl(this);
      this._registered = true;
    };
    NgModel.prototype._isStandalone = function() {
      return !this._parent || (this.options && this.options.standalone);
    };
    NgModel.prototype._setUpStandalone = function() {
      setUpControl(this._control, this);
      this._control.updateValueAndValidity({emitEvent: false});
    };
    NgModel.prototype._checkForErrors = function() {
      if (!this._isStandalone()) {
        this._checkParentType();
      }
      this._checkName();
    };
    NgModel.prototype._checkParentType = function() {
      if (!(this._parent instanceof NgModelGroup) && this._parent instanceof AbstractFormGroupDirective) {
        TemplateDrivenErrors.formGroupNameException();
      } else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {
        TemplateDrivenErrors.modelParentException();
      }
    };
    NgModel.prototype._checkName = function() {
      if (this.options && this.options.name)
        this.name = this.options.name;
      if (!this._isStandalone() && !this.name) {
        TemplateDrivenErrors.missingNameException();
      }
    };
    NgModel.prototype._updateValue = function(value) {
      var _this = this;
      resolvedPromise$1.then(function() {
        _this.control.setValue(value, {emitViewToModelChange: false});
      });
    };
    NgModel.prototype._updateDisabled = function(changes) {
      var _this = this;
      var disabledValue = changes['isDisabled'].currentValue;
      var isDisabled = disabledValue === '' || (disabledValue && disabledValue !== 'false');
      resolvedPromise$1.then(function() {
        if (isDisabled && !_this.control.disabled) {
          _this.control.disable();
        } else if (!isDisabled && _this.control.disabled) {
          _this.control.enable();
        }
      });
    };
    NgModel.decorators = [{
      type: _angular_core.Directive,
      args: [{
        selector: '[ngModel]:not([formControlName]):not([formControl])',
        providers: [formControlBinding],
        exportAs: 'ngModel'
      }]
    }];
    NgModel.ctorParameters = function() {
      return [{
        type: ControlContainer,
        decorators: [{type: _angular_core.Optional}, {type: _angular_core.Host}]
      }, {
        type: Array,
        decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
          type: _angular_core.Inject,
          args: [NG_VALIDATORS]
        }]
      }, {
        type: Array,
        decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
          type: _angular_core.Inject,
          args: [NG_ASYNC_VALIDATORS]
        }]
      }, {
        type: Array,
        decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
          type: _angular_core.Inject,
          args: [NG_VALUE_ACCESSOR]
        }]
      }];
    };
    NgModel.propDecorators = {
      'name': [{type: _angular_core.Input}],
      'isDisabled': [{
        type: _angular_core.Input,
        args: ['disabled']
      }],
      'model': [{
        type: _angular_core.Input,
        args: ['ngModel']
      }],
      'options': [{
        type: _angular_core.Input,
        args: ['ngModelOptions']
      }],
      'update': [{
        type: _angular_core.Output,
        args: ['ngModelChange']
      }]
    };
    return NgModel;
  }(NgControl));
  var ReactiveErrors = (function() {
    function ReactiveErrors() {}
    ReactiveErrors.controlParentException = function() {
      throw new Error("formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      " + Examples.formControlName);
    };
    ReactiveErrors.ngModelGroupException = function() {
      throw new Error("formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\n       that also have a \"form\" prefix: formGroupName, formArrayName, or formGroup.\n\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\n\n        " + Examples.formGroupName + "\n\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\n\n        " + Examples.ngModelGroup);
    };
    ReactiveErrors.missingFormException = function() {
      throw new Error("formGroup expects a FormGroup instance. Please pass one in.\n\n       Example:\n\n       " + Examples.formControlName);
    };
    ReactiveErrors.groupParentException = function() {
      throw new Error("formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\n      directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      " + Examples.formGroupName);
    };
    ReactiveErrors.arrayParentException = function() {
      throw new Error("formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n        Example:\n\n        " + Examples.formArrayName);
    };
    ReactiveErrors.disabledAttrWarning = function() {
      console.warn("\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\n      you. We recommend using this approach to avoid 'changed after checked' errors.\n       \n      Example: \n      form = new FormGroup({\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\n        last: new FormControl('Drew', Validators.required)\n      });\n    ");
    };
    return ReactiveErrors;
  }());
  var __extends$9 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var formControlBinding$1 = {
    provide: NgControl,
    useExisting: _angular_core.forwardRef(function() {
      return FormControlDirective;
    })
  };
  var FormControlDirective = (function(_super) {
    __extends$9(FormControlDirective, _super);
    function FormControlDirective(validators, asyncValidators, valueAccessors) {
      _super.call(this);
      this.update = new EventEmitter();
      this._rawValidators = validators || [];
      this._rawAsyncValidators = asyncValidators || [];
      this.valueAccessor = selectValueAccessor(this, valueAccessors);
    }
    Object.defineProperty(FormControlDirective.prototype, "isDisabled", {
      set: function(isDisabled) {
        ReactiveErrors.disabledAttrWarning();
      },
      enumerable: true,
      configurable: true
    });
    FormControlDirective.prototype.ngOnChanges = function(changes) {
      if (this._isControlChanged(changes)) {
        setUpControl(this.form, this);
        if (this.control.disabled && this.valueAccessor.setDisabledState) {
          this.valueAccessor.setDisabledState(true);
        }
        this.form.updateValueAndValidity({emitEvent: false});
      }
      if (isPropertyUpdated(changes, this.viewModel)) {
        this.form.setValue(this.model);
        this.viewModel = this.model;
      }
    };
    Object.defineProperty(FormControlDirective.prototype, "path", {
      get: function() {
        return [];
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FormControlDirective.prototype, "validator", {
      get: function() {
        return composeValidators(this._rawValidators);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FormControlDirective.prototype, "asyncValidator", {
      get: function() {
        return composeAsyncValidators(this._rawAsyncValidators);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FormControlDirective.prototype, "control", {
      get: function() {
        return this.form;
      },
      enumerable: true,
      configurable: true
    });
    FormControlDirective.prototype.viewToModelUpdate = function(newValue) {
      this.viewModel = newValue;
      this.update.emit(newValue);
    };
    FormControlDirective.prototype._isControlChanged = function(changes) {
      return changes.hasOwnProperty('form');
    };
    FormControlDirective.decorators = [{
      type: _angular_core.Directive,
      args: [{
        selector: '[formControl]',
        providers: [formControlBinding$1],
        exportAs: 'ngForm'
      }]
    }];
    FormControlDirective.ctorParameters = function() {
      return [{
        type: Array,
        decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
          type: _angular_core.Inject,
          args: [NG_VALIDATORS]
        }]
      }, {
        type: Array,
        decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
          type: _angular_core.Inject,
          args: [NG_ASYNC_VALIDATORS]
        }]
      }, {
        type: Array,
        decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
          type: _angular_core.Inject,
          args: [NG_VALUE_ACCESSOR]
        }]
      }];
    };
    FormControlDirective.propDecorators = {
      'form': [{
        type: _angular_core.Input,
        args: ['formControl']
      }],
      'model': [{
        type: _angular_core.Input,
        args: ['ngModel']
      }],
      'update': [{
        type: _angular_core.Output,
        args: ['ngModelChange']
      }],
      'isDisabled': [{
        type: _angular_core.Input,
        args: ['disabled']
      }]
    };
    return FormControlDirective;
  }(NgControl));
  var __extends$11 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var formDirectiveProvider$1 = {
    provide: ControlContainer,
    useExisting: _angular_core.forwardRef(function() {
      return FormGroupDirective;
    })
  };
  var FormGroupDirective = (function(_super) {
    __extends$11(FormGroupDirective, _super);
    function FormGroupDirective(_validators, _asyncValidators) {
      _super.call(this);
      this._validators = _validators;
      this._asyncValidators = _asyncValidators;
      this._submitted = false;
      this.directives = [];
      this.form = null;
      this.ngSubmit = new EventEmitter();
    }
    FormGroupDirective.prototype.ngOnChanges = function(changes) {
      this._checkFormPresent();
      if (changes.hasOwnProperty('form')) {
        this._updateValidators();
        this._updateDomValue();
        this._updateRegistrations();
      }
    };
    Object.defineProperty(FormGroupDirective.prototype, "submitted", {
      get: function() {
        return this._submitted;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FormGroupDirective.prototype, "formDirective", {
      get: function() {
        return this;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FormGroupDirective.prototype, "control", {
      get: function() {
        return this.form;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FormGroupDirective.prototype, "path", {
      get: function() {
        return [];
      },
      enumerable: true,
      configurable: true
    });
    FormGroupDirective.prototype.addControl = function(dir) {
      var ctrl = this.form.get(dir.path);
      setUpControl(ctrl, dir);
      ctrl.updateValueAndValidity({emitEvent: false});
      this.directives.push(dir);
      return ctrl;
    };
    FormGroupDirective.prototype.getControl = function(dir) {
      return (this.form.get(dir.path));
    };
    FormGroupDirective.prototype.removeControl = function(dir) {
      ListWrapper.remove(this.directives, dir);
    };
    FormGroupDirective.prototype.addFormGroup = function(dir) {
      var ctrl = this.form.get(dir.path);
      setUpFormContainer(ctrl, dir);
      ctrl.updateValueAndValidity({emitEvent: false});
    };
    FormGroupDirective.prototype.removeFormGroup = function(dir) {};
    FormGroupDirective.prototype.getFormGroup = function(dir) {
      return (this.form.get(dir.path));
    };
    FormGroupDirective.prototype.addFormArray = function(dir) {
      var ctrl = this.form.get(dir.path);
      setUpFormContainer(ctrl, dir);
      ctrl.updateValueAndValidity({emitEvent: false});
    };
    FormGroupDirective.prototype.removeFormArray = function(dir) {};
    FormGroupDirective.prototype.getFormArray = function(dir) {
      return (this.form.get(dir.path));
    };
    FormGroupDirective.prototype.updateModel = function(dir, value) {
      var ctrl = (this.form.get(dir.path));
      ctrl.setValue(value);
    };
    FormGroupDirective.prototype.onSubmit = function($event) {
      this._submitted = true;
      this.ngSubmit.emit($event);
      return false;
    };
    FormGroupDirective.prototype.onReset = function() {
      this.resetForm();
    };
    FormGroupDirective.prototype.resetForm = function(value) {
      if (value === void 0) {
        value = undefined;
      }
      this.form.reset(value);
      this._submitted = false;
    };
    FormGroupDirective.prototype._updateDomValue = function() {
      var _this = this;
      this.directives.forEach(function(dir) {
        var newCtrl = _this.form.get(dir.path);
        if (dir._control !== newCtrl) {
          cleanUpControl(dir._control, dir);
          if (newCtrl)
            setUpControl(newCtrl, dir);
          dir._control = newCtrl;
        }
      });
      this.form._updateTreeValidity({emitEvent: false});
    };
    FormGroupDirective.prototype._updateRegistrations = function() {
      var _this = this;
      this.form._registerOnCollectionChange(function() {
        return _this._updateDomValue();
      });
      if (this._oldForm)
        this._oldForm._registerOnCollectionChange(function() {});
      this._oldForm = this.form;
    };
    FormGroupDirective.prototype._updateValidators = function() {
      var sync = composeValidators(this._validators);
      this.form.validator = Validators.compose([this.form.validator, sync]);
      var async = composeAsyncValidators(this._asyncValidators);
      this.form.asyncValidator = Validators.composeAsync([this.form.asyncValidator, async]);
    };
    FormGroupDirective.prototype._checkFormPresent = function() {
      if (!this.form) {
        ReactiveErrors.missingFormException();
      }
    };
    FormGroupDirective.decorators = [{
      type: _angular_core.Directive,
      args: [{
        selector: '[formGroup]',
        providers: [formDirectiveProvider$1],
        host: {
          '(submit)': 'onSubmit($event)',
          '(reset)': 'onReset()'
        },
        exportAs: 'ngForm'
      }]
    }];
    FormGroupDirective.ctorParameters = function() {
      return [{
        type: Array,
        decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
          type: _angular_core.Inject,
          args: [NG_VALIDATORS]
        }]
      }, {
        type: Array,
        decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
          type: _angular_core.Inject,
          args: [NG_ASYNC_VALIDATORS]
        }]
      }];
    };
    FormGroupDirective.propDecorators = {
      'form': [{
        type: _angular_core.Input,
        args: ['formGroup']
      }],
      'ngSubmit': [{type: _angular_core.Output}]
    };
    return FormGroupDirective;
  }(ControlContainer));
  var __extends$12 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var formGroupNameProvider = {
    provide: ControlContainer,
    useExisting: _angular_core.forwardRef(function() {
      return FormGroupName;
    })
  };
  var FormGroupName = (function(_super) {
    __extends$12(FormGroupName, _super);
    function FormGroupName(parent, validators, asyncValidators) {
      _super.call(this);
      this._parent = parent;
      this._validators = validators;
      this._asyncValidators = asyncValidators;
    }
    FormGroupName.prototype._checkParentType = function() {
      if (_hasInvalidParent(this._parent)) {
        ReactiveErrors.groupParentException();
      }
    };
    FormGroupName.decorators = [{
      type: _angular_core.Directive,
      args: [{
        selector: '[formGroupName]',
        providers: [formGroupNameProvider]
      }]
    }];
    FormGroupName.ctorParameters = function() {
      return [{
        type: ControlContainer,
        decorators: [{type: _angular_core.Optional}, {type: _angular_core.Host}, {type: _angular_core.SkipSelf}]
      }, {
        type: Array,
        decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
          type: _angular_core.Inject,
          args: [NG_VALIDATORS]
        }]
      }, {
        type: Array,
        decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
          type: _angular_core.Inject,
          args: [NG_ASYNC_VALIDATORS]
        }]
      }];
    };
    FormGroupName.propDecorators = {'name': [{
        type: _angular_core.Input,
        args: ['formGroupName']
      }]};
    return FormGroupName;
  }(AbstractFormGroupDirective));
  var formArrayNameProvider = {
    provide: ControlContainer,
    useExisting: _angular_core.forwardRef(function() {
      return FormArrayName;
    })
  };
  var FormArrayName = (function(_super) {
    __extends$12(FormArrayName, _super);
    function FormArrayName(parent, validators, asyncValidators) {
      _super.call(this);
      this._parent = parent;
      this._validators = validators;
      this._asyncValidators = asyncValidators;
    }
    FormArrayName.prototype.ngOnInit = function() {
      this._checkParentType();
      this.formDirective.addFormArray(this);
    };
    FormArrayName.prototype.ngOnDestroy = function() {
      if (this.formDirective) {
        this.formDirective.removeFormArray(this);
      }
    };
    Object.defineProperty(FormArrayName.prototype, "control", {
      get: function() {
        return this.formDirective.getFormArray(this);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FormArrayName.prototype, "formDirective", {
      get: function() {
        return this._parent ? (this._parent.formDirective) : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FormArrayName.prototype, "path", {
      get: function() {
        return controlPath(this.name, this._parent);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FormArrayName.prototype, "validator", {
      get: function() {
        return composeValidators(this._validators);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FormArrayName.prototype, "asyncValidator", {
      get: function() {
        return composeAsyncValidators(this._asyncValidators);
      },
      enumerable: true,
      configurable: true
    });
    FormArrayName.prototype._checkParentType = function() {
      if (_hasInvalidParent(this._parent)) {
        ReactiveErrors.arrayParentException();
      }
    };
    FormArrayName.decorators = [{
      type: _angular_core.Directive,
      args: [{
        selector: '[formArrayName]',
        providers: [formArrayNameProvider]
      }]
    }];
    FormArrayName.ctorParameters = function() {
      return [{
        type: ControlContainer,
        decorators: [{type: _angular_core.Optional}, {type: _angular_core.Host}, {type: _angular_core.SkipSelf}]
      }, {
        type: Array,
        decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
          type: _angular_core.Inject,
          args: [NG_VALIDATORS]
        }]
      }, {
        type: Array,
        decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
          type: _angular_core.Inject,
          args: [NG_ASYNC_VALIDATORS]
        }]
      }];
    };
    FormArrayName.propDecorators = {'name': [{
        type: _angular_core.Input,
        args: ['formArrayName']
      }]};
    return FormArrayName;
  }(ControlContainer));
  function _hasInvalidParent(parent) {
    return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) && !(parent instanceof FormArrayName);
  }
  var __extends$10 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var controlNameBinding = {
    provide: NgControl,
    useExisting: _angular_core.forwardRef(function() {
      return FormControlName;
    })
  };
  var FormControlName = (function(_super) {
    __extends$10(FormControlName, _super);
    function FormControlName(parent, validators, asyncValidators, valueAccessors) {
      _super.call(this);
      this._added = false;
      this.update = new EventEmitter();
      this._parent = parent;
      this._rawValidators = validators || [];
      this._rawAsyncValidators = asyncValidators || [];
      this.valueAccessor = selectValueAccessor(this, valueAccessors);
    }
    Object.defineProperty(FormControlName.prototype, "isDisabled", {
      set: function(isDisabled) {
        ReactiveErrors.disabledAttrWarning();
      },
      enumerable: true,
      configurable: true
    });
    FormControlName.prototype.ngOnChanges = function(changes) {
      if (!this._added)
        this._setUpControl();
      if (isPropertyUpdated(changes, this.viewModel)) {
        this.viewModel = this.model;
        this.formDirective.updateModel(this, this.model);
      }
    };
    FormControlName.prototype.ngOnDestroy = function() {
      if (this.formDirective) {
        this.formDirective.removeControl(this);
      }
    };
    FormControlName.prototype.viewToModelUpdate = function(newValue) {
      this.viewModel = newValue;
      this.update.emit(newValue);
    };
    Object.defineProperty(FormControlName.prototype, "path", {
      get: function() {
        return controlPath(this.name, this._parent);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FormControlName.prototype, "formDirective", {
      get: function() {
        return this._parent ? this._parent.formDirective : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FormControlName.prototype, "validator", {
      get: function() {
        return composeValidators(this._rawValidators);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FormControlName.prototype, "asyncValidator", {
      get: function() {
        return composeAsyncValidators(this._rawAsyncValidators);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FormControlName.prototype, "control", {
      get: function() {
        return this._control;
      },
      enumerable: true,
      configurable: true
    });
    FormControlName.prototype._checkParentType = function() {
      if (!(this._parent instanceof FormGroupName) && this._parent instanceof AbstractFormGroupDirective) {
        ReactiveErrors.ngModelGroupException();
      } else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) && !(this._parent instanceof FormArrayName)) {
        ReactiveErrors.controlParentException();
      }
    };
    FormControlName.prototype._setUpControl = function() {
      this._checkParentType();
      this._control = this.formDirective.addControl(this);
      if (this.control.disabled && this.valueAccessor.setDisabledState) {
        this.valueAccessor.setDisabledState(true);
      }
      this._added = true;
    };
    FormControlName.decorators = [{
      type: _angular_core.Directive,
      args: [{
        selector: '[formControlName]',
        providers: [controlNameBinding]
      }]
    }];
    FormControlName.ctorParameters = function() {
      return [{
        type: ControlContainer,
        decorators: [{type: _angular_core.Optional}, {type: _angular_core.Host}, {type: _angular_core.SkipSelf}]
      }, {
        type: Array,
        decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
          type: _angular_core.Inject,
          args: [NG_VALIDATORS]
        }]
      }, {
        type: Array,
        decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
          type: _angular_core.Inject,
          args: [NG_ASYNC_VALIDATORS]
        }]
      }, {
        type: Array,
        decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
          type: _angular_core.Inject,
          args: [NG_VALUE_ACCESSOR]
        }]
      }];
    };
    FormControlName.propDecorators = {
      'name': [{
        type: _angular_core.Input,
        args: ['formControlName']
      }],
      'model': [{
        type: _angular_core.Input,
        args: ['ngModel']
      }],
      'update': [{
        type: _angular_core.Output,
        args: ['ngModelChange']
      }],
      'isDisabled': [{
        type: _angular_core.Input,
        args: ['disabled']
      }]
    };
    return FormControlName;
  }(NgControl));
  var __extends$13 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var REQUIRED_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: _angular_core.forwardRef(function() {
      return RequiredValidator;
    }),
    multi: true
  };
  var CHECKBOX_REQUIRED_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: _angular_core.forwardRef(function() {
      return CheckboxRequiredValidator;
    }),
    multi: true
  };
  var RequiredValidator = (function() {
    function RequiredValidator() {}
    Object.defineProperty(RequiredValidator.prototype, "required", {
      get: function() {
        return this._required;
      },
      set: function(value) {
        this._required = value != null && value !== false && "" + value !== 'false';
        if (this._onChange)
          this._onChange();
      },
      enumerable: true,
      configurable: true
    });
    RequiredValidator.prototype.validate = function(c) {
      return this.required ? Validators.required(c) : null;
    };
    RequiredValidator.prototype.registerOnValidatorChange = function(fn) {
      this._onChange = fn;
    };
    RequiredValidator.decorators = [{
      type: _angular_core.Directive,
      args: [{
        selector: ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',
        providers: [REQUIRED_VALIDATOR],
        host: {'[attr.required]': 'required ? "" : null'}
      }]
    }];
    RequiredValidator.ctorParameters = function() {
      return [];
    };
    RequiredValidator.propDecorators = {'required': [{type: _angular_core.Input}]};
    return RequiredValidator;
  }());
  var CheckboxRequiredValidator = (function(_super) {
    __extends$13(CheckboxRequiredValidator, _super);
    function CheckboxRequiredValidator() {
      _super.apply(this, arguments);
    }
    CheckboxRequiredValidator.prototype.validate = function(c) {
      return this.required ? Validators.requiredTrue(c) : null;
    };
    CheckboxRequiredValidator.decorators = [{
      type: _angular_core.Directive,
      args: [{
        selector: 'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',
        providers: [CHECKBOX_REQUIRED_VALIDATOR],
        host: {'[attr.required]': 'required ? "" : null'}
      }]
    }];
    CheckboxRequiredValidator.ctorParameters = function() {
      return [];
    };
    return CheckboxRequiredValidator;
  }(RequiredValidator));
  var MIN_LENGTH_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: _angular_core.forwardRef(function() {
      return MinLengthValidator;
    }),
    multi: true
  };
  var MinLengthValidator = (function() {
    function MinLengthValidator() {}
    MinLengthValidator.prototype.ngOnChanges = function(changes) {
      if ('minlength' in changes) {
        this._createValidator();
        if (this._onChange)
          this._onChange();
      }
    };
    MinLengthValidator.prototype.validate = function(c) {
      return this.minlength == null ? null : this._validator(c);
    };
    MinLengthValidator.prototype.registerOnValidatorChange = function(fn) {
      this._onChange = fn;
    };
    MinLengthValidator.prototype._createValidator = function() {
      this._validator = Validators.minLength(parseInt(this.minlength, 10));
    };
    MinLengthValidator.decorators = [{
      type: _angular_core.Directive,
      args: [{
        selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',
        providers: [MIN_LENGTH_VALIDATOR],
        host: {'[attr.minlength]': 'minlength ? minlength : null'}
      }]
    }];
    MinLengthValidator.ctorParameters = function() {
      return [];
    };
    MinLengthValidator.propDecorators = {'minlength': [{type: _angular_core.Input}]};
    return MinLengthValidator;
  }());
  var MAX_LENGTH_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: _angular_core.forwardRef(function() {
      return MaxLengthValidator;
    }),
    multi: true
  };
  var MaxLengthValidator = (function() {
    function MaxLengthValidator() {}
    MaxLengthValidator.prototype.ngOnChanges = function(changes) {
      if ('maxlength' in changes) {
        this._createValidator();
        if (this._onChange)
          this._onChange();
      }
    };
    MaxLengthValidator.prototype.validate = function(c) {
      return this.maxlength != null ? this._validator(c) : null;
    };
    MaxLengthValidator.prototype.registerOnValidatorChange = function(fn) {
      this._onChange = fn;
    };
    MaxLengthValidator.prototype._createValidator = function() {
      this._validator = Validators.maxLength(parseInt(this.maxlength, 10));
    };
    MaxLengthValidator.decorators = [{
      type: _angular_core.Directive,
      args: [{
        selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',
        providers: [MAX_LENGTH_VALIDATOR],
        host: {'[attr.maxlength]': 'maxlength ? maxlength : null'}
      }]
    }];
    MaxLengthValidator.ctorParameters = function() {
      return [];
    };
    MaxLengthValidator.propDecorators = {'maxlength': [{type: _angular_core.Input}]};
    return MaxLengthValidator;
  }());
  var PATTERN_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: _angular_core.forwardRef(function() {
      return PatternValidator;
    }),
    multi: true
  };
  var PatternValidator = (function() {
    function PatternValidator() {}
    PatternValidator.prototype.ngOnChanges = function(changes) {
      if ('pattern' in changes) {
        this._createValidator();
        if (this._onChange)
          this._onChange();
      }
    };
    PatternValidator.prototype.validate = function(c) {
      return this._validator(c);
    };
    PatternValidator.prototype.registerOnValidatorChange = function(fn) {
      this._onChange = fn;
    };
    PatternValidator.prototype._createValidator = function() {
      this._validator = Validators.pattern(this.pattern);
    };
    PatternValidator.decorators = [{
      type: _angular_core.Directive,
      args: [{
        selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',
        providers: [PATTERN_VALIDATOR],
        host: {'[attr.pattern]': 'pattern ? pattern : null'}
      }]
    }];
    PatternValidator.ctorParameters = function() {
      return [];
    };
    PatternValidator.propDecorators = {'pattern': [{type: _angular_core.Input}]};
    return PatternValidator;
  }());
  var FormBuilder = (function() {
    function FormBuilder() {}
    FormBuilder.prototype.group = function(controlsConfig, extra) {
      if (extra === void 0) {
        extra = null;
      }
      var controls = this._reduceControls(controlsConfig);
      var validator = isPresent(extra) ? extra['validator'] : null;
      var asyncValidator = isPresent(extra) ? extra['asyncValidator'] : null;
      return new FormGroup(controls, validator, asyncValidator);
    };
    FormBuilder.prototype.control = function(formState, validator, asyncValidator) {
      if (validator === void 0) {
        validator = null;
      }
      if (asyncValidator === void 0) {
        asyncValidator = null;
      }
      return new FormControl(formState, validator, asyncValidator);
    };
    FormBuilder.prototype.array = function(controlsConfig, validator, asyncValidator) {
      var _this = this;
      if (validator === void 0) {
        validator = null;
      }
      if (asyncValidator === void 0) {
        asyncValidator = null;
      }
      var controls = controlsConfig.map(function(c) {
        return _this._createControl(c);
      });
      return new FormArray(controls, validator, asyncValidator);
    };
    FormBuilder.prototype._reduceControls = function(controlsConfig) {
      var _this = this;
      var controls = {};
      Object.keys(controlsConfig).forEach(function(controlName) {
        controls[controlName] = _this._createControl(controlsConfig[controlName]);
      });
      return controls;
    };
    FormBuilder.prototype._createControl = function(controlConfig) {
      if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup || controlConfig instanceof FormArray) {
        return controlConfig;
      } else if (Array.isArray(controlConfig)) {
        var value = controlConfig[0];
        var validator = controlConfig.length > 1 ? controlConfig[1] : null;
        var asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;
        return this.control(value, validator, asyncValidator);
      } else {
        return this.control(controlConfig);
      }
    };
    FormBuilder.decorators = [{type: _angular_core.Injectable}];
    FormBuilder.ctorParameters = function() {
      return [];
    };
    return FormBuilder;
  }());
  var VERSION = new _angular_core.Version('2.4.2');
  var SHARED_FORM_DIRECTIVES = [NgSelectOption, NgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor, RangeValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MinLengthValidator, MaxLengthValidator, PatternValidator, CheckboxRequiredValidator];
  var TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];
  var REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];
  var InternalFormsSharedModule = (function() {
    function InternalFormsSharedModule() {}
    InternalFormsSharedModule.decorators = [{
      type: _angular_core.NgModule,
      args: [{
        declarations: SHARED_FORM_DIRECTIVES,
        exports: SHARED_FORM_DIRECTIVES
      }]
    }];
    InternalFormsSharedModule.ctorParameters = function() {
      return [];
    };
    return InternalFormsSharedModule;
  }());
  var FormsModule = (function() {
    function FormsModule() {}
    FormsModule.decorators = [{
      type: _angular_core.NgModule,
      args: [{
        declarations: TEMPLATE_DRIVEN_DIRECTIVES,
        providers: [RadioControlRegistry],
        exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]
      }]
    }];
    FormsModule.ctorParameters = function() {
      return [];
    };
    return FormsModule;
  }());
  var ReactiveFormsModule = (function() {
    function ReactiveFormsModule() {}
    ReactiveFormsModule.decorators = [{
      type: _angular_core.NgModule,
      args: [{
        declarations: [REACTIVE_DRIVEN_DIRECTIVES],
        providers: [FormBuilder, RadioControlRegistry],
        exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]
      }]
    }];
    ReactiveFormsModule.ctorParameters = function() {
      return [];
    };
    return ReactiveFormsModule;
  }());
  exports.AbstractControlDirective = AbstractControlDirective;
  exports.AbstractFormGroupDirective = AbstractFormGroupDirective;
  exports.CheckboxControlValueAccessor = CheckboxControlValueAccessor;
  exports.ControlContainer = ControlContainer;
  exports.NG_VALUE_ACCESSOR = NG_VALUE_ACCESSOR;
  exports.DefaultValueAccessor = DefaultValueAccessor;
  exports.NgControl = NgControl;
  exports.NgControlStatus = NgControlStatus;
  exports.NgControlStatusGroup = NgControlStatusGroup;
  exports.NgForm = NgForm;
  exports.NgModel = NgModel;
  exports.NgModelGroup = NgModelGroup;
  exports.RadioControlValueAccessor = RadioControlValueAccessor;
  exports.FormControlDirective = FormControlDirective;
  exports.FormControlName = FormControlName;
  exports.FormGroupDirective = FormGroupDirective;
  exports.FormArrayName = FormArrayName;
  exports.FormGroupName = FormGroupName;
  exports.NgSelectOption = NgSelectOption;
  exports.SelectControlValueAccessor = SelectControlValueAccessor;
  exports.SelectMultipleControlValueAccessor = SelectMultipleControlValueAccessor;
  exports.CheckboxRequiredValidator = CheckboxRequiredValidator;
  exports.MaxLengthValidator = MaxLengthValidator;
  exports.MinLengthValidator = MinLengthValidator;
  exports.PatternValidator = PatternValidator;
  exports.RequiredValidator = RequiredValidator;
  exports.FormBuilder = FormBuilder;
  exports.AbstractControl = AbstractControl;
  exports.FormArray = FormArray;
  exports.FormControl = FormControl;
  exports.FormGroup = FormGroup;
  exports.NG_ASYNC_VALIDATORS = NG_ASYNC_VALIDATORS;
  exports.NG_VALIDATORS = NG_VALIDATORS;
  exports.Validators = Validators;
  exports.VERSION = VERSION;
  exports.FormsModule = FormsModule;
  exports.ReactiveFormsModule = ReactiveFormsModule;
}));

})();
$__System.registerDynamic("App/routing/authguard.js", ["npm:@angular/core/bundles/core.umd.js", "npm:@angular/router/bundles/router.umd.js", "App/services/user-manager.service.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var router_1 = $__require("npm:@angular/router/bundles/router.umd.js");
    var user_manager_service_1 = $__require("App/services/user-manager.service.js");
    var ValidInformationGuard = function () {
        function ValidInformationGuard(userManagerService, router) {
            this.userManagerService = userManagerService;
            this.router = router;
        }
        ValidInformationGuard.prototype.canActivate = function (route, state) {
            var _this = this;
            return this.userManagerService.hasValidUserInformation().map(function (user) {
                if (!user) {
                    _this.router.navigateByUrl("/adduserinformation");
                    return false;
                }
                return true;
            });
        };
        return ValidInformationGuard;
    }();
    ValidInformationGuard = __decorate([core_1.Injectable(), __metadata("design:paramtypes", [user_manager_service_1.UserManagerService, router_1.Router])], ValidInformationGuard);
    exports.ValidInformationGuard = ValidInformationGuard;
    var LoggedInGuard = function () {
        function LoggedInGuard(userManagerService, router) {
            this.userManagerService = userManagerService;
            this.router = router;
        }
        LoggedInGuard.prototype.canActivate = function (route, state) {
            var _this = this;
            return this.userManagerService.isLoggedIn().map(function (res) {
                if (!res) {
                    _this.router.navigateByUrl('/login/');
                    return false;
                }
                return true;
            });
        };
        return LoggedInGuard;
    }();
    LoggedInGuard = __decorate([core_1.Injectable(), __metadata("design:paramtypes", [user_manager_service_1.UserManagerService, router_1.Router])], LoggedInGuard);
    exports.LoggedInGuard = LoggedInGuard;
    var RegisterGuard = function () {
        function RegisterGuard(userManagerService, router) {
            this.userManagerService = userManagerService;
            this.router = router;
        }
        RegisterGuard.prototype.canActivate = function (route, state) {
            var _this = this;
            return this.userManagerService.hasValidRegisterUser().map(function (res) {
                _this.userManagerService.setValidRegisterUser(res);
                if (!res) {
                    _this.router.navigateByUrl("/invalidregisteruser");
                    return false;
                }
                return true;
            }, function (error) {
                return console.log("Got error from backend");
            });
        };
        return RegisterGuard;
    }();
    RegisterGuard = __decorate([core_1.Injectable(), __metadata("design:paramtypes", [user_manager_service_1.UserManagerService, router_1.Router])], RegisterGuard);
    exports.RegisterGuard = RegisterGuard;
    var ChangeRegisterUserGuard = function () {
        function ChangeRegisterUserGuard(userManagerService, router) {
            this.userManagerService = userManagerService;
            this.router = router;
        }
        ChangeRegisterUserGuard.prototype.canActivate = function (route, state) {
            var _this = this;
            return this.userManagerService.hasValidRegisterUser().map(function (res) {
                if (res) {
                    _this.router.navigateByUrl("");
                    return false;
                }
                return true;
            });
        };
        return ChangeRegisterUserGuard;
    }();
    ChangeRegisterUserGuard = __decorate([core_1.Injectable(), __metadata("design:paramtypes", [user_manager_service_1.UserManagerService, router_1.Router])], ChangeRegisterUserGuard);
    exports.ChangeRegisterUserGuard = ChangeRegisterUserGuard;
    return module.exports;
});
$__System.registerDynamic("App/app.routing.js", ["npm:@angular/router/bundles/router.umd.js", "App/person/index/index.component.js", "App/login/login.component.js", "App/routing/authguard.js", "App/user/create-user/create-user.component.js", "App/user/invalid-register-user/invalid-register-user.component.js", "App/user/update-user/update-user.component.js", "App/user/forgotten-password/forgotten-password.component.js", "App/user/create-user/create-user-success.component.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var router_1 = $__require("npm:@angular/router/bundles/router.umd.js");
    var index_component_1 = $__require("App/person/index/index.component.js");
    var login_component_1 = $__require("App/login/login.component.js");
    var authguard_1 = $__require("App/routing/authguard.js");
    var create_user_component_1 = $__require("App/user/create-user/create-user.component.js");
    var invalid_register_user_component_1 = $__require("App/user/invalid-register-user/invalid-register-user.component.js");
    var update_user_component_1 = $__require("App/user/update-user/update-user.component.js");
    var forgotten_password_component_1 = $__require("App/user/forgotten-password/forgotten-password.component.js");
    var create_user_success_component_1 = $__require("App/user/create-user/create-user-success.component.js");
    var appRoutes = [{ path: "", component: index_component_1.IndexComponent, canActivate: [authguard_1.LoggedInGuard, authguard_1.RegisterGuard, authguard_1.ValidInformationGuard] }, { path: "changeuser", component: update_user_component_1.UpdateUserComponent, canActivate: [authguard_1.LoggedInGuard, authguard_1.RegisterGuard] }, { path: "createuser", component: create_user_component_1.CreateUserComponent }, { path: "createusersuccess", component: create_user_success_component_1.CreateUserSuccessComponent }, { path: "adduserinformation", component: update_user_component_1.UpdateUserComponent, canActivate: [authguard_1.LoggedInGuard] }, { path: "Login/ActivateMe", redirectTo: "", pathMatch: "prefix" }, { path: "login/:state", component: login_component_1.LoginComponent }, { path: "login", component: login_component_1.LoginComponent }, { path: "forgottenpassword", component: forgotten_password_component_1.ForgottenPasswordComponent }, { path: "invalidregisteruser", component: invalid_register_user_component_1.InvalidRegisterUserComponent, canActivate: [authguard_1.LoggedInGuard, authguard_1.ChangeRegisterUserGuard] }];
    exports.appRoutingProviders = [authguard_1.LoggedInGuard, authguard_1.RegisterGuard, authguard_1.ChangeRegisterUserGuard, authguard_1.ValidInformationGuard];
    exports.routing = router_1.RouterModule.forRoot(appRoutes);
    return module.exports;
});
$__System.registerDynamic("App/app.component.js", ["npm:@angular/core/bundles/core.umd.js", "npm:@angular/router/bundles/router.umd.js", "App/services/mediator.service.js", "App/models/UtilityModels.js", "App/services/user-manager.service.js", "npm:ng2-toastr/ng2-toastr.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var router_1 = $__require("npm:@angular/router/bundles/router.umd.js");
    var mediator_service_1 = $__require("App/services/mediator.service.js");
    var UtilityModels_1 = $__require("App/models/UtilityModels.js");
    var user_manager_service_1 = $__require("App/services/user-manager.service.js");
    var ng2_toastr_1 = $__require("npm:ng2-toastr/ng2-toastr.js");
    var AppComponent = function () {
        function AppComponent(userManagerService, router, mediatorService, toastr, vcRef) {
            var _this = this;
            this.userManagerService = userManagerService;
            this.router = router;
            this.mediatorService = mediatorService;
            this.toastr = toastr;
            this.vcRef = vcRef;
            this.registerUserCheckUrl = "";
            mediatorService.changeMainView$.subscribe(function (view) {
                return _this.switchView(view);
            });
            this.toastr.setRootViewContainerRef(vcRef);
        }
        AppComponent.prototype.showUserStatus = function () {
            return this.router.url === "/";
        };
        AppComponent.prototype.switchView = function (view) {
            if (view === UtilityModels_1.ChildViews.Surveillance && this.showUserStatus() && this.router.url === "/changeuser") {
                this.router.navigate([""]);
            }
        };
        AppComponent.prototype.goHome = function () {
            this.mediatorService.changeMainView(UtilityModels_1.ChildViews.Dashboard);
        };
        return AppComponent;
    }();
    AppComponent = __decorate([core_1.Component({
        selector: "my-app",
        moduleId: module.id,
        templateUrl: "app.component.html",
        styleUrls: ["app.component.css"]
    }), __metadata("design:paramtypes", [user_manager_service_1.UserManagerService, router_1.Router, mediator_service_1.MediatorService, ng2_toastr_1.ToastsManager, core_1.ViewContainerRef])], AppComponent);
    exports.AppComponent = AppComponent;
    return module.exports;
});
$__System.registerDynamic("App/person/search/person-search/person-search.component.js", ["npm:@angular/core/bundles/core.umd.js", "App/services/mediator.service.js", "App/services/search-manager.service.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var mediator_service_1 = $__require("App/services/mediator.service.js");
    var search_manager_service_1 = $__require("App/services/search-manager.service.js");
    var PersonSearchComponent = function () {
        function PersonSearchComponent(mediatorService, searchManager) {
            var _this = this;
            this.mediatorService = mediatorService;
            this.searchManager = searchManager;
            this.validSearchTerm = true;
            this.searchTerm = "";
            this.mediatorService.searchTerm$.subscribe(function (keyword) {
                _this.searchTerm = keyword.searchTerm;
                _this.validSearchTerm = _this.checkSearchTerm(keyword.searchTerm);
            });
        }
        PersonSearchComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.mediatorService.searching$.subscribe(function (value) {
                _this.loading = value;
            });
            this.mediatorService.clearSearchTerm$.subscribe(function () {
                return _this.searchTerm = "";
            });
        };
        PersonSearchComponent.prototype.search = function (keyword) {
            this.validSearchTerm = this.checkSearchTerm(keyword);
            if (this.validSearchTerm) this.searchManager.setSearchTerm(this.searchTerm);
            this.searchManager.performeSearch();
        };
        PersonSearchComponent.prototype.checkSearchTerm = function (keyword) {
            if (!keyword) return true;
            keyword = keyword.trim();
            this.searchTerm = keyword;
            if (keyword.length > 300) {
                this.setMessage("Søkeordene kan makismalt samlet lengde på 300 tegn", "negative");
                return false;
            }
            this.message = "";
            return true;
        };
        PersonSearchComponent.prototype.cancelSearch = function () {
            this.searchManager.cancelSearch();
        };
        PersonSearchComponent.prototype.blur = function (keyword) {
            this.validSearchTerm = this.checkSearchTerm(keyword);
            if (this.validSearchTerm) this.searchManager.setSearchTerm(this.searchTerm);
        };
        PersonSearchComponent.prototype.setMessage = function (message, messageClass) {
            this.message = message;
            this.messageClass = messageClass;
        };
        PersonSearchComponent.prototype.setLoadingStatus = function (flag) {
            this.loading = flag;
        };
        return PersonSearchComponent;
    }();
    PersonSearchComponent = __decorate([core_1.Component({
        selector: "person-search",
        moduleId: module.id,
        templateUrl: "person-search.component.html",
        styleUrls: ["person-search.component.css"]
    }), __metadata("design:paramtypes", [mediator_service_1.MediatorService, search_manager_service_1.SearchManagerService])], PersonSearchComponent);
    exports.PersonSearchComponent = PersonSearchComponent;
    return module.exports;
});
$__System.registerDynamic("App/person/person-detail/person-detail.component.js", ["npm:@angular/core/bundles/core.umd.js", "App/services/api.service.js", "App/services/mediator.service.js", "App/models/DataModels.js", "npm:ng2-toastr/ng2-toastr.js", "App/person/detailedWindow/family/familymodels.js", "App/models/UtilityModels.js", "App/services/data-manager.service.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var api_service_1 = $__require("App/services/api.service.js");
    var mediator_service_1 = $__require("App/services/mediator.service.js");
    var DataModels_1 = $__require("App/models/DataModels.js");
    var ng2_toastr_1 = $__require("npm:ng2-toastr/ng2-toastr.js");
    var familymodels_1 = $__require("App/person/detailedWindow/family/familymodels.js");
    var UtilityModels_1 = $__require("App/models/UtilityModels.js");
    var data_manager_service_1 = $__require("App/services/data-manager.service.js");
    var PersonDetailComponent = function () {
        function PersonDetailComponent(mediatorService, apiService, toastr, dataManagerService) {
            this.mediatorService = mediatorService;
            this.apiService = apiService;
            this.toastr = toastr;
            this.dataManagerService = dataManagerService;
            this.currentView = UtilityModels_1.ChildViews.None;
            this.childViews = UtilityModels_1.ChildViews;
            this.newTag = new core_1.EventEmitter();
            this.removeTag = new core_1.EventEmitter();
        }
        PersonDetailComponent.prototype.ngOnChanges = function () {
            var _this = this;
            this.checkInformation();
            this.commonid = this.person.commonIdentifier;
            this.dataManagerService.tags$.subscribe(function (tags) {
                _this.tags = tags;
            });
        };
        PersonDetailComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            $("#" + this.commonid + " .menu .item").tab({
                context: $("#" + this.commonid)
            });
            if (this.person.tags != undefined) {
                $("#" + this.commonid + "-dropdown").dropdown("set selected", this.getTagNames(this.person.tags));
            }
            $("#" + this.commonid + "-dropdown").dropdown({
                allowAdditions: true,
                forceSelection: false,
                onAdd: function (value, text) {
                    _this.newTag.emit(text);
                    _this.dataManagerService.addTag(text, String(_this.commonid), _this.person);
                },
                onRemove: function (value, text) {
                    _this.removeTag.emit(text);
                    _this.dataManagerService.removeTag(text, String(_this.commonid), _this.person);
                }
            });
        };
        PersonDetailComponent.prototype.getTagNames = function (tags) {
            var _this = this;
            return tags.map(function (t) {
                return _this.dataManagerService.getTagName(t);
            });
        };
        PersonDetailComponent.prototype.checkInformation = function () {
            this.containsPersonInformation = this.person.detail.pregJson != undefined;
            this.containsProfessionalInformation = this.person.detail.hprJson != undefined;
        };
        PersonDetailComponent.prototype.handleError = function (errorMessage) {
            var _this = this;
            console.log(errorMessage);
            this.errorMessage = errorMessage;
            this.toastr.error(errorMessage);
            setTimeout(function () {
                _this.errorMessage = "";
            }, 3000);
        };
        PersonDetailComponent.prototype.getFamily = function () {
            var _this = this;
            if (this.currentView === UtilityModels_1.ChildViews.Family) {
                this.currentView = UtilityModels_1.ChildViews.None;
                return;
            }
            this.loadingFamily = true;
            this.apiService.getFamily(this.person.commonIdentifier).then(function (data) {
                _this.family = new familymodels_1.Family(data);
                _this.currentView = UtilityModels_1.ChildViews.Family;
                _this.loadingFamily = false;
            }).catch(function (error) {
                return console.log("Somthing went wrong while getting family from the server. Error: " + error);
            });
        };
        PersonDetailComponent.prototype.showDetails = function (event) {
            switch (event.view) {
                case UtilityModels_1.ChildViews.Family:
                    this.getFamily();
                    break;
                case UtilityModels_1.ChildViews.Json:
                    if (this.currentHit === event.data && this.currentView === UtilityModels_1.ChildViews.Json) {
                        this.currentView = UtilityModels_1.ChildViews.None;
                        return;
                    }
                    this.currentHit = event.data;
                    this.currentView = UtilityModels_1.ChildViews.Json;
                    break;
                default:
                    break;
            }
        };
        PersonDetailComponent.prototype.closeDetails = function (view) {
            this.currentView = view;
        };
        return PersonDetailComponent;
    }();
    __decorate([core_1.Input(), __metadata("design:type", DataModels_1.RegisterPerson)], PersonDetailComponent.prototype, "person", void 0);
    __decorate([core_1.Input(), __metadata("design:type", String)], PersonDetailComponent.prototype, "location", void 0);
    __decorate([core_1.Input(), __metadata("design:type", Object)], PersonDetailComponent.prototype, "commonid", void 0);
    __decorate([core_1.Output(), __metadata("design:type", Object)], PersonDetailComponent.prototype, "newTag", void 0);
    __decorate([core_1.Output(), __metadata("design:type", Object)], PersonDetailComponent.prototype, "removeTag", void 0);
    PersonDetailComponent = __decorate([core_1.Component({
        selector: "person-detail",
        moduleId: module.id,
        templateUrl: "person-detail.component.html",
        styleUrls: ["person-detail.component.css"]
    }), __metadata("design:paramtypes", [mediator_service_1.MediatorService, api_service_1.ApiService, ng2_toastr_1.ToastsManager, data_manager_service_1.DataManagerService])], PersonDetailComponent);
    exports.PersonDetailComponent = PersonDetailComponent;
    return module.exports;
});
$__System.registerDynamic("App/person/surveillance/surveillance-overview/surveillance-overview.component.js", ["npm:@angular/core/bundles/core.umd.js", "App/services/api.service.js", "App/services/user-manager.service.js", "App/models/UtilityModels.js", "App/resources/app-settings.js", "App/services/data-manager.service.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var api_service_1 = $__require("App/services/api.service.js");
    var user_manager_service_1 = $__require("App/services/user-manager.service.js");
    var UtilityModels_1 = $__require("App/models/UtilityModels.js");
    var app_settings_1 = $__require("App/resources/app-settings.js");
    var data_manager_service_1 = $__require("App/services/data-manager.service.js");
    var SurveillanceOverview = function () {
        function SurveillanceOverview(apiService, userManagerService, dataManagerService) {
            this.apiService = apiService;
            this.userManagerService = userManagerService;
            this.dataManagerService = dataManagerService;
            this.location = app_settings_1.surveillanceLocation;
            this.childViews = UtilityModels_1.ChildViews;
            this.personalSurveillances = [];
            this.projectSurveillances = [];
            this.filter = [];
            this.isEmpty = true;
        }
        SurveillanceOverview.prototype.ngOnInit = function () {
            var _this = this;
            this.getTimeForNextCheck();
            this.dataManagerService.surveillanceResults$.subscribe(function (result) {
                if (result == undefined || result.length === 0) return;
                _this.personalSurveillances = [];
                _this.projectSurveillances = [];
                //sort to get unsynced on top
                _this.persons = result.filter(function (r) {
                    return r.latestSurveillanceResults != undefined && r.latestSurveillanceResults.some(function (s) {
                        return !s.success;
                    });
                }).concat(result.filter(function (r) {
                    return r.latestSurveillanceResults == undefined || !r.latestSurveillanceResults.some(function (s) {
                        return !s.success;
                    });
                }));
                _this.persons.forEach(function (p) {
                    if (p.surveillancesInfo.some(function (sb) {
                        return sb.registeredBy === _this.userManagerService.getName();
                    })) {
                        _this.personalSurveillances.push(p);
                    } else {
                        _this.projectSurveillances.push(p);
                    }
                });
                _this.team = _this.getTeamList(_this.projectSurveillances);
                _this.filter = _this.team.slice();
            });
        };
        SurveillanceOverview.prototype.getTeamList = function (list) {
            var t = [];
            for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
                var person = list_1[_i];
                if (person.latestSurveillanceResults) {
                    person.latestSurveillanceResults.forEach(function (p) {
                        t.push(p.registeredBy);
                    });
                }
            }
            var seen = {};
            return t.filter(function (x) {
                if (seen[x]) return;
                seen[x] = true;
                return x;
            });
        };
        SurveillanceOverview.prototype.getTimeForNextCheck = function () {
            var _this = this;
            this.apiService.getNextCheckTime().then(function (res) {
                if (res !== null) _this.nextCheck = new Date(res);
            }).catch(function (error) {
                console.log("Something went wrong " + error);
            });
            this.apiService.getPervousCheckTime().then(function (res) {
                if (res !== null) _this.latestCheck = new Date(res);
            }).catch(function (error) {
                console.log("Something went wrong " + error);
            });
        };
        SurveillanceOverview.prototype.onCheckBoxSelect = function (person, t) {
            if (t.checked) {
                this.filter.push(person);
            } else this.filter.splice(this.filter.indexOf(person), 1);
            this.projectSurveillances = this.filterList(this.filter);
        };
        SurveillanceOverview.prototype.filterList = function (team) {
            var _this = this;
            return this.persons.filter(function (f) {
                return f.surveillancesInfo.some(function (res) {
                    return team.indexOf(res.registeredBy) !== -1 && !f.surveillancesInfo.some(function (res) {
                        return res.registeredBy === _this.userManagerService.getName();
                    });
                });
            });
        };
        return SurveillanceOverview;
    }();
    SurveillanceOverview = __decorate([core_1.Component({
        selector: "surveillance-overview",
        moduleId: module.id,
        templateUrl: "surveillance-overview.component.html",
        styleUrls: ["surveillance-overview.component.css"]
    }), __metadata("design:paramtypes", [api_service_1.ApiService, user_manager_service_1.UserManagerService, data_manager_service_1.DataManagerService])], SurveillanceOverview);
    exports.SurveillanceOverview = SurveillanceOverview;
    return module.exports;
});
$__System.registerDynamic("App/person/surveillance/surveillance-status/surveillance-status.component.js", ["npm:@angular/core/bundles/core.umd.js", "App/services/data-manager.service.js", "App/services/mediator.service.js", "App/models/UtilityModels.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var data_manager_service_1 = $__require("App/services/data-manager.service.js");
    var mediator_service_1 = $__require("App/services/mediator.service.js");
    var UtilityModels_1 = $__require("App/models/UtilityModels.js");
    var SurveillanceStatusComponent = function () {
        function SurveillanceStatusComponent(dataManagerService, mediatorService) {
            this.dataManagerService = dataManagerService;
            this.mediatorService = mediatorService;
            this.load = true;
        }
        Object.defineProperty(SurveillanceStatusComponent.prototype, "loading", {
            get: function () {
                return this.load ? "active" : "";
            },
            enumerable: true,
            configurable: true
        });
        SurveillanceStatusComponent.prototype.showSurveillences = function () {
            this.mediatorService.changeMainView(UtilityModels_1.ChildViews.Surveillance);
        };
        SurveillanceStatusComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.status = new UtilityModels_1.SurveillanceInformation();
            this.dataManagerService.surveillanceStatus$.subscribe(function (data) {
                _this.load = false;
                _this.status = data;
            });
        };
        return SurveillanceStatusComponent;
    }();
    SurveillanceStatusComponent = __decorate([core_1.Component({
        selector: "surveillance-status",
        moduleId: module.id,
        templateUrl: "surveillance-status.component.html",
        styleUrls: ["surveillance-status.component.css"]
    }), __metadata("design:paramtypes", [data_manager_service_1.DataManagerService, mediator_service_1.MediatorService])], SurveillanceStatusComponent);
    exports.SurveillanceStatusComponent = SurveillanceStatusComponent;
    return module.exports;
});
$__System.registerDynamic("App/person/hit/hit-overview/hit-overview.component.js", ["npm:@angular/core/bundles/core.umd.js", "App/helpers/datehelper.js", "App/helpers/pregHelper.js", "App/person/hit/base-hit-tab.js", "npm:moment/moment.js", "App/resources/app-settings.js", "App/helpers/flrhelper.js", "App/helpers/registerhelper.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var datehelper_1 = $__require("App/helpers/datehelper.js");
    var pregHelper_1 = $__require("App/helpers/pregHelper.js");
    var base_hit_tab_1 = $__require("App/person/hit/base-hit-tab.js");
    var moment = $__require("npm:moment/moment.js");
    var app_settings_1 = $__require("App/resources/app-settings.js");
    var flrhelper_1 = $__require("App/helpers/flrhelper.js");
    var registerhelper_1 = $__require("App/helpers/registerhelper.js");
    var HitOverviewComponent = function (_super) {
        __extends(HitOverviewComponent, _super);
        function HitOverviewComponent() {
            return _super.apply(this, arguments) || this;
        }
        HitOverviewComponent.prototype.ngOnInit = function () {
            this.setDetails();
        };
        HitOverviewComponent.prototype.setDetails = function () {
            if (this.person.detail.pregJson != undefined) {
                var gender = +this.person.nin[8] % 2 === 0 ? "Kvinne" : "Mann";
                this.addDetail("Kjønn, alder: ", gender + ", " + (this.person.fodselsDato ? datehelper_1.getYearFromDateString(this.person.fodselsDato) : datehelper_1.getAgeFromNin(this.person.nin)) + " år", "", this.getGeneralInformation());
            } else {
                this.addDetail("", "Testobjektet har enten ikke registrert fødselsnummer i HPR, eller er ikke registert i PREG, så vi får ikke hentet personinformasjon fra PREG");
            }
            if (this.person.detail.hprJson != undefined) {
                var hprinfo = JSON.parse(this.getLatestJsonContent(app_settings_1.RegisterNames[app_settings_1.RegisterNames.Hpr]));
                var godkjenninger = hprinfo.Godkjenninger.filter(function (godkjenning) {
                    var til = godkjenning.Gyldig.Til;
                    if (til) {
                        return moment().diff(moment(til)) < 0;
                    }
                    return true;
                }).map(function (g) {
                    return g.Helsepersonellkategori.Beskrivelse;
                });
                if (godkjenninger.length > 0) this.addDetail("Godkjenning: ", "Autorisert " + godkjenninger.join(", ").toLowerCase());
            }
            if (this.person.detail.fastlegeJson) {
                var fastFlrInfo = JSON.parse(this.getLatestJsonContent(app_settings_1.RegisterNames[app_settings_1.RegisterNames.FlrDoctor]));
                var contracts = fastFlrInfo.Contracts.filter(function (con) {
                    return datehelper_1.isValidDate(con.Valid.From, con.Valid.To);
                });
                if (contracts.length > 0) {
                    var roles_1 = {};
                    contracts.forEach(function (c) {
                        var roleName = c.Relationship.CodeText.toLowerCase();
                        if (roles_1.hasOwnProperty(roleName)) {
                            roles_1[roleName].push(c.GPContract.GPOffice.DisplayName ? c.GPContract.GPOffice.DisplayName : c.GPContract.GPOffice.Name);
                        } else roles_1[roleName] = [c.GPContract.GPOffice.DisplayName ? c.GPContract.GPOffice.DisplayName : c.GPContract.GPOffice.Name];
                    });
                    this.addDetail("Yrke: ", "Jobber som " + Object.keys(roles_1).map(function (role) {
                        return role + " (" + roles_1[role].join(", ") + ")";
                    }).join(", "));
                }
            }
        };
        HitOverviewComponent.prototype.getGeneralInformation = function () {
            var pregInfo = JSON.parse(this.getLatestJsonContent(app_settings_1.RegisterNames[app_settings_1.RegisterNames.Preg]));
            var details = [];
            var d = [];
            if (this.person !== undefined) {
                d.push({
                    description: "Barn: ",
                    value: this.person.barn.length > 0 ? "Har barn" : "Har ikke barn"
                });
            }
            if (pregInfo.Addresses.length > 0) {
                pregInfo.Addresses.forEach(function (address) {
                    if (address.PostalType != null) d.push({ description: "Adressetype: ", value: pregHelper_1.getPostalType(address.PostalType), extra: "adressekode " + address.PostalType });
                });
            }
            if (this.person.detail.fastlegePasientJson) {
                var flrInfo = JSON.parse(this.getLatestJsonContent(app_settings_1.RegisterNames[app_settings_1.RegisterNames.FlrPasient]));
                if (flrInfo.DoctorCycles.length > 0) {
                    var fastlege = flrInfo.DoctorCycles.find(function (doc) {
                        return doc.Relationship.CodeValue === flrhelper_1.FastLegeCode && datehelper_1.isValidDate(doc.Valid.From, doc.Valid.To);
                    });
                    d.push({ description: "Fastlege: ", value: fastlege === undefined ? "Har ikke fastlege" : registerhelper_1.getGPname(fastlege.GP) });
                } else d.push({ description: "Fastlege: ", value: "Legeløs liste" });
            }
            details.push({ details: d });
            return details;
        };
        return HitOverviewComponent;
    }(base_hit_tab_1.BaseHitTab);
    HitOverviewComponent = __decorate([core_1.Component({
        selector: 'hit-overview',
        moduleId: module.id,
        templateUrl: 'hit-overview.component.html',
        styleUrls: ['../hit.css']
    }), __metadata("design:paramtypes", [])], HitOverviewComponent);
    exports.HitOverviewComponent = HitOverviewComponent;
    return module.exports;
});
$__System.registerDynamic("App/person/detailedWindow/json-detail/json-detail.component.js", ["npm:@angular/core/bundles/core.umd.js", "App/models/UtilityModels.js", "App/services/mediator.service.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var UtilityModels_1 = $__require("App/models/UtilityModels.js");
    var mediator_service_1 = $__require("App/services/mediator.service.js");
    var JsonDetailComponent = function () {
        function JsonDetailComponent(mediator) {
            this.mediator = mediator;
            this.onClose = new core_1.EventEmitter();
        }
        JsonDetailComponent.prototype.ngOnChanges = function () {
            this.createJSONFormatter();
        };
        JsonDetailComponent.prototype.close = function (event) {
            event.stopPropagation();
            this.onClose.emit(UtilityModels_1.ChildViews.None);
        };
        JsonDetailComponent.prototype.createJSONFormatter = function () {
            this.jsonContent = JSON.parse(this.content);
        };
        return JsonDetailComponent;
    }();
    __decorate([core_1.Input(), __metadata("design:type", String)], JsonDetailComponent.prototype, "content", void 0);
    __decorate([core_1.Output(), __metadata("design:type", Object)], JsonDetailComponent.prototype, "onClose", void 0);
    JsonDetailComponent = __decorate([core_1.Component({
        selector: "json-detail",
        moduleId: module.id,
        templateUrl: "json-detail.component.html",
        styleUrls: ["../detailedWindow.css"]
    }), __metadata("design:paramtypes", [mediator_service_1.MediatorService])], JsonDetailComponent);
    exports.JsonDetailComponent = JsonDetailComponent;
    return module.exports;
});
$__System.registerDynamic("App/person/detailedWindow/json-diff/json-diff.component.js", ["npm:@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var JsonDiffComponent = function () {
        function JsonDiffComponent() {}
        JsonDiffComponent.prototype.ngOnChanges = function () {
            if (this.beforeContent === undefined) return;
            console.log(this.beforeContent);
            if (this.beforeContent === "") {
                return;
            }
            //jsondiffpatch.formatters.html.hideUnchanged();
            var before = JSON.parse(this.beforeContent);
            var after = JSON.parse(this.afterContent);
            var delta = jsondiffpatch.diff(after, before);
            this.jsonDiffContent = jsondiffpatch.formatters.html.format(delta, after);
        };
        JsonDiffComponent.prototype.close = function (event) {
            event.stopPropagation();
        };
        return JsonDiffComponent;
    }();
    __decorate([core_1.Input(), __metadata("design:type", String)], JsonDiffComponent.prototype, "beforeContent", void 0);
    JsonDiffComponent = __decorate([core_1.Component({
        selector: "json-diff",
        moduleId: module.id,
        templateUrl: "json-diff.component.html",
        styleUrls: ["../detailedwindow.css"]
    }), __metadata("design:paramtypes", [])], JsonDiffComponent);
    exports.JsonDiffComponent = JsonDiffComponent;
    return module.exports;
});
$__System.registerDynamic("App/person/detailedWindow/family/familymodels.js", ["App/helpers/pregHelper.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var pregHelper_1 = $__require("App/helpers/pregHelper.js");
    var Family = function () {
        function Family(json) {
            this.father = this.mapPerson(json.father);
            this.mother = this.mapPerson(json.mother);
            this.person = this.mapPerson(json.person);
            this.children = this.mapChildren(json.children);
            if (this.father && this.mother) this.numberOfParents = 2;else if (this.father || this.mother) {
                this.numberOfParents = 1;
            } else {
                this.numberOfParents = 0;
            }
        }
        Family.prototype.mapPerson = function (json) {
            if (json == null) return null;
            var person = new FamilyMember();
            person.nin = json.nin;
            var middlename = json.middleName == null || json.middleName.length < 1 ? "" : " " + json.middleName;
            person.name = json.givenName + middlename + " " + json.sn;
            if (json.dateOfBirth) {
                person.birthDate = new Date(json.dateOfBirth);
                if (json.regStatus && json.regStatus === 5) person.deathDate = new Date(json.dateStatus);
                person.age = this.calculateAge(person.birthDate, person.deathDate);
            }
            person.dateAndAgeString = person.birthDate.getFullYear().toString();
            if (person.deathDate) person.dateAndAgeString += " - " + person.deathDate.getFullYear().toString();
            person.dateAndAgeString += " (" + person.age + " år)";
            if (json.custody != null) person.custody = "Foreldreansvar: " + pregHelper_1.getCustodyDescription(json.custody).toLowerCase();else {
                person.custody = "Ingen foreldreansvar";
            }
            return person;
        };
        Family.prototype.mapChildren = function (childrenAsJson) {
            var _this = this;
            if (childrenAsJson == null) return null;
            var children = [];
            childrenAsJson.map(function (child) {
                return children.push(_this.mapPerson(child));
            });
            return children;
        };
        Family.prototype.calculateAge = function (birthday, deathDate) {
            var dateFrom = deathDate ? deathDate.getTime() : Date.now();
            var ageDifMs = dateFrom - birthday.getTime();
            var ageDate = new Date(ageDifMs);
            return Math.abs(ageDate.getUTCFullYear() - 1970);
        };
        return Family;
    }();
    exports.Family = Family;
    var FamilyMember = function () {
        function FamilyMember() {}
        return FamilyMember;
    }();
    exports.FamilyMember = FamilyMember;
    return module.exports;
});
$__System.registerDynamic("App/person/detailedWindow/family/family.component.js", ["npm:@angular/core/bundles/core.umd.js", "App/person/detailedWindow/family/familymodels.js", "App/services/mediator.service.js", "App/models/UtilityModels.js", "App/services/search-manager.service.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var familymodels_1 = $__require("App/person/detailedWindow/family/familymodels.js");
    var mediator_service_1 = $__require("App/services/mediator.service.js");
    var UtilityModels_1 = $__require("App/models/UtilityModels.js");
    var search_manager_service_1 = $__require("App/services/search-manager.service.js");
    var FamilyComponent = function () {
        function FamilyComponent(mediator, searchManager) {
            this.mediator = mediator;
            this.searchManager = searchManager;
            this.onClose = new core_1.EventEmitter();
        }
        FamilyComponent.prototype.close = function (event) {
            event.stopPropagation();
            this.onClose.emit(UtilityModels_1.ChildViews.None);
        };
        FamilyComponent.prototype.searchForMember = function (member) {
            if (member.nin != undefined) {
                this.searchManager.searchWithNin(member.nin);
            }
        };
        FamilyComponent.prototype.searchForFamily = function () {
            var nins = [this.family.person.nin];
            if (this.family.father) nins.push(this.family.father.nin);
            if (this.family.mother) nins.push(this.family.mother.nin);
            if (this.family.children) this.family.children.forEach(function (p) {
                return nins.push(p.nin);
            });
            this.searchManager.searchForMultipleNins(nins);
        };
        return FamilyComponent;
    }();
    __decorate([core_1.Input(), __metadata("design:type", familymodels_1.Family)], FamilyComponent.prototype, "family", void 0);
    __decorate([core_1.Output(), __metadata("design:type", Object)], FamilyComponent.prototype, "onClose", void 0);
    FamilyComponent = __decorate([core_1.Component({
        selector: 'family',
        moduleId: module.id,
        templateUrl: 'family.component.html',
        styleUrls: ['family.component.css', '../detailedWindow.css']
    }), __metadata("design:paramtypes", [mediator_service_1.MediatorService, search_manager_service_1.SearchManagerService])], FamilyComponent);
    exports.FamilyComponent = FamilyComponent;
    return module.exports;
});
$__System.registerDynamic("App/person/filter/filter-container.component.js", ["npm:@angular/core/bundles/core.umd.js", "App/models/DataModels.js", "App/services/filter-manager.service.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var DataModels_1 = $__require("App/models/DataModels.js");
    var filter_manager_service_1 = $__require("App/services/filter-manager.service.js");
    var FilterContainerComponent = function () {
        function FilterContainerComponent(filterManager) {
            this.filterManager = filterManager;
            this.belongings = [DataModels_1.FilterBelonging.Preg, DataModels_1.FilterBelonging.Flr, DataModels_1.FilterBelonging.Hpr];
            this.fb = DataModels_1.FilterBelonging.All;
        }
        FilterContainerComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.filterManager.filters$.subscribe(function (filters) {
                _this.filters = filters;
                _this.tagGroup = filters.find(function (g) {
                    return g.name.toLowerCase() === "tags";
                });
            });
        };
        FilterContainerComponent.prototype.ngAfterViewInit = function () {
            $(".filteraccordion").accordion();
        };
        FilterContainerComponent.prototype.getFilters = function (beloning) {
            return this.filters.filter(function (f) {
                return f.belongsTo === beloning;
            });
        };
        return FilterContainerComponent;
    }();
    FilterContainerComponent = __decorate([core_1.Component({
        selector: "filter-container",
        moduleId: module.id,
        templateUrl: "filter-container.component.html",
        styleUrls: ["filter-container.component.css"]
    }), __metadata("design:paramtypes", [filter_manager_service_1.FilterManagerService])], FilterContainerComponent);
    exports.FilterContainerComponent = FilterContainerComponent;
    return module.exports;
});
$__System.registerDynamic("App/person/filter/filter-group.component.js", ["npm:@angular/core/bundles/core.umd.js", "App/models/DataModels.js", "App/services/filter-manager.service.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var DataModels_1 = $__require("App/models/DataModels.js");
    var filter_manager_service_1 = $__require("App/services/filter-manager.service.js");
    var FilterGroupComponent = function () {
        function FilterGroupComponent(filterManager) {
            this.filterManager = filterManager;
            this.displayFullList = false;
        }
        FilterGroupComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (this.filter.items === null || this.filter.items === undefined) return;
            this.initialPrioritizedFilters = this.filter.items.slice(0, this.filter.numberToShow);
            this.filter.items.map(function (item) {
                return item.filterType = _this.filter.type;
            });
        };
        Object.defineProperty(FilterGroupComponent.prototype, "prioritizedFilters", {
            get: function () {
                var _this = this;
                if (this.filter.items === null || this.filter.items === undefined) return;
                return this.initialPrioritizedFilters.concat(this.filter.items.filter(function (f) {
                    return f.selected && _this.initialPrioritizedFilters.indexOf(f) === -1;
                }));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FilterGroupComponent.prototype, "hasMore", {
            get: function () {
                var _this = this;
                if (this.filter.items === null || this.filter.items === undefined) {
                    return false;
                }
                return this.filter.items.length > this.initialPrioritizedFilters.concat(this.filter.items.filter(function (f) {
                    return f.selected && _this.initialPrioritizedFilters.indexOf(f) === -1;
                })).length;
            },
            enumerable: true,
            configurable: true
        });
        FilterGroupComponent.prototype.onCheckBoxSelect = function (item) {
            item.selected = !item.selected;
            this.filterManager.filterChanged([item]);
        };
        FilterGroupComponent.prototype.onRadioButtonSelect = function (item) {
            if (item.selected) return;
            this.filter.items.forEach(function (i) {
                return i.selected = false;
            });
            item.selected = true;
            this.filterManager.filterChanged([item]);
        };
        FilterGroupComponent.prototype.showMore = function () {
            this.displayFullList = true;
        };
        FilterGroupComponent.prototype.showLess = function () {
            this.displayFullList = false;
        };
        return FilterGroupComponent;
    }();
    __decorate([core_1.Input(), __metadata("design:type", DataModels_1.FilterGroup)], FilterGroupComponent.prototype, "filter", void 0);
    FilterGroupComponent = __decorate([core_1.Component({
        selector: "filter-group",
        moduleId: module.id,
        templateUrl: "filter-group.component.html",
        styleUrls: ["filter-group.component.css"]
    }), __metadata("design:paramtypes", [filter_manager_service_1.FilterManagerService])], FilterGroupComponent);
    exports.FilterGroupComponent = FilterGroupComponent;
    return module.exports;
});
$__System.registerDynamic("App/person/hit/hit-notifications/hit-notifications.component.js", ["npm:@angular/core/bundles/core.umd.js", "App/helpers/registerhelper.js", "App/services/api.service.js", "App/services/mediator.service.js", "npm:ng2-toastr/ng2-toastr.js", "App/models/UtilityModels.js", "App/person/hit/base-hit-tab.js", "App/services/user-manager.service.js", "npm:rxjs/observable/of.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var registerhelper_1 = $__require("App/helpers/registerhelper.js");
    var api_service_1 = $__require("App/services/api.service.js");
    var mediator_service_1 = $__require("App/services/mediator.service.js");
    var ng2_toastr_1 = $__require("npm:ng2-toastr/ng2-toastr.js");
    var UtilityModels_1 = $__require("App/models/UtilityModels.js");
    var base_hit_tab_1 = $__require("App/person/hit/base-hit-tab.js");
    var user_manager_service_1 = $__require("App/services/user-manager.service.js");
    var of_1 = $__require("npm:rxjs/observable/of.js");
    var HitNotificationsComponent = function (_super) {
        __extends(HitNotificationsComponent, _super);
        function HitNotificationsComponent(apiService, mediatorService, toastr, userManager) {
            var _this = _super.call(this) || this;
            _this.apiService = apiService;
            _this.mediatorService = mediatorService;
            _this.toastr = toastr;
            _this.userManager = userManager;
            _this.surveillanceStatus = UtilityModels_1.SurveillanceStatus;
            return _this;
        }
        HitNotificationsComponent.prototype.toggleSurveillance = function (surveillance) {
            var _this = this;
            this.loading = true;
            if (surveillance.isChecked) {
                var hit = this.getLatestJsonContent(surveillance.registerName);
                if (hit === "") {
                    console.log("Fant ikke hit for overvåkningsgjenstand");
                    return;
                }
                this.apiService.postSurveillance(surveillance.urlToToggle, hit).then(function (data) {
                    if (data) {
                        _this.surveillanceChanged(surveillance, true);
                        if (!_this.person.surveillancesInfo) {
                            _this.person.surveillancesInfo = [{ key: surveillance.actionKey, registeredBy: _this.userManager.getName() }];
                        } else {
                            _this.person.surveillancesInfo.push({ key: surveillance.actionKey, registeredBy: _this.userManager.getName() });
                        }
                        _this.toastr.success("Ditt prosjekt overvåker nå " + surveillance.actionFriendlyName);
                        _this.mediatorService.notifyAboutAddedSurveillance(_this.person);
                    } else {
                        _this.undoChangesToSurveillanceAndPostError(surveillance, "Server ga beskjed om at overv\u00E5kning for " + surveillance.actionFriendlyName + " ikke ble sl\u00E5tt p\u00E5");
                    }
                }).catch(function (error) {
                    return _this.undoChangesToSurveillanceAndPostError(surveillance, error);
                });
            } else {
                this.apiService.deleteSurveillance(surveillance.urlToToggle).then(function (data) {
                    if (data) {
                        if (_this.person.latestSurveillanceResults) {
                            var index = _this.person.latestSurveillanceResults.findIndex(function (result) {
                                return result.actionKey === surveillance.actionKey;
                            });
                            if (index) _this.person.latestSurveillanceResults.splice(index, 1);
                        }
                        surveillance.latestSurveillanceResultForMyTeam = undefined;
                        var secondIndex = _this.person.surveillancesInfo.findIndex(function (sb) {
                            return sb.key === surveillance.actionKey;
                        });
                        if (secondIndex) _this.person.surveillancesInfo.splice(secondIndex, 1);
                        _this.mediatorService.notifyAboutDeletedSurveillance(_this.person);
                        _this.surveillanceChanged(surveillance, false);
                        _this.toastr.success("Fjernet overv\u00E5kning av " + surveillance.actionFriendlyName);
                    } else {
                        _this.undoChangesToSurveillanceAndPostError(surveillance, "Server ga beskjed om at overv\u00E5kning for " + surveillance.actionFriendlyName + " ikke ble sl\u00E5tt p\u00E5");
                    }
                }).catch(function (error) {
                    return _this.undoChangesToSurveillanceAndPostError(surveillance, error);
                });
            }
            return false;
        };
        HitNotificationsComponent.prototype.surveillanceChanged = function (surveillance, added) {
            this.loading = false;
            var team = String(this.userManager.getProjectId());
            if (added && !this.person.teams.some(function (t) {
                return t === team;
            })) {
                this.person.teams.push(team);
            } else if (!added) {
                if (!this.person.detail.surveillances.some(function (sur) {
                    return sur.isChecked;
                })) this.person.teams.splice(this.person.teams.indexOf(team), 1);
            }
            registerhelper_1.setStarStatus(this.userManager.getProjectIdAsync(), this.person);
        };
        HitNotificationsComponent.prototype.acceptChanges = function (surveillance, event) {
            var _this = this;
            event.stopPropagation();
            var hit = this.getLatestJsonContent(surveillance.registerName);
            this.accepting = true;
            this.apiService.acceptChanges(surveillance.urlToToggle, hit).then(function (res) {
                _this.accepting = false;
                if (res) {
                    if (_this.person.latestSurveillanceResults) {
                        var indexes = _this.person.latestSurveillanceResults.filter(function (res) {
                            return res.actionKey === surveillance.actionKey;
                        });
                        indexes.forEach(function (i) {
                            return i.success = true;
                        });
                    }
                    _this.person.status = UtilityModels_1.SurveillanceStatus.Synced;
                    if (_this.person.latestSurveillanceResults.some(function (res) {
                        return registerhelper_1.getSurveillanceResult(res) === UtilityModels_1.SurveillanceStatus.Unsynced;
                    })) _this.person.status = UtilityModels_1.SurveillanceStatus.Unsynced;
                    surveillance.latestSurveillanceResultForMyTeam = undefined;
                }
            });
            //TODO: Endre
        };
        HitNotificationsComponent.prototype.shouldShowAcceptButton = function (surveillance) {
            var result = surveillance.latestSurveillanceResultForMyTeam;
            if (result && !result.success) {
                return this.userManager.fetchName().map(function (name) {
                    return result.registeredBy === name;
                });
            }
            return of_1.of(false);
        };
        HitNotificationsComponent.prototype.undoChangesToSurveillanceAndPostError = function (surveillance, error) {
            this.loading = false;
            surveillance.isChecked = !surveillance.isChecked;
            this.handleError(error);
        };
        HitNotificationsComponent.prototype.handleError = function (errorMessage) {
            var _this = this;
            console.log(errorMessage);
            this.errorMessage = errorMessage;
            this.toastr.error(errorMessage);
            setTimeout(function () {
                _this.errorMessage = "";
            }, 3000);
        };
        HitNotificationsComponent.prototype.getJsonDetailObject = function (surveillance, currentValue) {
            if (currentValue === void 0) {
                currentValue = true;
            }
            var json = currentValue ? this.getLatestJsonContent(surveillance.registerName) : surveillance.originalContentAsJson;
            if (json === "") return {};
            var jsonObject = this.convertToObject(json, surveillance.registerName);
            switch (surveillance.actionKey.toLowerCase()) {
                case "pregadressing":
                    return { "Addresses": jsonObject.Addresses };
                case "pregfullname":
                    return { "GivenName": jsonObject.GivenName, "MiddleName": jsonObject.MiddleName, "Sn": jsonObject.Sn };
                case "hprgodkjenninger":
                    return { "Godkjenninger": jsonObject.Godkjenninger };
                default:
                    return {};
            }
        };
        HitNotificationsComponent.prototype.convertToObject = function (jsonstring, registerName) {
            switch (registerName.toLowerCase()) {
                case "preg":
                    return JSON.parse(jsonstring);
                case "hpr":
                    return JSON.parse(jsonstring);
                default:
                    return null;
            }
        };
        return HitNotificationsComponent;
    }(base_hit_tab_1.BaseHitTab);
    __decorate([core_1.Input(), __metadata("design:type", String)], HitNotificationsComponent.prototype, "location", void 0);
    HitNotificationsComponent = __decorate([core_1.Component({
        selector: "hit-notifications",
        moduleId: module.id,
        templateUrl: "hit-notifications.component.html",
        styleUrls: ["hit-notifications.component.css"]
    }), __metadata("design:paramtypes", [api_service_1.ApiService, mediator_service_1.MediatorService, ng2_toastr_1.ToastsManager, user_manager_service_1.UserManagerService])], HitNotificationsComponent);
    exports.HitNotificationsComponent = HitNotificationsComponent;
    return module.exports;
});
$__System.registerDynamic("App/person/filter/filtertypes/agebox/agebox.component.js", ["npm:@angular/core/bundles/core.umd.js", "npm:moment/moment.js", "App/services/filter-manager.service.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var moment = $__require("npm:moment/moment.js");
    var filter_manager_service_1 = $__require("App/services/filter-manager.service.js");
    var AgeBoxComponent = function () {
        function AgeBoxComponent(filterManager) {
            this.filterManager = filterManager;
        }
        AgeBoxComponent.prototype.ngOnInit = function () {
            var _this = this;
            _a = this.filters, this.min = _a[0], this.max = _a[1];
            if (this.min.parameter !== "") {
                this.valueMin = String(this.getYears(this.min.parameter));
            }
            if (this.max.parameter !== "") {
                this.valueMax = String(this.getYears(this.max.parameter));
            }
            this.filterManager.removedFilter$.subscribe(function (change) {
                if (change.name === _this.min.name && _this.min.parameter === "") {
                    _this.valueMin = "";
                } else if (change.name === _this.max.name && _this.max.parameter === "") {
                    _this.valueMax = "";
                }
            });
            var _a;
        };
        AgeBoxComponent.prototype.onInput = function (isMin) {
            this.checkIfInputIsValid(isMin);
            this.setSelectedValue();
            this.performeSearch();
        };
        AgeBoxComponent.prototype.performeSearch = function () {
            this.filterManager.filterChanged([this.min, this.max]);
        };
        AgeBoxComponent.prototype.checkIfInputIsValid = function (isMin) {
            var value = isMin ? this.valueMin : this.valueMax;
            if (value === "" || value === null) {
                this.setParameterValue("", isMin);
                return;
            }
            if (+value < 0) value = "0";
            if (isMin && this.valueMax !== "" && +value >= +this.valueMax) {
                value = this.valueMax;
                this.valueMin = this.valueMax;
            } else if (!isMin && this.valueMin !== "" && +value <= +this.valueMin) {
                value = this.valueMax;
                this.valueMax = this.valueMin;
            }
            this.setParameterValue(value, isMin);
        };
        AgeBoxComponent.prototype.getYears = function (parameter) {
            return parameter === "" ? "" : moment().diff(parameter, "years");
        };
        AgeBoxComponent.prototype.setParameterValue = function (value, isMin) {
            if (value === "") {
                if (isMin) this.min.parameter = this.valueMin;else this.max.parameter = this.valueMax;
            } else {
                var date = moment().subtract(+value, "y");
                if (isMin) this.min.parameter = date.toISOString();else {
                    date.subtract(1, "y").add(1, "d");
                    this.max.parameter = date.toISOString();
                }
            }
        };
        AgeBoxComponent.prototype.setSelectedValue = function () {
            this.min.selected = this.min.parameter !== "";
            this.max.selected = this.max.parameter !== "";
        };
        AgeBoxComponent.prototype.onBlur = function (isMin) {
            this.checkIfInputIsValid(isMin);
            this.setSelectedValue();
        };
        return AgeBoxComponent;
    }();
    __decorate([core_1.Input(), __metadata("design:type", Array)], AgeBoxComponent.prototype, "filters", void 0);
    AgeBoxComponent = __decorate([core_1.Component({
        selector: "agebox",
        moduleId: module.id,
        templateUrl: "agebox.component.html",
        styleUrls: ["agebox.component.css"]
    }), __metadata("design:paramtypes", [filter_manager_service_1.FilterManagerService])], AgeBoxComponent);
    exports.AgeBoxComponent = AgeBoxComponent;
    return module.exports;
});
$__System.registerDynamic("App/person/search/search-list/search-list.component.js", ["npm:@angular/core/bundles/core.umd.js", "App/services/data-manager.service.js", "App/resources/app-settings.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var data_manager_service_1 = $__require("App/services/data-manager.service.js");
    var app_settings_1 = $__require("App/resources/app-settings.js");
    var SearchListComponent = function () {
        function SearchListComponent(dataManagerService) {
            this.dataManagerService = dataManagerService;
            this.location = app_settings_1.searchLocation;
        }
        SearchListComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.dataManagerService.searchResults$.subscribe(function (result) {
                _this.persons = result;
                _this.isEmpty = result.length === 0;
                $('.ui.accordion').accordion('refresh');
            });
        };
        return SearchListComponent;
    }();
    SearchListComponent = __decorate([core_1.Component({
        selector: "search-list",
        moduleId: module.id,
        templateUrl: "search-list.component.html",
        styleUrls: ["search-list.component.css"]
    }), __metadata("design:paramtypes", [data_manager_service_1.DataManagerService])], SearchListComponent);
    exports.SearchListComponent = SearchListComponent;
    return module.exports;
});
$__System.registerDynamic("App/person/search/search-detail/search-detail.component.js", ["npm:@angular/core/bundles/core.umd.js", "App/models/DataModels.js", "App/services/api.service.js", "App/services/data-manager.service.js", "App/helpers/registerhelper.js", "App/services/user-manager.service.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var DataModels_1 = $__require("App/models/DataModels.js");
    var api_service_1 = $__require("App/services/api.service.js");
    var data_manager_service_1 = $__require("App/services/data-manager.service.js");
    var registerhelper_1 = $__require("App/helpers/registerhelper.js");
    var user_manager_service_1 = $__require("App/services/user-manager.service.js");
    var SearchDetailComponent = function () {
        function SearchDetailComponent(apiService, dataManagerService, userManagerService) {
            this.apiService = apiService;
            this.dataManagerService = dataManagerService;
            this.userManagerService = userManagerService;
        }
        SearchDetailComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.taglist = this.person.tags.map(function (t) {
                return _this.dataManagerService.getTagName(t);
            });
            registerhelper_1.setStarStatus(this.userManagerService.getProjectIdAsync(), this.person);
        };
        SearchDetailComponent.prototype.ngAfterViewInit = function () {
            $("#" + this.person.commonIdentifier + "-accordion").accordion();
        };
        SearchDetailComponent.prototype.getPersonColor = function () {
            return registerhelper_1.getPersonColor(this.person.status);
        };
        SearchDetailComponent.prototype.getPersonInfo = function () {
            if (this.person.info === "Utgått autorisasjon") return this.person.info;
            if (this.person.info == undefined) return "";
            if (this.person.fastlegestillinger && this.person.fastlegestillinger.some(function (f) {
                return f === "LPFL";
            })) return "Fastlege";
            var array = this.person.info.split(", ");
            return array.slice(0, 2).join(", ") + (array.length > 2 ? " (..) " : "");
        };
        SearchDetailComponent.prototype.getPersonName = function () {
            var name = this.person.pregName !== null ? this.person.pregName : this.person.hprName;
            return name.substr(0, 25) + (name.length > 25 ? "(..)" : "");
        };
        SearchDetailComponent.prototype.setClasses = function () {
            if (this.person.starState === undefined) return;
            var classes = {
                empty: this.person.starState === 3 || this.person.starState === 4,
                half: this.person.starState === 4,
                hodorgreen: true,
                star: this.person.starState > 1,
                icon: true,
                large: true
            };
            return classes;
        };
        SearchDetailComponent.prototype.getPersonDetail = function () {
            var _this = this;
            this.loading = true;
            this.showDetails = !this.showDetails;
            this.dataManagerService.getCachedDetails(this.person).subscribe(function (res) {
                _this.person.detail = res;
                _this.loading = false;
            });
        };
        SearchDetailComponent.prototype.getTagName = function (id) {
            return this.dataManagerService.getTagName(id);
        };
        Object.defineProperty(SearchDetailComponent.prototype, "starstateExplantion", {
            get: function () {
                if (this.person.starState === undefined) return "";
                switch (this.person.starState) {
                    case 1:
                        return "Ikke overvåket av noe prosjekt";
                    case 2:
                        return "Overvåket av ditt prosjekt";
                    case 3:
                        return "Overvåket av et annet prosjekt";
                    case 4:
                        return "Overvåket av ditt prosjekt og et eller flere andre prosjekter";
                    default:
                        return "";
                }
            },
            enumerable: true,
            configurable: true
        });
        SearchDetailComponent.prototype.addTag = function (tag) {
            if (this.taglist.indexOf(tag) !== -1) this.taglist.push(tag);
        };
        SearchDetailComponent.prototype.removeTag = function (tag) {
            this.taglist.splice(this.taglist.findIndex(function (t) {
                return t === tag;
            }), 1);
        };
        return SearchDetailComponent;
    }();
    __decorate([core_1.Input(), __metadata("design:type", DataModels_1.RegisterPerson)], SearchDetailComponent.prototype, "person", void 0);
    __decorate([core_1.Input(), __metadata("design:type", String)], SearchDetailComponent.prototype, "location", void 0);
    SearchDetailComponent = __decorate([core_1.Component({
        selector: "search-detail",
        moduleId: module.id,
        templateUrl: "search-detail.component.html",
        styleUrls: ["search-detail.component.css"]
    }), __metadata("design:paramtypes", [api_service_1.ApiService, data_manager_service_1.DataManagerService, user_manager_service_1.UserManagerService])], SearchDetailComponent);
    exports.SearchDetailComponent = SearchDetailComponent;
    return module.exports;
});
$__System.registerDynamic("App/person/surveillance/surveillance-list/surveillance-list.component.js", ["npm:@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var SurveillanceListComponent = function () {
        function SurveillanceListComponent() {}
        SurveillanceListComponent.prototype.ngOnChanges = function () {
            if (!this.persons) return;
            this.changedSurveillances = this.persons.filter(function (p) {
                return p.latestSurveillanceResults != undefined && p.latestSurveillanceResults.some(function (sur) {
                    return !sur.success;
                });
            }).length;
            this.unchangedSurveillances = this.persons.filter(function (p) {
                return p.latestSurveillanceResults == undefined || p.latestSurveillanceResults.length === 0 || !p.latestSurveillanceResults.some(function (sur) {
                    return !sur.success;
                });
            }).length;
        };
        SurveillanceListComponent.prototype.ngAfterViewInit = function () {
            $(".ui.accordion").accordion("refresh");
        };
        return SurveillanceListComponent;
    }();
    __decorate([core_1.Input(), __metadata("design:type", Array)], SurveillanceListComponent.prototype, "persons", void 0);
    SurveillanceListComponent = __decorate([core_1.Component({
        selector: "surveillance-list",
        moduleId: module.id,
        templateUrl: "surveillance-list.component.html",
        styleUrls: ["surveillance-list.component.css", "../../search/search-list/search-list.component.css"]
    }), __metadata("design:paramtypes", [])], SurveillanceListComponent);
    exports.SurveillanceListComponent = SurveillanceListComponent;
    return module.exports;
});
$__System.registerDynamic("App/person/surveillance/sureveillance-detail/surveillance-detail.component.js", ["npm:@angular/core/bundles/core.umd.js", "App/models/DataModels.js", "App/services/mediator.service.js", "App/helpers/registerhelper.js", "App/resources/app-settings.js", "App/services/data-manager.service.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var DataModels_1 = $__require("App/models/DataModels.js");
    var mediator_service_1 = $__require("App/services/mediator.service.js");
    var registerhelper_1 = $__require("App/helpers/registerhelper.js");
    var app_settings_1 = $__require("App/resources/app-settings.js");
    var data_manager_service_1 = $__require("App/services/data-manager.service.js");
    var SurveillanceDetailComponent = function () {
        function SurveillanceDetailComponent(mediatorService, dataManagerService) {
            this.mediatorService = mediatorService;
            this.dataManagerService = dataManagerService;
            this.location = app_settings_1.surveillanceLocation;
        }
        SurveillanceDetailComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (this.person !== undefined) this.taglist = this.person.tags.map(function (t) {
                return _this.dataManagerService.getTagName(t);
            });
        };
        SurveillanceDetailComponent.prototype.setClasses = function () {
            var classes = {
                empty: this.person.starState === 3 || this.person.starState === 4,
                half: this.person.starState === 4,
                hodorGreenColor: true,
                star: this.person.starState > 1,
                icon: true,
                large: true
            };
            return classes;
        };
        SurveillanceDetailComponent.prototype.ngAfterViewInit = function () {
            $('.ui.accordion').accordion();
        };
        Object.defineProperty(SurveillanceDetailComponent.prototype, "starstateExplantion", {
            get: function () {
                switch (this.person.starState) {
                    case 1:
                        return "Ikke overvåket av noe prosjekt";
                    case 2:
                        return "Overvåket av ditt prosjekt";
                    case 3:
                        return "Overvåket av et annet prosjekt";
                    case 4:
                        return "Overvåket av ditt prosjekt og et eller flere andre prosjekt";
                    default:
                        return "";
                }
            },
            enumerable: true,
            configurable: true
        });
        SurveillanceDetailComponent.prototype.getPersonColor = function () {
            return registerhelper_1.getPersonColor(this.person.status);
        };
        SurveillanceDetailComponent.prototype.addTag = function (tag) {
            this.taglist.push(tag);
        };
        SurveillanceDetailComponent.prototype.removeTag = function (tag) {
            this.taglist.splice(this.taglist.findIndex(function (t) {
                return t === tag;
            }), 1);
        };
        return SurveillanceDetailComponent;
    }();
    __decorate([core_1.Input(), __metadata("design:type", DataModels_1.RegisterPerson)], SurveillanceDetailComponent.prototype, "person", void 0);
    SurveillanceDetailComponent = __decorate([core_1.Component({
        selector: "surveillance-detail",
        moduleId: module.id,
        templateUrl: "surveillance-detail.component.html",
        styleUrls: ["surveillance-detail.component.css"]
    }), __metadata("design:paramtypes", [mediator_service_1.MediatorService, data_manager_service_1.DataManagerService])], SurveillanceDetailComponent);
    exports.SurveillanceDetailComponent = SurveillanceDetailComponent;
    return module.exports;
});
$__System.registerDynamic("App/person/detailedWindow/simple-json-detail/simple-json-detail.component.js", ["npm:@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var SimpleJsonDetailComponent = function () {
        function SimpleJsonDetailComponent() {}
        SimpleJsonDetailComponent.prototype.ngOnInit = function () {
            this.content = this.jsonObject;
            this.renderJson();
        };
        SimpleJsonDetailComponent.prototype.ngOnChanges = function () {
            if (JSON.stringify(this.content) !== JSON.stringify(this.jsonObject) && this.content !== undefined) {
                this.content = this.jsonObject;
                this.renderJson();
            }
        };
        SimpleJsonDetailComponent.prototype.renderJson = function () {
            var formatter = new JSONFormatter(this.jsonObject, 2, {
                hoverPreviewEnabled: false,
                hoverPreviewArrayCount: 100,
                hoverPreviewFieldCount: 5,
                theme: '',
                animateOpen: false,
                animateClose: false
            });
            this.contentAsJson = formatter.render();
            $(this.simpleJsonContainer.nativeElement).empty().append(this.contentAsJson);
        };
        return SimpleJsonDetailComponent;
    }();
    __decorate([core_1.ViewChild("simpleJsonContainer"), __metadata("design:type", core_1.ElementRef)], SimpleJsonDetailComponent.prototype, "simpleJsonContainer", void 0);
    __decorate([core_1.Input(), __metadata("design:type", Object)], SimpleJsonDetailComponent.prototype, "jsonObject", void 0);
    SimpleJsonDetailComponent = __decorate([core_1.Component({
        selector: "simple-json-detail",
        moduleId: module.id,
        template: '<div class="horizontalscroll" #simpleJsonContainer></div>',
        styleUrls: ["../detailedWindow.css"]
    }), __metadata("design:paramtypes", [])], SimpleJsonDetailComponent);
    exports.SimpleJsonDetailComponent = SimpleJsonDetailComponent;
    return module.exports;
});
$__System.registerDynamic("App/person/detailedWindow/simple-json-diff/simple-json-diff.component.js", ["npm:@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var SimpleJsonDiffComponent = function () {
        function SimpleJsonDiffComponent() {}
        SimpleJsonDiffComponent.prototype.ngOnInit = function () {
            var delta = jsondiffpatch.diff(this.before, this.after);
            jsondiffpatch.formatters.html.hideUnchanged();
            this.jsonDiffContent = jsondiffpatch.formatters.html.format(delta, this.before);
        };
        return SimpleJsonDiffComponent;
    }();
    __decorate([core_1.Input(), __metadata("design:type", Object)], SimpleJsonDiffComponent.prototype, "before", void 0);
    __decorate([core_1.Input(), __metadata("design:type", Object)], SimpleJsonDiffComponent.prototype, "after", void 0);
    SimpleJsonDiffComponent = __decorate([core_1.Component({
        selector: "simple-json-diff",
        moduleId: module.id,
        template: '<div class="horizontalscroll" [innerHtml]="jsonDiffContent"></div>',
        styleUrls: ["../detailedwindow.css"]
    }), __metadata("design:paramtypes", [])], SimpleJsonDiffComponent);
    exports.SimpleJsonDiffComponent = SimpleJsonDiffComponent;
    return module.exports;
});
$__System.registerDynamic("App/person/hit/hit-information/hit-information.component.js", ["npm:@angular/core/bundles/core.umd.js", "App/models/UtilityModels.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var UtilityModels_1 = $__require("App/models/UtilityModels.js");
    var HitInformationComponent = function () {
        function HitInformationComponent() {}
        return HitInformationComponent;
    }();
    __decorate([core_1.Input(), __metadata("design:type", UtilityModels_1.HitInformation)], HitInformationComponent.prototype, "information", void 0);
    __decorate([core_1.Input(), __metadata("design:type", String)], HitInformationComponent.prototype, "title", void 0);
    HitInformationComponent = __decorate([core_1.Component({
        selector: "hit-information",
        moduleId: module.id,
        templateUrl: "hit-information.component.html",
        styleUrls: ["../hit.css"]
    }), __metadata("design:paramtypes", [])], HitInformationComponent);
    exports.HitInformationComponent = HitInformationComponent;
    return module.exports;
});
$__System.registerDynamic("App/helpers/pregHelper.js", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function getCustodyDescription(value) {
        var custodyDescription = {
            "D": "Delt",
            "M": "Mor",
            "F": "Far",
            "A": "Andre",
            "U": "Ukjent"
        };
        return custodyDescription[value];
    }
    exports.getCustodyDescription = getCustodyDescription;
    function getRegStatusDescription(value) {
        var regStatusDescriptions = ['', 'Bosatt', 'Utflyttet (bosatt som har flyttet ut av det geografiske området)', 'Utvandret', 'Forsvunnet', 'Død', 'Utgått fødselsnummer, korrigert til nytt', 'Fødselsregistrert', 'Annullert tilgang', 'Uregistrert tilgang'];
        return regStatusDescriptions[value];
    }
    exports.getRegStatusDescription = getRegStatusDescription;
    function getPostalType(value) {
        var postalTypeDescriptions = ['Vanlig bosatt', 'Utenriks', 'Militær', 'Svalbard', 'Klientadresse', 'Uten fast bopel', 'Sperret adresse, strengt fortrolig', 'Sperret adresse, fortrolig', 'Pendler'];
        return postalTypeDescriptions[value];
    }
    exports.getPostalType = getPostalType;
    return module.exports;
});
$__System.registerDynamic("App/helpers/flrhelper.js", [], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  exports.FastLegeCode = "LPFL";
  exports.DeleLegeCode = "LPDL";
  exports.VikarCode = "LPVI";
  return module.exports;
});
$__System.registerDynamic("App/person/hit/hit-personal/hit-personal.component.js", ["npm:@angular/core/bundles/core.umd.js", "App/person/hit/base-hit-tab.js", "App/models/UtilityModels.js", "App/helpers/pregHelper.js", "App/helpers/datehelper.js", "App/resources/app-settings.js", "App/helpers/flrhelper.js", "App/helpers/registerhelper.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var base_hit_tab_1 = $__require("App/person/hit/base-hit-tab.js");
    var UtilityModels_1 = $__require("App/models/UtilityModels.js");
    var pregHelper_1 = $__require("App/helpers/pregHelper.js");
    var datehelper_1 = $__require("App/helpers/datehelper.js");
    var app_settings_1 = $__require("App/resources/app-settings.js");
    var flrhelper_1 = $__require("App/helpers/flrhelper.js");
    var registerhelper_1 = $__require("App/helpers/registerhelper.js");
    var HitPersonalComponent = function (_super) {
        __extends(HitPersonalComponent, _super);
        function HitPersonalComponent() {
            return _super.apply(this, arguments) || this;
        }
        HitPersonalComponent.prototype.ngOnInit = function () {
            this.flrInformation = {
                details: []
            };
            this.setDetails();
        };
        HitPersonalComponent.prototype.setDetails = function () {
            var person = JSON.parse(this.getLatestJsonContent(app_settings_1.RegisterNames[app_settings_1.RegisterNames.Preg]));
            this.addDetail("Fødselsnummer: ", this.person.nin);
            this.addDetail("Navn i PREG: ", this.getPersonName(person), "", this.getGeneralInformation(person));
            if (person.RegStatus != null) this.addDetail("Registreringskode: ", pregHelper_1.getRegStatusDescription(person.RegStatus), "registreringskode " + person.RegStatus);
            if (person.Addresses === null) return;
            for (var _i = 0, _a = person.Addresses; _i < _a.length; _i++) {
                var address = _a[_i];
                if (address.PostalType != null) this.addDetail("Adressetype: ", pregHelper_1.getPostalType(address.PostalType), "adressekode " + address.PostalType + "", this.getAdressDetails(address));else this.addDetail("", "", "", this.getAdressDetails(address));
            }
            if (this.person.detail.fastlegePasientJson) {
                var flrInfo = JSON.parse(this.getLatestJsonContent(app_settings_1.RegisterNames[app_settings_1.RegisterNames.FlrPasient]));
                this.addDetail("Avtalenummer: ", flrInfo.GPContractId, "", undefined, this.flrInformation);
                if (flrInfo.DoctorCycles.length > 0) {
                    var fastlege = flrInfo.DoctorCycles.find(function (doc) {
                        return doc.Relationship.CodeValue === flrhelper_1.FastLegeCode && datehelper_1.isValidDate(doc.Valid.From, doc.Valid.To);
                    });
                    this.addDetail("Fastlege: ", fastlege === undefined ? "Legeløs liste" : registerhelper_1.getGPname(fastlege.GP), "", this.getPasientContractDetails(flrInfo.DoctorCycles), this.flrInformation);
                } else this.addDetail("Fastlege: ", "Legeløs liste", "", undefined, this.flrInformation);
                var office = flrInfo.GPContract.GPOffice;
                if (office) this.addDetail("Fastlegekontor: ", office.DisplayName ? office.DisplayName : office.Name, "", undefined, this.flrInformation);
            }
        };
        HitPersonalComponent.prototype.getPersonName = function (person) {
            return person.GivenName + " " + (person.MiddleName == undefined ? "" : person.MiddleName + " ") + person.Sn;
        };
        HitPersonalComponent.prototype.getPasientContractDetails = function (cycles) {
            var detail = [];
            for (var _i = 0, cycles_1 = cycles; _i < cycles_1.length; _i++) {
                var doctor = cycles_1[_i];
                if (doctor.Relationship.CodeValue === flrhelper_1.FastLegeCode || !datehelper_1.isValidDate(doctor.Valid.From, doctor.Valid.To)) continue;
                detail.push({
                    description: doctor.Relationship.CodeValue === flrhelper_1.DeleLegeCode ? "Delelege: " : "Vikar: ",
                    value: registerhelper_1.getGPname(doctor.GP),
                    extra: datehelper_1.getDateString(doctor.Valid.From, doctor.Valid.To)
                });
            }
            return [{ details: detail }];
        };
        HitPersonalComponent.prototype.getAdressDetails = function (address) {
            var details = [];
            if (address.PostalAddress === "" || address.PostalAddress == undefined) return details;
            details.push({ details: [{ description: "Adresse: ", value: address.PostalAddress + ", " + (address.PostalCode == undefined ? "" : address.PostalCode) + " " + address.PostalPlace }] });
            return details;
        };
        HitPersonalComponent.prototype.getGeneralInformation = function (person) {
            var details = [];
            var gender = +this.person.nin[8] % 2 === 0 ? "Kvinne" : "Mann";
            var d = [{ description: "Kjønn, alder: ", value: gender + ", " + (this.person.fodselsDato ? datehelper_1.getYearFromDateString(this.person.fodselsDato) : datehelper_1.getAgeFromNin(this.person.nin)) + " år" }];
            if (this.person !== undefined) {
                d.push({ description: "Barn: ", value: this.person.barn.length > 0 ? "Har barn" : "Har ikke barn" });
            }
            if (person.MaritalStatus) {
                d.push({ description: "Sivilstatus: ", value: app_settings_1.sivilStatus[person.MaritalStatus] });
            }
            if (person.SpouseNIN) {
                d.push({ description: "Ektefelle: ", value: person.SpouseNIN });
            }
            details.push({ details: d });
            return details;
        };
        HitPersonalComponent.prototype.showFamily = function () {
            this._showDetails.emit({ view: UtilityModels_1.ChildViews.Family });
        };
        HitPersonalComponent.prototype.showPregDetails = function () {
            this.showDetails(UtilityModels_1.ChildViews.Json, this.getLatestJsonContent(app_settings_1.RegisterNames[app_settings_1.RegisterNames.Preg]));
        };
        HitPersonalComponent.prototype.showFlrDetails = function () {
            this.showDetails(UtilityModels_1.ChildViews.Json, this.getLatestJsonContent(app_settings_1.RegisterNames[app_settings_1.RegisterNames.FlrPasient]));
        };
        return HitPersonalComponent;
    }(base_hit_tab_1.BaseHitTab);
    __decorate([core_1.Input(), __metadata("design:type", Boolean)], HitPersonalComponent.prototype, "loadingFamily", void 0);
    HitPersonalComponent = __decorate([core_1.Component({
        selector: "hit-personal",
        moduleId: module.id,
        templateUrl: "hit-personal.component.html",
        styleUrls: ["../hit.css"]
    }), __metadata("design:paramtypes", [])], HitPersonalComponent);
    exports.HitPersonalComponent = HitPersonalComponent;
    return module.exports;
});
$__System.registerDynamic("App/person/hit/base-hit-tab.js", ["npm:@angular/core/bundles/core.umd.js", "App/models/DataModels.js", "App/models/UtilityModels.js", "App/resources/app-settings.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var DataModels_1 = $__require("App/models/DataModels.js");
    var UtilityModels_1 = $__require("App/models/UtilityModels.js");
    var app_settings_1 = $__require("App/resources/app-settings.js");
    var BaseHitTab = function () {
        function BaseHitTab() {
            this._showDetails = new core_1.EventEmitter();
            this.information = {
                details: [],
                faded: false
            };
            this.childviews = UtilityModels_1.ChildViews;
        }
        BaseHitTab.prototype.getLatestJsonContent = function (register) {
            switch (register) {
                case app_settings_1.RegisterNames[app_settings_1.RegisterNames.Preg]:
                    return this.person.detail.pregJson;
                case app_settings_1.RegisterNames[app_settings_1.RegisterNames.Hpr]:
                    return this.person.detail.hprJson;
                case app_settings_1.RegisterNames[app_settings_1.RegisterNames.FlrDoctor]:
                    return this.person.detail.fastlegeJson;
                case app_settings_1.RegisterNames[app_settings_1.RegisterNames.FlrPasient]:
                    return this.person.detail.fastlegePasientJson;
                default:
                    return "";
            }
        };
        BaseHitTab.prototype.showDetails = function (view, data) {
            this._showDetails.emit({ view: view, data: data });
        };
        BaseHitTab.prototype.addDetail = function (description, value, extra, children, info) {
            if (info === void 0) {
                info = this.information;
            }
            info.details.push({
                description: description,
                value: value,
                extra: extra,
                children: children
            });
        };
        return BaseHitTab;
    }();
    __decorate([core_1.Input(), __metadata("design:type", DataModels_1.RegisterPerson)], BaseHitTab.prototype, "person", void 0);
    __decorate([core_1.Output(), __metadata("design:type", Object)], BaseHitTab.prototype, "_showDetails", void 0);
    exports.BaseHitTab = BaseHitTab;
    return module.exports;
});
$__System.registerDynamic("App/person/hit/hit-professional/hit-professional.component.js", ["npm:@angular/core/bundles/core.umd.js", "App/person/hit/base-hit-tab.js", "npm:moment/moment.js", "App/models/UtilityModels.js", "App/resources/app-settings.js", "App/helpers/datehelper.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var base_hit_tab_1 = $__require("App/person/hit/base-hit-tab.js");
    var moment = $__require("npm:moment/moment.js");
    var UtilityModels_1 = $__require("App/models/UtilityModels.js");
    var app_settings_1 = $__require("App/resources/app-settings.js");
    var datehelper_1 = $__require("App/helpers/datehelper.js");
    var HitProfessionalComponent = function (_super) {
        __extends(HitProfessionalComponent, _super);
        function HitProfessionalComponent() {
            return _super.apply(this, arguments) || this;
        }
        HitProfessionalComponent.prototype.ngOnInit = function () {
            this.fadedInformation = {
                details: [],
                faded: true
            };
            this.flrInformation = {
                details: []
            };
            this.setDetails();
        };
        HitProfessionalComponent.prototype.setDetails = function () {
            var person = JSON.parse(this.getLatestJsonContent(app_settings_1.RegisterNames[app_settings_1.RegisterNames.Hpr]));
            this.addDetail("HPR-nummer: ", this.person.hprNr);
            this.addDetail("Navn i HPR: ", this.getPersonName(person));
            for (var _i = 0, _a = person.Godkjenninger; _i < _a.length; _i++) {
                var godkjenning = _a[_i];
                var date = godkjenning.Gyldig.Til ? moment(godkjenning.Gyldig.Til) : undefined;
                this.addDetail("Kategori: ", godkjenning.Helsepersonellkategori.Beskrivelse, date ? "Gyldig til " + date.format("DD/MM YYYY") : "Ikke oppgitt sluttdato", this.getGodkjenningDetails(godkjenning), datehelper_1.isValidDate(godkjenning.Gyldig.Fra, godkjenning.Gyldig.Til) ? this.information : this.fadedInformation);
            }
            if (this.person.detail.fastlegeJson) {
                var flrInfo = JSON.parse(this.getLatestJsonContent(app_settings_1.RegisterNames[app_settings_1.RegisterNames.FlrDoctor]));
                for (var _b = 0, _c = flrInfo.Contracts; _b < _c.length; _b++) {
                    var contract = _c[_b];
                    if (datehelper_1.isValidDate(contract.Valid.From, contract.Valid.To)) {
                        var status_1 = contract.GPContract.Status.CodeText;
                        this.addDetail("Avtalenummer: ", contract.GPContractId, status_1, this.getContractDetail(contract), this.flrInformation);
                    }
                }
            }
        };
        HitProfessionalComponent.prototype.getPersonName = function (person) {
            return person.Fornavn + (person.Mellomnavn == undefined ? " " : " " + person.Mellomnavn) + (" " + person.Etternavn);
        };
        HitProfessionalComponent.prototype.getContractDetail = function (contract) {
            var detail = [];
            if (contract.Relationship) {
                detail.push({ description: "Stilling: ", value: contract.Relationship.CodeText, extra: contract.Relationship.CodeValue === "LPVI" ? datehelper_1.getDateString(contract.Valid.From, contract.Valid.To) : "" });
            }
            if (contract.GPContract.GPOffice) {
                var office = contract.GPContract.GPOffice;
                detail.push({ description: "Fastlegekontor: ", value: office.DisplayName ? office.DisplayName : office.Name });
            }
            return [{ details: detail }];
        };
        HitProfessionalComponent.prototype.getGodkjenningDetails = function (godkjenning) {
            var detail = [];
            if (godkjenning.Rekvisisjonsretter.length > 0) {
                var rekvisjoner = godkjenning.Rekvisisjonsretter.map(function (rek) {
                    return rek.Type.Beskrivelse;
                });
                detail.push({ description: "Rekvisisjonsrett: ", value: rekvisjoner.join(", ") });
            }
            if (godkjenning.Spesialiteter.length > 0) {
                var spes = godkjenning.Spesialiteter.map(function (s) {
                    return s.Type.Beskrivelse;
                });
                detail.push({ description: "Spesialitet: ", value: spes.join(", ") });
            }
            if (godkjenning.Autorisasjon !== null) {
                detail.push({ description: "Autorisasjon: ", value: godkjenning.Autorisasjon.Beskrivelse });
            }
            return [{ details: detail }];
        };
        HitProfessionalComponent.prototype.showHprDetails = function () {
            this.showDetails(UtilityModels_1.ChildViews.Json, this.getLatestJsonContent(app_settings_1.RegisterNames[app_settings_1.RegisterNames.Hpr]));
        };
        HitProfessionalComponent.prototype.showFlrDetails = function () {
            this.showDetails(UtilityModels_1.ChildViews.Json, this.getLatestJsonContent(app_settings_1.RegisterNames[app_settings_1.RegisterNames.FlrDoctor]));
        };
        return HitProfessionalComponent;
    }(base_hit_tab_1.BaseHitTab);
    HitProfessionalComponent = __decorate([core_1.Component({
        selector: "hit-professional",
        moduleId: module.id,
        templateUrl: "hit-professional.component.html",
        styleUrls: ["../hit.css"]
    }), __metadata("design:paramtypes", [])], HitProfessionalComponent);
    exports.HitProfessionalComponent = HitProfessionalComponent;
    return module.exports;
});
$__System.registerDynamic("App/custom-pipes/registerfullname.pipe.js", ["npm:@angular/core/bundles/core.umd.js", "App/models/DataModels.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var DataModels_1 = $__require("App/models/DataModels.js");
    var RegisterFullNamePipe = function () {
        function RegisterFullNamePipe() {}
        RegisterFullNamePipe.prototype.transform = function (value) {
            switch (value.toLowerCase()) {
                case "preg":
                    return "Personregisteret";
                case "hpr":
                    return "Helsepersonellregisteret";
                default:
                    return value;
            }
        };
        return RegisterFullNamePipe;
    }();
    RegisterFullNamePipe = __decorate([core_1.Pipe({ name: 'registerfullname' }), __metadata("design:paramtypes", [])], RegisterFullNamePipe);
    exports.RegisterFullNamePipe = RegisterFullNamePipe;
    var RegisterFilterFullNamePipe = function () {
        function RegisterFilterFullNamePipe() {}
        RegisterFilterFullNamePipe.prototype.transform = function (value) {
            switch (value) {
                case DataModels_1.FilterBelonging.Hpr:
                    return "Helsepersonellfilter";
                case DataModels_1.FilterBelonging.Preg:
                    return "Personfilter";
                case DataModels_1.FilterBelonging.Flr:
                    return "Fastlegefilter";
                case DataModels_1.FilterBelonging.All:
                    return "";
                default:
                    return "";
            }
        };
        return RegisterFilterFullNamePipe;
    }();
    RegisterFilterFullNamePipe = __decorate([core_1.Pipe({ name: 'registerfilterfullname' }), __metadata("design:paramtypes", [])], RegisterFilterFullNamePipe);
    exports.RegisterFilterFullNamePipe = RegisterFilterFullNamePipe;
    return module.exports;
});
$__System.registerDynamic("App/custom-pipes/simpledate.pipe.js", ["npm:@angular/core/bundles/core.umd.js", "npm:moment/moment.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var moment = $__require("npm:moment/moment.js");
    var SimpleDatePipe = function () {
        function SimpleDatePipe() {}
        SimpleDatePipe.prototype.transform = function (value) {
            if (!value || value === undefined) return "";
            var date = moment(value).format("DD/MM [kl.] HH:mm");
            return date === "Invalid date" ? "" : date;
        };
        return SimpleDatePipe;
    }();
    SimpleDatePipe = __decorate([core_1.Pipe({
        name: 'simpledate'
    }), __metadata("design:paramtypes", [])], SimpleDatePipe);
    exports.SimpleDatePipe = SimpleDatePipe;
    return module.exports;
});
$__System.registerDynamic("App/custom-pipes/projectname.pipe.js", ["npm:@angular/core/bundles/core.umd.js", "App/resources/app-settings.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var app_settings_1 = $__require("App/resources/app-settings.js");
    var ProjectNamePipe = function () {
        function ProjectNamePipe() {}
        ProjectNamePipe.prototype.transform = function (value) {
            return value < app_settings_1.projectNames.length && value >= 0 ? app_settings_1.projectNames[value] : "Ukjent";
        };
        return ProjectNamePipe;
    }();
    ProjectNamePipe = __decorate([core_1.Pipe({ name: 'projectname' }), __metadata("design:paramtypes", [])], ProjectNamePipe);
    exports.ProjectNamePipe = ProjectNamePipe;
    return module.exports;
});
$__System.registerDynamic("App/custom-pipes/registeridentifiername.js", ["npm:@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var RegisterIdentifierNamePipe = function () {
        function RegisterIdentifierNamePipe() {}
        RegisterIdentifierNamePipe.prototype.transform = function (value) {
            switch (value.toLowerCase()) {
                case "preg":
                    return "Fødselsnr.";
                case "hpr":
                    return "HPR-nr";
                default:
                    return "";
            }
        };
        return RegisterIdentifierNamePipe;
    }();
    RegisterIdentifierNamePipe = __decorate([core_1.Pipe({ name: 'registeridentifiername' }), __metadata("design:paramtypes", [])], RegisterIdentifierNamePipe);
    exports.RegisterIdentifierNamePipe = RegisterIdentifierNamePipe;
    return module.exports;
});
$__System.registerDynamic("App/user/user.component.js", ["npm:@angular/core/bundles/core.umd.js", "npm:@angular/router/bundles/router.umd.js", "npm:ng2-toastr/ng2-toastr.js", "App/models/DataModels.js", "App/services/user-manager.service.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var router_1 = $__require("npm:@angular/router/bundles/router.umd.js");
    var ng2_toastr_1 = $__require("npm:ng2-toastr/ng2-toastr.js");
    var DataModels_1 = $__require("App/models/DataModels.js");
    var user_manager_service_1 = $__require("App/services/user-manager.service.js");
    var UserComponent = function () {
        function UserComponent(userManagerService, router, toaster) {
            this.userManagerService = userManagerService;
            this.router = router;
            this.toaster = toaster;
            this.showPasswordPanel = true;
            this.user = new DataModels_1.UserData();
            this.loading = true;
        }
        UserComponent.prototype.ngAfterViewInit = function () {
            $('.ui.checkbox').checkbox();
            this.setValidationRules();
        };
        UserComponent.prototype.isLoading = function () {
            return this.loading ? "active" : "";
        };
        UserComponent.prototype.termsCheckBoxToggle = function () {
            this.user.hasAcceptedTerms = !this.user.hasAcceptedTerms;
        };
        UserComponent.prototype.projectChecked = function (value) {
            console.log("ProjektChecked");
            this.user.projectValue = value;
            this.user.projectName = this.projects[value];
        };
        UserComponent.prototype.roleChecked = function (value) {
            console.log("RoleChecked");
            this.user.roleValue = value;
            this.user.roleName = value === 4 ? '' : this.roles[value];
        };
        UserComponent.prototype.verifyRegisterUser = function () {
            if (!this.user) return;
            this.verifyingUser = true;
            $('.ui.checkbox').checkbox();
            this.setValidationRules();
        };
        UserComponent.prototype.cancelRegisterUser = function () {
            this.user.registerUserName = this.originalUser.registerUserName;
            //this.user.registerPassword = this.originalUser.registerPassword;
            this.verifyRegisterUser();
            this.showRegisterContent = false;
        };
        UserComponent.prototype.copyInitialState = function (u) {
            //this.originalUser = JSON.parse(JSON.stringify(u));
            this.originalUser = new DataModels_1.UserData();
            this.originalUser.name = u.name;
            this.originalUser.hasValidRegisterUser = u.hasValidRegisterUser;
            this.originalUser.registerUserName = u.registerUserName;
            //this.originalUser.registerPassword = u.registerPassword;
            this.originalUser.projectValue = u.projectValue;
            this.originalUser.projectName = u.projectName;
            this.originalUser.roleValue = u.roleValue;
            this.originalUser.roleName = u.roleName;
            this.originalUser.username = u.username;
            this.originalUser.password = u.password;
            this.originalUser.hasAcceptedTerms = u.hasAcceptedTerms;
        };
        UserComponent.prototype.setInitialState = function (user) {
            if (user == null) {
                this.user = new DataModels_1.UserData();
                this.showPasswordPanel = this.showRegisterContent = this.showTestDataForm = this.newUser = true;
            } else {
                this.user = user;
                this.showPasswordPanel = this.showRegisterContent = this.showTestDataForm = this.newUser = false;
            }
            this.newUser = user == null;
            this.termsAlreadyAccepted = this.user.hasAcceptedTerms;
            this.verifyRegisterUser();
            this.copyInitialState(this.user);
        };
        UserComponent.prototype.resetForm = function () {
            if (this.newUser) this.router.navigate(['login']);
            this.setInitialState(this.originalUser);
            $('.ui.form').removeClass('error');
            $('.ui.form').find('.input').removeClass('error');
            $('.ui.form').form('set values', {
                password: '',
                passwordrepeat: ''
            });
            this.setValidationRules();
            this.showTestDataForm = this.newUser;
        };
        UserComponent.prototype.submitForm = function () {
            this.saving = "loading";
            if (this.newUser) {} else {}
        };
        UserComponent.prototype.setValidationRules = function () {
            var _this = this;
            $.fn.form.settings.rules.regUserValid = function () {
                return !_this.verifyingUser && _this.user.hasValidRegisterUser;
            };
            var self = this;
            $('.ui.form').form({
                fields: {
                    name: {
                        rules: [{
                            type: 'regExp[.{2} .{2}]',
                            prompt: '{name} må inneholde minst to ord på minst 2 bokstaver'
                        }]
                    },
                    username: {
                        rules: [{
                            type: 'email',
                            prompt: '{name} må være en gyldig e-post adresse'
                        }]
                    },
                    password: {
                        optional: !this.newUser,
                        rules: [{
                            type: 'regExp',
                            value: '[A-Z]+',
                            prompt: 'Passord må inneholde minst én stor bokstav'
                        }, {
                            type: 'regExp',
                            value: '[a-z]+',
                            prompt: 'Passord må inneholde minst én liten bokstav'
                        }, {
                            type: 'regExp',
                            value: '[0-9]+',
                            prompt: 'Passord må inneholde minst ett tall'
                        }, {
                            type: 'minLength[8]',
                            prompt: 'Passord må være minst {ruleValue} tegn langt'
                        }]
                    },
                    passwordrepeat: {
                        optional: !this.newUser,
                        rules: [{
                            type: 'match[password]',
                            depends: 'password',
                            prompt: 'Passord må gjentas likt i feltet under'
                        }]
                    },
                    hasAcceptedTerms: {
                        rules: [{
                            type: 'checked',
                            prompt: '"{name}" må være krysset av'
                        }]
                    },
                    role: {
                        identifier: "role",
                        rules: [{
                            type: 'checked',
                            prompt: 'Rolle må være valgt'
                        }]
                    },
                    project: {
                        identifier: "project",
                        rules: [{
                            type: 'checked',
                            prompt: 'Område må være valgt'
                        }]
                    },
                    registerUserName: {
                        rules: [{
                            type: 'regUserValid',
                            prompt: 'Du har ikke registrert gyldig registerbruker. Det gjør du på toppen av siden'
                        }]
                    }
                },
                onSuccess: function () {
                    //this is impossible because of scope :/
                    self.submitForm();
                    return false; // false is required if you do don't want to let it submit
                }
            });
        };
        return UserComponent;
    }();
    UserComponent = __decorate([core_1.Component({
        selector: 'user',
        moduleId: module.id,
        templateUrl: 'user.component.html',
        styleUrls: ['user.component.css']
    }), __metadata("design:paramtypes", [user_manager_service_1.UserManagerService, router_1.Router, ng2_toastr_1.ToastsManager])], UserComponent);
    exports.UserComponent = UserComponent;
    return module.exports;
});
$__System.registerDynamic("App/login/login.component.js", ["npm:@angular/core/bundles/core.umd.js", "npm:@angular/router/bundles/router.umd.js", "App/services/user-manager.service.js", "App/helpers/formvalidators.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var router_1 = $__require("npm:@angular/router/bundles/router.umd.js");
    var user_manager_service_1 = $__require("App/services/user-manager.service.js");
    var formvalidators_1 = $__require("App/helpers/formvalidators.js");
    var LoginComponent = function () {
        function LoginComponent(router, userManager, route) {
            this.router = router;
            this.userManager = userManager;
            this.route = route;
            this.errorMessage = "";
            this.epostMessage = "";
            this.passwordMessage = "";
            this.epost = "";
            this.password = "";
            this.validEpost = true;
            this.validPassword = true;
        }
        LoginComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.sub = this.route.params.subscribe(function (params) {
                _this.createsuccess = params["state"] === "createsuccess";
                _this.newpasswordsuccess = params["state"] === "newpasswordsuccess";
            });
        };
        LoginComponent.prototype.newUser = function () {
            this.router.navigate(["createuser"]);
        };
        LoginComponent.prototype.onSubmit = function () {
            if (this.checkInput()) {
                this.loading = true;
                this.login();
            }
        };
        LoginComponent.prototype.login = function () {
            var _this = this;
            this.userManager.checkIfLoginIsValid(this.epost, this.password).then(function (res) {
                if (res.json() === "success") _this.router.navigate([""]);else {
                    _this.loading = false;
                    _this.errorMessage = res.json();
                    _this.updateMessages();
                }
            });
        };
        LoginComponent.prototype.checkInput = function () {
            this.errorMessage = "";
            this.updateMessages();
            return this.checkEpost() && this.checkPassword();
        };
        LoginComponent.prototype.checkEpost = function () {
            this.validEpost = formvalidators_1.validateEmail(this.epost);
            this.epostMessage = this.validEpost ? "" : "Vennligst skriv inn en gylid epostadresse";
            this.updateMessages();
            return this.validEpost;
        };
        LoginComponent.prototype.checkPassword = function () {
            this.validPassword = this.password.length > 0;
            this.passwordMessage = this.validPassword ? "" : "Vennligst fyll inn et passord";
            this.updateMessages();
            return this.validPassword;
        };
        LoginComponent.prototype.updateMessages = function () {
            this.messages = this.errorMessage.length > 0 || this.epostMessage.length > 0 || this.passwordMessage.length > 0;
        };
        LoginComponent.prototype.ngOnDestroy = function () {
            this.sub.unsubscribe();
        };
        return LoginComponent;
    }();
    LoginComponent = __decorate([core_1.Component({
        selector: "login",
        moduleId: module.id,
        templateUrl: "login.component.html",
        styleUrls: ["login.component.css"]
    }), __metadata("design:paramtypes", [router_1.Router, user_manager_service_1.UserManagerService, router_1.ActivatedRoute])], LoginComponent);
    exports.LoginComponent = LoginComponent;
    return module.exports;
});
$__System.registerDynamic("App/user/terms.component.js", ["npm:@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var TermsComponent = function () {
        function TermsComponent() {}
        TermsComponent.prototype.showTerms = function () {
            $('.ui.modal').modal('show');
        };
        return TermsComponent;
    }();
    TermsComponent = __decorate([core_1.Component({
        selector: "termsofuse",
        moduleId: module.id,
        templateUrl: "terms.component.html"
    }), __metadata("design:paramtypes", [])], TermsComponent);
    exports.TermsComponent = TermsComponent;
    return module.exports;
});
$__System.registerDynamic("App/user/loggedInUser.component.js", ["npm:@angular/core/bundles/core.umd.js", "npm:@angular/router/bundles/router.umd.js", "App/models/DataModels.js", "App/services/user-manager.service.js", "App/services/mediator.service.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var router_1 = $__require("npm:@angular/router/bundles/router.umd.js");
    var DataModels_1 = $__require("App/models/DataModels.js");
    var user_manager_service_1 = $__require("App/services/user-manager.service.js");
    var mediator_service_1 = $__require("App/services/mediator.service.js");
    var LoggedInUserComponent = function () {
        function LoggedInUserComponent(mediatorService, userManagerService, router) {
            this.mediatorService = mediatorService;
            this.userManagerService = userManagerService;
            this.router = router;
        }
        LoggedInUserComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.user = new DataModels_1.UserData();
            this.mediatorService.userInfo$.subscribe(function (user) {
                if (user) {
                    _this.user = user;
                }
            });
        };
        Object.defineProperty(LoggedInUserComponent.prototype, "loading", {
            get: function () {
                return this.user.name === undefined ? "active" : "";
            },
            enumerable: true,
            configurable: true
        });
        LoggedInUserComponent.prototype.logOut = function () {
            var _this = this;
            this.userManagerService.logOut().subscribe(function (res) {
                _this.userManagerService.setUser(undefined);
                _this.router.navigateByUrl("/login/");
            });
        };
        LoggedInUserComponent.prototype.navigateToUser = function () {
            this.router.navigate(['changeuser']);
        };
        return LoggedInUserComponent;
    }();
    LoggedInUserComponent = __decorate([core_1.Component({
        selector: 'logged-in-user',
        moduleId: module.id,
        templateUrl: 'loggedInUser.component.html',
        styleUrls: ['loggedInUser.component.css']
    }), __metadata("design:paramtypes", [mediator_service_1.MediatorService, user_manager_service_1.UserManagerService, router_1.Router])], LoggedInUserComponent);
    exports.LoggedInUserComponent = LoggedInUserComponent;
    return module.exports;
});
$__System.registerDynamic("App/user/register-user/register-user.component.js", ["npm:@angular/core/bundles/core.umd.js", "npm:@angular/router/bundles/router.umd.js", "App/services/user-manager.service.js", "App/models/DataModels.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var router_1 = $__require("npm:@angular/router/bundles/router.umd.js");
    var user_manager_service_1 = $__require("App/services/user-manager.service.js");
    var DataModels_1 = $__require("App/models/DataModels.js");
    var RegisterUserComponent = function () {
        function RegisterUserComponent(userManagerService, router) {
            this.userManagerService = userManagerService;
            this.router = router;
            this.onSuccess = new core_1.EventEmitter();
            this.onCancel = new core_1.EventEmitter();
            this.validUsername = true;
            this.validPassword = true;
            this.savedData = new DataModels_1.LoginSubmission();
            this.data = new DataModels_1.LoginSubmission();
        }
        RegisterUserComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (!this.isNewUser) {
                this.loading = true;
                this.userManagerService.getRegisterUsername().subscribe(function (res) {
                    _this.loading = false;
                    _this.savedData.userName = res;
                    _this.data = _this.savedData;
                    _this.userManagerService.hasValidRegisterUser().subscribe(function (res) {
                        _this.loading = false;
                        _this.hasValidRegisterUser = res;
                    });
                });
            }
        };
        RegisterUserComponent.prototype.checkRegisterUser = function (data) {
            var _this = this;
            if (data === void 0) {
                data = this.data;
            }
            this.checkValidUsername();
            this.checkPassword();
            if (!this.validUsername || !this.validPassword) return;
            this.loading = true;
            if (this.isNewUser) {
                this.userManagerService.checkRegisterUser(this.data).subscribe(function (res) {
                    _this.loading = false;
                    if (res) {
                        _this.hasValidRegisterUser = true;
                        _this.showRegisterContent = false;
                        _this.onSuccess.emit(_this.data);
                    }
                    _this.failed = !res;
                });
            } else {
                this.userManagerService.updateRegisterUser(this.data).subscribe(function (res) {
                    _this.loading = false;
                    if (res) {
                        _this.hasValidRegisterUser = true;
                        _this.showRegisterContent = false;
                        _this.savedData.userName = _this.data.userName;
                        _this.userManagerService.setRegisterUsername(_this.data.userName);
                        _this.onSuccess.emit(_this.data);
                    }
                    _this.failed = !res;
                });
            }
        };
        RegisterUserComponent.prototype.checkPassword = function (data) {
            if (data === void 0) {
                data = this.data;
            }
            this.validPassword = data.password !== undefined && data.password.length > 0;
        };
        RegisterUserComponent.prototype.checkValidUsername = function () {
            this.validUsername = this.data.userName !== undefined && this.data.userName.length > 0;
        };
        RegisterUserComponent.prototype.cancelRegisterUser = function () {
            this.showRegisterContent = false;
            this.onCancel.emit(this.savedData.userName);
        };
        return RegisterUserComponent;
    }();
    __decorate([core_1.Output(), __metadata("design:type", Object)], RegisterUserComponent.prototype, "onSuccess", void 0);
    __decorate([core_1.Output(), __metadata("design:type", Object)], RegisterUserComponent.prototype, "onCancel", void 0);
    __decorate([core_1.Input(), __metadata("design:type", Boolean)], RegisterUserComponent.prototype, "disabled", void 0);
    __decorate([core_1.Input(), __metadata("design:type", Boolean)], RegisterUserComponent.prototype, "showRegisterContent", void 0);
    __decorate([core_1.Input(), __metadata("design:type", Boolean)], RegisterUserComponent.prototype, "isNewUser", void 0);
    RegisterUserComponent = __decorate([core_1.Component({
        selector: 'register-user',
        moduleId: module.id,
        templateUrl: 'register-user.component.html',
        styleUrls: ['../user.component.css']
    }), __metadata("design:paramtypes", [user_manager_service_1.UserManagerService, router_1.Router])], RegisterUserComponent);
    exports.RegisterUserComponent = RegisterUserComponent;
    return module.exports;
});
$__System.registerDynamic("App/user/create-user/create-user.component.js", ["npm:@angular/core/bundles/core.umd.js", "npm:@angular/router/bundles/router.umd.js", "App/services/user-manager.service.js", "App/models/DataModels.js", "npm:ng2-toastr/ng2-toastr.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var router_1 = $__require("npm:@angular/router/bundles/router.umd.js");
    var user_manager_service_1 = $__require("App/services/user-manager.service.js");
    var DataModels_1 = $__require("App/models/DataModels.js");
    var ng2_toastr_1 = $__require("npm:ng2-toastr/ng2-toastr.js");
    var CreateUserComponent = function () {
        function CreateUserComponent(router, userManagerService, toastr) {
            this.router = router;
            this.userManagerService = userManagerService;
            this.toastr = toastr;
            this.userData = new DataModels_1.UserData();
        }
        CreateUserComponent.prototype.onRegisterSuccess = function (registerUser) {
            this.registerUser = registerUser;
            this.hasValidRegisterUser = true;
        };
        //Denne skal ikke bli 
        CreateUserComponent.prototype.onCancel = function () {
            var _this = this;
            this.userManagerService.logOut().subscribe(function () {
                _this.router.navigateByUrl("/login/");
            });
        };
        CreateUserComponent.prototype.onUserDetailsSuccess = function (user) {
            var _this = this;
            this.usercreateloading = true;
            user.registerPassword = this.registerUser.password;
            user.registerUserName = this.registerUser.userName;
            this.userManagerService.createUser(user).subscribe(function (res) {
                _this.usercreateloading = false;
                if (res === "success") {
                    _this.router.navigate(["/createusersuccess"]);
                } else {
                    _this.userCreateError = res;
                }
            });
        };
        CreateUserComponent.prototype.onUserDetailsCancel = function () {
            this.router.navigateByUrl("/login/");
        };
        return CreateUserComponent;
    }();
    CreateUserComponent = __decorate([core_1.Component({
        selector: 'create-user',
        moduleId: module.id,
        templateUrl: 'create-user.component.html',
        styleUrls: ['../user.component.css']
    }), __metadata("design:paramtypes", [router_1.Router, user_manager_service_1.UserManagerService, ng2_toastr_1.ToastsManager])], CreateUserComponent);
    exports.CreateUserComponent = CreateUserComponent;
    return module.exports;
});
$__System.registerDynamic("App/user/invalid-register-user/invalid-register-user.component.js", ["npm:@angular/core/bundles/core.umd.js", "npm:@angular/router/bundles/router.umd.js", "App/services/user-manager.service.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var router_1 = $__require("npm:@angular/router/bundles/router.umd.js");
    var user_manager_service_1 = $__require("App/services/user-manager.service.js");
    var InvalidRegisterUserComponent = function () {
        function InvalidRegisterUserComponent(userManagerService, router) {
            this.userManagerService = userManagerService;
            this.router = router;
        }
        InvalidRegisterUserComponent.prototype.onSuccess = function () {
            this.router.navigateByUrl("");
        };
        InvalidRegisterUserComponent.prototype.onCancel = function () {
            var _this = this;
            this.userManagerService.logOut().subscribe(function (res) {
                _this.userManagerService.setUser(undefined);
                _this.router.navigateByUrl("/login/");
            });
        };
        return InvalidRegisterUserComponent;
    }();
    InvalidRegisterUserComponent = __decorate([core_1.Component({
        selector: 'invalid-register-user',
        moduleId: module.id,
        templateUrl: 'invalid-register-user.component.html',
        styleUrls: ['../user.component.css']
    }), __metadata("design:paramtypes", [user_manager_service_1.UserManagerService, router_1.Router])], InvalidRegisterUserComponent);
    exports.InvalidRegisterUserComponent = InvalidRegisterUserComponent;
    return module.exports;
});
$__System.registerDynamic("App/user/user-details/user-details.component.js", ["npm:@angular/core/bundles/core.umd.js", "npm:@angular/router/bundles/router.umd.js", "App/services/user-manager.service.js", "App/models/DataModels.js", "App/resources/app-settings.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var router_1 = $__require("npm:@angular/router/bundles/router.umd.js");
    var user_manager_service_1 = $__require("App/services/user-manager.service.js");
    var DataModels_1 = $__require("App/models/DataModels.js");
    var app_settings_1 = $__require("App/resources/app-settings.js");
    var UserDetailsComponent = function () {
        function UserDetailsComponent(userManagerService, router) {
            this.userManagerService = userManagerService;
            this.router = router;
            this.loading = false;
            this.onSuccess = new core_1.EventEmitter();
            this.onCancel = new core_1.EventEmitter();
            this.projects = app_settings_1.projectNames;
            this.roles = app_settings_1.roleNames;
        }
        UserDetailsComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.user = new DataModels_1.UserData();
            if (!this.isNewUser) {
                if (this.router.url === "/adduserinformation") {
                    this.missing = true;
                    this.showTestDataForm = true;
                }
                this.loading = true;
                this.userManagerService.getUser().subscribe(function (user) {
                    _this.loading = false;
                    _this.termsAlreadyAccepted = true;
                    user.hasAcceptedTerms = true;
                    _this.user = JSON.parse(JSON.stringify(user));
                });
            } else {
                this.user.hasAcceptedTerms = false;
                this.showTestDataForm = true;
                this.showPasswordPanel = true;
            }
        };
        UserDetailsComponent.prototype.ngAfterViewInit = function () {
            $('.ui.checkbox').checkbox();
            this.setValidationRules();
        };
        UserDetailsComponent.prototype.termsCheckBoxToggle = function () {
            this.user.hasAcceptedTerms = !this.user.hasAcceptedTerms;
        };
        UserDetailsComponent.prototype.projectChecked = function (value) {
            this.user.projectValue = value;
        };
        UserDetailsComponent.prototype.roleChecked = function (value) {
            this.user.roleValue = value;
        };
        UserDetailsComponent.prototype.showTestData = function () {
            this.showTestDataForm = true;
            this.setValidationRules();
        };
        UserDetailsComponent.prototype.setValidationRules = function () {
            var self = this;
            $('#userForm').form({
                fields: {
                    name: {
                        rules: [{
                            type: 'regExp[.{2} .{2}]',
                            prompt: '{name} må inneholde minst to ord på minst 2 bokstaver'
                        }]
                    },
                    username: {
                        rules: [{
                            type: 'email',
                            prompt: '{name} må være en gyldig e-post adresse'
                        }]
                    },
                    oldpassword: {
                        optional: true,
                        rules: [{
                            type: 'regExp',
                            value: '[A-Z]+',
                            prompt: 'Passord må inneholde minst én stor bokstav'
                        }, {
                            type: 'regExp',
                            value: '[a-z]+',
                            prompt: 'Passord må inneholde minst én liten bokstav'
                        }, {
                            type: 'regExp',
                            value: '[0-9]+',
                            prompt: 'Passord må inneholde minst ett tall'
                        }, {
                            type: 'minLength[8]',
                            prompt: 'Passord må være minst {ruleValue} tegn langt'
                        }]
                    },
                    password: {
                        optional: !this.isNewUser,
                        rules: [{
                            type: 'regExp',
                            value: '[A-Z]+',
                            prompt: 'Passord må inneholde minst én stor bokstav'
                        }, {
                            type: 'regExp',
                            value: '[a-z]+',
                            prompt: 'Passord må inneholde minst én liten bokstav'
                        }, {
                            type: 'regExp',
                            value: '[0-9]+',
                            prompt: 'Passord må inneholde minst ett tall'
                        }, {
                            type: 'minLength[8]',
                            prompt: 'Passord må være minst {ruleValue} tegn langt'
                        }]
                    },
                    passwordrepeat: {
                        optional: !this.isNewUser,
                        rules: [{
                            type: 'match[password]',
                            depends: 'password',
                            prompt: 'Passord må gjentas likt i feltet under'
                        }]
                    },
                    hasAcceptedTerms: {
                        optional: !this.isNewUser,
                        rules: [{
                            type: 'checked',
                            prompt: '"{name}" må være krysset av'
                        }]
                    },
                    role: {
                        identifier: "role",
                        rules: [{
                            type: 'checked',
                            prompt: 'Rolle må være valgt'
                        }]
                    },
                    project: {
                        identifier: "project",
                        rules: [{
                            type: 'checked',
                            prompt: 'Område må være valgt'
                        }]
                    }
                },
                onSuccess: function () {
                    //this is impossible because of scope :/
                    self.submitForm();
                    return false; // false is required if you do don't want to let it submit
                }
            });
        };
        UserDetailsComponent.prototype.submitForm = function () {
            this.onSuccess.emit(this.user);
        };
        UserDetailsComponent.prototype.cancel = function () {
            this.onCancel.emit();
        };
        return UserDetailsComponent;
    }();
    __decorate([core_1.Input(), __metadata("design:type", Boolean)], UserDetailsComponent.prototype, "isNewUser", void 0);
    __decorate([core_1.Input(), __metadata("design:type", Boolean)], UserDetailsComponent.prototype, "showTestDataForm", void 0);
    __decorate([core_1.Input(), __metadata("design:type", Boolean)], UserDetailsComponent.prototype, "disabled", void 0);
    __decorate([core_1.Input(), __metadata("design:type", Object)], UserDetailsComponent.prototype, "loading", void 0);
    __decorate([core_1.Input(), __metadata("design:type", String)], UserDetailsComponent.prototype, "errorMessage", void 0);
    __decorate([core_1.Output(), __metadata("design:type", Object)], UserDetailsComponent.prototype, "onSuccess", void 0);
    __decorate([core_1.Output(), __metadata("design:type", Object)], UserDetailsComponent.prototype, "onCancel", void 0);
    UserDetailsComponent = __decorate([core_1.Component({
        selector: 'user-details',
        moduleId: module.id,
        templateUrl: 'user-details.component.html',
        styleUrls: ['../user.component.css']
    }), __metadata("design:paramtypes", [user_manager_service_1.UserManagerService, router_1.Router])], UserDetailsComponent);
    exports.UserDetailsComponent = UserDetailsComponent;
    return module.exports;
});
$__System.registerDynamic("App/user/update-user/update-user.component.js", ["npm:@angular/core/bundles/core.umd.js", "npm:@angular/router/bundles/router.umd.js", "App/services/user-manager.service.js", "npm:ng2-toastr/ng2-toastr.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var router_1 = $__require("npm:@angular/router/bundles/router.umd.js");
    var user_manager_service_1 = $__require("App/services/user-manager.service.js");
    var ng2_toastr_1 = $__require("npm:ng2-toastr/ng2-toastr.js");
    var UpdateUserComponent = function () {
        function UpdateUserComponent(router, userManagerService, toastr) {
            this.router = router;
            this.userManagerService = userManagerService;
            this.toastr = toastr;
        }
        UpdateUserComponent.prototype.onRegisterSuccess = function (user) {
            this.toastr.success("Din registerbruker er nå oppdatert");
            this.userManagerService.setRegisterUsername(user.userName);
        };
        UpdateUserComponent.prototype.onRegisterCancel = function () {
            this.showRegisterContent = false;
        };
        UpdateUserComponent.prototype.onUserDetailsSuccess = function (user) {
            var _this = this;
            this.userdetailloading = true;
            this.userManagerService.updateUser(user).subscribe(function (res) {
                _this.userdetailloading = false;
                if (res === "success") {
                    _this.userManagerService.setUser(user);
                    _this.toastr.success("Dine brukerdetaljer er nå oppdatert");
                    _this.router.navigateByUrl("");
                } else {
                    _this.errorMessage = res;
                }
            });
        };
        UpdateUserComponent.prototype.onUserDetailsCancel = function () {
            if (this.router.url === "/adduserinformation") this.router.navigateByUrl("/login/");else this.router.navigateByUrl("");
            console.log("Reroute");
        };
        return UpdateUserComponent;
    }();
    UpdateUserComponent = __decorate([core_1.Component({
        selector: 'update-user',
        moduleId: module.id,
        templateUrl: 'update-user.component.html',
        styleUrls: ['../user.component.css']
    }), __metadata("design:paramtypes", [router_1.Router, user_manager_service_1.UserManagerService, ng2_toastr_1.ToastsManager])], UpdateUserComponent);
    exports.UpdateUserComponent = UpdateUserComponent;
    return module.exports;
});
$__System.registerDynamic('npm:rxjs/BehaviorSubject.js', ['npm:rxjs/Subject.js', 'npm:rxjs/util/ObjectUnsubscribedError.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subject_1 = $__require('npm:rxjs/Subject.js');
    var ObjectUnsubscribedError_1 = $__require('npm:rxjs/util/ObjectUnsubscribedError.js');
    /**
     * @class BehaviorSubject<T>
     */
    var BehaviorSubject = function (_super) {
        __extends(BehaviorSubject, _super);
        function BehaviorSubject(_value) {
            _super.call(this);
            this._value = _value;
        }
        Object.defineProperty(BehaviorSubject.prototype, "value", {
            get: function () {
                return this.getValue();
            },
            enumerable: true,
            configurable: true
        });
        BehaviorSubject.prototype._subscribe = function (subscriber) {
            var subscription = _super.prototype._subscribe.call(this, subscriber);
            if (subscription && !subscription.closed) {
                subscriber.next(this._value);
            }
            return subscription;
        };
        BehaviorSubject.prototype.getValue = function () {
            if (this.hasError) {
                throw this.thrownError;
            } else if (this.closed) {
                throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
            } else {
                return this._value;
            }
        };
        BehaviorSubject.prototype.next = function (value) {
            _super.prototype.next.call(this, this._value = value);
        };
        return BehaviorSubject;
    }(Subject_1.Subject);
    exports.BehaviorSubject = BehaviorSubject;
    

    return module.exports;
});
$__System.registerDynamic('npm:rxjs/observable/IteratorObservable.js', ['npm:rxjs/util/root.js', 'npm:rxjs/Observable.js', 'npm:rxjs/symbol/iterator.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var root_1 = $__require('npm:rxjs/util/root.js');
    var Observable_1 = $__require('npm:rxjs/Observable.js');
    var iterator_1 = $__require('npm:rxjs/symbol/iterator.js');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var IteratorObservable = function (_super) {
        __extends(IteratorObservable, _super);
        function IteratorObservable(iterator, scheduler) {
            _super.call(this);
            this.scheduler = scheduler;
            if (iterator == null) {
                throw new Error('iterator cannot be null.');
            }
            this.iterator = getIterator(iterator);
        }
        IteratorObservable.create = function (iterator, scheduler) {
            return new IteratorObservable(iterator, scheduler);
        };
        IteratorObservable.dispatch = function (state) {
            var index = state.index,
                hasError = state.hasError,
                iterator = state.iterator,
                subscriber = state.subscriber;
            if (hasError) {
                subscriber.error(state.error);
                return;
            }
            var result = iterator.next();
            if (result.done) {
                subscriber.complete();
                return;
            }
            subscriber.next(result.value);
            state.index = index + 1;
            if (subscriber.closed) {
                if (typeof iterator.return === 'function') {
                    iterator.return();
                }
                return;
            }
            this.schedule(state);
        };
        IteratorObservable.prototype._subscribe = function (subscriber) {
            var index = 0;
            var _a = this,
                iterator = _a.iterator,
                scheduler = _a.scheduler;
            if (scheduler) {
                return scheduler.schedule(IteratorObservable.dispatch, 0, {
                    index: index, iterator: iterator, subscriber: subscriber
                });
            } else {
                do {
                    var result = iterator.next();
                    if (result.done) {
                        subscriber.complete();
                        break;
                    } else {
                        subscriber.next(result.value);
                    }
                    if (subscriber.closed) {
                        if (typeof iterator.return === 'function') {
                            iterator.return();
                        }
                        break;
                    }
                } while (true);
            }
        };
        return IteratorObservable;
    }(Observable_1.Observable);
    exports.IteratorObservable = IteratorObservable;
    var StringIterator = function () {
        function StringIterator(str, idx, len) {
            if (idx === void 0) {
                idx = 0;
            }
            if (len === void 0) {
                len = str.length;
            }
            this.str = str;
            this.idx = idx;
            this.len = len;
        }
        StringIterator.prototype[iterator_1.$$iterator] = function () {
            return this;
        };
        StringIterator.prototype.next = function () {
            return this.idx < this.len ? {
                done: false,
                value: this.str.charAt(this.idx++)
            } : {
                done: true,
                value: undefined
            };
        };
        return StringIterator;
    }();
    var ArrayIterator = function () {
        function ArrayIterator(arr, idx, len) {
            if (idx === void 0) {
                idx = 0;
            }
            if (len === void 0) {
                len = toLength(arr);
            }
            this.arr = arr;
            this.idx = idx;
            this.len = len;
        }
        ArrayIterator.prototype[iterator_1.$$iterator] = function () {
            return this;
        };
        ArrayIterator.prototype.next = function () {
            return this.idx < this.len ? {
                done: false,
                value: this.arr[this.idx++]
            } : {
                done: true,
                value: undefined
            };
        };
        return ArrayIterator;
    }();
    function getIterator(obj) {
        var i = obj[iterator_1.$$iterator];
        if (!i && typeof obj === 'string') {
            return new StringIterator(obj);
        }
        if (!i && obj.length !== undefined) {
            return new ArrayIterator(obj);
        }
        if (!i) {
            throw new TypeError('object is not iterable');
        }
        return obj[iterator_1.$$iterator]();
    }
    var maxSafeInteger = Math.pow(2, 53) - 1;
    function toLength(o) {
        var len = +o.length;
        if (isNaN(len)) {
            return 0;
        }
        if (len === 0 || !numberIsFinite(len)) {
            return len;
        }
        len = sign(len) * Math.floor(Math.abs(len));
        if (len <= 0) {
            return 0;
        }
        if (len > maxSafeInteger) {
            return maxSafeInteger;
        }
        return len;
    }
    function numberIsFinite(value) {
        return typeof value === 'number' && root_1.root.isFinite(value);
    }
    function sign(value) {
        var valueAsNumber = +value;
        if (valueAsNumber === 0) {
            return valueAsNumber;
        }
        if (isNaN(valueAsNumber)) {
            return valueAsNumber;
        }
        return valueAsNumber < 0 ? -1 : 1;
    }
    

    return module.exports;
});
$__System.registerDynamic('npm:rxjs/observable/ArrayLikeObservable.js', ['npm:rxjs/Observable.js', 'npm:rxjs/observable/ScalarObservable.js', 'npm:rxjs/observable/EmptyObservable.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require('npm:rxjs/Observable.js');
    var ScalarObservable_1 = $__require('npm:rxjs/observable/ScalarObservable.js');
    var EmptyObservable_1 = $__require('npm:rxjs/observable/EmptyObservable.js');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var ArrayLikeObservable = function (_super) {
        __extends(ArrayLikeObservable, _super);
        function ArrayLikeObservable(arrayLike, scheduler) {
            _super.call(this);
            this.arrayLike = arrayLike;
            this.scheduler = scheduler;
            if (!scheduler && arrayLike.length === 1) {
                this._isScalar = true;
                this.value = arrayLike[0];
            }
        }
        ArrayLikeObservable.create = function (arrayLike, scheduler) {
            var length = arrayLike.length;
            if (length === 0) {
                return new EmptyObservable_1.EmptyObservable();
            } else if (length === 1) {
                return new ScalarObservable_1.ScalarObservable(arrayLike[0], scheduler);
            } else {
                return new ArrayLikeObservable(arrayLike, scheduler);
            }
        };
        ArrayLikeObservable.dispatch = function (state) {
            var arrayLike = state.arrayLike,
                index = state.index,
                length = state.length,
                subscriber = state.subscriber;
            if (subscriber.closed) {
                return;
            }
            if (index >= length) {
                subscriber.complete();
                return;
            }
            subscriber.next(arrayLike[index]);
            state.index = index + 1;
            this.schedule(state);
        };
        ArrayLikeObservable.prototype._subscribe = function (subscriber) {
            var index = 0;
            var _a = this,
                arrayLike = _a.arrayLike,
                scheduler = _a.scheduler;
            var length = arrayLike.length;
            if (scheduler) {
                return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {
                    arrayLike: arrayLike, index: index, length: length, subscriber: subscriber
                });
            } else {
                for (var i = 0; i < length && !subscriber.closed; i++) {
                    subscriber.next(arrayLike[i]);
                }
                subscriber.complete();
            }
        };
        return ArrayLikeObservable;
    }(Observable_1.Observable);
    exports.ArrayLikeObservable = ArrayLikeObservable;
    

    return module.exports;
});
$__System.registerDynamic('npm:rxjs/observable/FromObservable.js', ['npm:rxjs/util/isArray.js', 'npm:rxjs/util/isPromise.js', 'npm:rxjs/observable/PromiseObservable.js', 'npm:rxjs/observable/IteratorObservable.js', 'npm:rxjs/observable/ArrayObservable.js', 'npm:rxjs/observable/ArrayLikeObservable.js', 'npm:rxjs/symbol/iterator.js', 'npm:rxjs/Observable.js', 'npm:rxjs/operator/observeOn.js', 'npm:rxjs/symbol/observable.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var isArray_1 = $__require('npm:rxjs/util/isArray.js');
    var isPromise_1 = $__require('npm:rxjs/util/isPromise.js');
    var PromiseObservable_1 = $__require('npm:rxjs/observable/PromiseObservable.js');
    var IteratorObservable_1 = $__require('npm:rxjs/observable/IteratorObservable.js');
    var ArrayObservable_1 = $__require('npm:rxjs/observable/ArrayObservable.js');
    var ArrayLikeObservable_1 = $__require('npm:rxjs/observable/ArrayLikeObservable.js');
    var iterator_1 = $__require('npm:rxjs/symbol/iterator.js');
    var Observable_1 = $__require('npm:rxjs/Observable.js');
    var observeOn_1 = $__require('npm:rxjs/operator/observeOn.js');
    var observable_1 = $__require('npm:rxjs/symbol/observable.js');
    var isArrayLike = function (x) {
        return x && typeof x.length === 'number';
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var FromObservable = function (_super) {
        __extends(FromObservable, _super);
        function FromObservable(ish, scheduler) {
            _super.call(this, null);
            this.ish = ish;
            this.scheduler = scheduler;
        }
        /**
         * Creates an Observable from an Array, an array-like object, a Promise, an
         * iterable object, or an Observable-like object.
         *
         * <span class="informal">Converts almost anything to an Observable.</span>
         *
         * <img src="./img/from.png" width="100%">
         *
         * Convert various other objects and data types into Observables. `from`
         * converts a Promise or an array-like or an
         * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)
         * object into an Observable that emits the items in that promise or array or
         * iterable. A String, in this context, is treated as an array of characters.
         * Observable-like objects (contains a function named with the ES2015 Symbol
         * for Observable) can also be converted through this operator.
         *
         * @example <caption>Converts an array to an Observable</caption>
         * var array = [10, 20, 30];
         * var result = Rx.Observable.from(array);
         * result.subscribe(x => console.log(x));
         *
         * // Results in the following:
         * // 10 20 30
         *
         * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>
         * function* generateDoubles(seed) {
         *   var i = seed;
         *   while (true) {
         *     yield i;
         *     i = 2 * i; // double it
         *   }
         * }
         *
         * var iterator = generateDoubles(3);
         * var result = Rx.Observable.from(iterator).take(10);
         * result.subscribe(x => console.log(x));
         *
         * // Results in the following:
         * // 3 6 12 24 48 96 192 384 768 1536
         *
         * @see {@link create}
         * @see {@link fromEvent}
         * @see {@link fromEventPattern}
         * @see {@link fromPromise}
         *
         * @param {ObservableInput<T>} ish A subscribable object, a Promise, an
         * Observable-like, an Array, an iterable or an array-like object to be
         * converted.
         * @param {Scheduler} [scheduler] The scheduler on which to schedule the
         * emissions of values.
         * @return {Observable<T>} The Observable whose values are originally from the
         * input object that was converted.
         * @static true
         * @name from
         * @owner Observable
         */
        FromObservable.create = function (ish, scheduler) {
            if (ish != null) {
                if (typeof ish[observable_1.$$observable] === 'function') {
                    if (ish instanceof Observable_1.Observable && !scheduler) {
                        return ish;
                    }
                    return new FromObservable(ish, scheduler);
                } else if (isArray_1.isArray(ish)) {
                    return new ArrayObservable_1.ArrayObservable(ish, scheduler);
                } else if (isPromise_1.isPromise(ish)) {
                    return new PromiseObservable_1.PromiseObservable(ish, scheduler);
                } else if (typeof ish[iterator_1.$$iterator] === 'function' || typeof ish === 'string') {
                    return new IteratorObservable_1.IteratorObservable(ish, scheduler);
                } else if (isArrayLike(ish)) {
                    return new ArrayLikeObservable_1.ArrayLikeObservable(ish, scheduler);
                }
            }
            throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');
        };
        FromObservable.prototype._subscribe = function (subscriber) {
            var ish = this.ish;
            var scheduler = this.scheduler;
            if (scheduler == null) {
                return ish[observable_1.$$observable]().subscribe(subscriber);
            } else {
                return ish[observable_1.$$observable]().subscribe(new observeOn_1.ObserveOnSubscriber(subscriber, scheduler, 0));
            }
        };
        return FromObservable;
    }(Observable_1.Observable);
    exports.FromObservable = FromObservable;
    

    return module.exports;
});
$__System.registerDynamic("npm:rxjs/observable/from.js", ["npm:rxjs/observable/FromObservable.js"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var FromObservable_1 = $__require("npm:rxjs/observable/FromObservable.js");
  exports.from = FromObservable_1.FromObservable.create;
  

  return module.exports;
});
$__System.registerDynamic("npm:rxjs/operator/concatMap.js", ["npm:rxjs/operator/mergeMap.js"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var mergeMap_1 = $__require("npm:rxjs/operator/mergeMap.js");
  /* tslint:disable:max-line-length */
  /**
   * Projects each source value to an Observable which is merged in the output
   * Observable, in a serialized fashion waiting for each one to complete before
   * merging the next.
   *
   * <span class="informal">Maps each value to an Observable, then flattens all of
   * these inner Observables using {@link concatAll}.</span>
   *
   * <img src="./img/concatMap.png" width="100%">
   *
   * Returns an Observable that emits items based on applying a function that you
   * supply to each item emitted by the source Observable, where that function
   * returns an (so-called "inner") Observable. Each new inner Observable is
   * concatenated with the previous inner Observable.
   *
   * __Warning:__ if source values arrive endlessly and faster than their
   * corresponding inner Observables can complete, it will result in memory issues
   * as inner Observables amass in an unbounded buffer waiting for their turn to
   * be subscribed to.
   *
   * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set
   * to `1`.
   *
   * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
   * var clicks = Rx.Observable.fromEvent(document, 'click');
   * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));
   * result.subscribe(x => console.log(x));
   *
   * // Results in the following:
   * // (results are not concurrent)
   * // For every click on the "document" it will emit values 0 to 3 spaced
   * // on a 1000ms interval
   * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3
   *
   * @see {@link concat}
   * @see {@link concatAll}
   * @see {@link concatMapTo}
   * @see {@link exhaustMap}
   * @see {@link mergeMap}
   * @see {@link switchMap}
   *
   * @param {function(value: T, ?index: number): Observable} project A function
   * that, when applied to an item emitted by the source Observable, returns an
   * Observable.
   * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
   * A function to produce the value on the output Observable based on the values
   * and the indices of the source (outer) emission and the inner Observable
   * emission. The arguments passed to this function are:
   * - `outerValue`: the value that came from the source
   * - `innerValue`: the value that came from the projected Observable
   * - `outerIndex`: the "index" of the value that came from the source
   * - `innerIndex`: the "index" of the value from the projected Observable
   * @return {Observable} an observable of values merged from the projected
   * Observables as they were subscribed to, one at a time. Optionally, these
   * values may have been projected from a passed `projectResult` argument.
   * @return {Observable} An Observable that emits the result of applying the
   * projection function (and the optional `resultSelector`) to each item emitted
   * by the source Observable and taking values from each projected inner
   * Observable sequentially.
   * @method concatMap
   * @owner Observable
   */
  function concatMap(project, resultSelector) {
    return this.lift(new mergeMap_1.MergeMapOperator(project, resultSelector, 1));
  }
  exports.concatMap = concatMap;
  

  return module.exports;
});
$__System.registerDynamic("npm:rxjs/operator/every.js", ["npm:rxjs/Subscriber.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require("npm:rxjs/Subscriber.js");
    /**
     * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.
     *
     * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>
     *  Observable.of(1, 2, 3, 4, 5, 6)
     *     .every(x => x < 5)
     *     .subscribe(x => console.log(x)); // -> false
     *
     * @param {function} predicate a function for determining if an item meets a specified condition.
     * @param {any} [thisArg] optional object to use for `this` in the callback
     * @return {Observable} an Observable of booleans that determines if all items of the source Observable meet the condition specified.
     * @method every
     * @owner Observable
     */
    function every(predicate, thisArg) {
        return this.lift(new EveryOperator(predicate, thisArg, this));
    }
    exports.every = every;
    var EveryOperator = function () {
        function EveryOperator(predicate, thisArg, source) {
            this.predicate = predicate;
            this.thisArg = thisArg;
            this.source = source;
        }
        EveryOperator.prototype.call = function (observer, source) {
            return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));
        };
        return EveryOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var EverySubscriber = function (_super) {
        __extends(EverySubscriber, _super);
        function EverySubscriber(destination, predicate, thisArg, source) {
            _super.call(this, destination);
            this.predicate = predicate;
            this.thisArg = thisArg;
            this.source = source;
            this.index = 0;
            this.thisArg = thisArg || this;
        }
        EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {
            this.destination.next(everyValueMatch);
            this.destination.complete();
        };
        EverySubscriber.prototype._next = function (value) {
            var result = false;
            try {
                result = this.predicate.call(this.thisArg, value, this.index++, this.source);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            if (!result) {
                this.notifyComplete(false);
            }
        };
        EverySubscriber.prototype._complete = function () {
            this.notifyComplete(true);
        };
        return EverySubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('npm:rxjs/operator/first.js', ['npm:rxjs/Subscriber.js', 'npm:rxjs/util/EmptyError.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('npm:rxjs/Subscriber.js');
    var EmptyError_1 = $__require('npm:rxjs/util/EmptyError.js');
    /**
     * Emits only the first value (or the first value that meets some condition)
     * emitted by the source Observable.
     *
     * <span class="informal">Emits only the first value. Or emits only the first
     * value that passes some test.</span>
     *
     * <img src="./img/first.png" width="100%">
     *
     * If called with no arguments, `first` emits the first value of the source
     * Observable, then completes. If called with a `predicate` function, `first`
     * emits the first value of the source that matches the specified condition. It
     * may also take a `resultSelector` function to produce the output value from
     * the input value, and a `defaultValue` to emit in case the source completes
     * before it is able to emit a valid value. Throws an error if `defaultValue`
     * was not provided and a matching element is not found.
     *
     * @example <caption>Emit only the first click that happens on the DOM</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = clicks.first();
     * result.subscribe(x => console.log(x));
     *
     * @example <caption>Emits the first click that happens on a DIV</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = clicks.first(ev => ev.target.tagName === 'DIV');
     * result.subscribe(x => console.log(x));
     *
     * @see {@link filter}
     * @see {@link find}
     * @see {@link take}
     *
     * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
     * callback if the Observable completes before any `next` notification was sent.
     *
     * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]
     * An optional function called with each item to test for condition matching.
     * @param {function(value: T, index: number): R} [resultSelector] A function to
     * produce the value on the output Observable based on the values
     * and the indices of the source Observable. The arguments passed to this
     * function are:
     * - `value`: the value that was emitted on the source.
     * - `index`: the "index" of the value from the source.
     * @param {R} [defaultValue] The default value emitted in case no valid value
     * was found on the source.
     * @return {Observable<T|R>} an Observable of the first item that matches the
     * condition.
     * @method first
     * @owner Observable
     */
    function first(predicate, resultSelector, defaultValue) {
        return this.lift(new FirstOperator(predicate, resultSelector, defaultValue, this));
    }
    exports.first = first;
    var FirstOperator = function () {
        function FirstOperator(predicate, resultSelector, defaultValue, source) {
            this.predicate = predicate;
            this.resultSelector = resultSelector;
            this.defaultValue = defaultValue;
            this.source = source;
        }
        FirstOperator.prototype.call = function (observer, source) {
            return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));
        };
        return FirstOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var FirstSubscriber = function (_super) {
        __extends(FirstSubscriber, _super);
        function FirstSubscriber(destination, predicate, resultSelector, defaultValue, source) {
            _super.call(this, destination);
            this.predicate = predicate;
            this.resultSelector = resultSelector;
            this.defaultValue = defaultValue;
            this.source = source;
            this.index = 0;
            this.hasCompleted = false;
            this._emitted = false;
        }
        FirstSubscriber.prototype._next = function (value) {
            var index = this.index++;
            if (this.predicate) {
                this._tryPredicate(value, index);
            } else {
                this._emit(value, index);
            }
        };
        FirstSubscriber.prototype._tryPredicate = function (value, index) {
            var result;
            try {
                result = this.predicate(value, index, this.source);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            if (result) {
                this._emit(value, index);
            }
        };
        FirstSubscriber.prototype._emit = function (value, index) {
            if (this.resultSelector) {
                this._tryResultSelector(value, index);
                return;
            }
            this._emitFinal(value);
        };
        FirstSubscriber.prototype._tryResultSelector = function (value, index) {
            var result;
            try {
                result = this.resultSelector(value, index);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this._emitFinal(result);
        };
        FirstSubscriber.prototype._emitFinal = function (value) {
            var destination = this.destination;
            if (!this._emitted) {
                this._emitted = true;
                destination.next(value);
                destination.complete();
                this.hasCompleted = true;
            }
        };
        FirstSubscriber.prototype._complete = function () {
            var destination = this.destination;
            if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {
                destination.next(this.defaultValue);
                destination.complete();
            } else if (!this.hasCompleted) {
                destination.error(new EmptyError_1.EmptyError());
            }
        };
        return FirstSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('npm:rxjs/operator/mergeMap.js', ['npm:rxjs/util/subscribeToResult.js', 'npm:rxjs/OuterSubscriber.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var subscribeToResult_1 = $__require('npm:rxjs/util/subscribeToResult.js');
    var OuterSubscriber_1 = $__require('npm:rxjs/OuterSubscriber.js');
    /* tslint:disable:max-line-length */
    /**
     * Projects each source value to an Observable which is merged in the output
     * Observable.
     *
     * <span class="informal">Maps each value to an Observable, then flattens all of
     * these inner Observables using {@link mergeAll}.</span>
     *
     * <img src="./img/mergeMap.png" width="100%">
     *
     * Returns an Observable that emits items based on applying a function that you
     * supply to each item emitted by the source Observable, where that function
     * returns an Observable, and then merging those resulting Observables and
     * emitting the results of this merger.
     *
     * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>
     * var letters = Rx.Observable.of('a', 'b', 'c');
     * var result = letters.mergeMap(x =>
     *   Rx.Observable.interval(1000).map(i => x+i)
     * );
     * result.subscribe(x => console.log(x));
     *
     * // Results in the following:
     * // a0
     * // b0
     * // c0
     * // a1
     * // b1
     * // c1
     * // continues to list a,b,c with respective ascending integers
     *
     * @see {@link concatMap}
     * @see {@link exhaustMap}
     * @see {@link merge}
     * @see {@link mergeAll}
     * @see {@link mergeMapTo}
     * @see {@link mergeScan}
     * @see {@link switchMap}
     *
     * @param {function(value: T, ?index: number): Observable} project A function
     * that, when applied to an item emitted by the source Observable, returns an
     * Observable.
     * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
     * A function to produce the value on the output Observable based on the values
     * and the indices of the source (outer) emission and the inner Observable
     * emission. The arguments passed to this function are:
     * - `outerValue`: the value that came from the source
     * - `innerValue`: the value that came from the projected Observable
     * - `outerIndex`: the "index" of the value that came from the source
     * - `innerIndex`: the "index" of the value from the projected Observable
     * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
     * Observables being subscribed to concurrently.
     * @return {Observable} An Observable that emits the result of applying the
     * projection function (and the optional `resultSelector`) to each item emitted
     * by the source Observable and merging the results of the Observables obtained
     * from this transformation.
     * @method mergeMap
     * @owner Observable
     */
    function mergeMap(project, resultSelector, concurrent) {
        if (concurrent === void 0) {
            concurrent = Number.POSITIVE_INFINITY;
        }
        if (typeof resultSelector === 'number') {
            concurrent = resultSelector;
            resultSelector = null;
        }
        return this.lift(new MergeMapOperator(project, resultSelector, concurrent));
    }
    exports.mergeMap = mergeMap;
    var MergeMapOperator = function () {
        function MergeMapOperator(project, resultSelector, concurrent) {
            if (concurrent === void 0) {
                concurrent = Number.POSITIVE_INFINITY;
            }
            this.project = project;
            this.resultSelector = resultSelector;
            this.concurrent = concurrent;
        }
        MergeMapOperator.prototype.call = function (observer, source) {
            return source.subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));
        };
        return MergeMapOperator;
    }();
    exports.MergeMapOperator = MergeMapOperator;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var MergeMapSubscriber = function (_super) {
        __extends(MergeMapSubscriber, _super);
        function MergeMapSubscriber(destination, project, resultSelector, concurrent) {
            if (concurrent === void 0) {
                concurrent = Number.POSITIVE_INFINITY;
            }
            _super.call(this, destination);
            this.project = project;
            this.resultSelector = resultSelector;
            this.concurrent = concurrent;
            this.hasCompleted = false;
            this.buffer = [];
            this.active = 0;
            this.index = 0;
        }
        MergeMapSubscriber.prototype._next = function (value) {
            if (this.active < this.concurrent) {
                this._tryNext(value);
            } else {
                this.buffer.push(value);
            }
        };
        MergeMapSubscriber.prototype._tryNext = function (value) {
            var result;
            var index = this.index++;
            try {
                result = this.project(value, index);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this.active++;
            this._innerSub(result, value, index);
        };
        MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {
            this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));
        };
        MergeMapSubscriber.prototype._complete = function () {
            this.hasCompleted = true;
            if (this.active === 0 && this.buffer.length === 0) {
                this.destination.complete();
            }
        };
        MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            if (this.resultSelector) {
                this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);
            } else {
                this.destination.next(innerValue);
            }
        };
        MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {
            var result;
            try {
                result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(result);
        };
        MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {
            var buffer = this.buffer;
            this.remove(innerSub);
            this.active--;
            if (buffer.length > 0) {
                this._next(buffer.shift());
            } else if (this.active === 0 && this.hasCompleted) {
                this.destination.complete();
            }
        };
        return MergeMapSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    exports.MergeMapSubscriber = MergeMapSubscriber;
    

    return module.exports;
});
$__System.registerDynamic("npm:rxjs/operator/reduce.js", ["npm:rxjs/Subscriber.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require("npm:rxjs/Subscriber.js");
    /* tslint:disable:max-line-length */
    /**
     * Applies an accumulator function over the source Observable, and returns the
     * accumulated result when the source completes, given an optional seed value.
     *
     * <span class="informal">Combines together all values emitted on the source,
     * using an accumulator function that knows how to join a new source value into
     * the accumulation from the past.</span>
     *
     * <img src="./img/reduce.png" width="100%">
     *
     * Like
     * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),
     * `reduce` applies an `accumulator` function against an accumulation and each
     * value of the source Observable (from the past) to reduce it to a single
     * value, emitted on the output Observable. Note that `reduce` will only emit
     * one value, only when the source Observable completes. It is equivalent to
     * applying operator {@link scan} followed by operator {@link last}.
     *
     * Returns an Observable that applies a specified `accumulator` function to each
     * item emitted by the source Observable. If a `seed` value is specified, then
     * that value will be used as the initial value for the accumulator. If no seed
     * value is specified, the first item of the source is used as the seed.
     *
     * @example <caption>Count the number of click events that happened in 5 seconds</caption>
     * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')
     *   .takeUntil(Rx.Observable.interval(5000));
     * var ones = clicksInFiveSeconds.mapTo(1);
     * var seed = 0;
     * var count = ones.reduce((acc, one) => acc + one, seed);
     * count.subscribe(x => console.log(x));
     *
     * @see {@link count}
     * @see {@link expand}
     * @see {@link mergeScan}
     * @see {@link scan}
     *
     * @param {function(acc: R, value: T): R} accumulator The accumulator function
     * called on each source value.
     * @param {R} [seed] The initial accumulation value.
     * @return {Observable<R>} An observable of the accumulated values.
     * @return {Observable<R>} An Observable that emits a single value that is the
     * result of accumulating the values emitted by the source Observable.
     * @method reduce
     * @owner Observable
     */
    function reduce(accumulator, seed) {
        var hasSeed = false;
        // providing a seed of `undefined` *should* be valid and trigger
        // hasSeed! so don't use `seed !== undefined` checks!
        // For this reason, we have to check it here at the original call site
        // otherwise inside Operator/Subscriber we won't know if `undefined`
        // means they didn't provide anything or if they literally provided `undefined`
        if (arguments.length >= 2) {
            hasSeed = true;
        }
        return this.lift(new ReduceOperator(accumulator, seed, hasSeed));
    }
    exports.reduce = reduce;
    var ReduceOperator = function () {
        function ReduceOperator(accumulator, seed, hasSeed) {
            if (hasSeed === void 0) {
                hasSeed = false;
            }
            this.accumulator = accumulator;
            this.seed = seed;
            this.hasSeed = hasSeed;
        }
        ReduceOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new ReduceSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));
        };
        return ReduceOperator;
    }();
    exports.ReduceOperator = ReduceOperator;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var ReduceSubscriber = function (_super) {
        __extends(ReduceSubscriber, _super);
        function ReduceSubscriber(destination, accumulator, seed, hasSeed) {
            _super.call(this, destination);
            this.accumulator = accumulator;
            this.hasSeed = hasSeed;
            this.hasValue = false;
            this.acc = seed;
        }
        ReduceSubscriber.prototype._next = function (value) {
            if (this.hasValue || (this.hasValue = this.hasSeed)) {
                this._tryReduce(value);
            } else {
                this.acc = value;
                this.hasValue = true;
            }
        };
        ReduceSubscriber.prototype._tryReduce = function (value) {
            var result;
            try {
                result = this.accumulator(this.acc, value);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this.acc = result;
        };
        ReduceSubscriber.prototype._complete = function () {
            if (this.hasValue || this.hasSeed) {
                this.destination.next(this.acc);
            }
            this.destination.complete();
        };
        return ReduceSubscriber;
    }(Subscriber_1.Subscriber);
    exports.ReduceSubscriber = ReduceSubscriber;
    

    return module.exports;
});
$__System.registerDynamic("npm:rxjs/operator/concatAll.js", ["npm:rxjs/operator/mergeAll.js"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var mergeAll_1 = $__require("npm:rxjs/operator/mergeAll.js");
  /* tslint:disable:max-line-length */
  /**
   * Converts a higher-order Observable into a first-order Observable by
   * concatenating the inner Observables in order.
   *
   * <span class="informal">Flattens an Observable-of-Observables by putting one
   * inner Observable after the other.</span>
   *
   * <img src="./img/concatAll.png" width="100%">
   *
   * Joins every Observable emitted by the source (a higher-order Observable), in
   * a serial fashion. It subscribes to each inner Observable only after the
   * previous inner Observable has completed, and merges all of their values into
   * the returned observable.
   *
   * __Warning:__ If the source Observable emits Observables quickly and
   * endlessly, and the inner Observables it emits generally complete slower than
   * the source emits, you can run into memory issues as the incoming Observables
   * collect in an unbounded buffer.
   *
   * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set
   * to `1`.
   *
   * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
   * var clicks = Rx.Observable.fromEvent(document, 'click');
   * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));
   * var firstOrder = higherOrder.concatAll();
   * firstOrder.subscribe(x => console.log(x));
   *
   * // Results in the following:
   * // (results are not concurrent)
   * // For every click on the "document" it will emit values 0 to 3 spaced
   * // on a 1000ms interval
   * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3
   *
   * @see {@link combineAll}
   * @see {@link concat}
   * @see {@link concatMap}
   * @see {@link concatMapTo}
   * @see {@link exhaust}
   * @see {@link mergeAll}
   * @see {@link switch}
   * @see {@link zipAll}
   *
   * @return {Observable} An Observable emitting values from all the inner
   * Observables concatenated.
   * @method concatAll
   * @owner Observable
   */
  function concatAll() {
    return this.lift(new mergeAll_1.MergeAllOperator(1));
  }
  exports.concatAll = concatAll;
  

  return module.exports;
});
$__System.registerDynamic('npm:rxjs/observable/PromiseObservable.js', ['npm:rxjs/util/root.js', 'npm:rxjs/Observable.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var root_1 = $__require('npm:rxjs/util/root.js');
    var Observable_1 = $__require('npm:rxjs/Observable.js');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var PromiseObservable = function (_super) {
        __extends(PromiseObservable, _super);
        function PromiseObservable(promise, scheduler) {
            _super.call(this);
            this.promise = promise;
            this.scheduler = scheduler;
        }
        /**
         * Converts a Promise to an Observable.
         *
         * <span class="informal">Returns an Observable that just emits the Promise's
         * resolved value, then completes.</span>
         *
         * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an
         * Observable. If the Promise resolves with a value, the output Observable
         * emits that resolved value as a `next`, and then completes. If the Promise
         * is rejected, then the output Observable emits the corresponding Error.
         *
         * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>
         * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));
         * result.subscribe(x => console.log(x), e => console.error(e));
         *
         * @see {@link bindCallback}
         * @see {@link from}
         *
         * @param {Promise<T>} promise The promise to be converted.
         * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling
         * the delivery of the resolved value (or the rejection).
         * @return {Observable<T>} An Observable which wraps the Promise.
         * @static true
         * @name fromPromise
         * @owner Observable
         */
        PromiseObservable.create = function (promise, scheduler) {
            return new PromiseObservable(promise, scheduler);
        };
        PromiseObservable.prototype._subscribe = function (subscriber) {
            var _this = this;
            var promise = this.promise;
            var scheduler = this.scheduler;
            if (scheduler == null) {
                if (this._isScalar) {
                    if (!subscriber.closed) {
                        subscriber.next(this.value);
                        subscriber.complete();
                    }
                } else {
                    promise.then(function (value) {
                        _this.value = value;
                        _this._isScalar = true;
                        if (!subscriber.closed) {
                            subscriber.next(value);
                            subscriber.complete();
                        }
                    }, function (err) {
                        if (!subscriber.closed) {
                            subscriber.error(err);
                        }
                    }).then(null, function (err) {
                        // escape the promise trap, throw unhandled errors
                        root_1.root.setTimeout(function () {
                            throw err;
                        });
                    });
                }
            } else {
                if (this._isScalar) {
                    if (!subscriber.closed) {
                        return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber: subscriber });
                    }
                } else {
                    promise.then(function (value) {
                        _this.value = value;
                        _this._isScalar = true;
                        if (!subscriber.closed) {
                            subscriber.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));
                        }
                    }, function (err) {
                        if (!subscriber.closed) {
                            subscriber.add(scheduler.schedule(dispatchError, 0, { err: err, subscriber: subscriber }));
                        }
                    }).then(null, function (err) {
                        // escape the promise trap, throw unhandled errors
                        root_1.root.setTimeout(function () {
                            throw err;
                        });
                    });
                }
            }
        };
        return PromiseObservable;
    }(Observable_1.Observable);
    exports.PromiseObservable = PromiseObservable;
    function dispatchNext(arg) {
        var value = arg.value,
            subscriber = arg.subscriber;
        if (!subscriber.closed) {
            subscriber.next(value);
            subscriber.complete();
        }
    }
    function dispatchError(arg) {
        var err = arg.err,
            subscriber = arg.subscriber;
        if (!subscriber.closed) {
            subscriber.error(err);
        }
    }
    

    return module.exports;
});
$__System.registerDynamic("npm:rxjs/observable/fromPromise.js", ["npm:rxjs/observable/PromiseObservable.js"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var PromiseObservable_1 = $__require("npm:rxjs/observable/PromiseObservable.js");
  exports.fromPromise = PromiseObservable_1.PromiseObservable.create;
  

  return module.exports;
});
$__System.registerDynamic('npm:rxjs/util/EmptyError.js', [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * An error thrown when an Observable or a sequence was queried but has no
     * elements.
     *
     * @see {@link first}
     * @see {@link last}
     * @see {@link single}
     *
     * @class EmptyError
     */
    var EmptyError = function (_super) {
        __extends(EmptyError, _super);
        function EmptyError() {
            var err = _super.call(this, 'no elements in sequence');
            this.name = err.name = 'EmptyError';
            this.stack = err.stack;
            this.message = err.message;
        }
        return EmptyError;
    }(Error);
    exports.EmptyError = EmptyError;
    

    return module.exports;
});
$__System.registerDynamic('npm:rxjs/operator/last.js', ['npm:rxjs/Subscriber.js', 'npm:rxjs/util/EmptyError.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('npm:rxjs/Subscriber.js');
    var EmptyError_1 = $__require('npm:rxjs/util/EmptyError.js');
    /* tslint:disable:max-line-length */
    /**
     * Returns an Observable that emits only the last item emitted by the source Observable.
     * It optionally takes a predicate function as a parameter, in which case, rather than emitting
     * the last item from the source Observable, the resulting Observable will emit the last item
     * from the source Observable that satisfies the predicate.
     *
     * <img src="./img/last.png" width="100%">
     *
     * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
     * callback if the Observable completes before any `next` notification was sent.
     * @param {function} predicate - the condition any source emitted item has to satisfy.
     * @return {Observable} an Observable that emits only the last item satisfying the given condition
     * from the source, or an NoSuchElementException if no such items are emitted.
     * @throws - Throws if no items that match the predicate are emitted by the source Observable.
     * @method last
     * @owner Observable
     */
    function last(predicate, resultSelector, defaultValue) {
        return this.lift(new LastOperator(predicate, resultSelector, defaultValue, this));
    }
    exports.last = last;
    var LastOperator = function () {
        function LastOperator(predicate, resultSelector, defaultValue, source) {
            this.predicate = predicate;
            this.resultSelector = resultSelector;
            this.defaultValue = defaultValue;
            this.source = source;
        }
        LastOperator.prototype.call = function (observer, source) {
            return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));
        };
        return LastOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var LastSubscriber = function (_super) {
        __extends(LastSubscriber, _super);
        function LastSubscriber(destination, predicate, resultSelector, defaultValue, source) {
            _super.call(this, destination);
            this.predicate = predicate;
            this.resultSelector = resultSelector;
            this.defaultValue = defaultValue;
            this.source = source;
            this.hasValue = false;
            this.index = 0;
            if (typeof defaultValue !== 'undefined') {
                this.lastValue = defaultValue;
                this.hasValue = true;
            }
        }
        LastSubscriber.prototype._next = function (value) {
            var index = this.index++;
            if (this.predicate) {
                this._tryPredicate(value, index);
            } else {
                if (this.resultSelector) {
                    this._tryResultSelector(value, index);
                    return;
                }
                this.lastValue = value;
                this.hasValue = true;
            }
        };
        LastSubscriber.prototype._tryPredicate = function (value, index) {
            var result;
            try {
                result = this.predicate(value, index, this.source);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            if (result) {
                if (this.resultSelector) {
                    this._tryResultSelector(value, index);
                    return;
                }
                this.lastValue = value;
                this.hasValue = true;
            }
        };
        LastSubscriber.prototype._tryResultSelector = function (value, index) {
            var result;
            try {
                result = this.resultSelector(value, index);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this.lastValue = result;
            this.hasValue = true;
        };
        LastSubscriber.prototype._complete = function () {
            var destination = this.destination;
            if (this.hasValue) {
                destination.next(this.lastValue);
                destination.complete();
            } else {
                destination.error(new EmptyError_1.EmptyError());
            }
        };
        return LastSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('npm:rxjs/operator/mergeAll.js', ['npm:rxjs/OuterSubscriber.js', 'npm:rxjs/util/subscribeToResult.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var OuterSubscriber_1 = $__require('npm:rxjs/OuterSubscriber.js');
    var subscribeToResult_1 = $__require('npm:rxjs/util/subscribeToResult.js');
    /**
     * Converts a higher-order Observable into a first-order Observable which
     * concurrently delivers all values that are emitted on the inner Observables.
     *
     * <span class="informal">Flattens an Observable-of-Observables.</span>
     *
     * <img src="./img/mergeAll.png" width="100%">
     *
     * `mergeAll` subscribes to an Observable that emits Observables, also known as
     * a higher-order Observable. Each time it observes one of these emitted inner
     * Observables, it subscribes to that and delivers all the values from the
     * inner Observable on the output Observable. The output Observable only
     * completes once all inner Observables have completed. Any error delivered by
     * a inner Observable will be immediately emitted on the output Observable.
     *
     * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));
     * var firstOrder = higherOrder.mergeAll();
     * firstOrder.subscribe(x => console.log(x));
     *
     * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));
     * var firstOrder = higherOrder.mergeAll(2);
     * firstOrder.subscribe(x => console.log(x));
     *
     * @see {@link combineAll}
     * @see {@link concatAll}
     * @see {@link exhaust}
     * @see {@link merge}
     * @see {@link mergeMap}
     * @see {@link mergeMapTo}
     * @see {@link mergeScan}
     * @see {@link switch}
     * @see {@link zipAll}
     *
     * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner
     * Observables being subscribed to concurrently.
     * @return {Observable} An Observable that emits values coming from all the
     * inner Observables emitted by the source Observable.
     * @method mergeAll
     * @owner Observable
     */
    function mergeAll(concurrent) {
        if (concurrent === void 0) {
            concurrent = Number.POSITIVE_INFINITY;
        }
        return this.lift(new MergeAllOperator(concurrent));
    }
    exports.mergeAll = mergeAll;
    var MergeAllOperator = function () {
        function MergeAllOperator(concurrent) {
            this.concurrent = concurrent;
        }
        MergeAllOperator.prototype.call = function (observer, source) {
            return source.subscribe(new MergeAllSubscriber(observer, this.concurrent));
        };
        return MergeAllOperator;
    }();
    exports.MergeAllOperator = MergeAllOperator;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var MergeAllSubscriber = function (_super) {
        __extends(MergeAllSubscriber, _super);
        function MergeAllSubscriber(destination, concurrent) {
            _super.call(this, destination);
            this.concurrent = concurrent;
            this.hasCompleted = false;
            this.buffer = [];
            this.active = 0;
        }
        MergeAllSubscriber.prototype._next = function (observable) {
            if (this.active < this.concurrent) {
                this.active++;
                this.add(subscribeToResult_1.subscribeToResult(this, observable));
            } else {
                this.buffer.push(observable);
            }
        };
        MergeAllSubscriber.prototype._complete = function () {
            this.hasCompleted = true;
            if (this.active === 0 && this.buffer.length === 0) {
                this.destination.complete();
            }
        };
        MergeAllSubscriber.prototype.notifyComplete = function (innerSub) {
            var buffer = this.buffer;
            this.remove(innerSub);
            this.active--;
            if (buffer.length > 0) {
                this._next(buffer.shift());
            } else if (this.active === 0 && this.hasCompleted) {
                this.destination.complete();
            }
        };
        return MergeAllSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    exports.MergeAllSubscriber = MergeAllSubscriber;
    

    return module.exports;
});
$__System.registerDynamic("npm:rxjs/operator/filter.js", ["npm:rxjs/Subscriber.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require("npm:rxjs/Subscriber.js");
    /* tslint:disable:max-line-length */
    /**
     * Filter items emitted by the source Observable by only emitting those that
     * satisfy a specified predicate.
     *
     * <span class="informal">Like
     * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),
     * it only emits a value from the source if it passes a criterion function.</span>
     *
     * <img src="./img/filter.png" width="100%">
     *
     * Similar to the well-known `Array.prototype.filter` method, this operator
     * takes values from the source Observable, passes them through a `predicate`
     * function and only emits those values that yielded `true`.
     *
     * @example <caption>Emit only click events whose target was a DIV element</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');
     * clicksOnDivs.subscribe(x => console.log(x));
     *
     * @see {@link distinct}
     * @see {@link distinctUntilChanged}
     * @see {@link distinctUntilKeyChanged}
     * @see {@link ignoreElements}
     * @see {@link partition}
     * @see {@link skip}
     *
     * @param {function(value: T, index: number): boolean} predicate A function that
     * evaluates each value emitted by the source Observable. If it returns `true`,
     * the value is emitted, if `false` the value is not passed to the output
     * Observable. The `index` parameter is the number `i` for the i-th source
     * emission that has happened since the subscription, starting from the number
     * `0`.
     * @param {any} [thisArg] An optional argument to determine the value of `this`
     * in the `predicate` function.
     * @return {Observable} An Observable of values from the source that were
     * allowed by the `predicate` function.
     * @method filter
     * @owner Observable
     */
    function filter(predicate, thisArg) {
        return this.lift(new FilterOperator(predicate, thisArg));
    }
    exports.filter = filter;
    var FilterOperator = function () {
        function FilterOperator(predicate, thisArg) {
            this.predicate = predicate;
            this.thisArg = thisArg;
        }
        FilterOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));
        };
        return FilterOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var FilterSubscriber = function (_super) {
        __extends(FilterSubscriber, _super);
        function FilterSubscriber(destination, predicate, thisArg) {
            _super.call(this, destination);
            this.predicate = predicate;
            this.thisArg = thisArg;
            this.count = 0;
            this.predicate = predicate;
        }
        // the try catch block below is left specifically for
        // optimization and perf reasons. a tryCatcher is not necessary here.
        FilterSubscriber.prototype._next = function (value) {
            var result;
            try {
                result = this.predicate.call(this.thisArg, value, this.count++);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            if (result) {
                this.destination.next(value);
            }
        };
        return FilterSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
(function() {
var define = $__System.amdDefine;
(function(global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('rxjs/BehaviorSubject'), require('rxjs/Subject'), require('rxjs/observable/from'), require('rxjs/observable/of'), require('rxjs/operator/concatMap'), require('rxjs/operator/every'), require('rxjs/operator/first'), require('rxjs/operator/map'), require('rxjs/operator/mergeMap'), require('rxjs/operator/reduce'), require('rxjs/Observable'), require('rxjs/operator/catch'), require('rxjs/operator/concatAll'), require('rxjs/util/EmptyError'), require('rxjs/observable/fromPromise'), require('rxjs/operator/last'), require('rxjs/operator/mergeAll'), require('@angular/platform-browser'), require('rxjs/operator/filter')) : typeof define === 'function' && define.amd ? define("npm:@angular/router/bundles/router.umd.js", ["exports", "npm:@angular/common/bundles/common.umd.js", "npm:@angular/core/bundles/core.umd.js", "npm:rxjs/BehaviorSubject.js", "npm:rxjs/Subject.js", "npm:rxjs/observable/from.js", "npm:rxjs/observable/of.js", "npm:rxjs/operator/concatMap.js", "npm:rxjs/operator/every.js", "npm:rxjs/operator/first.js", "npm:rxjs/operator/map.js", "npm:rxjs/operator/mergeMap.js", "npm:rxjs/operator/reduce.js", "npm:rxjs/Observable.js", "npm:rxjs/operator/catch.js", "npm:rxjs/operator/concatAll.js", "npm:rxjs/util/EmptyError.js", "npm:rxjs/observable/fromPromise.js", "npm:rxjs/operator/last.js", "npm:rxjs/operator/mergeAll.js", "npm:@angular/platform-browser/bundles/platform-browser.umd.js", "npm:rxjs/operator/filter.js"], factory) : (factory((global.ng = global.ng || {}, global.ng.router = global.ng.router || {}), global.ng.common, global.ng.core, global.Rx, global.Rx, global.Rx.Observable, global.Rx.Observable, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.Rx, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.Rx, global.Rx.Observable, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.ng.platformBrowser, global.Rx.Observable.prototype));
}(this, function(exports, _angular_common, _angular_core, rxjs_BehaviorSubject, rxjs_Subject, rxjs_observable_from, rxjs_observable_of, rxjs_operator_concatMap, rxjs_operator_every, rxjs_operator_first, rxjs_operator_map, rxjs_operator_mergeMap, rxjs_operator_reduce, rxjs_Observable, rxjs_operator_catch, rxjs_operator_concatAll, rxjs_util_EmptyError, rxjs_observable_fromPromise, l, rxjs_operator_mergeAll, _angular_platformBrowser, rxjs_operator_filter) {
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var PRIMARY_OUTLET = 'primary';
  var NavigationCancelingError = (function(_super) {
    __extends(NavigationCancelingError, _super);
    function NavigationCancelingError(message) {
      _super.call(this, message);
      this.message = message;
      this.stack = (new Error(message)).stack;
    }
    NavigationCancelingError.prototype.toString = function() {
      return this.message;
    };
    return NavigationCancelingError;
  }(Error));
  function defaultUrlMatcher(segments, segmentGroup, route) {
    var path = route.path;
    var parts = path.split('/');
    var posParams = {};
    var consumed = [];
    var currentIndex = 0;
    for (var i = 0; i < parts.length; ++i) {
      if (currentIndex >= segments.length)
        return null;
      var current = segments[currentIndex];
      var p = parts[i];
      var isPosParam = p.startsWith(':');
      if (!isPosParam && p !== current.path)
        return null;
      if (isPosParam) {
        posParams[p.substring(1)] = current;
      }
      consumed.push(current);
      currentIndex++;
    }
    if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || currentIndex < segments.length)) {
      return null;
    } else {
      return {
        consumed: consumed,
        posParams: posParams
      };
    }
  }
  function shallowEqualArrays(a, b) {
    if (a.length !== b.length)
      return false;
    for (var i = 0; i < a.length; ++i) {
      if (!shallowEqual(a[i], b[i]))
        return false;
    }
    return true;
  }
  function shallowEqual(a, b) {
    var k1 = Object.keys(a);
    var k2 = Object.keys(b);
    if (k1.length != k2.length) {
      return false;
    }
    var key;
    for (var i = 0; i < k1.length; i++) {
      key = k1[i];
      if (a[key] !== b[key]) {
        return false;
      }
    }
    return true;
  }
  function flatten(a) {
    var target = [];
    for (var i = 0; i < a.length; ++i) {
      for (var j = 0; j < a[i].length; ++j) {
        target.push(a[i][j]);
      }
    }
    return target;
  }
  function last(a) {
    return a.length > 0 ? a[a.length - 1] : null;
  }
  function merge(m1, m2) {
    var m = {};
    for (var attr in m1) {
      if (m1.hasOwnProperty(attr)) {
        m[attr] = m1[attr];
      }
    }
    for (var attr in m2) {
      if (m2.hasOwnProperty(attr)) {
        m[attr] = m2[attr];
      }
    }
    return m;
  }
  function forEach(map, callback) {
    for (var prop in map) {
      if (map.hasOwnProperty(prop)) {
        callback(map[prop], prop);
      }
    }
  }
  function waitForMap(obj, fn) {
    var waitFor = [];
    var res = {};
    forEach(obj, function(a, k) {
      if (k === PRIMARY_OUTLET) {
        waitFor.push(rxjs_operator_map.map.call(fn(k, a), function(_) {
          res[k] = _;
          return _;
        }));
      }
    });
    forEach(obj, function(a, k) {
      if (k !== PRIMARY_OUTLET) {
        waitFor.push(rxjs_operator_map.map.call(fn(k, a), function(_) {
          res[k] = _;
          return _;
        }));
      }
    });
    if (waitFor.length > 0) {
      var concatted$ = rxjs_operator_concatAll.concatAll.call(rxjs_observable_of.of.apply(void 0, waitFor));
      var last$ = l.last.call(concatted$);
      return rxjs_operator_map.map.call(last$, function() {
        return res;
      });
    }
    return rxjs_observable_of.of(res);
  }
  function andObservables(observables) {
    var merged$ = rxjs_operator_mergeAll.mergeAll.call(observables);
    return rxjs_operator_every.every.call(merged$, function(result) {
      return result === true;
    });
  }
  function wrapIntoObservable(value) {
    if (value instanceof rxjs_Observable.Observable) {
      return value;
    }
    if (value instanceof Promise) {
      return rxjs_observable_fromPromise.fromPromise(value);
    }
    return rxjs_observable_of.of(value);
  }
  var ROUTES = new _angular_core.OpaqueToken('ROUTES');
  var LoadedRouterConfig = (function() {
    function LoadedRouterConfig(routes, injector, factoryResolver, injectorFactory) {
      this.routes = routes;
      this.injector = injector;
      this.factoryResolver = factoryResolver;
      this.injectorFactory = injectorFactory;
    }
    return LoadedRouterConfig;
  }());
  var RouterConfigLoader = (function() {
    function RouterConfigLoader(loader, compiler) {
      this.loader = loader;
      this.compiler = compiler;
    }
    RouterConfigLoader.prototype.load = function(parentInjector, loadChildren) {
      return rxjs_operator_map.map.call(this.loadModuleFactory(loadChildren), function(r) {
        var ref = r.create(parentInjector);
        var injectorFactory = function(parent) {
          return r.create(parent).injector;
        };
        return new LoadedRouterConfig(flatten(ref.injector.get(ROUTES)), ref.injector, ref.componentFactoryResolver, injectorFactory);
      });
    };
    RouterConfigLoader.prototype.loadModuleFactory = function(loadChildren) {
      var _this = this;
      if (typeof loadChildren === 'string') {
        return rxjs_observable_fromPromise.fromPromise(this.loader.load(loadChildren));
      } else {
        var offlineMode_1 = this.compiler instanceof _angular_core.Compiler;
        return rxjs_operator_mergeMap.mergeMap.call(wrapIntoObservable(loadChildren()), function(t) {
          return offlineMode_1 ? rxjs_observable_of.of((t)) : rxjs_observable_fromPromise.fromPromise(_this.compiler.compileModuleAsync(t));
        });
      }
    };
    return RouterConfigLoader;
  }());
  function createEmptyUrlTree() {
    return new UrlTree(new UrlSegmentGroup([], {}), {}, null);
  }
  function containsTree(container, containee, exact) {
    if (exact) {
      return equalQueryParams(container.queryParams, containee.queryParams) && equalSegmentGroups(container.root, containee.root);
    }
    return containsQueryParams(container.queryParams, containee.queryParams) && containsSegmentGroup(container.root, containee.root);
  }
  function equalQueryParams(container, containee) {
    return shallowEqual(container, containee);
  }
  function equalSegmentGroups(container, containee) {
    if (!equalPath(container.segments, containee.segments))
      return false;
    if (container.numberOfChildren !== containee.numberOfChildren)
      return false;
    for (var c in containee.children) {
      if (!container.children[c])
        return false;
      if (!equalSegmentGroups(container.children[c], containee.children[c]))
        return false;
    }
    return true;
  }
  function containsQueryParams(container, containee) {
    return Object.keys(containee) <= Object.keys(container) && Object.keys(containee).every(function(key) {
      return containee[key] === container[key];
    });
  }
  function containsSegmentGroup(container, containee) {
    return containsSegmentGroupHelper(container, containee, containee.segments);
  }
  function containsSegmentGroupHelper(container, containee, containeePaths) {
    if (container.segments.length > containeePaths.length) {
      var current = container.segments.slice(0, containeePaths.length);
      if (!equalPath(current, containeePaths))
        return false;
      if (containee.hasChildren())
        return false;
      return true;
    } else if (container.segments.length === containeePaths.length) {
      if (!equalPath(container.segments, containeePaths))
        return false;
      for (var c in containee.children) {
        if (!container.children[c])
          return false;
        if (!containsSegmentGroup(container.children[c], containee.children[c]))
          return false;
      }
      return true;
    } else {
      var current = containeePaths.slice(0, container.segments.length);
      var next = containeePaths.slice(container.segments.length);
      if (!equalPath(container.segments, current))
        return false;
      if (!container.children[PRIMARY_OUTLET])
        return false;
      return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next);
    }
  }
  var UrlTree = (function() {
    function UrlTree(root, queryParams, fragment) {
      this.root = root;
      this.queryParams = queryParams;
      this.fragment = fragment;
    }
    UrlTree.prototype.toString = function() {
      return new DefaultUrlSerializer().serialize(this);
    };
    return UrlTree;
  }());
  var UrlSegmentGroup = (function() {
    function UrlSegmentGroup(segments, children) {
      var _this = this;
      this.segments = segments;
      this.children = children;
      this.parent = null;
      forEach(children, function(v, k) {
        return v.parent = _this;
      });
    }
    UrlSegmentGroup.prototype.hasChildren = function() {
      return this.numberOfChildren > 0;
    };
    Object.defineProperty(UrlSegmentGroup.prototype, "numberOfChildren", {
      get: function() {
        return Object.keys(this.children).length;
      },
      enumerable: true,
      configurable: true
    });
    UrlSegmentGroup.prototype.toString = function() {
      return serializePaths(this);
    };
    return UrlSegmentGroup;
  }());
  var UrlSegment = (function() {
    function UrlSegment(path, parameters) {
      this.path = path;
      this.parameters = parameters;
    }
    UrlSegment.prototype.toString = function() {
      return serializePath(this);
    };
    return UrlSegment;
  }());
  function equalSegments(a, b) {
    if (a.length !== b.length)
      return false;
    for (var i = 0; i < a.length; ++i) {
      if (a[i].path !== b[i].path)
        return false;
      if (!shallowEqual(a[i].parameters, b[i].parameters))
        return false;
    }
    return true;
  }
  function equalPath(a, b) {
    if (a.length !== b.length)
      return false;
    for (var i = 0; i < a.length; ++i) {
      if (a[i].path !== b[i].path)
        return false;
    }
    return true;
  }
  function mapChildrenIntoArray(segment, fn) {
    var res = [];
    forEach(segment.children, function(child, childOutlet) {
      if (childOutlet === PRIMARY_OUTLET) {
        res = res.concat(fn(child, childOutlet));
      }
    });
    forEach(segment.children, function(child, childOutlet) {
      if (childOutlet !== PRIMARY_OUTLET) {
        res = res.concat(fn(child, childOutlet));
      }
    });
    return res;
  }
  var UrlSerializer = (function() {
    function UrlSerializer() {}
    UrlSerializer.prototype.parse = function(url) {};
    UrlSerializer.prototype.serialize = function(tree) {};
    return UrlSerializer;
  }());
  var DefaultUrlSerializer = (function() {
    function DefaultUrlSerializer() {}
    DefaultUrlSerializer.prototype.parse = function(url) {
      var p = new UrlParser(url);
      return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());
    };
    DefaultUrlSerializer.prototype.serialize = function(tree) {
      var segment = "/" + serializeSegment(tree.root, true);
      var query = serializeQueryParams(tree.queryParams);
      var fragment = tree.fragment !== null && tree.fragment !== undefined ? "#" + encodeURI(tree.fragment) : '';
      return "" + segment + query + fragment;
    };
    return DefaultUrlSerializer;
  }());
  function serializePaths(segment) {
    return segment.segments.map(function(p) {
      return serializePath(p);
    }).join('/');
  }
  function serializeSegment(segment, root) {
    if (segment.hasChildren() && root) {
      var primary = segment.children[PRIMARY_OUTLET] ? serializeSegment(segment.children[PRIMARY_OUTLET], false) : '';
      var children_1 = [];
      forEach(segment.children, function(v, k) {
        if (k !== PRIMARY_OUTLET) {
          children_1.push(k + ":" + serializeSegment(v, false));
        }
      });
      if (children_1.length > 0) {
        return primary + "(" + children_1.join('//') + ")";
      } else {
        return "" + primary;
      }
    } else if (segment.hasChildren() && !root) {
      var children = mapChildrenIntoArray(segment, function(v, k) {
        if (k === PRIMARY_OUTLET) {
          return [serializeSegment(segment.children[PRIMARY_OUTLET], false)];
        } else {
          return [(k + ":" + serializeSegment(v, false))];
        }
      });
      return serializePaths(segment) + "/(" + children.join('//') + ")";
    } else {
      return serializePaths(segment);
    }
  }
  function encode(s) {
    return encodeURIComponent(s);
  }
  function decode(s) {
    return decodeURIComponent(s);
  }
  function serializePath(path) {
    return "" + encode(path.path) + serializeParams(path.parameters);
  }
  function serializeParams(params) {
    return pairs(params).map(function(p) {
      return (";" + encode(p.first) + "=" + encode(p.second));
    }).join('');
  }
  function serializeQueryParams(params) {
    var strParams = Object.keys(params).map(function(name) {
      var value = params[name];
      return Array.isArray(value) ? value.map(function(v) {
        return (encode(name) + "=" + encode(v));
      }).join('&') : encode(name) + "=" + encode(value);
    });
    return strParams.length ? "?" + strParams.join("&") : '';
  }
  var Pair = (function() {
    function Pair(first, second) {
      this.first = first;
      this.second = second;
    }
    return Pair;
  }());
  function pairs(obj) {
    var res = [];
    for (var prop in obj) {
      if (obj.hasOwnProperty(prop)) {
        res.push(new Pair(prop, obj[prop]));
      }
    }
    return res;
  }
  var SEGMENT_RE = /^[^\/()?;=&#]+/;
  function matchSegments(str) {
    SEGMENT_RE.lastIndex = 0;
    var match = str.match(SEGMENT_RE);
    return match ? match[0] : '';
  }
  var QUERY_PARAM_RE = /^[^=?&#]+/;
  function matchQueryParams(str) {
    QUERY_PARAM_RE.lastIndex = 0;
    var match = str.match(SEGMENT_RE);
    return match ? match[0] : '';
  }
  var QUERY_PARAM_VALUE_RE = /^[^?&#]+/;
  function matchUrlQueryParamValue(str) {
    QUERY_PARAM_VALUE_RE.lastIndex = 0;
    var match = str.match(QUERY_PARAM_VALUE_RE);
    return match ? match[0] : '';
  }
  var UrlParser = (function() {
    function UrlParser(url) {
      this.url = url;
      this.remaining = url;
    }
    UrlParser.prototype.peekStartsWith = function(str) {
      return this.remaining.startsWith(str);
    };
    UrlParser.prototype.capture = function(str) {
      if (!this.remaining.startsWith(str)) {
        throw new Error("Expected \"" + str + "\".");
      }
      this.remaining = this.remaining.substring(str.length);
    };
    UrlParser.prototype.parseRootSegment = function() {
      if (this.remaining.startsWith('/')) {
        this.capture('/');
      }
      if (this.remaining === '' || this.remaining.startsWith('?') || this.remaining.startsWith('#')) {
        return new UrlSegmentGroup([], {});
      }
      return new UrlSegmentGroup([], this.parseChildren());
    };
    UrlParser.prototype.parseChildren = function() {
      if (this.remaining.length == 0) {
        return {};
      }
      if (this.peekStartsWith('/')) {
        this.capture('/');
      }
      var paths = [];
      if (!this.peekStartsWith('(')) {
        paths.push(this.parseSegments());
      }
      while (this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(')) {
        this.capture('/');
        paths.push(this.parseSegments());
      }
      var children = {};
      if (this.peekStartsWith('/(')) {
        this.capture('/');
        children = this.parseParens(true);
      }
      var res = {};
      if (this.peekStartsWith('(')) {
        res = this.parseParens(false);
      }
      if (paths.length > 0 || Object.keys(children).length > 0) {
        res[PRIMARY_OUTLET] = new UrlSegmentGroup(paths, children);
      }
      return res;
    };
    UrlParser.prototype.parseSegments = function() {
      var path = matchSegments(this.remaining);
      if (path === '' && this.peekStartsWith(';')) {
        throw new Error("Empty path url segment cannot have parameters: '" + this.remaining + "'.");
      }
      this.capture(path);
      var matrixParams = {};
      if (this.peekStartsWith(';')) {
        matrixParams = this.parseMatrixParams();
      }
      return new UrlSegment(decode(path), matrixParams);
    };
    UrlParser.prototype.parseQueryParams = function() {
      var params = {};
      if (this.peekStartsWith('?')) {
        this.capture('?');
        this.parseQueryParam(params);
        while (this.remaining.length > 0 && this.peekStartsWith('&')) {
          this.capture('&');
          this.parseQueryParam(params);
        }
      }
      return params;
    };
    UrlParser.prototype.parseFragment = function() {
      if (this.peekStartsWith('#')) {
        return decodeURI(this.remaining.substring(1));
      }
      return null;
    };
    UrlParser.prototype.parseMatrixParams = function() {
      var params = {};
      while (this.remaining.length > 0 && this.peekStartsWith(';')) {
        this.capture(';');
        this.parseParam(params);
      }
      return params;
    };
    UrlParser.prototype.parseParam = function(params) {
      var key = matchSegments(this.remaining);
      if (!key) {
        return;
      }
      this.capture(key);
      var value = '';
      if (this.peekStartsWith('=')) {
        this.capture('=');
        var valueMatch = matchSegments(this.remaining);
        if (valueMatch) {
          value = valueMatch;
          this.capture(value);
        }
      }
      params[decode(key)] = decode(value);
    };
    UrlParser.prototype.parseQueryParam = function(params) {
      var key = matchQueryParams(this.remaining);
      if (!key) {
        return;
      }
      this.capture(key);
      var value = '';
      if (this.peekStartsWith('=')) {
        this.capture('=');
        var valueMatch = matchUrlQueryParamValue(this.remaining);
        if (valueMatch) {
          value = valueMatch;
          this.capture(value);
        }
      }
      var decodedKey = decode(key);
      var decodedVal = decode(value);
      if (params.hasOwnProperty(decodedKey)) {
        var currentVal = params[decodedKey];
        if (!Array.isArray(currentVal)) {
          currentVal = [currentVal];
          params[decodedKey] = currentVal;
        }
        currentVal.push(decodedVal);
      } else {
        params[decodedKey] = decodedVal;
      }
    };
    UrlParser.prototype.parseParens = function(allowPrimary) {
      var segments = {};
      this.capture('(');
      while (!this.peekStartsWith(')') && this.remaining.length > 0) {
        var path = matchSegments(this.remaining);
        var next = this.remaining[path.length];
        if (next !== '/' && next !== ')' && next !== ';') {
          throw new Error("Cannot parse url '" + this.url + "'");
        }
        var outletName = void 0;
        if (path.indexOf(':') > -1) {
          outletName = path.substr(0, path.indexOf(':'));
          this.capture(outletName);
          this.capture(':');
        } else if (allowPrimary) {
          outletName = PRIMARY_OUTLET;
        }
        var children = this.parseChildren();
        segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] : new UrlSegmentGroup([], children);
        if (this.peekStartsWith('//')) {
          this.capture('//');
        }
      }
      this.capture(')');
      return segments;
    };
    return UrlParser;
  }());
  var NoMatch = (function() {
    function NoMatch(segmentGroup) {
      if (segmentGroup === void 0) {
        segmentGroup = null;
      }
      this.segmentGroup = segmentGroup;
    }
    return NoMatch;
  }());
  var AbsoluteRedirect = (function() {
    function AbsoluteRedirect(urlTree) {
      this.urlTree = urlTree;
    }
    return AbsoluteRedirect;
  }());
  function noMatch(segmentGroup) {
    return new rxjs_Observable.Observable(function(obs) {
      return obs.error(new NoMatch(segmentGroup));
    });
  }
  function absoluteRedirect(newTree) {
    return new rxjs_Observable.Observable(function(obs) {
      return obs.error(new AbsoluteRedirect(newTree));
    });
  }
  function namedOutletsRedirect(redirectTo) {
    return new rxjs_Observable.Observable(function(obs) {
      return obs.error(new Error("Only absolute redirects can have named outlets. redirectTo: '" + redirectTo + "'"));
    });
  }
  function canLoadFails(route) {
    return new rxjs_Observable.Observable(function(obs) {
      return obs.error(new NavigationCancelingError("Cannot load children because the guard of the route \"path: '" + route.path + "'\" returned false"));
    });
  }
  function applyRedirects(injector, configLoader, urlSerializer, urlTree, config) {
    return new ApplyRedirects(injector, configLoader, urlSerializer, urlTree, config).apply();
  }
  var ApplyRedirects = (function() {
    function ApplyRedirects(injector, configLoader, urlSerializer, urlTree, config) {
      this.injector = injector;
      this.configLoader = configLoader;
      this.urlSerializer = urlSerializer;
      this.urlTree = urlTree;
      this.config = config;
      this.allowRedirects = true;
    }
    ApplyRedirects.prototype.apply = function() {
      var _this = this;
      var expanded$ = this.expandSegmentGroup(this.injector, this.config, this.urlTree.root, PRIMARY_OUTLET);
      var urlTrees$ = rxjs_operator_map.map.call(expanded$, function(rootSegmentGroup) {
        return _this.createUrlTree(rootSegmentGroup, _this.urlTree.queryParams, _this.urlTree.fragment);
      });
      return rxjs_operator_catch._catch.call(urlTrees$, function(e) {
        if (e instanceof AbsoluteRedirect) {
          _this.allowRedirects = false;
          return _this.match(e.urlTree);
        } else if (e instanceof NoMatch) {
          throw _this.noMatchError(e);
        } else {
          throw e;
        }
      });
    };
    ApplyRedirects.prototype.match = function(tree) {
      var _this = this;
      var expanded$ = this.expandSegmentGroup(this.injector, this.config, tree.root, PRIMARY_OUTLET);
      var mapped$ = rxjs_operator_map.map.call(expanded$, function(rootSegmentGroup) {
        return _this.createUrlTree(rootSegmentGroup, tree.queryParams, tree.fragment);
      });
      return rxjs_operator_catch._catch.call(mapped$, function(e) {
        if (e instanceof NoMatch) {
          throw _this.noMatchError(e);
        } else {
          throw e;
        }
      });
    };
    ApplyRedirects.prototype.noMatchError = function(e) {
      return new Error("Cannot match any routes. URL Segment: '" + e.segmentGroup + "'");
    };
    ApplyRedirects.prototype.createUrlTree = function(rootCandidate, queryParams, fragment) {
      var root = rootCandidate.segments.length > 0 ? new UrlSegmentGroup([], (_a = {}, _a[PRIMARY_OUTLET] = rootCandidate, _a)) : rootCandidate;
      return new UrlTree(root, queryParams, fragment);
      var _a;
    };
    ApplyRedirects.prototype.expandSegmentGroup = function(injector, routes, segmentGroup, outlet) {
      if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
        return rxjs_operator_map.map.call(this.expandChildren(injector, routes, segmentGroup), function(children) {
          return new UrlSegmentGroup([], children);
        });
      } else {
        return this.expandSegment(injector, segmentGroup, routes, segmentGroup.segments, outlet, true);
      }
    };
    ApplyRedirects.prototype.expandChildren = function(injector, routes, segmentGroup) {
      var _this = this;
      return waitForMap(segmentGroup.children, function(childOutlet, child) {
        return _this.expandSegmentGroup(injector, routes, child, childOutlet);
      });
    };
    ApplyRedirects.prototype.expandSegment = function(injector, segmentGroup, routes, segments, outlet, allowRedirects) {
      var _this = this;
      var routes$ = rxjs_observable_of.of.apply(void 0, routes);
      var processedRoutes$ = rxjs_operator_map.map.call(routes$, function(r) {
        var expanded$ = _this.expandSegmentAgainstRoute(injector, segmentGroup, routes, r, segments, outlet, allowRedirects);
        return rxjs_operator_catch._catch.call(expanded$, function(e) {
          if (e instanceof NoMatch)
            return rxjs_observable_of.of(null);
          else
            throw e;
        });
      });
      var concattedProcessedRoutes$ = rxjs_operator_concatAll.concatAll.call(processedRoutes$);
      var first$ = rxjs_operator_first.first.call(concattedProcessedRoutes$, function(s) {
        return !!s;
      });
      return rxjs_operator_catch._catch.call(first$, function(e, _) {
        if (e instanceof rxjs_util_EmptyError.EmptyError) {
          if (_this.noLeftoversInUrl(segmentGroup, segments, outlet)) {
            return rxjs_observable_of.of(new UrlSegmentGroup([], {}));
          } else {
            throw new NoMatch(segmentGroup);
          }
        } else {
          throw e;
        }
      });
    };
    ApplyRedirects.prototype.noLeftoversInUrl = function(segmentGroup, segments, outlet) {
      return segments.length === 0 && !segmentGroup.children[outlet];
    };
    ApplyRedirects.prototype.expandSegmentAgainstRoute = function(injector, segmentGroup, routes, route, paths, outlet, allowRedirects) {
      if (getOutlet$1(route) !== outlet)
        return noMatch(segmentGroup);
      if (route.redirectTo !== undefined && !(allowRedirects && this.allowRedirects))
        return noMatch(segmentGroup);
      if (route.redirectTo === undefined) {
        return this.matchSegmentAgainstRoute(injector, segmentGroup, route, paths);
      } else {
        return this.expandSegmentAgainstRouteUsingRedirect(injector, segmentGroup, routes, route, paths, outlet);
      }
    };
    ApplyRedirects.prototype.expandSegmentAgainstRouteUsingRedirect = function(injector, segmentGroup, routes, route, segments, outlet) {
      if (route.path === '**') {
        return this.expandWildCardWithParamsAgainstRouteUsingRedirect(injector, routes, route, outlet);
      } else {
        return this.expandRegularSegmentAgainstRouteUsingRedirect(injector, segmentGroup, routes, route, segments, outlet);
      }
    };
    ApplyRedirects.prototype.expandWildCardWithParamsAgainstRouteUsingRedirect = function(injector, routes, route, outlet) {
      var _this = this;
      var newTree = this.applyRedirectCommands([], route.redirectTo, {});
      if (route.redirectTo.startsWith('/')) {
        return absoluteRedirect(newTree);
      } else {
        return rxjs_operator_mergeMap.mergeMap.call(this.lineralizeSegments(route, newTree), function(newSegments) {
          var group = new UrlSegmentGroup(newSegments, {});
          return _this.expandSegment(injector, group, routes, newSegments, outlet, false);
        });
      }
    };
    ApplyRedirects.prototype.expandRegularSegmentAgainstRouteUsingRedirect = function(injector, segmentGroup, routes, route, segments, outlet) {
      var _this = this;
      var _a = match(segmentGroup, route, segments),
          matched = _a.matched,
          consumedSegments = _a.consumedSegments,
          lastChild = _a.lastChild,
          positionalParamSegments = _a.positionalParamSegments;
      if (!matched)
        return noMatch(segmentGroup);
      var newTree = this.applyRedirectCommands(consumedSegments, route.redirectTo, (positionalParamSegments));
      if (route.redirectTo.startsWith('/')) {
        return absoluteRedirect(newTree);
      } else {
        return rxjs_operator_mergeMap.mergeMap.call(this.lineralizeSegments(route, newTree), function(newSegments) {
          return _this.expandSegment(injector, segmentGroup, routes, newSegments.concat(segments.slice(lastChild)), outlet, false);
        });
      }
    };
    ApplyRedirects.prototype.matchSegmentAgainstRoute = function(injector, rawSegmentGroup, route, segments) {
      var _this = this;
      if (route.path === '**') {
        if (route.loadChildren) {
          return rxjs_operator_map.map.call(this.configLoader.load(injector, route.loadChildren), function(r) {
            ((route))._loadedConfig = r;
            return new UrlSegmentGroup(segments, {});
          });
        } else {
          return rxjs_observable_of.of(new UrlSegmentGroup(segments, {}));
        }
      } else {
        var _a = match(rawSegmentGroup, route, segments),
            matched = _a.matched,
            consumedSegments_1 = _a.consumedSegments,
            lastChild = _a.lastChild;
        if (!matched)
          return noMatch(rawSegmentGroup);
        var rawSlicedSegments_1 = segments.slice(lastChild);
        var childConfig$ = this.getChildConfig(injector, route);
        return rxjs_operator_mergeMap.mergeMap.call(childConfig$, function(routerConfig) {
          var childInjector = routerConfig.injector;
          var childConfig = routerConfig.routes;
          var _a = split(rawSegmentGroup, consumedSegments_1, rawSlicedSegments_1, childConfig),
              segmentGroup = _a.segmentGroup,
              slicedSegments = _a.slicedSegments;
          if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {
            var expanded$ = _this.expandChildren(childInjector, childConfig, segmentGroup);
            return rxjs_operator_map.map.call(expanded$, function(children) {
              return new UrlSegmentGroup(consumedSegments_1, children);
            });
          } else if (childConfig.length === 0 && slicedSegments.length === 0) {
            return rxjs_observable_of.of(new UrlSegmentGroup(consumedSegments_1, {}));
          } else {
            var expanded$ = _this.expandSegment(childInjector, segmentGroup, childConfig, slicedSegments, PRIMARY_OUTLET, true);
            return rxjs_operator_map.map.call(expanded$, function(cs) {
              return new UrlSegmentGroup(consumedSegments_1.concat(cs.segments), cs.children);
            });
          }
        });
      }
    };
    ApplyRedirects.prototype.getChildConfig = function(injector, route) {
      var _this = this;
      if (route.children) {
        return rxjs_observable_of.of(new LoadedRouterConfig(route.children, injector, null, null));
      } else if (route.loadChildren) {
        return rxjs_operator_mergeMap.mergeMap.call(runGuards(injector, route), function(shouldLoad) {
          if (shouldLoad) {
            if (((route))._loadedConfig) {
              return rxjs_observable_of.of(((route))._loadedConfig);
            } else {
              return rxjs_operator_map.map.call(_this.configLoader.load(injector, route.loadChildren), function(r) {
                ((route))._loadedConfig = r;
                return r;
              });
            }
          } else {
            return canLoadFails(route);
          }
        });
      } else {
        return rxjs_observable_of.of(new LoadedRouterConfig([], injector, null, null));
      }
    };
    ApplyRedirects.prototype.lineralizeSegments = function(route, urlTree) {
      var res = [];
      var c = urlTree.root;
      while (true) {
        res = res.concat(c.segments);
        if (c.numberOfChildren === 0) {
          return rxjs_observable_of.of(res);
        } else if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) {
          return namedOutletsRedirect(route.redirectTo);
        } else {
          c = c.children[PRIMARY_OUTLET];
        }
      }
    };
    ApplyRedirects.prototype.applyRedirectCommands = function(segments, redirectTo, posParams) {
      var t = this.urlSerializer.parse(redirectTo);
      return this.applyRedirectCreatreUrlTree(redirectTo, this.urlSerializer.parse(redirectTo), segments, posParams);
    };
    ApplyRedirects.prototype.applyRedirectCreatreUrlTree = function(redirectTo, urlTree, segments, posParams) {
      var newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);
      return new UrlTree(newRoot, this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams), urlTree.fragment);
    };
    ApplyRedirects.prototype.createQueryParams = function(redirectToParams, actualParams) {
      var res = {};
      forEach(redirectToParams, function(v, k) {
        if (v.startsWith(':')) {
          res[k] = actualParams[v.substring(1)];
        } else {
          res[k] = v;
        }
      });
      return res;
    };
    ApplyRedirects.prototype.createSegmentGroup = function(redirectTo, group, segments, posParams) {
      var _this = this;
      var updatedSegments = this.createSegments(redirectTo, group.segments, segments, posParams);
      var children = {};
      forEach(group.children, function(child, name) {
        children[name] = _this.createSegmentGroup(redirectTo, child, segments, posParams);
      });
      return new UrlSegmentGroup(updatedSegments, children);
    };
    ApplyRedirects.prototype.createSegments = function(redirectTo, redirectToSegments, actualSegments, posParams) {
      var _this = this;
      return redirectToSegments.map(function(s) {
        return s.path.startsWith(':') ? _this.findPosParam(redirectTo, s, posParams) : _this.findOrReturn(s, actualSegments);
      });
    };
    ApplyRedirects.prototype.findPosParam = function(redirectTo, redirectToUrlSegment, posParams) {
      var pos = posParams[redirectToUrlSegment.path.substring(1)];
      if (!pos)
        throw new Error("Cannot redirect to '" + redirectTo + "'. Cannot find '" + redirectToUrlSegment.path + "'.");
      return pos;
    };
    ApplyRedirects.prototype.findOrReturn = function(redirectToUrlSegment, actualSegments) {
      var idx = 0;
      for (var _i = 0,
          actualSegments_1 = actualSegments; _i < actualSegments_1.length; _i++) {
        var s = actualSegments_1[_i];
        if (s.path === redirectToUrlSegment.path) {
          actualSegments.splice(idx);
          return s;
        }
        idx++;
      }
      return redirectToUrlSegment;
    };
    return ApplyRedirects;
  }());
  function runGuards(injector, route) {
    var canLoad = route.canLoad;
    if (!canLoad || canLoad.length === 0)
      return rxjs_observable_of.of(true);
    var obs = rxjs_operator_map.map.call(rxjs_observable_from.from(canLoad), function(c) {
      var guard = injector.get(c);
      if (guard.canLoad) {
        return wrapIntoObservable(guard.canLoad(route));
      } else {
        return wrapIntoObservable(guard(route));
      }
    });
    return andObservables(obs);
  }
  function match(segmentGroup, route, segments) {
    var noMatch = {
      matched: false,
      consumedSegments: ([]),
      lastChild: 0,
      positionalParamSegments: {}
    };
    if (route.path === '') {
      if ((route.pathMatch === 'full') && (segmentGroup.hasChildren() || segments.length > 0)) {
        return {
          matched: false,
          consumedSegments: [],
          lastChild: 0,
          positionalParamSegments: {}
        };
      } else {
        return {
          matched: true,
          consumedSegments: [],
          lastChild: 0,
          positionalParamSegments: {}
        };
      }
    }
    var matcher = route.matcher || defaultUrlMatcher;
    var res = matcher(segments, segmentGroup, route);
    if (!res)
      return noMatch;
    return {
      matched: true,
      consumedSegments: res.consumed,
      lastChild: res.consumed.length,
      positionalParamSegments: res.posParams
    };
  }
  function split(segmentGroup, consumedSegments, slicedSegments, config) {
    if (slicedSegments.length > 0 && containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, config)) {
      var s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptySegments(config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));
      return {
        segmentGroup: mergeTrivialChildren(s),
        slicedSegments: []
      };
    } else if (slicedSegments.length === 0 && containsEmptyPathRedirects(segmentGroup, slicedSegments, config)) {
      var s = new UrlSegmentGroup(segmentGroup.segments, addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));
      return {
        segmentGroup: mergeTrivialChildren(s),
        slicedSegments: slicedSegments
      };
    } else {
      return {
        segmentGroup: segmentGroup,
        slicedSegments: slicedSegments
      };
    }
  }
  function mergeTrivialChildren(s) {
    if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {
      var c = s.children[PRIMARY_OUTLET];
      return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);
    } else {
      return s;
    }
  }
  function addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {
    var res = {};
    for (var _i = 0,
        routes_1 = routes; _i < routes_1.length; _i++) {
      var r = routes_1[_i];
      if (emptyPathRedirect(segmentGroup, slicedSegments, r) && !children[getOutlet$1(r)]) {
        res[getOutlet$1(r)] = new UrlSegmentGroup([], {});
      }
    }
    return merge(children, res);
  }
  function createChildrenForEmptySegments(routes, primarySegmentGroup) {
    var res = {};
    res[PRIMARY_OUTLET] = primarySegmentGroup;
    for (var _i = 0,
        routes_2 = routes; _i < routes_2.length; _i++) {
      var r = routes_2[_i];
      if (r.path === '' && getOutlet$1(r) !== PRIMARY_OUTLET) {
        res[getOutlet$1(r)] = new UrlSegmentGroup([], {});
      }
    }
    return res;
  }
  function containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, routes) {
    return routes.filter(function(r) {
      return emptyPathRedirect(segmentGroup, slicedSegments, r) && getOutlet$1(r) !== PRIMARY_OUTLET;
    }).length > 0;
  }
  function containsEmptyPathRedirects(segmentGroup, slicedSegments, routes) {
    return routes.filter(function(r) {
      return emptyPathRedirect(segmentGroup, slicedSegments, r);
    }).length > 0;
  }
  function emptyPathRedirect(segmentGroup, slicedSegments, r) {
    if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full')
      return false;
    return r.path === '' && r.redirectTo !== undefined;
  }
  function getOutlet$1(route) {
    return route.outlet ? route.outlet : PRIMARY_OUTLET;
  }
  function validateConfig(config, parentPath) {
    if (parentPath === void 0) {
      parentPath = '';
    }
    for (var i = 0; i < config.length; i++) {
      var route = config[i];
      var fullPath = getFullPath(parentPath, route);
      validateNode(route, fullPath);
    }
  }
  function validateNode(route, fullPath) {
    if (!route) {
      throw new Error("\n      Invalid configuration of route '" + fullPath + "': Encountered undefined route.\n      The reason might be an extra comma.\n       \n      Example: \n      const routes: Routes = [\n        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n        { path: 'dashboard',  component: DashboardComponent },, << two commas\n        { path: 'detail/:id', component: HeroDetailComponent }\n      ];\n    ");
    }
    if (Array.isArray(route)) {
      throw new Error("Invalid configuration of route '" + fullPath + "': Array cannot be specified");
    }
    if (!route.component && (route.outlet && route.outlet !== PRIMARY_OUTLET)) {
      throw new Error("Invalid configuration of route '" + fullPath + "': a componentless route cannot have a named outlet set");
    }
    if (route.redirectTo && route.children) {
      throw new Error("Invalid configuration of route '" + fullPath + "': redirectTo and children cannot be used together");
    }
    if (route.redirectTo && route.loadChildren) {
      throw new Error("Invalid configuration of route '" + fullPath + "': redirectTo and loadChildren cannot be used together");
    }
    if (route.children && route.loadChildren) {
      throw new Error("Invalid configuration of route '" + fullPath + "': children and loadChildren cannot be used together");
    }
    if (route.redirectTo && route.component) {
      throw new Error("Invalid configuration of route '" + fullPath + "': redirectTo and component cannot be used together");
    }
    if (route.path && route.matcher) {
      throw new Error("Invalid configuration of route '" + fullPath + "': path and matcher cannot be used together");
    }
    if (route.redirectTo === void 0 && !route.component && !route.children && !route.loadChildren) {
      throw new Error("Invalid configuration of route '" + fullPath + "'. One of the following must be provided: component, redirectTo, children or loadChildren");
    }
    if (route.path === void 0 && route.matcher === void 0) {
      throw new Error("Invalid configuration of route '" + fullPath + "': routes must have either a path or a matcher specified");
    }
    if (typeof route.path === 'string' && route.path.charAt(0) === '/') {
      throw new Error("Invalid configuration of route '" + fullPath + "': path cannot start with a slash");
    }
    if (route.path === '' && route.redirectTo !== void 0 && route.pathMatch === void 0) {
      var exp = "The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.";
      throw new Error("Invalid configuration of route '{path: \"" + fullPath + "\", redirectTo: \"" + route.redirectTo + "\"}': please provide 'pathMatch'. " + exp);
    }
    if (route.pathMatch !== void 0 && route.pathMatch !== 'full' && route.pathMatch !== 'prefix') {
      throw new Error("Invalid configuration of route '" + fullPath + "': pathMatch can only be set to 'prefix' or 'full'");
    }
    if (route.children) {
      validateConfig(route.children, fullPath);
    }
  }
  function getFullPath(parentPath, currentRoute) {
    if (!currentRoute) {
      return parentPath;
    }
    if (!parentPath && !currentRoute.path) {
      return '';
    } else if (parentPath && !currentRoute.path) {
      return parentPath + "/";
    } else if (!parentPath && currentRoute.path) {
      return currentRoute.path;
    } else {
      return parentPath + "/" + currentRoute.path;
    }
  }
  var Tree = (function() {
    function Tree(root) {
      this._root = root;
    }
    Object.defineProperty(Tree.prototype, "root", {
      get: function() {
        return this._root.value;
      },
      enumerable: true,
      configurable: true
    });
    Tree.prototype.parent = function(t) {
      var p = this.pathFromRoot(t);
      return p.length > 1 ? p[p.length - 2] : null;
    };
    Tree.prototype.children = function(t) {
      var n = findNode(t, this._root);
      return n ? n.children.map(function(t) {
        return t.value;
      }) : [];
    };
    Tree.prototype.firstChild = function(t) {
      var n = findNode(t, this._root);
      return n && n.children.length > 0 ? n.children[0].value : null;
    };
    Tree.prototype.siblings = function(t) {
      var p = findPath(t, this._root, []);
      if (p.length < 2)
        return [];
      var c = p[p.length - 2].children.map(function(c) {
        return c.value;
      });
      return c.filter(function(cc) {
        return cc !== t;
      });
    };
    Tree.prototype.pathFromRoot = function(t) {
      return findPath(t, this._root, []).map(function(s) {
        return s.value;
      });
    };
    return Tree;
  }());
  function findNode(expected, c) {
    if (expected === c.value)
      return c;
    for (var _i = 0,
        _a = c.children; _i < _a.length; _i++) {
      var cc = _a[_i];
      var r = findNode(expected, cc);
      if (r)
        return r;
    }
    return null;
  }
  function findPath(expected, c, collected) {
    collected.push(c);
    if (expected === c.value)
      return collected;
    for (var _i = 0,
        _a = c.children; _i < _a.length; _i++) {
      var cc = _a[_i];
      var cloned = collected.slice(0);
      var r = findPath(expected, cc, cloned);
      if (r.length > 0)
        return r;
    }
    return [];
  }
  var TreeNode = (function() {
    function TreeNode(value, children) {
      this.value = value;
      this.children = children;
    }
    TreeNode.prototype.toString = function() {
      return "TreeNode(" + this.value + ")";
    };
    return TreeNode;
  }());
  var __extends$1 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var RouterState = (function(_super) {
    __extends$1(RouterState, _super);
    function RouterState(root, snapshot) {
      _super.call(this, root);
      this.snapshot = snapshot;
      setRouterStateSnapshot(this, root);
    }
    RouterState.prototype.toString = function() {
      return this.snapshot.toString();
    };
    return RouterState;
  }(Tree));
  function createEmptyState(urlTree, rootComponent) {
    var snapshot = createEmptyStateSnapshot(urlTree, rootComponent);
    var emptyUrl = new rxjs_BehaviorSubject.BehaviorSubject([new UrlSegment('', {})]);
    var emptyParams = new rxjs_BehaviorSubject.BehaviorSubject({});
    var emptyData = new rxjs_BehaviorSubject.BehaviorSubject({});
    var emptyQueryParams = new rxjs_BehaviorSubject.BehaviorSubject({});
    var fragment = new rxjs_BehaviorSubject.BehaviorSubject('');
    var activated = new ActivatedRoute(emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, snapshot.root);
    activated.snapshot = snapshot.root;
    return new RouterState(new TreeNode(activated, []), snapshot);
  }
  function createEmptyStateSnapshot(urlTree, rootComponent) {
    var emptyParams = {};
    var emptyData = {};
    var emptyQueryParams = {};
    var fragment = '';
    var activated = new ActivatedRouteSnapshot([], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null, urlTree.root, -1, {});
    return new RouterStateSnapshot('', new TreeNode(activated, []));
  }
  var ActivatedRoute = (function() {
    function ActivatedRoute(url, params, queryParams, fragment, data, outlet, component, futureSnapshot) {
      this.url = url;
      this.params = params;
      this.queryParams = queryParams;
      this.fragment = fragment;
      this.data = data;
      this.outlet = outlet;
      this.component = component;
      this._futureSnapshot = futureSnapshot;
    }
    Object.defineProperty(ActivatedRoute.prototype, "routeConfig", {
      get: function() {
        return this._futureSnapshot.routeConfig;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ActivatedRoute.prototype, "root", {
      get: function() {
        return this._routerState.root;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ActivatedRoute.prototype, "parent", {
      get: function() {
        return this._routerState.parent(this);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ActivatedRoute.prototype, "firstChild", {
      get: function() {
        return this._routerState.firstChild(this);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ActivatedRoute.prototype, "children", {
      get: function() {
        return this._routerState.children(this);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ActivatedRoute.prototype, "pathFromRoot", {
      get: function() {
        return this._routerState.pathFromRoot(this);
      },
      enumerable: true,
      configurable: true
    });
    ActivatedRoute.prototype.toString = function() {
      return this.snapshot ? this.snapshot.toString() : "Future(" + this._futureSnapshot + ")";
    };
    return ActivatedRoute;
  }());
  function inheritedParamsDataResolve(route) {
    var pathToRoot = route.pathFromRoot;
    var inhertingStartingFrom = pathToRoot.length - 1;
    while (inhertingStartingFrom >= 1) {
      var current = pathToRoot[inhertingStartingFrom];
      var parent_1 = pathToRoot[inhertingStartingFrom - 1];
      if (current.routeConfig && current.routeConfig.path === '') {
        inhertingStartingFrom--;
      } else if (!parent_1.component) {
        inhertingStartingFrom--;
      } else {
        break;
      }
    }
    return pathToRoot.slice(inhertingStartingFrom).reduce(function(res, curr) {
      var params = merge(res.params, curr.params);
      var data = merge(res.data, curr.data);
      var resolve = merge(res.resolve, curr._resolvedData);
      return {
        params: params,
        data: data,
        resolve: resolve
      };
    }, ({
      params: {},
      data: {},
      resolve: {}
    }));
  }
  var ActivatedRouteSnapshot = (function() {
    function ActivatedRouteSnapshot(url, params, queryParams, fragment, data, outlet, component, routeConfig, urlSegment, lastPathIndex, resolve) {
      this.url = url;
      this.params = params;
      this.queryParams = queryParams;
      this.fragment = fragment;
      this.data = data;
      this.outlet = outlet;
      this.component = component;
      this._routeConfig = routeConfig;
      this._urlSegment = urlSegment;
      this._lastPathIndex = lastPathIndex;
      this._resolve = resolve;
    }
    Object.defineProperty(ActivatedRouteSnapshot.prototype, "routeConfig", {
      get: function() {
        return this._routeConfig;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ActivatedRouteSnapshot.prototype, "root", {
      get: function() {
        return this._routerState.root;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ActivatedRouteSnapshot.prototype, "parent", {
      get: function() {
        return this._routerState.parent(this);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ActivatedRouteSnapshot.prototype, "firstChild", {
      get: function() {
        return this._routerState.firstChild(this);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ActivatedRouteSnapshot.prototype, "children", {
      get: function() {
        return this._routerState.children(this);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ActivatedRouteSnapshot.prototype, "pathFromRoot", {
      get: function() {
        return this._routerState.pathFromRoot(this);
      },
      enumerable: true,
      configurable: true
    });
    ActivatedRouteSnapshot.prototype.toString = function() {
      var url = this.url.map(function(segment) {
        return segment.toString();
      }).join('/');
      var matched = this._routeConfig ? this._routeConfig.path : '';
      return "Route(url:'" + url + "', path:'" + matched + "')";
    };
    return ActivatedRouteSnapshot;
  }());
  var RouterStateSnapshot = (function(_super) {
    __extends$1(RouterStateSnapshot, _super);
    function RouterStateSnapshot(url, root) {
      _super.call(this, root);
      this.url = url;
      setRouterStateSnapshot(this, root);
    }
    RouterStateSnapshot.prototype.toString = function() {
      return serializeNode(this._root);
    };
    return RouterStateSnapshot;
  }(Tree));
  function setRouterStateSnapshot(state, node) {
    node.value._routerState = state;
    node.children.forEach(function(c) {
      return setRouterStateSnapshot(state, c);
    });
  }
  function serializeNode(node) {
    var c = node.children.length > 0 ? " { " + node.children.map(serializeNode).join(", ") + " } " : '';
    return "" + node.value + c;
  }
  function advanceActivatedRoute(route) {
    if (route.snapshot) {
      var currentSnapshot = route.snapshot;
      route.snapshot = route._futureSnapshot;
      if (!shallowEqual(currentSnapshot.queryParams, route._futureSnapshot.queryParams)) {
        ((route.queryParams)).next(route._futureSnapshot.queryParams);
      }
      if (currentSnapshot.fragment !== route._futureSnapshot.fragment) {
        ((route.fragment)).next(route._futureSnapshot.fragment);
      }
      if (!shallowEqual(currentSnapshot.params, route._futureSnapshot.params)) {
        ((route.params)).next(route._futureSnapshot.params);
      }
      if (!shallowEqualArrays(currentSnapshot.url, route._futureSnapshot.url)) {
        ((route.url)).next(route._futureSnapshot.url);
      }
      if (!equalParamsAndUrlSegments(currentSnapshot, route._futureSnapshot)) {
        ((route.data)).next(route._futureSnapshot.data);
      }
    } else {
      route.snapshot = route._futureSnapshot;
      ((route.data)).next(route._futureSnapshot.data);
    }
  }
  function equalParamsAndUrlSegments(a, b) {
    return shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);
  }
  function createRouterState(routeReuseStrategy, curr, prevState) {
    var root = createNode(routeReuseStrategy, curr._root, prevState ? prevState._root : undefined);
    return new RouterState(root, curr);
  }
  function createNode(routeReuseStrategy, curr, prevState) {
    if (prevState && routeReuseStrategy.shouldReuseRoute(curr.value, prevState.value.snapshot)) {
      var value = prevState.value;
      value._futureSnapshot = curr.value;
      var children = createOrReuseChildren(routeReuseStrategy, curr, prevState);
      return new TreeNode(value, children);
    } else if (routeReuseStrategy.retrieve(curr.value)) {
      var tree = ((routeReuseStrategy.retrieve(curr.value))).route;
      setFutureSnapshotsOfActivatedRoutes(curr, tree);
      return tree;
    } else {
      var value = createActivatedRoute(curr.value);
      var children = curr.children.map(function(c) {
        return createNode(routeReuseStrategy, c);
      });
      return new TreeNode(value, children);
    }
  }
  function setFutureSnapshotsOfActivatedRoutes(curr, result) {
    if (curr.value.routeConfig !== result.value.routeConfig) {
      throw new Error('Cannot reattach ActivatedRouteSnapshot created from a different route');
    }
    if (curr.children.length !== result.children.length) {
      throw new Error('Cannot reattach ActivatedRouteSnapshot with a different number of children');
    }
    result.value._futureSnapshot = curr.value;
    for (var i = 0; i < curr.children.length; ++i) {
      setFutureSnapshotsOfActivatedRoutes(curr.children[i], result.children[i]);
    }
  }
  function createOrReuseChildren(routeReuseStrategy, curr, prevState) {
    return curr.children.map(function(child) {
      for (var _i = 0,
          _a = prevState.children; _i < _a.length; _i++) {
        var p = _a[_i];
        if (routeReuseStrategy.shouldReuseRoute(p.value.snapshot, child.value)) {
          return createNode(routeReuseStrategy, child, p);
        }
      }
      return createNode(routeReuseStrategy, child);
    });
  }
  function createActivatedRoute(c) {
    return new ActivatedRoute(new rxjs_BehaviorSubject.BehaviorSubject(c.url), new rxjs_BehaviorSubject.BehaviorSubject(c.params), new rxjs_BehaviorSubject.BehaviorSubject(c.queryParams), new rxjs_BehaviorSubject.BehaviorSubject(c.fragment), new rxjs_BehaviorSubject.BehaviorSubject(c.data), c.outlet, c.component, c);
  }
  function createUrlTree(route, urlTree, commands, queryParams, fragment) {
    if (commands.length === 0) {
      return tree(urlTree.root, urlTree.root, urlTree, queryParams, fragment);
    }
    var nav = computeNavigation(commands);
    if (nav.toRoot()) {
      return tree(urlTree.root, new UrlSegmentGroup([], {}), urlTree, queryParams, fragment);
    }
    var startingPosition = findStartingPosition(nav, urlTree, route);
    var segmentGroup = startingPosition.processChildren ? updateSegmentGroupChildren(startingPosition.segmentGroup, startingPosition.index, nav.commands) : updateSegmentGroup(startingPosition.segmentGroup, startingPosition.index, nav.commands);
    return tree(startingPosition.segmentGroup, segmentGroup, urlTree, queryParams, fragment);
  }
  function isMatrixParams(command) {
    return typeof command === 'object' && command != null && !command.outlets && !command.segmentPath;
  }
  function tree(oldSegmentGroup, newSegmentGroup, urlTree, queryParams, fragment) {
    if (urlTree.root === oldSegmentGroup) {
      return new UrlTree(newSegmentGroup, stringify(queryParams), fragment);
    }
    return new UrlTree(replaceSegment(urlTree.root, oldSegmentGroup, newSegmentGroup), stringify(queryParams), fragment);
  }
  function replaceSegment(current, oldSegment, newSegment) {
    var children = {};
    forEach(current.children, function(c, outletName) {
      if (c === oldSegment) {
        children[outletName] = newSegment;
      } else {
        children[outletName] = replaceSegment(c, oldSegment, newSegment);
      }
    });
    return new UrlSegmentGroup(current.segments, children);
  }
  var Navigation = (function() {
    function Navigation(isAbsolute, numberOfDoubleDots, commands) {
      this.isAbsolute = isAbsolute;
      this.numberOfDoubleDots = numberOfDoubleDots;
      this.commands = commands;
      if (isAbsolute && commands.length > 0 && isMatrixParams(commands[0])) {
        throw new Error('Root segment cannot have matrix parameters');
      }
      var cmdWithOutlet = commands.find(function(c) {
        return typeof c === 'object' && c != null && c.outlets;
      });
      if (cmdWithOutlet && cmdWithOutlet !== last(commands)) {
        throw new Error('{outlets:{}} has to be the last command');
      }
    }
    Navigation.prototype.toRoot = function() {
      return this.isAbsolute && this.commands.length === 1 && this.commands[0] == '/';
    };
    return Navigation;
  }());
  function computeNavigation(commands) {
    if ((typeof commands[0] === 'string') && commands.length === 1 && commands[0] === '/') {
      return new Navigation(true, 0, commands);
    }
    var numberOfDoubleDots = 0;
    var isAbsolute = false;
    var res = commands.reduce(function(res, cmd, cmdIdx) {
      if (typeof cmd === 'object' && cmd != null) {
        if (cmd.outlets) {
          var outlets_1 = {};
          forEach(cmd.outlets, function(commands, name) {
            outlets_1[name] = typeof commands === 'string' ? commands.split('/') : commands;
          });
          return res.concat([{outlets: outlets_1}]);
        }
        if (cmd.segmentPath) {
          return res.concat([cmd.segmentPath]);
        }
      }
      if (!(typeof cmd === 'string')) {
        return res.concat([cmd]);
      }
      if (cmdIdx === 0) {
        cmd.split('/').forEach(function(urlPart, partIndex) {
          if (partIndex == 0 && urlPart === '.') {} else if (partIndex == 0 && urlPart === '') {
            isAbsolute = true;
          } else if (urlPart === '..') {
            numberOfDoubleDots++;
          } else if (urlPart != '') {
            res.push(urlPart);
          }
        });
        return res;
      }
      return res.concat([cmd]);
    }, []);
    return new Navigation(isAbsolute, numberOfDoubleDots, res);
  }
  var Position = (function() {
    function Position(segmentGroup, processChildren, index) {
      this.segmentGroup = segmentGroup;
      this.processChildren = processChildren;
      this.index = index;
    }
    return Position;
  }());
  function findStartingPosition(nav, tree, route) {
    if (nav.isAbsolute) {
      return new Position(tree.root, true, 0);
    }
    if (route.snapshot._lastPathIndex === -1) {
      return new Position(route.snapshot._urlSegment, true, 0);
    }
    var modifier = isMatrixParams(nav.commands[0]) ? 0 : 1;
    var index = route.snapshot._lastPathIndex + modifier;
    return createPositionApplyingDoubleDots(route.snapshot._urlSegment, index, nav.numberOfDoubleDots);
  }
  function createPositionApplyingDoubleDots(group, index, numberOfDoubleDots) {
    var g = group;
    var ci = index;
    var dd = numberOfDoubleDots;
    while (dd > ci) {
      dd -= ci;
      g = g.parent;
      if (!g) {
        throw new Error('Invalid number of \'../\'');
      }
      ci = g.segments.length;
    }
    return new Position(g, false, ci - dd);
  }
  function getPath(command) {
    if (typeof command === 'object' && command != null && command.outlets) {
      return command.outlets[PRIMARY_OUTLET];
    }
    return "" + command;
  }
  function getOutlets(commands) {
    if (!(typeof commands[0] === 'object'))
      return (_a = {}, _a[PRIMARY_OUTLET] = commands, _a);
    if (commands[0].outlets === undefined)
      return (_b = {}, _b[PRIMARY_OUTLET] = commands, _b);
    return commands[0].outlets;
    var _a,
        _b;
  }
  function updateSegmentGroup(segmentGroup, startIndex, commands) {
    if (!segmentGroup) {
      segmentGroup = new UrlSegmentGroup([], {});
    }
    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
      return updateSegmentGroupChildren(segmentGroup, startIndex, commands);
    }
    var m = prefixedWith(segmentGroup, startIndex, commands);
    var slicedCommands = commands.slice(m.commandIndex);
    if (m.match && m.pathIndex < segmentGroup.segments.length) {
      var g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});
      g.children[PRIMARY_OUTLET] = new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);
      return updateSegmentGroupChildren(g, 0, slicedCommands);
    } else if (m.match && slicedCommands.length === 0) {
      return new UrlSegmentGroup(segmentGroup.segments, {});
    } else if (m.match && !segmentGroup.hasChildren()) {
      return createNewSegmentGroup(segmentGroup, startIndex, commands);
    } else if (m.match) {
      return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);
    } else {
      return createNewSegmentGroup(segmentGroup, startIndex, commands);
    }
  }
  function updateSegmentGroupChildren(segmentGroup, startIndex, commands) {
    if (commands.length === 0) {
      return new UrlSegmentGroup(segmentGroup.segments, {});
    } else {
      var outlets_2 = getOutlets(commands);
      var children_1 = {};
      forEach(outlets_2, function(commands, outlet) {
        if (commands !== null) {
          children_1[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands);
        }
      });
      forEach(segmentGroup.children, function(child, childOutlet) {
        if (outlets_2[childOutlet] === undefined) {
          children_1[childOutlet] = child;
        }
      });
      return new UrlSegmentGroup(segmentGroup.segments, children_1);
    }
  }
  function prefixedWith(segmentGroup, startIndex, commands) {
    var currentCommandIndex = 0;
    var currentPathIndex = startIndex;
    var noMatch = {
      match: false,
      pathIndex: 0,
      commandIndex: 0
    };
    while (currentPathIndex < segmentGroup.segments.length) {
      if (currentCommandIndex >= commands.length)
        return noMatch;
      var path = segmentGroup.segments[currentPathIndex];
      var curr = getPath(commands[currentCommandIndex]);
      var next = currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;
      if (currentPathIndex > 0 && curr === undefined)
        break;
      if (curr && next && (typeof next === 'object') && next.outlets === undefined) {
        if (!compare(curr, next, path))
          return noMatch;
        currentCommandIndex += 2;
      } else {
        if (!compare(curr, {}, path))
          return noMatch;
        currentCommandIndex++;
      }
      currentPathIndex++;
    }
    return {
      match: true,
      pathIndex: currentPathIndex,
      commandIndex: currentCommandIndex
    };
  }
  function createNewSegmentGroup(segmentGroup, startIndex, commands) {
    var paths = segmentGroup.segments.slice(0, startIndex);
    var i = 0;
    while (i < commands.length) {
      if (typeof commands[i] === 'object' && commands[i].outlets !== undefined) {
        var children = createNewSegmentChildren(commands[i].outlets);
        return new UrlSegmentGroup(paths, children);
      }
      if (i === 0 && isMatrixParams(commands[0])) {
        var p = segmentGroup.segments[startIndex];
        paths.push(new UrlSegment(p.path, commands[0]));
        i++;
        continue;
      }
      var curr = getPath(commands[i]);
      var next = (i < commands.length - 1) ? commands[i + 1] : null;
      if (curr && next && isMatrixParams(next)) {
        paths.push(new UrlSegment(curr, stringify(next)));
        i += 2;
      } else {
        paths.push(new UrlSegment(curr, {}));
        i++;
      }
    }
    return new UrlSegmentGroup(paths, {});
  }
  function createNewSegmentChildren(outlets) {
    var children = {};
    forEach(outlets, function(commands, outlet) {
      if (commands !== null) {
        children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);
      }
    });
    return children;
  }
  function stringify(params) {
    var res = {};
    forEach(params, function(v, k) {
      return res[k] = "" + v;
    });
    return res;
  }
  function compare(path, params, segment) {
    return path == segment.path && shallowEqual(params, segment.parameters);
  }
  var NoMatch$1 = (function() {
    function NoMatch() {}
    return NoMatch;
  }());
  function recognize(rootComponentType, config, urlTree, url) {
    return new Recognizer(rootComponentType, config, urlTree, url).recognize();
  }
  var Recognizer = (function() {
    function Recognizer(rootComponentType, config, urlTree, url) {
      this.rootComponentType = rootComponentType;
      this.config = config;
      this.urlTree = urlTree;
      this.url = url;
    }
    Recognizer.prototype.recognize = function() {
      try {
        var rootSegmentGroup = split$1(this.urlTree.root, [], [], this.config).segmentGroup;
        var children = this.processSegmentGroup(this.config, rootSegmentGroup, PRIMARY_OUTLET);
        var root = new ActivatedRouteSnapshot([], Object.freeze({}), Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, {}, PRIMARY_OUTLET, this.rootComponentType, null, this.urlTree.root, -1, {});
        var rootNode = new TreeNode(root, children);
        var routeState = new RouterStateSnapshot(this.url, rootNode);
        this.inheriteParamsAndData(routeState._root);
        return rxjs_observable_of.of(routeState);
      } catch (e) {
        return new rxjs_Observable.Observable(function(obs) {
          return obs.error(e);
        });
      }
    };
    Recognizer.prototype.inheriteParamsAndData = function(routeNode) {
      var _this = this;
      var route = routeNode.value;
      var i = inheritedParamsDataResolve(route);
      route.params = Object.freeze(i.params);
      route.data = Object.freeze(i.data);
      routeNode.children.forEach(function(n) {
        return _this.inheriteParamsAndData(n);
      });
    };
    Recognizer.prototype.processSegmentGroup = function(config, segmentGroup, outlet) {
      if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
        return this.processChildren(config, segmentGroup);
      } else {
        return this.processSegment(config, segmentGroup, segmentGroup.segments, outlet);
      }
    };
    Recognizer.prototype.processChildren = function(config, segmentGroup) {
      var _this = this;
      var children = mapChildrenIntoArray(segmentGroup, function(child, childOutlet) {
        return _this.processSegmentGroup(config, child, childOutlet);
      });
      checkOutletNameUniqueness(children);
      sortActivatedRouteSnapshots(children);
      return children;
    };
    Recognizer.prototype.processSegment = function(config, segmentGroup, segments, outlet) {
      for (var _i = 0,
          config_1 = config; _i < config_1.length; _i++) {
        var r = config_1[_i];
        try {
          return this.processSegmentAgainstRoute(r, segmentGroup, segments, outlet);
        } catch (e) {
          if (!(e instanceof NoMatch$1))
            throw e;
        }
      }
      if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) {
        return [];
      } else {
        throw new NoMatch$1();
      }
    };
    Recognizer.prototype.noLeftoversInUrl = function(segmentGroup, segments, outlet) {
      return segments.length === 0 && !segmentGroup.children[outlet];
    };
    Recognizer.prototype.processSegmentAgainstRoute = function(route, rawSegment, segments, outlet) {
      if (route.redirectTo)
        throw new NoMatch$1();
      if ((route.outlet ? route.outlet : PRIMARY_OUTLET) !== outlet)
        throw new NoMatch$1();
      if (route.path === '**') {
        var params = segments.length > 0 ? last(segments).parameters : {};
        var snapshot_1 = new ActivatedRouteSnapshot(segments, params, Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, getData(route), outlet, route.component, route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + segments.length, getResolve(route));
        return [new TreeNode(snapshot_1, [])];
      }
      var _a = match$1(rawSegment, route, segments),
          consumedSegments = _a.consumedSegments,
          parameters = _a.parameters,
          lastChild = _a.lastChild;
      var rawSlicedSegments = segments.slice(lastChild);
      var childConfig = getChildConfig(route);
      var _b = split$1(rawSegment, consumedSegments, rawSlicedSegments, childConfig),
          segmentGroup = _b.segmentGroup,
          slicedSegments = _b.slicedSegments;
      var snapshot = new ActivatedRouteSnapshot(consumedSegments, parameters, Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, getData(route), outlet, route.component, route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + consumedSegments.length, getResolve(route));
      if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {
        var children = this.processChildren(childConfig, segmentGroup);
        return [new TreeNode(snapshot, children)];
      } else if (childConfig.length === 0 && slicedSegments.length === 0) {
        return [new TreeNode(snapshot, [])];
      } else {
        var children = this.processSegment(childConfig, segmentGroup, slicedSegments, PRIMARY_OUTLET);
        return [new TreeNode(snapshot, children)];
      }
    };
    return Recognizer;
  }());
  function sortActivatedRouteSnapshots(nodes) {
    nodes.sort(function(a, b) {
      if (a.value.outlet === PRIMARY_OUTLET)
        return -1;
      if (b.value.outlet === PRIMARY_OUTLET)
        return 1;
      return a.value.outlet.localeCompare(b.value.outlet);
    });
  }
  function getChildConfig(route) {
    if (route.children) {
      return route.children;
    } else if (route.loadChildren) {
      return ((route))._loadedConfig.routes;
    } else {
      return [];
    }
  }
  function match$1(segmentGroup, route, segments) {
    if (route.path === '') {
      if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || segments.length > 0)) {
        throw new NoMatch$1();
      } else {
        return {
          consumedSegments: [],
          lastChild: 0,
          parameters: {}
        };
      }
    }
    var matcher = route.matcher || defaultUrlMatcher;
    var res = matcher(segments, segmentGroup, route);
    if (!res)
      throw new NoMatch$1();
    var posParams = {};
    forEach(res.posParams, function(v, k) {
      posParams[k] = v.path;
    });
    var parameters = merge(posParams, res.consumed[res.consumed.length - 1].parameters);
    return {
      consumedSegments: res.consumed,
      lastChild: res.consumed.length,
      parameters: parameters
    };
  }
  function checkOutletNameUniqueness(nodes) {
    var names = {};
    nodes.forEach(function(n) {
      var routeWithSameOutletName = names[n.value.outlet];
      if (routeWithSameOutletName) {
        var p = routeWithSameOutletName.url.map(function(s) {
          return s.toString();
        }).join('/');
        var c = n.value.url.map(function(s) {
          return s.toString();
        }).join('/');
        throw new Error("Two segments cannot have the same outlet name: '" + p + "' and '" + c + "'.");
      }
      names[n.value.outlet] = n.value;
    });
  }
  function getSourceSegmentGroup(segmentGroup) {
    var s = segmentGroup;
    while (s._sourceSegment) {
      s = s._sourceSegment;
    }
    return s;
  }
  function getPathIndexShift(segmentGroup) {
    var s = segmentGroup;
    var res = (s._segmentIndexShift ? s._segmentIndexShift : 0);
    while (s._sourceSegment) {
      s = s._sourceSegment;
      res += (s._segmentIndexShift ? s._segmentIndexShift : 0);
    }
    return res - 1;
  }
  function split$1(segmentGroup, consumedSegments, slicedSegments, config) {
    if (slicedSegments.length > 0 && containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {
      var s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptyPaths(segmentGroup, consumedSegments, config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));
      s._sourceSegment = segmentGroup;
      s._segmentIndexShift = consumedSegments.length;
      return {
        segmentGroup: s,
        slicedSegments: []
      };
    } else if (slicedSegments.length === 0 && containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {
      var s = new UrlSegmentGroup(segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));
      s._sourceSegment = segmentGroup;
      s._segmentIndexShift = consumedSegments.length;
      return {
        segmentGroup: s,
        slicedSegments: slicedSegments
      };
    } else {
      var s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);
      s._sourceSegment = segmentGroup;
      s._segmentIndexShift = consumedSegments.length;
      return {
        segmentGroup: s,
        slicedSegments: slicedSegments
      };
    }
  }
  function addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {
    var res = {};
    for (var _i = 0,
        routes_1 = routes; _i < routes_1.length; _i++) {
      var r = routes_1[_i];
      if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet$2(r)]) {
        var s = new UrlSegmentGroup([], {});
        s._sourceSegment = segmentGroup;
        s._segmentIndexShift = segmentGroup.segments.length;
        res[getOutlet$2(r)] = s;
      }
    }
    return merge(children, res);
  }
  function createChildrenForEmptyPaths(segmentGroup, consumedSegments, routes, primarySegment) {
    var res = {};
    res[PRIMARY_OUTLET] = primarySegment;
    primarySegment._sourceSegment = segmentGroup;
    primarySegment._segmentIndexShift = consumedSegments.length;
    for (var _i = 0,
        routes_2 = routes; _i < routes_2.length; _i++) {
      var r = routes_2[_i];
      if (r.path === '' && getOutlet$2(r) !== PRIMARY_OUTLET) {
        var s = new UrlSegmentGroup([], {});
        s._sourceSegment = segmentGroup;
        s._segmentIndexShift = consumedSegments.length;
        res[getOutlet$2(r)] = s;
      }
    }
    return res;
  }
  function containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, routes) {
    return routes.filter(function(r) {
      return emptyPathMatch(segmentGroup, slicedSegments, r) && getOutlet$2(r) !== PRIMARY_OUTLET;
    }).length > 0;
  }
  function containsEmptyPathMatches(segmentGroup, slicedSegments, routes) {
    return routes.filter(function(r) {
      return emptyPathMatch(segmentGroup, slicedSegments, r);
    }).length > 0;
  }
  function emptyPathMatch(segmentGroup, slicedSegments, r) {
    if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full')
      return false;
    return r.path === '' && r.redirectTo === undefined;
  }
  function getOutlet$2(route) {
    return route.outlet ? route.outlet : PRIMARY_OUTLET;
  }
  function getData(route) {
    return route.data ? route.data : {};
  }
  function getResolve(route) {
    return route.resolve ? route.resolve : {};
  }
  var RouterOutletMap = (function() {
    function RouterOutletMap() {
      this._outlets = {};
    }
    RouterOutletMap.prototype.registerOutlet = function(name, outlet) {
      this._outlets[name] = outlet;
    };
    RouterOutletMap.prototype.removeOutlet = function(name) {
      this._outlets[name] = undefined;
    };
    return RouterOutletMap;
  }());
  var UrlHandlingStrategy = (function() {
    function UrlHandlingStrategy() {}
    UrlHandlingStrategy.prototype.shouldProcessUrl = function(url) {};
    UrlHandlingStrategy.prototype.extract = function(url) {};
    UrlHandlingStrategy.prototype.merge = function(newUrlPart, rawUrl) {};
    return UrlHandlingStrategy;
  }());
  var DefaultUrlHandlingStrategy = (function() {
    function DefaultUrlHandlingStrategy() {}
    DefaultUrlHandlingStrategy.prototype.shouldProcessUrl = function(url) {
      return true;
    };
    DefaultUrlHandlingStrategy.prototype.extract = function(url) {
      return url;
    };
    DefaultUrlHandlingStrategy.prototype.merge = function(newUrlPart, wholeUrl) {
      return newUrlPart;
    };
    return DefaultUrlHandlingStrategy;
  }());
  var NavigationStart = (function() {
    function NavigationStart(id, url) {
      this.id = id;
      this.url = url;
    }
    NavigationStart.prototype.toString = function() {
      return "NavigationStart(id: " + this.id + ", url: '" + this.url + "')";
    };
    return NavigationStart;
  }());
  var NavigationEnd = (function() {
    function NavigationEnd(id, url, urlAfterRedirects) {
      this.id = id;
      this.url = url;
      this.urlAfterRedirects = urlAfterRedirects;
    }
    NavigationEnd.prototype.toString = function() {
      return "NavigationEnd(id: " + this.id + ", url: '" + this.url + "', urlAfterRedirects: '" + this.urlAfterRedirects + "')";
    };
    return NavigationEnd;
  }());
  var NavigationCancel = (function() {
    function NavigationCancel(id, url, reason) {
      this.id = id;
      this.url = url;
      this.reason = reason;
    }
    NavigationCancel.prototype.toString = function() {
      return "NavigationCancel(id: " + this.id + ", url: '" + this.url + "')";
    };
    return NavigationCancel;
  }());
  var NavigationError = (function() {
    function NavigationError(id, url, error) {
      this.id = id;
      this.url = url;
      this.error = error;
    }
    NavigationError.prototype.toString = function() {
      return "NavigationError(id: " + this.id + ", url: '" + this.url + "', error: " + this.error + ")";
    };
    return NavigationError;
  }());
  var RoutesRecognized = (function() {
    function RoutesRecognized(id, url, urlAfterRedirects, state) {
      this.id = id;
      this.url = url;
      this.urlAfterRedirects = urlAfterRedirects;
      this.state = state;
    }
    RoutesRecognized.prototype.toString = function() {
      return "RoutesRecognized(id: " + this.id + ", url: '" + this.url + "', urlAfterRedirects: '" + this.urlAfterRedirects + "', state: " + this.state + ")";
    };
    return RoutesRecognized;
  }());
  function defaultErrorHandler(error) {
    throw error;
  }
  var DefaultRouteReuseStrategy = (function() {
    function DefaultRouteReuseStrategy() {}
    DefaultRouteReuseStrategy.prototype.shouldDetach = function(route) {
      return false;
    };
    DefaultRouteReuseStrategy.prototype.store = function(route, detachedTree) {};
    DefaultRouteReuseStrategy.prototype.shouldAttach = function(route) {
      return false;
    };
    DefaultRouteReuseStrategy.prototype.retrieve = function(route) {
      return null;
    };
    DefaultRouteReuseStrategy.prototype.shouldReuseRoute = function(future, curr) {
      return future.routeConfig === curr.routeConfig;
    };
    return DefaultRouteReuseStrategy;
  }());
  var Router = (function() {
    function Router(rootComponentType, urlSerializer, outletMap, location, injector, loader, compiler, config) {
      this.rootComponentType = rootComponentType;
      this.urlSerializer = urlSerializer;
      this.outletMap = outletMap;
      this.location = location;
      this.injector = injector;
      this.config = config;
      this.navigations = new rxjs_BehaviorSubject.BehaviorSubject(null);
      this.routerEvents = new rxjs_Subject.Subject();
      this.navigationId = 0;
      this.errorHandler = defaultErrorHandler;
      this.navigated = false;
      this.urlHandlingStrategy = new DefaultUrlHandlingStrategy();
      this.routeReuseStrategy = new DefaultRouteReuseStrategy();
      this.resetConfig(config);
      this.currentUrlTree = createEmptyUrlTree();
      this.rawUrlTree = this.currentUrlTree;
      this.configLoader = new RouterConfigLoader(loader, compiler);
      this.currentRouterState = createEmptyState(this.currentUrlTree, this.rootComponentType);
      this.processNavigations();
    }
    Router.prototype.resetRootComponentType = function(rootComponentType) {
      this.rootComponentType = rootComponentType;
      this.currentRouterState.root.component = this.rootComponentType;
    };
    Router.prototype.initialNavigation = function() {
      this.setUpLocationChangeListener();
      this.navigateByUrl(this.location.path(true), {replaceUrl: true});
    };
    Router.prototype.setUpLocationChangeListener = function() {
      var _this = this;
      if (!this.locationSubscription) {
        this.locationSubscription = (this.location.subscribe(Zone.current.wrap(function(change) {
          var rawUrlTree = _this.urlSerializer.parse(change['url']);
          var source = change['type'] === 'popstate' ? 'popstate' : 'hashchange';
          setTimeout(function() {
            _this.scheduleNavigation(rawUrlTree, source, {replaceUrl: true});
          }, 0);
        })));
      }
    };
    Object.defineProperty(Router.prototype, "routerState", {
      get: function() {
        return this.currentRouterState;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Router.prototype, "url", {
      get: function() {
        return this.serializeUrl(this.currentUrlTree);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Router.prototype, "events", {
      get: function() {
        return this.routerEvents;
      },
      enumerable: true,
      configurable: true
    });
    Router.prototype.resetConfig = function(config) {
      validateConfig(config);
      this.config = config;
    };
    Router.prototype.ngOnDestroy = function() {
      this.dispose();
    };
    Router.prototype.dispose = function() {
      if (this.locationSubscription) {
        this.locationSubscription.unsubscribe();
        this.locationSubscription = null;
      }
    };
    Router.prototype.createUrlTree = function(commands, _a) {
      var _b = _a === void 0 ? {} : _a,
          relativeTo = _b.relativeTo,
          queryParams = _b.queryParams,
          fragment = _b.fragment,
          preserveQueryParams = _b.preserveQueryParams,
          preserveFragment = _b.preserveFragment;
      var a = relativeTo || this.routerState.root;
      var q = preserveQueryParams ? this.currentUrlTree.queryParams : queryParams;
      var f = preserveFragment ? this.currentUrlTree.fragment : fragment;
      return createUrlTree(a, this.currentUrlTree, commands, q, f);
    };
    Router.prototype.navigateByUrl = function(url, extras) {
      if (extras === void 0) {
        extras = {skipLocationChange: false};
      }
      if (url instanceof UrlTree) {
        return this.scheduleNavigation(this.urlHandlingStrategy.merge(url, this.rawUrlTree), 'imperative', extras);
      }
      var urlTree = this.urlSerializer.parse(url);
      return this.scheduleNavigation(this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree), 'imperative', extras);
    };
    Router.prototype.navigate = function(commands, extras) {
      if (extras === void 0) {
        extras = {skipLocationChange: false};
      }
      if (typeof extras.queryParams === 'object' && extras.queryParams !== null) {
        extras.queryParams = this.removeEmptyProps(extras.queryParams);
      }
      return this.navigateByUrl(this.createUrlTree(commands, extras), extras);
    };
    Router.prototype.serializeUrl = function(url) {
      return this.urlSerializer.serialize(url);
    };
    Router.prototype.parseUrl = function(url) {
      return this.urlSerializer.parse(url);
    };
    Router.prototype.isActive = function(url, exact) {
      if (url instanceof UrlTree) {
        return containsTree(this.currentUrlTree, url, exact);
      } else {
        var urlTree = this.urlSerializer.parse(url);
        return containsTree(this.currentUrlTree, urlTree, exact);
      }
    };
    Router.prototype.removeEmptyProps = function(params) {
      return Object.keys(params).reduce(function(result, key) {
        var value = params[key];
        if (value !== null && value !== undefined) {
          result[key] = value;
        }
        return result;
      }, {});
    };
    Router.prototype.processNavigations = function() {
      var _this = this;
      rxjs_operator_concatMap.concatMap.call(this.navigations, function(nav) {
        if (nav) {
          _this.executeScheduledNavigation(nav);
          return nav.promise.catch(function() {});
        } else {
          return (rxjs_observable_of.of(null));
        }
      }).subscribe(function() {});
    };
    Router.prototype.scheduleNavigation = function(rawUrl, source, extras) {
      var lastNavigation = this.navigations.value;
      if (lastNavigation && source !== 'imperative' && lastNavigation.source === 'imperative' && lastNavigation.rawUrl.toString() === rawUrl.toString()) {
        return null;
      }
      if (lastNavigation && source == 'hashchange' && lastNavigation.source === 'popstate' && lastNavigation.rawUrl.toString() === rawUrl.toString()) {
        return null;
      }
      var resolve = null;
      var reject = null;
      var promise = new Promise(function(res, rej) {
        resolve = res;
        reject = rej;
      });
      var id = ++this.navigationId;
      this.navigations.next({
        id: id,
        source: source,
        rawUrl: rawUrl,
        extras: extras,
        resolve: resolve,
        reject: reject,
        promise: promise
      });
      return promise.catch(function(e) {
        return Promise.reject(e);
      });
    };
    Router.prototype.executeScheduledNavigation = function(_a) {
      var _this = this;
      var id = _a.id,
          rawUrl = _a.rawUrl,
          extras = _a.extras,
          resolve = _a.resolve,
          reject = _a.reject;
      var url = this.urlHandlingStrategy.extract(rawUrl);
      var urlTransition = !this.navigated || url.toString() !== this.currentUrlTree.toString();
      if (urlTransition && this.urlHandlingStrategy.shouldProcessUrl(rawUrl)) {
        this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url)));
        Promise.resolve().then(function(_) {
          return _this.runNavigate(url, rawUrl, extras.skipLocationChange, extras.replaceUrl, id, null);
        }).then(resolve, reject);
      } else if (urlTransition && this.rawUrlTree && this.urlHandlingStrategy.shouldProcessUrl(this.rawUrlTree)) {
        this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url)));
        Promise.resolve().then(function(_) {
          return _this.runNavigate(url, rawUrl, false, false, id, createEmptyState(url, _this.rootComponentType).snapshot);
        }).then(resolve, reject);
      } else {
        this.rawUrlTree = rawUrl;
        resolve(null);
      }
    };
    Router.prototype.runNavigate = function(url, rawUrl, shouldPreventPushState, shouldReplaceUrl, id, precreatedState) {
      var _this = this;
      if (id !== this.navigationId) {
        this.location.go(this.urlSerializer.serialize(this.currentUrlTree));
        this.routerEvents.next(new NavigationCancel(id, this.serializeUrl(url), "Navigation ID " + id + " is not equal to the current navigation id " + this.navigationId));
        return Promise.resolve(false);
      }
      return new Promise(function(resolvePromise, rejectPromise) {
        var urlAndSnapshot$;
        if (!precreatedState) {
          var redirectsApplied$ = applyRedirects(_this.injector, _this.configLoader, _this.urlSerializer, url, _this.config);
          urlAndSnapshot$ = rxjs_operator_mergeMap.mergeMap.call(redirectsApplied$, function(appliedUrl) {
            return rxjs_operator_map.map.call(recognize(_this.rootComponentType, _this.config, appliedUrl, _this.serializeUrl(appliedUrl)), function(snapshot) {
              _this.routerEvents.next(new RoutesRecognized(id, _this.serializeUrl(url), _this.serializeUrl(appliedUrl), snapshot));
              return {
                appliedUrl: appliedUrl,
                snapshot: snapshot
              };
            });
          });
        } else {
          urlAndSnapshot$ = rxjs_observable_of.of({
            appliedUrl: url,
            snapshot: precreatedState
          });
        }
        var preActivation;
        var preactivationTraverse$ = rxjs_operator_map.map.call(urlAndSnapshot$, function(_a) {
          var appliedUrl = _a.appliedUrl,
              snapshot = _a.snapshot;
          preActivation = new PreActivation(snapshot, _this.currentRouterState.snapshot, _this.injector);
          preActivation.traverse(_this.outletMap);
          return {
            appliedUrl: appliedUrl,
            snapshot: snapshot
          };
        });
        var preactivationCheckGuards = rxjs_operator_mergeMap.mergeMap.call(preactivationTraverse$, function(_a) {
          var appliedUrl = _a.appliedUrl,
              snapshot = _a.snapshot;
          if (_this.navigationId !== id)
            return rxjs_observable_of.of(false);
          return rxjs_operator_map.map.call(preActivation.checkGuards(), function(shouldActivate) {
            return {
              appliedUrl: appliedUrl,
              snapshot: snapshot,
              shouldActivate: shouldActivate
            };
          });
        });
        var preactivationResolveData$ = rxjs_operator_mergeMap.mergeMap.call(preactivationCheckGuards, function(p) {
          if (_this.navigationId !== id)
            return rxjs_observable_of.of(false);
          if (p.shouldActivate) {
            return rxjs_operator_map.map.call(preActivation.resolveData(), function() {
              return p;
            });
          } else {
            return rxjs_observable_of.of(p);
          }
        });
        var routerState$ = rxjs_operator_map.map.call(preactivationResolveData$, function(_a) {
          var appliedUrl = _a.appliedUrl,
              snapshot = _a.snapshot,
              shouldActivate = _a.shouldActivate;
          if (shouldActivate) {
            var state = createRouterState(_this.routeReuseStrategy, snapshot, _this.currentRouterState);
            return {
              appliedUrl: appliedUrl,
              state: state,
              shouldActivate: shouldActivate
            };
          } else {
            return {
              appliedUrl: appliedUrl,
              state: null,
              shouldActivate: shouldActivate
            };
          }
        });
        var navigationIsSuccessful;
        var storedState = _this.currentRouterState;
        var storedUrl = _this.currentUrlTree;
        routerState$.forEach(function(_a) {
          var appliedUrl = _a.appliedUrl,
              state = _a.state,
              shouldActivate = _a.shouldActivate;
          if (!shouldActivate || id !== _this.navigationId) {
            navigationIsSuccessful = false;
            return;
          }
          _this.currentUrlTree = appliedUrl;
          _this.rawUrlTree = _this.urlHandlingStrategy.merge(_this.currentUrlTree, rawUrl);
          _this.currentRouterState = state;
          if (!shouldPreventPushState) {
            var path = _this.urlSerializer.serialize(_this.rawUrlTree);
            if (_this.location.isCurrentPathEqualTo(path) || shouldReplaceUrl) {
              _this.location.replaceState(path);
            } else {
              _this.location.go(path);
            }
          }
          new ActivateRoutes(_this.routeReuseStrategy, state, storedState).activate(_this.outletMap);
          navigationIsSuccessful = true;
        }).then(function() {
          _this.navigated = true;
          if (navigationIsSuccessful) {
            _this.routerEvents.next(new NavigationEnd(id, _this.serializeUrl(url), _this.serializeUrl(_this.currentUrlTree)));
            resolvePromise(true);
          } else {
            _this.resetUrlToCurrentUrlTree();
            _this.routerEvents.next(new NavigationCancel(id, _this.serializeUrl(url), ''));
            resolvePromise(false);
          }
        }, function(e) {
          if (e instanceof NavigationCancelingError) {
            _this.resetUrlToCurrentUrlTree();
            _this.navigated = true;
            _this.routerEvents.next(new NavigationCancel(id, _this.serializeUrl(url), e.message));
            resolvePromise(false);
          } else {
            _this.routerEvents.next(new NavigationError(id, _this.serializeUrl(url), e));
            try {
              resolvePromise(_this.errorHandler(e));
            } catch (ee) {
              rejectPromise(ee);
            }
          }
          _this.currentRouterState = storedState;
          _this.currentUrlTree = storedUrl;
          _this.rawUrlTree = _this.urlHandlingStrategy.merge(_this.currentUrlTree, rawUrl);
          _this.location.replaceState(_this.serializeUrl(_this.rawUrlTree));
        });
      });
    };
    Router.prototype.resetUrlToCurrentUrlTree = function() {
      var path = this.urlSerializer.serialize(this.rawUrlTree);
      this.location.replaceState(path);
    };
    return Router;
  }());
  var CanActivate = (function() {
    function CanActivate(path) {
      this.path = path;
    }
    Object.defineProperty(CanActivate.prototype, "route", {
      get: function() {
        return this.path[this.path.length - 1];
      },
      enumerable: true,
      configurable: true
    });
    return CanActivate;
  }());
  var CanDeactivate = (function() {
    function CanDeactivate(component, route) {
      this.component = component;
      this.route = route;
    }
    return CanDeactivate;
  }());
  var PreActivation = (function() {
    function PreActivation(future, curr, injector) {
      this.future = future;
      this.curr = curr;
      this.injector = injector;
      this.checks = [];
    }
    PreActivation.prototype.traverse = function(parentOutletMap) {
      var futureRoot = this.future._root;
      var currRoot = this.curr ? this.curr._root : null;
      this.traverseChildRoutes(futureRoot, currRoot, parentOutletMap, [futureRoot.value]);
    };
    PreActivation.prototype.checkGuards = function() {
      var _this = this;
      if (this.checks.length === 0)
        return rxjs_observable_of.of(true);
      var checks$ = rxjs_observable_from.from(this.checks);
      var runningChecks$ = rxjs_operator_mergeMap.mergeMap.call(checks$, function(s) {
        if (s instanceof CanActivate) {
          return andObservables(rxjs_observable_from.from([_this.runCanActivateChild(s.path), _this.runCanActivate(s.route)]));
        } else if (s instanceof CanDeactivate) {
          var s2 = (s);
          return _this.runCanDeactivate(s2.component, s2.route);
        } else {
          throw new Error('Cannot be reached');
        }
      });
      return rxjs_operator_every.every.call(runningChecks$, function(result) {
        return result === true;
      });
    };
    PreActivation.prototype.resolveData = function() {
      var _this = this;
      if (this.checks.length === 0)
        return rxjs_observable_of.of(null);
      var checks$ = rxjs_observable_from.from(this.checks);
      var runningChecks$ = rxjs_operator_concatMap.concatMap.call(checks$, function(s) {
        if (s instanceof CanActivate) {
          return _this.runResolve(s.route);
        } else {
          return rxjs_observable_of.of(null);
        }
      });
      return rxjs_operator_reduce.reduce.call(runningChecks$, function(_, __) {
        return _;
      });
    };
    PreActivation.prototype.traverseChildRoutes = function(futureNode, currNode, outletMap, futurePath) {
      var _this = this;
      var prevChildren = nodeChildrenAsMap(currNode);
      futureNode.children.forEach(function(c) {
        _this.traverseRoutes(c, prevChildren[c.value.outlet], outletMap, futurePath.concat([c.value]));
        delete prevChildren[c.value.outlet];
      });
      forEach(prevChildren, function(v, k) {
        return _this.deactiveRouteAndItsChildren(v, outletMap._outlets[k]);
      });
    };
    PreActivation.prototype.traverseRoutes = function(futureNode, currNode, parentOutletMap, futurePath) {
      var future = futureNode.value;
      var curr = currNode ? currNode.value : null;
      var outlet = parentOutletMap ? parentOutletMap._outlets[futureNode.value.outlet] : null;
      if (curr && future._routeConfig === curr._routeConfig) {
        if (!equalParamsAndUrlSegments(future, curr)) {
          this.checks.push(new CanDeactivate(outlet.component, curr), new CanActivate(futurePath));
        } else {
          future.data = curr.data;
          future._resolvedData = curr._resolvedData;
        }
        if (future.component) {
          this.traverseChildRoutes(futureNode, currNode, outlet ? outlet.outletMap : null, futurePath);
        } else {
          this.traverseChildRoutes(futureNode, currNode, parentOutletMap, futurePath);
        }
      } else {
        if (curr) {
          this.deactiveRouteAndItsChildren(currNode, outlet);
        }
        this.checks.push(new CanActivate(futurePath));
        if (future.component) {
          this.traverseChildRoutes(futureNode, null, outlet ? outlet.outletMap : null, futurePath);
        } else {
          this.traverseChildRoutes(futureNode, null, parentOutletMap, futurePath);
        }
      }
    };
    PreActivation.prototype.deactiveRouteAndItsChildren = function(route, outlet) {
      var _this = this;
      var prevChildren = nodeChildrenAsMap(route);
      var r = route.value;
      forEach(prevChildren, function(v, k) {
        if (!r.component) {
          _this.deactiveRouteAndItsChildren(v, outlet);
        } else if (!!outlet) {
          _this.deactiveRouteAndItsChildren(v, outlet.outletMap._outlets[k]);
        } else {
          _this.deactiveRouteAndItsChildren(v, null);
        }
      });
      if (!r.component) {
        this.checks.push(new CanDeactivate(null, r));
      } else if (outlet && outlet.isActivated) {
        this.checks.push(new CanDeactivate(outlet.component, r));
      } else {
        this.checks.push(new CanDeactivate(null, r));
      }
    };
    PreActivation.prototype.runCanActivate = function(future) {
      var _this = this;
      var canActivate = future._routeConfig ? future._routeConfig.canActivate : null;
      if (!canActivate || canActivate.length === 0)
        return rxjs_observable_of.of(true);
      var obs = rxjs_operator_map.map.call(rxjs_observable_from.from(canActivate), function(c) {
        var guard = _this.getToken(c, future);
        var observable;
        if (guard.canActivate) {
          observable = wrapIntoObservable(guard.canActivate(future, _this.future));
        } else {
          observable = wrapIntoObservable(guard(future, _this.future));
        }
        return rxjs_operator_first.first.call(observable);
      });
      return andObservables(obs);
    };
    PreActivation.prototype.runCanActivateChild = function(path) {
      var _this = this;
      var future = path[path.length - 1];
      var canActivateChildGuards = path.slice(0, path.length - 1).reverse().map(function(p) {
        return _this.extractCanActivateChild(p);
      }).filter(function(_) {
        return _ !== null;
      });
      return andObservables(rxjs_operator_map.map.call(rxjs_observable_from.from(canActivateChildGuards), function(d) {
        var obs = rxjs_operator_map.map.call(rxjs_observable_from.from(d.guards), function(c) {
          var guard = _this.getToken(c, c.node);
          var observable;
          if (guard.canActivateChild) {
            observable = wrapIntoObservable(guard.canActivateChild(future, _this.future));
          } else {
            observable = wrapIntoObservable(guard(future, _this.future));
          }
          return rxjs_operator_first.first.call(observable);
        });
        return andObservables(obs);
      }));
    };
    PreActivation.prototype.extractCanActivateChild = function(p) {
      var canActivateChild = p._routeConfig ? p._routeConfig.canActivateChild : null;
      if (!canActivateChild || canActivateChild.length === 0)
        return null;
      return {
        node: p,
        guards: canActivateChild
      };
    };
    PreActivation.prototype.runCanDeactivate = function(component, curr) {
      var _this = this;
      var canDeactivate = curr && curr._routeConfig ? curr._routeConfig.canDeactivate : null;
      if (!canDeactivate || canDeactivate.length === 0)
        return rxjs_observable_of.of(true);
      var canDeactivate$ = rxjs_operator_mergeMap.mergeMap.call(rxjs_observable_from.from(canDeactivate), function(c) {
        var guard = _this.getToken(c, curr);
        var observable;
        if (guard.canDeactivate) {
          observable = wrapIntoObservable(guard.canDeactivate(component, curr, _this.curr));
        } else {
          observable = wrapIntoObservable(guard(component, curr, _this.curr));
        }
        return rxjs_operator_first.first.call(observable);
      });
      return rxjs_operator_every.every.call(canDeactivate$, function(result) {
        return result === true;
      });
    };
    PreActivation.prototype.runResolve = function(future) {
      var resolve = future._resolve;
      return rxjs_operator_map.map.call(this.resolveNode(resolve, future), function(resolvedData) {
        future._resolvedData = resolvedData;
        future.data = merge(future.data, inheritedParamsDataResolve(future).resolve);
        return null;
      });
    };
    PreActivation.prototype.resolveNode = function(resolve, future) {
      var _this = this;
      return waitForMap(resolve, function(k, v) {
        var resolver = _this.getToken(v, future);
        return resolver.resolve ? wrapIntoObservable(resolver.resolve(future, _this.future)) : wrapIntoObservable(resolver(future, _this.future));
      });
    };
    PreActivation.prototype.getToken = function(token, snapshot) {
      var config = closestLoadedConfig(snapshot);
      var injector = config ? config.injector : this.injector;
      return injector.get(token);
    };
    return PreActivation;
  }());
  var ActivateRoutes = (function() {
    function ActivateRoutes(routeReuseStrategy, futureState, currState) {
      this.routeReuseStrategy = routeReuseStrategy;
      this.futureState = futureState;
      this.currState = currState;
    }
    ActivateRoutes.prototype.activate = function(parentOutletMap) {
      var futureRoot = this.futureState._root;
      var currRoot = this.currState ? this.currState._root : null;
      this.deactivateChildRoutes(futureRoot, currRoot, parentOutletMap);
      advanceActivatedRoute(this.futureState.root);
      this.activateChildRoutes(futureRoot, currRoot, parentOutletMap);
    };
    ActivateRoutes.prototype.deactivateChildRoutes = function(futureNode, currNode, outletMap) {
      var _this = this;
      var prevChildren = nodeChildrenAsMap(currNode);
      futureNode.children.forEach(function(c) {
        _this.deactivateRoutes(c, prevChildren[c.value.outlet], outletMap);
        delete prevChildren[c.value.outlet];
      });
      forEach(prevChildren, function(v, k) {
        return _this.deactiveRouteAndItsChildren(v, outletMap);
      });
    };
    ActivateRoutes.prototype.activateChildRoutes = function(futureNode, currNode, outletMap) {
      var _this = this;
      var prevChildren = nodeChildrenAsMap(currNode);
      futureNode.children.forEach(function(c) {
        _this.activateRoutes(c, prevChildren[c.value.outlet], outletMap);
      });
    };
    ActivateRoutes.prototype.deactivateRoutes = function(futureNode, currNode, parentOutletMap) {
      var future = futureNode.value;
      var curr = currNode ? currNode.value : null;
      if (future === curr) {
        if (future.component) {
          var outlet = getOutlet(parentOutletMap, future);
          this.deactivateChildRoutes(futureNode, currNode, outlet.outletMap);
        } else {
          this.deactivateChildRoutes(futureNode, currNode, parentOutletMap);
        }
      } else {
        if (curr) {
          this.deactiveRouteAndItsChildren(currNode, parentOutletMap);
        }
      }
    };
    ActivateRoutes.prototype.activateRoutes = function(futureNode, currNode, parentOutletMap) {
      var future = futureNode.value;
      var curr = currNode ? currNode.value : null;
      if (future === curr) {
        advanceActivatedRoute(future);
        if (future.component) {
          var outlet = getOutlet(parentOutletMap, future);
          this.activateChildRoutes(futureNode, currNode, outlet.outletMap);
        } else {
          this.activateChildRoutes(futureNode, currNode, parentOutletMap);
        }
      } else {
        if (future.component) {
          advanceActivatedRoute(future);
          var outlet = getOutlet(parentOutletMap, futureNode.value);
          if (this.routeReuseStrategy.shouldAttach(future.snapshot)) {
            var stored = ((this.routeReuseStrategy.retrieve(future.snapshot)));
            this.routeReuseStrategy.store(future.snapshot, null);
            outlet.attach(stored.componentRef, stored.route.value);
            advanceActivatedRouteNodeAndItsChildren(stored.route);
          } else {
            var outletMap = new RouterOutletMap();
            this.placeComponentIntoOutlet(outletMap, future, outlet);
            this.activateChildRoutes(futureNode, null, outletMap);
          }
        } else {
          advanceActivatedRoute(future);
          this.activateChildRoutes(futureNode, null, parentOutletMap);
        }
      }
    };
    ActivateRoutes.prototype.placeComponentIntoOutlet = function(outletMap, future, outlet) {
      var resolved = ([{
        provide: ActivatedRoute,
        useValue: future
      }, {
        provide: RouterOutletMap,
        useValue: outletMap
      }]);
      var config = parentLoadedConfig(future.snapshot);
      var resolver = null;
      var injector = null;
      if (config) {
        injector = config.injectorFactory(outlet.locationInjector);
        resolver = config.factoryResolver;
        resolved.push({
          provide: _angular_core.ComponentFactoryResolver,
          useValue: resolver
        });
      } else {
        injector = outlet.locationInjector;
        resolver = outlet.locationFactoryResolver;
      }
      outlet.activate(future, resolver, injector, _angular_core.ReflectiveInjector.resolve(resolved), outletMap);
    };
    ActivateRoutes.prototype.deactiveRouteAndItsChildren = function(route, parentOutletMap) {
      if (this.routeReuseStrategy.shouldDetach(route.value.snapshot)) {
        this.detachAndStoreRouteSubtree(route, parentOutletMap);
      } else {
        this.deactiveRouteAndOutlet(route, parentOutletMap);
      }
    };
    ActivateRoutes.prototype.detachAndStoreRouteSubtree = function(route, parentOutletMap) {
      var outlet = getOutlet(parentOutletMap, route.value);
      var componentRef = outlet.detach();
      this.routeReuseStrategy.store(route.value.snapshot, {
        componentRef: componentRef,
        route: route
      });
    };
    ActivateRoutes.prototype.deactiveRouteAndOutlet = function(route, parentOutletMap) {
      var _this = this;
      var prevChildren = nodeChildrenAsMap(route);
      var outlet = null;
      try {
        outlet = getOutlet(parentOutletMap, route.value);
      } catch (e) {
        return;
      }
      var childOutletMap = outlet.outletMap;
      forEach(prevChildren, function(v, k) {
        if (route.value.component) {
          _this.deactiveRouteAndItsChildren(v, childOutletMap);
        } else {
          _this.deactiveRouteAndItsChildren(v, parentOutletMap);
        }
      });
      if (outlet && outlet.isActivated) {
        outlet.deactivate();
      }
    };
    return ActivateRoutes;
  }());
  function advanceActivatedRouteNodeAndItsChildren(node) {
    advanceActivatedRoute(node.value);
    node.children.forEach(advanceActivatedRouteNodeAndItsChildren);
  }
  function parentLoadedConfig(snapshot) {
    var s = snapshot.parent;
    while (s) {
      var c = s._routeConfig;
      if (c && c._loadedConfig)
        return c._loadedConfig;
      if (c && c.component)
        return null;
      s = s.parent;
    }
    return null;
  }
  function closestLoadedConfig(snapshot) {
    if (!snapshot)
      return null;
    var s = snapshot.parent;
    while (s) {
      var c = s._routeConfig;
      if (c && c._loadedConfig)
        return c._loadedConfig;
      s = s.parent;
    }
    return null;
  }
  function nodeChildrenAsMap(node) {
    return node ? node.children.reduce(function(m, c) {
      m[c.value.outlet] = c;
      return m;
    }, {}) : {};
  }
  function getOutlet(outletMap, route) {
    var outlet = outletMap._outlets[route.outlet];
    if (!outlet) {
      var componentName = ((route.component)).name;
      if (route.outlet === PRIMARY_OUTLET) {
        throw new Error("Cannot find primary outlet to load '" + componentName + "'");
      } else {
        throw new Error("Cannot find the outlet " + route.outlet + " to load '" + componentName + "'");
      }
    }
    return outlet;
  }
  var RouterLink = (function() {
    function RouterLink(router, route) {
      this.router = router;
      this.route = route;
      this.commands = [];
    }
    Object.defineProperty(RouterLink.prototype, "routerLink", {
      set: function(commands) {
        if (commands != null) {
          this.commands = Array.isArray(commands) ? commands : [commands];
        } else {
          this.commands = [];
        }
      },
      enumerable: true,
      configurable: true
    });
    RouterLink.prototype.onClick = function() {
      var extras = {
        skipLocationChange: attrBoolValue(this.skipLocationChange),
        replaceUrl: attrBoolValue(this.replaceUrl)
      };
      this.router.navigateByUrl(this.urlTree, extras);
      return true;
    };
    Object.defineProperty(RouterLink.prototype, "urlTree", {
      get: function() {
        return this.router.createUrlTree(this.commands, {
          relativeTo: this.route,
          queryParams: this.queryParams,
          fragment: this.fragment,
          preserveQueryParams: attrBoolValue(this.preserveQueryParams),
          preserveFragment: attrBoolValue(this.preserveFragment)
        });
      },
      enumerable: true,
      configurable: true
    });
    RouterLink.decorators = [{
      type: _angular_core.Directive,
      args: [{selector: ':not(a)[routerLink]'}]
    }];
    RouterLink.ctorParameters = function() {
      return [{type: Router}, {type: ActivatedRoute}];
    };
    RouterLink.propDecorators = {
      'queryParams': [{type: _angular_core.Input}],
      'fragment': [{type: _angular_core.Input}],
      'preserveQueryParams': [{type: _angular_core.Input}],
      'preserveFragment': [{type: _angular_core.Input}],
      'skipLocationChange': [{type: _angular_core.Input}],
      'replaceUrl': [{type: _angular_core.Input}],
      'routerLink': [{type: _angular_core.Input}],
      'onClick': [{
        type: _angular_core.HostListener,
        args: ['click']
      }]
    };
    return RouterLink;
  }());
  var RouterLinkWithHref = (function() {
    function RouterLinkWithHref(router, route, locationStrategy) {
      var _this = this;
      this.router = router;
      this.route = route;
      this.locationStrategy = locationStrategy;
      this.commands = [];
      this.subscription = router.events.subscribe(function(s) {
        if (s instanceof NavigationEnd) {
          _this.updateTargetUrlAndHref();
        }
      });
    }
    Object.defineProperty(RouterLinkWithHref.prototype, "routerLink", {
      set: function(commands) {
        if (commands != null) {
          this.commands = Array.isArray(commands) ? commands : [commands];
        } else {
          this.commands = [];
        }
      },
      enumerable: true,
      configurable: true
    });
    RouterLinkWithHref.prototype.ngOnChanges = function(changes) {
      this.updateTargetUrlAndHref();
    };
    RouterLinkWithHref.prototype.ngOnDestroy = function() {
      this.subscription.unsubscribe();
    };
    RouterLinkWithHref.prototype.onClick = function(button, ctrlKey, metaKey) {
      if (button !== 0 || ctrlKey || metaKey) {
        return true;
      }
      if (typeof this.target === 'string' && this.target != '_self') {
        return true;
      }
      var extras = {
        skipLocationChange: attrBoolValue(this.skipLocationChange),
        replaceUrl: attrBoolValue(this.replaceUrl)
      };
      this.router.navigateByUrl(this.urlTree, extras);
      return false;
    };
    RouterLinkWithHref.prototype.updateTargetUrlAndHref = function() {
      this.href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree));
    };
    Object.defineProperty(RouterLinkWithHref.prototype, "urlTree", {
      get: function() {
        return this.router.createUrlTree(this.commands, {
          relativeTo: this.route,
          queryParams: this.queryParams,
          fragment: this.fragment,
          preserveQueryParams: attrBoolValue(this.preserveQueryParams),
          preserveFragment: attrBoolValue(this.preserveFragment)
        });
      },
      enumerable: true,
      configurable: true
    });
    RouterLinkWithHref.decorators = [{
      type: _angular_core.Directive,
      args: [{selector: 'a[routerLink]'}]
    }];
    RouterLinkWithHref.ctorParameters = function() {
      return [{type: Router}, {type: ActivatedRoute}, {type: _angular_common.LocationStrategy}];
    };
    RouterLinkWithHref.propDecorators = {
      'target': [{type: _angular_core.Input}],
      'queryParams': [{type: _angular_core.Input}],
      'fragment': [{type: _angular_core.Input}],
      'preserveQueryParams': [{type: _angular_core.Input}],
      'preserveFragment': [{type: _angular_core.Input}],
      'skipLocationChange': [{type: _angular_core.Input}],
      'replaceUrl': [{type: _angular_core.Input}],
      'href': [{type: _angular_core.HostBinding}],
      'routerLink': [{type: _angular_core.Input}],
      'onClick': [{
        type: _angular_core.HostListener,
        args: ['click', ['$event.button', '$event.ctrlKey', '$event.metaKey']]
      }]
    };
    return RouterLinkWithHref;
  }());
  function attrBoolValue(s) {
    return s === '' || !!s;
  }
  var RouterLinkActive = (function() {
    function RouterLinkActive(router, element, renderer) {
      var _this = this;
      this.router = router;
      this.element = element;
      this.renderer = renderer;
      this.classes = [];
      this.routerLinkActiveOptions = {exact: false};
      this.subscription = router.events.subscribe(function(s) {
        if (s instanceof NavigationEnd) {
          _this.update();
        }
      });
    }
    Object.defineProperty(RouterLinkActive.prototype, "isActive", {
      get: function() {
        return this.hasActiveLink();
      },
      enumerable: true,
      configurable: true
    });
    RouterLinkActive.prototype.ngAfterContentInit = function() {
      var _this = this;
      this.links.changes.subscribe(function(s) {
        return _this.update();
      });
      this.linksWithHrefs.changes.subscribe(function(s) {
        return _this.update();
      });
      this.update();
    };
    Object.defineProperty(RouterLinkActive.prototype, "routerLinkActive", {
      set: function(data) {
        if (Array.isArray(data)) {
          this.classes = (data);
        } else {
          this.classes = data.split(' ');
        }
      },
      enumerable: true,
      configurable: true
    });
    RouterLinkActive.prototype.ngOnChanges = function(changes) {
      this.update();
    };
    RouterLinkActive.prototype.ngOnDestroy = function() {
      this.subscription.unsubscribe();
    };
    RouterLinkActive.prototype.update = function() {
      var _this = this;
      if (!this.links || !this.linksWithHrefs || !this.router.navigated)
        return;
      var isActive = this.hasActiveLink();
      this.classes.forEach(function(c) {
        if (c) {
          _this.renderer.setElementClass(_this.element.nativeElement, c, isActive);
        }
      });
    };
    RouterLinkActive.prototype.isLinkActive = function(router) {
      var _this = this;
      return function(link) {
        return router.isActive(link.urlTree, _this.routerLinkActiveOptions.exact);
      };
    };
    RouterLinkActive.prototype.hasActiveLink = function() {
      return this.links.some(this.isLinkActive(this.router)) || this.linksWithHrefs.some(this.isLinkActive(this.router));
    };
    RouterLinkActive.decorators = [{
      type: _angular_core.Directive,
      args: [{
        selector: '[routerLinkActive]',
        exportAs: 'routerLinkActive'
      }]
    }];
    RouterLinkActive.ctorParameters = function() {
      return [{type: Router}, {type: _angular_core.ElementRef}, {type: _angular_core.Renderer}];
    };
    RouterLinkActive.propDecorators = {
      'links': [{
        type: _angular_core.ContentChildren,
        args: [RouterLink, {descendants: true}]
      }],
      'linksWithHrefs': [{
        type: _angular_core.ContentChildren,
        args: [RouterLinkWithHref, {descendants: true}]
      }],
      'routerLinkActiveOptions': [{type: _angular_core.Input}],
      'routerLinkActive': [{type: _angular_core.Input}]
    };
    return RouterLinkActive;
  }());
  var RouterOutlet = (function() {
    function RouterOutlet(parentOutletMap, location, resolver, name) {
      this.parentOutletMap = parentOutletMap;
      this.location = location;
      this.resolver = resolver;
      this.name = name;
      this.activateEvents = new _angular_core.EventEmitter();
      this.deactivateEvents = new _angular_core.EventEmitter();
      parentOutletMap.registerOutlet(name ? name : PRIMARY_OUTLET, this);
    }
    RouterOutlet.prototype.ngOnDestroy = function() {
      this.parentOutletMap.removeOutlet(this.name ? this.name : PRIMARY_OUTLET);
    };
    Object.defineProperty(RouterOutlet.prototype, "locationInjector", {
      get: function() {
        return this.location.injector;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(RouterOutlet.prototype, "locationFactoryResolver", {
      get: function() {
        return this.resolver;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(RouterOutlet.prototype, "isActivated", {
      get: function() {
        return !!this.activated;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(RouterOutlet.prototype, "component", {
      get: function() {
        if (!this.activated)
          throw new Error('Outlet is not activated');
        return this.activated.instance;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(RouterOutlet.prototype, "activatedRoute", {
      get: function() {
        if (!this.activated)
          throw new Error('Outlet is not activated');
        return this._activatedRoute;
      },
      enumerable: true,
      configurable: true
    });
    RouterOutlet.prototype.detach = function() {
      if (!this.activated)
        throw new Error('Outlet is not activated');
      this.location.detach();
      var r = this.activated;
      this.activated = null;
      this._activatedRoute = null;
      return r;
    };
    RouterOutlet.prototype.attach = function(ref, activatedRoute) {
      this.activated = ref;
      this._activatedRoute = activatedRoute;
      this.location.insert(ref.hostView);
    };
    RouterOutlet.prototype.deactivate = function() {
      if (this.activated) {
        var c = this.component;
        this.activated.destroy();
        this.activated = null;
        this._activatedRoute = null;
        this.deactivateEvents.emit(c);
      }
    };
    RouterOutlet.prototype.activate = function(activatedRoute, resolver, injector, providers, outletMap) {
      if (this.isActivated) {
        throw new Error('Cannot activate an already activated outlet');
      }
      this.outletMap = outletMap;
      this._activatedRoute = activatedRoute;
      var snapshot = activatedRoute._futureSnapshot;
      var component = (snapshot._routeConfig.component);
      var factory = resolver.resolveComponentFactory(component);
      var inj = _angular_core.ReflectiveInjector.fromResolvedProviders(providers, injector);
      this.activated = this.location.createComponent(factory, this.location.length, inj, []);
      this.activated.changeDetectorRef.detectChanges();
      this.activateEvents.emit(this.activated.instance);
    };
    RouterOutlet.decorators = [{
      type: _angular_core.Directive,
      args: [{selector: 'router-outlet'}]
    }];
    RouterOutlet.ctorParameters = function() {
      return [{type: RouterOutletMap}, {type: _angular_core.ViewContainerRef}, {type: _angular_core.ComponentFactoryResolver}, {
        type: undefined,
        decorators: [{
          type: _angular_core.Attribute,
          args: ['name']
        }]
      }];
    };
    RouterOutlet.propDecorators = {
      'activateEvents': [{
        type: _angular_core.Output,
        args: ['activate']
      }],
      'deactivateEvents': [{
        type: _angular_core.Output,
        args: ['deactivate']
      }]
    };
    return RouterOutlet;
  }());
  var RouteReuseStrategy = (function() {
    function RouteReuseStrategy() {}
    RouteReuseStrategy.prototype.shouldDetach = function(route) {};
    RouteReuseStrategy.prototype.store = function(route, handle) {};
    RouteReuseStrategy.prototype.shouldAttach = function(route) {};
    RouteReuseStrategy.prototype.retrieve = function(route) {};
    RouteReuseStrategy.prototype.shouldReuseRoute = function(future, curr) {};
    return RouteReuseStrategy;
  }());
  var getDOM = _angular_platformBrowser.__platform_browser_private__.getDOM;
  var PreloadingStrategy = (function() {
    function PreloadingStrategy() {}
    PreloadingStrategy.prototype.preload = function(route, fn) {};
    return PreloadingStrategy;
  }());
  var PreloadAllModules = (function() {
    function PreloadAllModules() {}
    PreloadAllModules.prototype.preload = function(route, fn) {
      return rxjs_operator_catch._catch.call(fn(), function() {
        return rxjs_observable_of.of(null);
      });
    };
    return PreloadAllModules;
  }());
  var NoPreloading = (function() {
    function NoPreloading() {}
    NoPreloading.prototype.preload = function(route, fn) {
      return rxjs_observable_of.of(null);
    };
    return NoPreloading;
  }());
  var RouterPreloader = (function() {
    function RouterPreloader(router, moduleLoader, compiler, injector, preloadingStrategy) {
      this.router = router;
      this.injector = injector;
      this.preloadingStrategy = preloadingStrategy;
      this.loader = new RouterConfigLoader(moduleLoader, compiler);
    }
    ;
    RouterPreloader.prototype.setUpPreloading = function() {
      var _this = this;
      var navigations = rxjs_operator_filter.filter.call(this.router.events, function(e) {
        return e instanceof NavigationEnd;
      });
      this.subscription = rxjs_operator_concatMap.concatMap.call(navigations, function() {
        return _this.preload();
      }).subscribe(function(v) {});
    };
    RouterPreloader.prototype.preload = function() {
      return this.processRoutes(this.injector, this.router.config);
    };
    RouterPreloader.prototype.ngOnDestroy = function() {
      this.subscription.unsubscribe();
    };
    RouterPreloader.prototype.processRoutes = function(injector, routes) {
      var res = [];
      for (var _i = 0,
          routes_1 = routes; _i < routes_1.length; _i++) {
        var c = routes_1[_i];
        if (c.loadChildren && !c.canLoad && ((c))._loadedConfig) {
          var childConfig = ((c))._loadedConfig;
          res.push(this.processRoutes(childConfig.injector, childConfig.routes));
        } else if (c.loadChildren && !c.canLoad) {
          res.push(this.preloadConfig(injector, c));
        } else if (c.children) {
          res.push(this.processRoutes(injector, c.children));
        }
      }
      return rxjs_operator_mergeAll.mergeAll.call(rxjs_observable_from.from(res));
    };
    RouterPreloader.prototype.preloadConfig = function(injector, route) {
      var _this = this;
      return this.preloadingStrategy.preload(route, function() {
        var loaded = _this.loader.load(injector, route.loadChildren);
        return rxjs_operator_mergeMap.mergeMap.call(loaded, function(config) {
          var c = route;
          c._loadedConfig = config;
          return _this.processRoutes(config.injector, config.routes);
        });
      });
    };
    RouterPreloader.decorators = [{type: _angular_core.Injectable}];
    RouterPreloader.ctorParameters = function() {
      return [{type: Router}, {type: _angular_core.NgModuleFactoryLoader}, {type: _angular_core.Compiler}, {type: _angular_core.Injector}, {type: PreloadingStrategy}];
    };
    return RouterPreloader;
  }());
  var ROUTER_DIRECTIVES = [RouterOutlet, RouterLink, RouterLinkWithHref, RouterLinkActive];
  var ROUTER_CONFIGURATION = new _angular_core.OpaqueToken('ROUTER_CONFIGURATION');
  var ROUTER_FORROOT_GUARD = new _angular_core.OpaqueToken('ROUTER_FORROOT_GUARD');
  var ROUTER_PROVIDERS = [_angular_common.Location, {
    provide: UrlSerializer,
    useClass: DefaultUrlSerializer
  }, {
    provide: Router,
    useFactory: setupRouter,
    deps: [_angular_core.ApplicationRef, UrlSerializer, RouterOutletMap, _angular_common.Location, _angular_core.Injector, _angular_core.NgModuleFactoryLoader, _angular_core.Compiler, ROUTES, ROUTER_CONFIGURATION, [UrlHandlingStrategy, new _angular_core.Optional()], [RouteReuseStrategy, new _angular_core.Optional()]]
  }, RouterOutletMap, {
    provide: ActivatedRoute,
    useFactory: rootRoute,
    deps: [Router]
  }, {
    provide: _angular_core.NgModuleFactoryLoader,
    useClass: _angular_core.SystemJsNgModuleLoader
  }, RouterPreloader, NoPreloading, PreloadAllModules, {
    provide: ROUTER_CONFIGURATION,
    useValue: {enableTracing: false}
  }];
  function routerNgProbeToken() {
    return new _angular_core.NgProbeToken('Router', Router);
  }
  var RouterModule = (function() {
    function RouterModule(guard) {}
    RouterModule.forRoot = function(routes, config) {
      return {
        ngModule: RouterModule,
        providers: [ROUTER_PROVIDERS, provideRoutes(routes), {
          provide: ROUTER_FORROOT_GUARD,
          useFactory: provideForRootGuard,
          deps: [[Router, new _angular_core.Optional(), new _angular_core.SkipSelf()]]
        }, {
          provide: ROUTER_CONFIGURATION,
          useValue: config ? config : {}
        }, {
          provide: _angular_common.LocationStrategy,
          useFactory: provideLocationStrategy,
          deps: [_angular_common.PlatformLocation, [new _angular_core.Inject(_angular_common.APP_BASE_HREF), new _angular_core.Optional()], ROUTER_CONFIGURATION]
        }, {
          provide: PreloadingStrategy,
          useExisting: config && config.preloadingStrategy ? config.preloadingStrategy : NoPreloading
        }, {
          provide: _angular_core.NgProbeToken,
          multi: true,
          useFactory: routerNgProbeToken
        }, provideRouterInitializer()]
      };
    };
    RouterModule.forChild = function(routes) {
      return {
        ngModule: RouterModule,
        providers: [provideRoutes(routes)]
      };
    };
    RouterModule.decorators = [{
      type: _angular_core.NgModule,
      args: [{
        declarations: ROUTER_DIRECTIVES,
        exports: ROUTER_DIRECTIVES
      }]
    }];
    RouterModule.ctorParameters = function() {
      return [{
        type: undefined,
        decorators: [{type: _angular_core.Optional}, {
          type: _angular_core.Inject,
          args: [ROUTER_FORROOT_GUARD]
        }]
      }];
    };
    return RouterModule;
  }());
  function provideLocationStrategy(platformLocationStrategy, baseHref, options) {
    if (options === void 0) {
      options = {};
    }
    return options.useHash ? new _angular_common.HashLocationStrategy(platformLocationStrategy, baseHref) : new _angular_common.PathLocationStrategy(platformLocationStrategy, baseHref);
  }
  function provideForRootGuard(router) {
    if (router) {
      throw new Error("RouterModule.forRoot() called twice. Lazy loaded modules should use RouterModule.forChild() instead.");
    }
    return 'guarded';
  }
  function provideRoutes(routes) {
    return [{
      provide: _angular_core.ANALYZE_FOR_ENTRY_COMPONENTS,
      multi: true,
      useValue: routes
    }, {
      provide: ROUTES,
      multi: true,
      useValue: routes
    }];
  }
  function setupRouter(ref, urlSerializer, outletMap, location, injector, loader, compiler, config, opts, urlHandlingStrategy, routeReuseStrategy) {
    if (opts === void 0) {
      opts = {};
    }
    var router = new Router(null, urlSerializer, outletMap, location, injector, loader, compiler, flatten(config));
    if (urlHandlingStrategy) {
      router.urlHandlingStrategy = urlHandlingStrategy;
    }
    if (routeReuseStrategy) {
      router.routeReuseStrategy = routeReuseStrategy;
    }
    if (opts.errorHandler) {
      router.errorHandler = opts.errorHandler;
    }
    if (opts.enableTracing) {
      var dom_1 = getDOM();
      router.events.subscribe(function(e) {
        dom_1.logGroup("Router Event: " + ((e.constructor)).name);
        dom_1.log(e.toString());
        dom_1.log(e);
        dom_1.logGroupEnd();
      });
    }
    return router;
  }
  function rootRoute(router) {
    return router.routerState.root;
  }
  function initialRouterNavigation(router, ref, preloader, opts) {
    return function(bootstrappedComponentRef) {
      if (bootstrappedComponentRef !== ref.components[0]) {
        return;
      }
      router.resetRootComponentType(ref.componentTypes[0]);
      preloader.setUpPreloading();
      if (opts.initialNavigation === false) {
        router.setUpLocationChangeListener();
      } else {
        router.initialNavigation();
      }
    };
  }
  var ROUTER_INITIALIZER = new _angular_core.OpaqueToken('Router Initializer');
  function provideRouterInitializer() {
    return [{
      provide: ROUTER_INITIALIZER,
      useFactory: initialRouterNavigation,
      deps: [Router, _angular_core.ApplicationRef, RouterPreloader, ROUTER_CONFIGURATION]
    }, {
      provide: _angular_core.APP_BOOTSTRAP_LISTENER,
      multi: true,
      useExisting: ROUTER_INITIALIZER
    }];
  }
  var VERSION = new _angular_core.Version('3.4.2');
  var __router_private__ = {
    ROUTER_PROVIDERS: ROUTER_PROVIDERS,
    ROUTES: ROUTES,
    flatten: flatten
  };
  exports.RouterLink = RouterLink;
  exports.RouterLinkWithHref = RouterLinkWithHref;
  exports.RouterLinkActive = RouterLinkActive;
  exports.RouterOutlet = RouterOutlet;
  exports.RouteReuseStrategy = RouteReuseStrategy;
  exports.NavigationCancel = NavigationCancel;
  exports.NavigationEnd = NavigationEnd;
  exports.NavigationError = NavigationError;
  exports.NavigationStart = NavigationStart;
  exports.Router = Router;
  exports.RoutesRecognized = RoutesRecognized;
  exports.ROUTER_CONFIGURATION = ROUTER_CONFIGURATION;
  exports.ROUTER_INITIALIZER = ROUTER_INITIALIZER;
  exports.RouterModule = RouterModule;
  exports.provideRoutes = provideRoutes;
  exports.RouterOutletMap = RouterOutletMap;
  exports.NoPreloading = NoPreloading;
  exports.PreloadAllModules = PreloadAllModules;
  exports.PreloadingStrategy = PreloadingStrategy;
  exports.RouterPreloader = RouterPreloader;
  exports.ActivatedRoute = ActivatedRoute;
  exports.ActivatedRouteSnapshot = ActivatedRouteSnapshot;
  exports.RouterState = RouterState;
  exports.RouterStateSnapshot = RouterStateSnapshot;
  exports.PRIMARY_OUTLET = PRIMARY_OUTLET;
  exports.UrlHandlingStrategy = UrlHandlingStrategy;
  exports.DefaultUrlSerializer = DefaultUrlSerializer;
  exports.UrlSegment = UrlSegment;
  exports.UrlSegmentGroup = UrlSegmentGroup;
  exports.UrlSerializer = UrlSerializer;
  exports.UrlTree = UrlTree;
  exports.VERSION = VERSION;
  exports.__router_private__ = __router_private__;
}));

})();
$__System.registerDynamic("App/helpers/formvalidators.js", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function validateEmail(email) {
        var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        return re.test(email);
    }
    exports.validateEmail = validateEmail;
    return module.exports;
});
$__System.registerDynamic("App/user/forgotten-password/forgotten-password.component.js", ["npm:@angular/core/bundles/core.umd.js", "npm:@angular/router/bundles/router.umd.js", "App/services/user-manager.service.js", "App/helpers/formvalidators.js", "npm:ng2-toastr/ng2-toastr.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var router_1 = $__require("npm:@angular/router/bundles/router.umd.js");
    var user_manager_service_1 = $__require("App/services/user-manager.service.js");
    var formvalidators_1 = $__require("App/helpers/formvalidators.js");
    var ng2_toastr_1 = $__require("npm:ng2-toastr/ng2-toastr.js");
    var ForgottenPasswordComponent = function () {
        function ForgottenPasswordComponent(router, userManagerService, toastr) {
            this.router = router;
            this.userManagerService = userManagerService;
            this.toastr = toastr;
            this.validUsername = true;
        }
        ForgottenPasswordComponent.prototype.cancel = function () {
            this.router.navigateByUrl("");
        };
        ForgottenPasswordComponent.prototype.generateNewPassword = function () {
            var _this = this;
            this.checkValidUsername();
            if (this.validUsername) this.loading = true;
            this.userManagerService.generateNewPassword(this.username).subscribe(function (res) {
                _this.loading = false;
                if (res === "success") {
                    _this.router.navigate(["/login/", "newpasswordsuccess"]);
                } else {
                    _this.errorMessage = res;
                }
            });
        };
        ForgottenPasswordComponent.prototype.checkValidUsername = function () {
            this.validUsername = formvalidators_1.validateEmail(this.username);
        };
        return ForgottenPasswordComponent;
    }();
    ForgottenPasswordComponent = __decorate([core_1.Component({
        selector: 'forgotten-password',
        moduleId: module.id,
        templateUrl: 'forgotten-password.component.html',
        styleUrls: ['../user.component.css']
    }), __metadata("design:paramtypes", [router_1.Router, user_manager_service_1.UserManagerService, ng2_toastr_1.ToastsManager])], ForgottenPasswordComponent);
    exports.ForgottenPasswordComponent = ForgottenPasswordComponent;
    return module.exports;
});
$__System.registerDynamic("App/user/create-user/create-user-success.component.js", ["npm:@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var CreateUserSuccessComponent = function () {
        function CreateUserSuccessComponent() {}
        return CreateUserSuccessComponent;
    }();
    CreateUserSuccessComponent = __decorate([core_1.Component({
        selector: 'create-user-success',
        moduleId: module.id,
        templateUrl: 'create-user-success.component.html',
        styleUrls: ['../user.component.css']
    }), __metadata("design:paramtypes", [])], CreateUserSuccessComponent);
    exports.CreateUserSuccessComponent = CreateUserSuccessComponent;
    return module.exports;
});
$__System.registerDynamic("App/custom-pipes/rolename.pipe.js", ["npm:@angular/core/bundles/core.umd.js", "App/resources/app-settings.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var app_settings_1 = $__require("App/resources/app-settings.js");
    var RoleNamePipe = function () {
        function RoleNamePipe() {}
        RoleNamePipe.prototype.transform = function (value) {
            return app_settings_1.roleNames[value];
        };
        return RoleNamePipe;
    }();
    RoleNamePipe = __decorate([core_1.Pipe({ name: 'rolename' }), __metadata("design:paramtypes", [])], RoleNamePipe);
    exports.RoleNamePipe = RoleNamePipe;
    return module.exports;
});
$__System.registerDynamic("App/services/default-request-options.js", ["npm:@angular/core/bundles/core.umd.js", "npm:@angular/http/bundles/http.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var http_1 = $__require("npm:@angular/http/bundles/http.umd.js");
    var DefaultRequestOptions = function (_super) {
        __extends(DefaultRequestOptions, _super);
        function DefaultRequestOptions() {
            var _this = _super.call(this) || this;
            _this.headers.set("Accept", "application/json");
            return _this;
        }
        return DefaultRequestOptions;
    }(http_1.BaseRequestOptions);
    DefaultRequestOptions = __decorate([core_1.Injectable(), __metadata("design:paramtypes", [])], DefaultRequestOptions);
    exports.DefaultRequestOptions = DefaultRequestOptions;
    exports.requestOptionsProvider = { provide: http_1.RequestOptions, useClass: DefaultRequestOptions };
    return module.exports;
});
$__System.registerDynamic("App/custom-pipes/filtergroup.pipe.js", ["npm:@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var FiltergroupPipe = function () {
        function FiltergroupPipe() {}
        FiltergroupPipe.prototype.transform = function (value, beloning) {
            if (value == undefined) {
                return new Array();
            }
            return value.filter(function (f) {
                return f.belongsTo === beloning;
            });
        };
        return FiltergroupPipe;
    }();
    FiltergroupPipe = __decorate([core_1.Pipe({ name: 'filtergroup' }), __metadata("design:paramtypes", [])], FiltergroupPipe);
    exports.FiltergroupPipe = FiltergroupPipe;
    return module.exports;
});
$__System.registerDynamic("App/person/filter/filtertypes/tagfilter/tagfilter.component.js", ["npm:@angular/core/bundles/core.umd.js", "App/models/DataModels.js", "App/services/data-manager.service.js", "App/services/filter-manager.service.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var DataModels_1 = $__require("App/models/DataModels.js");
    var data_manager_service_1 = $__require("App/services/data-manager.service.js");
    var filter_manager_service_1 = $__require("App/services/filter-manager.service.js");
    var TagFilterComponent = function () {
        function TagFilterComponent(dataManagerService, filterManager) {
            this.dataManagerService = dataManagerService;
            this.filterManager = filterManager;
            this.filterManager.activeFilters$.subscribe(function (items) {
                if (items.length === 0) {
                    $('#tagfilter').dropdown("clear");
                }
            });
            this.filterManager.removedFilter$.subscribe(function (item) {
                $("#tagfilter").dropdown("remove selected", item.name);
            });
        }
        TagFilterComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.dataManagerService.tags$.subscribe(function (tags) {
                _this.taglist = tags;
            });
        };
        TagFilterComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            $('#tagfilter').dropdown({
                forceSelection: false,
                onAdd: function (value) {
                    if (!_this.ignore) {
                        _this.changeTagFilter(value, true);
                    }
                },
                onRemove: function (value, text) {
                    if (!_this.ignore) {
                        _this.changeTagFilter(value, false);
                    }
                }
            });
            if (this.group.items.some(function (i) {
                return i.selected;
            })) {
                this.ignore = true;
                $('#tagfilter').dropdown("set selected", this.group.items.filter(function (i) {
                    return i.selected;
                }).map(function (i) {
                    return i.name;
                }));
                this.ignore = false;
            }
        };
        TagFilterComponent.prototype.changeTagFilter = function (name, state) {
            if (!this.group) return;
            var item = this.group.items.find(function (i) {
                return i.name === name;
            });
            if (!item) return;
            item.selected = state;
            this.filterManager.filterChanged([item]);
        };
        return TagFilterComponent;
    }();
    __decorate([core_1.Input(), __metadata("design:type", DataModels_1.FilterGroup)], TagFilterComponent.prototype, "group", void 0);
    TagFilterComponent = __decorate([core_1.Component({
        selector: "tagfilter",
        moduleId: module.id,
        templateUrl: "tagfilter.component.html"
    }), __metadata("design:paramtypes", [data_manager_service_1.DataManagerService, filter_manager_service_1.FilterManagerService])], TagFilterComponent);
    exports.TagFilterComponent = TagFilterComponent;
    return module.exports;
});
$__System.registerDynamic("App/custom-pipes/teamsurveillance.pipe.js", ["npm:@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var TeamFilterPipe = function () {
        function TeamFilterPipe() {}
        TeamFilterPipe.prototype.transform = function (value, team) {
            if (value == undefined) {
                return new Array();
            }
            return value.filter(function (f) {
                return f.latestSurveillanceResults.some(function (res) {
                    return team.indexOf(res.registeredBy) !== -1;
                });
            });
        };
        return TeamFilterPipe;
    }();
    TeamFilterPipe = __decorate([core_1.Pipe({ name: 'teamfilter' }), __metadata("design:paramtypes", [])], TeamFilterPipe);
    exports.TeamFilterPipe = TeamFilterPipe;
    return module.exports;
});
(function() {
var define = $__System.amdDefine;
;
(function(global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define("npm:moment/moment.js", [], factory) : global.moment = factory();
}(this, (function() {
  'use strict';
  var hookCallback;
  function hooks() {
    return hookCallback.apply(null, arguments);
  }
  function setHookCallback(callback) {
    hookCallback = callback;
  }
  function isArray(input) {
    return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
  }
  function isObject(input) {
    return input != null && Object.prototype.toString.call(input) === '[object Object]';
  }
  function isObjectEmpty(obj) {
    var k;
    for (k in obj) {
      return false;
    }
    return true;
  }
  function isNumber(input) {
    return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
  }
  function isDate(input) {
    return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
  }
  function map(arr, fn) {
    var res = [],
        i;
    for (i = 0; i < arr.length; ++i) {
      res.push(fn(arr[i], i));
    }
    return res;
  }
  function hasOwnProp(a, b) {
    return Object.prototype.hasOwnProperty.call(a, b);
  }
  function extend(a, b) {
    for (var i in b) {
      if (hasOwnProp(b, i)) {
        a[i] = b[i];
      }
    }
    if (hasOwnProp(b, 'toString')) {
      a.toString = b.toString;
    }
    if (hasOwnProp(b, 'valueOf')) {
      a.valueOf = b.valueOf;
    }
    return a;
  }
  function createUTC(input, format, locale, strict) {
    return createLocalOrUTC(input, format, locale, strict, true).utc();
  }
  function defaultParsingFlags() {
    return {
      empty: false,
      unusedTokens: [],
      unusedInput: [],
      overflow: -2,
      charsLeftOver: 0,
      nullInput: false,
      invalidMonth: null,
      invalidFormat: false,
      userInvalidated: false,
      iso: false,
      parsedDateParts: [],
      meridiem: null
    };
  }
  function getParsingFlags(m) {
    if (m._pf == null) {
      m._pf = defaultParsingFlags();
    }
    return m._pf;
  }
  var some;
  if (Array.prototype.some) {
    some = Array.prototype.some;
  } else {
    some = function(fun) {
      var t = Object(this);
      var len = t.length >>> 0;
      for (var i = 0; i < len; i++) {
        if (i in t && fun.call(this, t[i], i, t)) {
          return true;
        }
      }
      return false;
    };
  }
  var some$1 = some;
  function isValid(m) {
    if (m._isValid == null) {
      var flags = getParsingFlags(m);
      var parsedParts = some$1.call(flags.parsedDateParts, function(i) {
        return i != null;
      });
      var isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidMonth && !flags.invalidWeekday && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || (flags.meridiem && parsedParts));
      if (m._strict) {
        isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;
      }
      if (Object.isFrozen == null || !Object.isFrozen(m)) {
        m._isValid = isNowValid;
      } else {
        return isNowValid;
      }
    }
    return m._isValid;
  }
  function createInvalid(flags) {
    var m = createUTC(NaN);
    if (flags != null) {
      extend(getParsingFlags(m), flags);
    } else {
      getParsingFlags(m).userInvalidated = true;
    }
    return m;
  }
  function isUndefined(input) {
    return input === void 0;
  }
  var momentProperties = hooks.momentProperties = [];
  function copyConfig(to, from) {
    var i,
        prop,
        val;
    if (!isUndefined(from._isAMomentObject)) {
      to._isAMomentObject = from._isAMomentObject;
    }
    if (!isUndefined(from._i)) {
      to._i = from._i;
    }
    if (!isUndefined(from._f)) {
      to._f = from._f;
    }
    if (!isUndefined(from._l)) {
      to._l = from._l;
    }
    if (!isUndefined(from._strict)) {
      to._strict = from._strict;
    }
    if (!isUndefined(from._tzm)) {
      to._tzm = from._tzm;
    }
    if (!isUndefined(from._isUTC)) {
      to._isUTC = from._isUTC;
    }
    if (!isUndefined(from._offset)) {
      to._offset = from._offset;
    }
    if (!isUndefined(from._pf)) {
      to._pf = getParsingFlags(from);
    }
    if (!isUndefined(from._locale)) {
      to._locale = from._locale;
    }
    if (momentProperties.length > 0) {
      for (i in momentProperties) {
        prop = momentProperties[i];
        val = from[prop];
        if (!isUndefined(val)) {
          to[prop] = val;
        }
      }
    }
    return to;
  }
  var updateInProgress = false;
  function Moment(config) {
    copyConfig(this, config);
    this._d = new Date(config._d != null ? config._d.getTime() : NaN);
    if (!this.isValid()) {
      this._d = new Date(NaN);
    }
    if (updateInProgress === false) {
      updateInProgress = true;
      hooks.updateOffset(this);
      updateInProgress = false;
    }
  }
  function isMoment(obj) {
    return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
  }
  function absFloor(number) {
    if (number < 0) {
      return Math.ceil(number) || 0;
    } else {
      return Math.floor(number);
    }
  }
  function toInt(argumentForCoercion) {
    var coercedNumber = +argumentForCoercion,
        value = 0;
    if (coercedNumber !== 0 && isFinite(coercedNumber)) {
      value = absFloor(coercedNumber);
    }
    return value;
  }
  function compareArrays(array1, array2, dontConvert) {
    var len = Math.min(array1.length, array2.length),
        lengthDiff = Math.abs(array1.length - array2.length),
        diffs = 0,
        i;
    for (i = 0; i < len; i++) {
      if ((dontConvert && array1[i] !== array2[i]) || (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
        diffs++;
      }
    }
    return diffs + lengthDiff;
  }
  function warn(msg) {
    if (hooks.suppressDeprecationWarnings === false && (typeof console !== 'undefined') && console.warn) {
      console.warn('Deprecation warning: ' + msg);
    }
  }
  function deprecate(msg, fn) {
    var firstTime = true;
    return extend(function() {
      if (hooks.deprecationHandler != null) {
        hooks.deprecationHandler(null, msg);
      }
      if (firstTime) {
        var args = [];
        var arg;
        for (var i = 0; i < arguments.length; i++) {
          arg = '';
          if (typeof arguments[i] === 'object') {
            arg += '\n[' + i + '] ';
            for (var key in arguments[0]) {
              arg += key + ': ' + arguments[0][key] + ', ';
            }
            arg = arg.slice(0, -2);
          } else {
            arg = arguments[i];
          }
          args.push(arg);
        }
        warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
        firstTime = false;
      }
      return fn.apply(this, arguments);
    }, fn);
  }
  var deprecations = {};
  function deprecateSimple(name, msg) {
    if (hooks.deprecationHandler != null) {
      hooks.deprecationHandler(name, msg);
    }
    if (!deprecations[name]) {
      warn(msg);
      deprecations[name] = true;
    }
  }
  hooks.suppressDeprecationWarnings = false;
  hooks.deprecationHandler = null;
  function isFunction(input) {
    return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
  }
  function set(config) {
    var prop,
        i;
    for (i in config) {
      prop = config[i];
      if (isFunction(prop)) {
        this[i] = prop;
      } else {
        this['_' + i] = prop;
      }
    }
    this._config = config;
    this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\d{1,2}/).source);
  }
  function mergeConfigs(parentConfig, childConfig) {
    var res = extend({}, parentConfig),
        prop;
    for (prop in childConfig) {
      if (hasOwnProp(childConfig, prop)) {
        if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
          res[prop] = {};
          extend(res[prop], parentConfig[prop]);
          extend(res[prop], childConfig[prop]);
        } else if (childConfig[prop] != null) {
          res[prop] = childConfig[prop];
        } else {
          delete res[prop];
        }
      }
    }
    for (prop in parentConfig) {
      if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
        res[prop] = extend({}, res[prop]);
      }
    }
    return res;
  }
  function Locale(config) {
    if (config != null) {
      this.set(config);
    }
  }
  var keys;
  if (Object.keys) {
    keys = Object.keys;
  } else {
    keys = function(obj) {
      var i,
          res = [];
      for (i in obj) {
        if (hasOwnProp(obj, i)) {
          res.push(i);
        }
      }
      return res;
    };
  }
  var keys$1 = keys;
  var defaultCalendar = {
    sameDay: '[Today at] LT',
    nextDay: '[Tomorrow at] LT',
    nextWeek: 'dddd [at] LT',
    lastDay: '[Yesterday at] LT',
    lastWeek: '[Last] dddd [at] LT',
    sameElse: 'L'
  };
  function calendar(key, mom, now) {
    var output = this._calendar[key] || this._calendar['sameElse'];
    return isFunction(output) ? output.call(mom, now) : output;
  }
  var defaultLongDateFormat = {
    LTS: 'h:mm:ss A',
    LT: 'h:mm A',
    L: 'MM/DD/YYYY',
    LL: 'MMMM D, YYYY',
    LLL: 'MMMM D, YYYY h:mm A',
    LLLL: 'dddd, MMMM D, YYYY h:mm A'
  };
  function longDateFormat(key) {
    var format = this._longDateFormat[key],
        formatUpper = this._longDateFormat[key.toUpperCase()];
    if (format || !formatUpper) {
      return format;
    }
    this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function(val) {
      return val.slice(1);
    });
    return this._longDateFormat[key];
  }
  var defaultInvalidDate = 'Invalid date';
  function invalidDate() {
    return this._invalidDate;
  }
  var defaultOrdinal = '%d';
  var defaultOrdinalParse = /\d{1,2}/;
  function ordinal(number) {
    return this._ordinal.replace('%d', number);
  }
  var defaultRelativeTime = {
    future: 'in %s',
    past: '%s ago',
    s: 'a few seconds',
    m: 'a minute',
    mm: '%d minutes',
    h: 'an hour',
    hh: '%d hours',
    d: 'a day',
    dd: '%d days',
    M: 'a month',
    MM: '%d months',
    y: 'a year',
    yy: '%d years'
  };
  function relativeTime(number, withoutSuffix, string, isFuture) {
    var output = this._relativeTime[string];
    return (isFunction(output)) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
  }
  function pastFuture(diff, output) {
    var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
    return isFunction(format) ? format(output) : format.replace(/%s/i, output);
  }
  var aliases = {};
  function addUnitAlias(unit, shorthand) {
    var lowerCase = unit.toLowerCase();
    aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
  }
  function normalizeUnits(units) {
    return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
  }
  function normalizeObjectUnits(inputObject) {
    var normalizedInput = {},
        normalizedProp,
        prop;
    for (prop in inputObject) {
      if (hasOwnProp(inputObject, prop)) {
        normalizedProp = normalizeUnits(prop);
        if (normalizedProp) {
          normalizedInput[normalizedProp] = inputObject[prop];
        }
      }
    }
    return normalizedInput;
  }
  var priorities = {};
  function addUnitPriority(unit, priority) {
    priorities[unit] = priority;
  }
  function getPrioritizedUnits(unitsObj) {
    var units = [];
    for (var u in unitsObj) {
      units.push({
        unit: u,
        priority: priorities[u]
      });
    }
    units.sort(function(a, b) {
      return a.priority - b.priority;
    });
    return units;
  }
  function makeGetSet(unit, keepTime) {
    return function(value) {
      if (value != null) {
        set$1(this, unit, value);
        hooks.updateOffset(this, keepTime);
        return this;
      } else {
        return get(this, unit);
      }
    };
  }
  function get(mom, unit) {
    return mom.isValid() ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
  }
  function set$1(mom, unit, value) {
    if (mom.isValid()) {
      mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
    }
  }
  function stringGet(units) {
    units = normalizeUnits(units);
    if (isFunction(this[units])) {
      return this[units]();
    }
    return this;
  }
  function stringSet(units, value) {
    if (typeof units === 'object') {
      units = normalizeObjectUnits(units);
      var prioritized = getPrioritizedUnits(units);
      for (var i = 0; i < prioritized.length; i++) {
        this[prioritized[i].unit](units[prioritized[i].unit]);
      }
    } else {
      units = normalizeUnits(units);
      if (isFunction(this[units])) {
        return this[units](value);
      }
    }
    return this;
  }
  function zeroFill(number, targetLength, forceSign) {
    var absNumber = '' + Math.abs(number),
        zerosToFill = targetLength - absNumber.length,
        sign = number >= 0;
    return (sign ? (forceSign ? '+' : '') : '-') + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
  }
  var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;
  var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;
  var formatFunctions = {};
  var formatTokenFunctions = {};
  function addFormatToken(token, padded, ordinal, callback) {
    var func = callback;
    if (typeof callback === 'string') {
      func = function() {
        return this[callback]();
      };
    }
    if (token) {
      formatTokenFunctions[token] = func;
    }
    if (padded) {
      formatTokenFunctions[padded[0]] = function() {
        return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
      };
    }
    if (ordinal) {
      formatTokenFunctions[ordinal] = function() {
        return this.localeData().ordinal(func.apply(this, arguments), token);
      };
    }
  }
  function removeFormattingTokens(input) {
    if (input.match(/\[[\s\S]/)) {
      return input.replace(/^\[|\]$/g, '');
    }
    return input.replace(/\\/g, '');
  }
  function makeFormatFunction(format) {
    var array = format.match(formattingTokens),
        i,
        length;
    for (i = 0, length = array.length; i < length; i++) {
      if (formatTokenFunctions[array[i]]) {
        array[i] = formatTokenFunctions[array[i]];
      } else {
        array[i] = removeFormattingTokens(array[i]);
      }
    }
    return function(mom) {
      var output = '',
          i;
      for (i = 0; i < length; i++) {
        output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
      }
      return output;
    };
  }
  function formatMoment(m, format) {
    if (!m.isValid()) {
      return m.localeData().invalidDate();
    }
    format = expandFormat(format, m.localeData());
    formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
    return formatFunctions[format](m);
  }
  function expandFormat(format, locale) {
    var i = 5;
    function replaceLongDateFormatTokens(input) {
      return locale.longDateFormat(input) || input;
    }
    localFormattingTokens.lastIndex = 0;
    while (i >= 0 && localFormattingTokens.test(format)) {
      format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
      localFormattingTokens.lastIndex = 0;
      i -= 1;
    }
    return format;
  }
  var match1 = /\d/;
  var match2 = /\d\d/;
  var match3 = /\d{3}/;
  var match4 = /\d{4}/;
  var match6 = /[+-]?\d{6}/;
  var match1to2 = /\d\d?/;
  var match3to4 = /\d\d\d\d?/;
  var match5to6 = /\d\d\d\d\d\d?/;
  var match1to3 = /\d{1,3}/;
  var match1to4 = /\d{1,4}/;
  var match1to6 = /[+-]?\d{1,6}/;
  var matchUnsigned = /\d+/;
  var matchSigned = /[+-]?\d+/;
  var matchOffset = /Z|[+-]\d\d:?\d\d/gi;
  var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi;
  var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/;
  var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;
  var regexes = {};
  function addRegexToken(token, regex, strictRegex) {
    regexes[token] = isFunction(regex) ? regex : function(isStrict, localeData) {
      return (isStrict && strictRegex) ? strictRegex : regex;
    };
  }
  function getParseRegexForToken(token, config) {
    if (!hasOwnProp(regexes, token)) {
      return new RegExp(unescapeFormat(token));
    }
    return regexes[token](config._strict, config._locale);
  }
  function unescapeFormat(s) {
    return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function(matched, p1, p2, p3, p4) {
      return p1 || p2 || p3 || p4;
    }));
  }
  function regexEscape(s) {
    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
  }
  var tokens = {};
  function addParseToken(token, callback) {
    var i,
        func = callback;
    if (typeof token === 'string') {
      token = [token];
    }
    if (isNumber(callback)) {
      func = function(input, array) {
        array[callback] = toInt(input);
      };
    }
    for (i = 0; i < token.length; i++) {
      tokens[token[i]] = func;
    }
  }
  function addWeekParseToken(token, callback) {
    addParseToken(token, function(input, array, config, token) {
      config._w = config._w || {};
      callback(input, config._w, config, token);
    });
  }
  function addTimeToArrayFromToken(token, input, config) {
    if (input != null && hasOwnProp(tokens, token)) {
      tokens[token](input, config._a, config, token);
    }
  }
  var YEAR = 0;
  var MONTH = 1;
  var DATE = 2;
  var HOUR = 3;
  var MINUTE = 4;
  var SECOND = 5;
  var MILLISECOND = 6;
  var WEEK = 7;
  var WEEKDAY = 8;
  var indexOf;
  if (Array.prototype.indexOf) {
    indexOf = Array.prototype.indexOf;
  } else {
    indexOf = function(o) {
      var i;
      for (i = 0; i < this.length; ++i) {
        if (this[i] === o) {
          return i;
        }
      }
      return -1;
    };
  }
  var indexOf$1 = indexOf;
  function daysInMonth(year, month) {
    return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
  }
  addFormatToken('M', ['MM', 2], 'Mo', function() {
    return this.month() + 1;
  });
  addFormatToken('MMM', 0, 0, function(format) {
    return this.localeData().monthsShort(this, format);
  });
  addFormatToken('MMMM', 0, 0, function(format) {
    return this.localeData().months(this, format);
  });
  addUnitAlias('month', 'M');
  addUnitPriority('month', 8);
  addRegexToken('M', match1to2);
  addRegexToken('MM', match1to2, match2);
  addRegexToken('MMM', function(isStrict, locale) {
    return locale.monthsShortRegex(isStrict);
  });
  addRegexToken('MMMM', function(isStrict, locale) {
    return locale.monthsRegex(isStrict);
  });
  addParseToken(['M', 'MM'], function(input, array) {
    array[MONTH] = toInt(input) - 1;
  });
  addParseToken(['MMM', 'MMMM'], function(input, array, config, token) {
    var month = config._locale.monthsParse(input, token, config._strict);
    if (month != null) {
      array[MONTH] = month;
    } else {
      getParsingFlags(config).invalidMonth = input;
    }
  });
  var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
  var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
  function localeMonths(m, format) {
    if (!m) {
      return this._months;
    }
    return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
  }
  var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
  function localeMonthsShort(m, format) {
    if (!m) {
      return this._monthsShort;
    }
    return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
  }
  function handleStrictParse(monthName, format, strict) {
    var i,
        ii,
        mom,
        llc = monthName.toLocaleLowerCase();
    if (!this._monthsParse) {
      this._monthsParse = [];
      this._longMonthsParse = [];
      this._shortMonthsParse = [];
      for (i = 0; i < 12; ++i) {
        mom = createUTC([2000, i]);
        this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
        this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
      }
    }
    if (strict) {
      if (format === 'MMM') {
        ii = indexOf$1.call(this._shortMonthsParse, llc);
        return ii !== -1 ? ii : null;
      } else {
        ii = indexOf$1.call(this._longMonthsParse, llc);
        return ii !== -1 ? ii : null;
      }
    } else {
      if (format === 'MMM') {
        ii = indexOf$1.call(this._shortMonthsParse, llc);
        if (ii !== -1) {
          return ii;
        }
        ii = indexOf$1.call(this._longMonthsParse, llc);
        return ii !== -1 ? ii : null;
      } else {
        ii = indexOf$1.call(this._longMonthsParse, llc);
        if (ii !== -1) {
          return ii;
        }
        ii = indexOf$1.call(this._shortMonthsParse, llc);
        return ii !== -1 ? ii : null;
      }
    }
  }
  function localeMonthsParse(monthName, format, strict) {
    var i,
        mom,
        regex;
    if (this._monthsParseExact) {
      return handleStrictParse.call(this, monthName, format, strict);
    }
    if (!this._monthsParse) {
      this._monthsParse = [];
      this._longMonthsParse = [];
      this._shortMonthsParse = [];
    }
    for (i = 0; i < 12; i++) {
      mom = createUTC([2000, i]);
      if (strict && !this._longMonthsParse[i]) {
        this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
        this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
      }
      if (!strict && !this._monthsParse[i]) {
        regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
        this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
      }
      if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
        return i;
      } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
        return i;
      } else if (!strict && this._monthsParse[i].test(monthName)) {
        return i;
      }
    }
  }
  function setMonth(mom, value) {
    var dayOfMonth;
    if (!mom.isValid()) {
      return mom;
    }
    if (typeof value === 'string') {
      if (/^\d+$/.test(value)) {
        value = toInt(value);
      } else {
        value = mom.localeData().monthsParse(value);
        if (!isNumber(value)) {
          return mom;
        }
      }
    }
    dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
    mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
    return mom;
  }
  function getSetMonth(value) {
    if (value != null) {
      setMonth(this, value);
      hooks.updateOffset(this, true);
      return this;
    } else {
      return get(this, 'Month');
    }
  }
  function getDaysInMonth() {
    return daysInMonth(this.year(), this.month());
  }
  var defaultMonthsShortRegex = matchWord;
  function monthsShortRegex(isStrict) {
    if (this._monthsParseExact) {
      if (!hasOwnProp(this, '_monthsRegex')) {
        computeMonthsParse.call(this);
      }
      if (isStrict) {
        return this._monthsShortStrictRegex;
      } else {
        return this._monthsShortRegex;
      }
    } else {
      if (!hasOwnProp(this, '_monthsShortRegex')) {
        this._monthsShortRegex = defaultMonthsShortRegex;
      }
      return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
    }
  }
  var defaultMonthsRegex = matchWord;
  function monthsRegex(isStrict) {
    if (this._monthsParseExact) {
      if (!hasOwnProp(this, '_monthsRegex')) {
        computeMonthsParse.call(this);
      }
      if (isStrict) {
        return this._monthsStrictRegex;
      } else {
        return this._monthsRegex;
      }
    } else {
      if (!hasOwnProp(this, '_monthsRegex')) {
        this._monthsRegex = defaultMonthsRegex;
      }
      return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
    }
  }
  function computeMonthsParse() {
    function cmpLenRev(a, b) {
      return b.length - a.length;
    }
    var shortPieces = [],
        longPieces = [],
        mixedPieces = [],
        i,
        mom;
    for (i = 0; i < 12; i++) {
      mom = createUTC([2000, i]);
      shortPieces.push(this.monthsShort(mom, ''));
      longPieces.push(this.months(mom, ''));
      mixedPieces.push(this.months(mom, ''));
      mixedPieces.push(this.monthsShort(mom, ''));
    }
    shortPieces.sort(cmpLenRev);
    longPieces.sort(cmpLenRev);
    mixedPieces.sort(cmpLenRev);
    for (i = 0; i < 12; i++) {
      shortPieces[i] = regexEscape(shortPieces[i]);
      longPieces[i] = regexEscape(longPieces[i]);
    }
    for (i = 0; i < 24; i++) {
      mixedPieces[i] = regexEscape(mixedPieces[i]);
    }
    this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
    this._monthsShortRegex = this._monthsRegex;
    this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
    this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
  }
  addFormatToken('Y', 0, 0, function() {
    var y = this.year();
    return y <= 9999 ? '' + y : '+' + y;
  });
  addFormatToken(0, ['YY', 2], 0, function() {
    return this.year() % 100;
  });
  addFormatToken(0, ['YYYY', 4], 0, 'year');
  addFormatToken(0, ['YYYYY', 5], 0, 'year');
  addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');
  addUnitAlias('year', 'y');
  addUnitPriority('year', 1);
  addRegexToken('Y', matchSigned);
  addRegexToken('YY', match1to2, match2);
  addRegexToken('YYYY', match1to4, match4);
  addRegexToken('YYYYY', match1to6, match6);
  addRegexToken('YYYYYY', match1to6, match6);
  addParseToken(['YYYYY', 'YYYYYY'], YEAR);
  addParseToken('YYYY', function(input, array) {
    array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
  });
  addParseToken('YY', function(input, array) {
    array[YEAR] = hooks.parseTwoDigitYear(input);
  });
  addParseToken('Y', function(input, array) {
    array[YEAR] = parseInt(input, 10);
  });
  function daysInYear(year) {
    return isLeapYear(year) ? 366 : 365;
  }
  function isLeapYear(year) {
    return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
  }
  hooks.parseTwoDigitYear = function(input) {
    return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
  };
  var getSetYear = makeGetSet('FullYear', true);
  function getIsLeapYear() {
    return isLeapYear(this.year());
  }
  function createDate(y, m, d, h, M, s, ms) {
    var date = new Date(y, m, d, h, M, s, ms);
    if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
      date.setFullYear(y);
    }
    return date;
  }
  function createUTCDate(y) {
    var date = new Date(Date.UTC.apply(null, arguments));
    if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
      date.setUTCFullYear(y);
    }
    return date;
  }
  function firstWeekOffset(year, dow, doy) {
    var fwd = 7 + dow - doy,
        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
    return -fwdlw + fwd - 1;
  }
  function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
    var localWeekday = (7 + weekday - dow) % 7,
        weekOffset = firstWeekOffset(year, dow, doy),
        dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
        resYear,
        resDayOfYear;
    if (dayOfYear <= 0) {
      resYear = year - 1;
      resDayOfYear = daysInYear(resYear) + dayOfYear;
    } else if (dayOfYear > daysInYear(year)) {
      resYear = year + 1;
      resDayOfYear = dayOfYear - daysInYear(year);
    } else {
      resYear = year;
      resDayOfYear = dayOfYear;
    }
    return {
      year: resYear,
      dayOfYear: resDayOfYear
    };
  }
  function weekOfYear(mom, dow, doy) {
    var weekOffset = firstWeekOffset(mom.year(), dow, doy),
        week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
        resWeek,
        resYear;
    if (week < 1) {
      resYear = mom.year() - 1;
      resWeek = week + weeksInYear(resYear, dow, doy);
    } else if (week > weeksInYear(mom.year(), dow, doy)) {
      resWeek = week - weeksInYear(mom.year(), dow, doy);
      resYear = mom.year() + 1;
    } else {
      resYear = mom.year();
      resWeek = week;
    }
    return {
      week: resWeek,
      year: resYear
    };
  }
  function weeksInYear(year, dow, doy) {
    var weekOffset = firstWeekOffset(year, dow, doy),
        weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
    return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
  }
  addFormatToken('w', ['ww', 2], 'wo', 'week');
  addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');
  addUnitAlias('week', 'w');
  addUnitAlias('isoWeek', 'W');
  addUnitPriority('week', 5);
  addUnitPriority('isoWeek', 5);
  addRegexToken('w', match1to2);
  addRegexToken('ww', match1to2, match2);
  addRegexToken('W', match1to2);
  addRegexToken('WW', match1to2, match2);
  addWeekParseToken(['w', 'ww', 'W', 'WW'], function(input, week, config, token) {
    week[token.substr(0, 1)] = toInt(input);
  });
  function localeWeek(mom) {
    return weekOfYear(mom, this._week.dow, this._week.doy).week;
  }
  var defaultLocaleWeek = {
    dow: 0,
    doy: 6
  };
  function localeFirstDayOfWeek() {
    return this._week.dow;
  }
  function localeFirstDayOfYear() {
    return this._week.doy;
  }
  function getSetWeek(input) {
    var week = this.localeData().week(this);
    return input == null ? week : this.add((input - week) * 7, 'd');
  }
  function getSetISOWeek(input) {
    var week = weekOfYear(this, 1, 4).week;
    return input == null ? week : this.add((input - week) * 7, 'd');
  }
  addFormatToken('d', 0, 'do', 'day');
  addFormatToken('dd', 0, 0, function(format) {
    return this.localeData().weekdaysMin(this, format);
  });
  addFormatToken('ddd', 0, 0, function(format) {
    return this.localeData().weekdaysShort(this, format);
  });
  addFormatToken('dddd', 0, 0, function(format) {
    return this.localeData().weekdays(this, format);
  });
  addFormatToken('e', 0, 0, 'weekday');
  addFormatToken('E', 0, 0, 'isoWeekday');
  addUnitAlias('day', 'd');
  addUnitAlias('weekday', 'e');
  addUnitAlias('isoWeekday', 'E');
  addUnitPriority('day', 11);
  addUnitPriority('weekday', 11);
  addUnitPriority('isoWeekday', 11);
  addRegexToken('d', match1to2);
  addRegexToken('e', match1to2);
  addRegexToken('E', match1to2);
  addRegexToken('dd', function(isStrict, locale) {
    return locale.weekdaysMinRegex(isStrict);
  });
  addRegexToken('ddd', function(isStrict, locale) {
    return locale.weekdaysShortRegex(isStrict);
  });
  addRegexToken('dddd', function(isStrict, locale) {
    return locale.weekdaysRegex(isStrict);
  });
  addWeekParseToken(['dd', 'ddd', 'dddd'], function(input, week, config, token) {
    var weekday = config._locale.weekdaysParse(input, token, config._strict);
    if (weekday != null) {
      week.d = weekday;
    } else {
      getParsingFlags(config).invalidWeekday = input;
    }
  });
  addWeekParseToken(['d', 'e', 'E'], function(input, week, config, token) {
    week[token] = toInt(input);
  });
  function parseWeekday(input, locale) {
    if (typeof input !== 'string') {
      return input;
    }
    if (!isNaN(input)) {
      return parseInt(input, 10);
    }
    input = locale.weekdaysParse(input);
    if (typeof input === 'number') {
      return input;
    }
    return null;
  }
  function parseIsoWeekday(input, locale) {
    if (typeof input === 'string') {
      return locale.weekdaysParse(input) % 7 || 7;
    }
    return isNaN(input) ? null : input;
  }
  var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
  function localeWeekdays(m, format) {
    if (!m) {
      return this._weekdays;
    }
    return isArray(this._weekdays) ? this._weekdays[m.day()] : this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
  }
  var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
  function localeWeekdaysShort(m) {
    return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
  }
  var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
  function localeWeekdaysMin(m) {
    return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
  }
  function handleStrictParse$1(weekdayName, format, strict) {
    var i,
        ii,
        mom,
        llc = weekdayName.toLocaleLowerCase();
    if (!this._weekdaysParse) {
      this._weekdaysParse = [];
      this._shortWeekdaysParse = [];
      this._minWeekdaysParse = [];
      for (i = 0; i < 7; ++i) {
        mom = createUTC([2000, 1]).day(i);
        this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
        this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
        this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
      }
    }
    if (strict) {
      if (format === 'dddd') {
        ii = indexOf$1.call(this._weekdaysParse, llc);
        return ii !== -1 ? ii : null;
      } else if (format === 'ddd') {
        ii = indexOf$1.call(this._shortWeekdaysParse, llc);
        return ii !== -1 ? ii : null;
      } else {
        ii = indexOf$1.call(this._minWeekdaysParse, llc);
        return ii !== -1 ? ii : null;
      }
    } else {
      if (format === 'dddd') {
        ii = indexOf$1.call(this._weekdaysParse, llc);
        if (ii !== -1) {
          return ii;
        }
        ii = indexOf$1.call(this._shortWeekdaysParse, llc);
        if (ii !== -1) {
          return ii;
        }
        ii = indexOf$1.call(this._minWeekdaysParse, llc);
        return ii !== -1 ? ii : null;
      } else if (format === 'ddd') {
        ii = indexOf$1.call(this._shortWeekdaysParse, llc);
        if (ii !== -1) {
          return ii;
        }
        ii = indexOf$1.call(this._weekdaysParse, llc);
        if (ii !== -1) {
          return ii;
        }
        ii = indexOf$1.call(this._minWeekdaysParse, llc);
        return ii !== -1 ? ii : null;
      } else {
        ii = indexOf$1.call(this._minWeekdaysParse, llc);
        if (ii !== -1) {
          return ii;
        }
        ii = indexOf$1.call(this._weekdaysParse, llc);
        if (ii !== -1) {
          return ii;
        }
        ii = indexOf$1.call(this._shortWeekdaysParse, llc);
        return ii !== -1 ? ii : null;
      }
    }
  }
  function localeWeekdaysParse(weekdayName, format, strict) {
    var i,
        mom,
        regex;
    if (this._weekdaysParseExact) {
      return handleStrictParse$1.call(this, weekdayName, format, strict);
    }
    if (!this._weekdaysParse) {
      this._weekdaysParse = [];
      this._minWeekdaysParse = [];
      this._shortWeekdaysParse = [];
      this._fullWeekdaysParse = [];
    }
    for (i = 0; i < 7; i++) {
      mom = createUTC([2000, 1]).day(i);
      if (strict && !this._fullWeekdaysParse[i]) {
        this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
        this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
        this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
      }
      if (!this._weekdaysParse[i]) {
        regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
        this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
      }
      if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
        return i;
      } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
        return i;
      } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
        return i;
      } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
        return i;
      }
    }
  }
  function getSetDayOfWeek(input) {
    if (!this.isValid()) {
      return input != null ? this : NaN;
    }
    var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
    if (input != null) {
      input = parseWeekday(input, this.localeData());
      return this.add(input - day, 'd');
    } else {
      return day;
    }
  }
  function getSetLocaleDayOfWeek(input) {
    if (!this.isValid()) {
      return input != null ? this : NaN;
    }
    var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
    return input == null ? weekday : this.add(input - weekday, 'd');
  }
  function getSetISODayOfWeek(input) {
    if (!this.isValid()) {
      return input != null ? this : NaN;
    }
    if (input != null) {
      var weekday = parseIsoWeekday(input, this.localeData());
      return this.day(this.day() % 7 ? weekday : weekday - 7);
    } else {
      return this.day() || 7;
    }
  }
  var defaultWeekdaysRegex = matchWord;
  function weekdaysRegex(isStrict) {
    if (this._weekdaysParseExact) {
      if (!hasOwnProp(this, '_weekdaysRegex')) {
        computeWeekdaysParse.call(this);
      }
      if (isStrict) {
        return this._weekdaysStrictRegex;
      } else {
        return this._weekdaysRegex;
      }
    } else {
      if (!hasOwnProp(this, '_weekdaysRegex')) {
        this._weekdaysRegex = defaultWeekdaysRegex;
      }
      return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
    }
  }
  var defaultWeekdaysShortRegex = matchWord;
  function weekdaysShortRegex(isStrict) {
    if (this._weekdaysParseExact) {
      if (!hasOwnProp(this, '_weekdaysRegex')) {
        computeWeekdaysParse.call(this);
      }
      if (isStrict) {
        return this._weekdaysShortStrictRegex;
      } else {
        return this._weekdaysShortRegex;
      }
    } else {
      if (!hasOwnProp(this, '_weekdaysShortRegex')) {
        this._weekdaysShortRegex = defaultWeekdaysShortRegex;
      }
      return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
    }
  }
  var defaultWeekdaysMinRegex = matchWord;
  function weekdaysMinRegex(isStrict) {
    if (this._weekdaysParseExact) {
      if (!hasOwnProp(this, '_weekdaysRegex')) {
        computeWeekdaysParse.call(this);
      }
      if (isStrict) {
        return this._weekdaysMinStrictRegex;
      } else {
        return this._weekdaysMinRegex;
      }
    } else {
      if (!hasOwnProp(this, '_weekdaysMinRegex')) {
        this._weekdaysMinRegex = defaultWeekdaysMinRegex;
      }
      return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
    }
  }
  function computeWeekdaysParse() {
    function cmpLenRev(a, b) {
      return b.length - a.length;
    }
    var minPieces = [],
        shortPieces = [],
        longPieces = [],
        mixedPieces = [],
        i,
        mom,
        minp,
        shortp,
        longp;
    for (i = 0; i < 7; i++) {
      mom = createUTC([2000, 1]).day(i);
      minp = this.weekdaysMin(mom, '');
      shortp = this.weekdaysShort(mom, '');
      longp = this.weekdays(mom, '');
      minPieces.push(minp);
      shortPieces.push(shortp);
      longPieces.push(longp);
      mixedPieces.push(minp);
      mixedPieces.push(shortp);
      mixedPieces.push(longp);
    }
    minPieces.sort(cmpLenRev);
    shortPieces.sort(cmpLenRev);
    longPieces.sort(cmpLenRev);
    mixedPieces.sort(cmpLenRev);
    for (i = 0; i < 7; i++) {
      shortPieces[i] = regexEscape(shortPieces[i]);
      longPieces[i] = regexEscape(longPieces[i]);
      mixedPieces[i] = regexEscape(mixedPieces[i]);
    }
    this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
    this._weekdaysShortRegex = this._weekdaysRegex;
    this._weekdaysMinRegex = this._weekdaysRegex;
    this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
    this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
  }
  function hFormat() {
    return this.hours() % 12 || 12;
  }
  function kFormat() {
    return this.hours() || 24;
  }
  addFormatToken('H', ['HH', 2], 0, 'hour');
  addFormatToken('h', ['hh', 2], 0, hFormat);
  addFormatToken('k', ['kk', 2], 0, kFormat);
  addFormatToken('hmm', 0, 0, function() {
    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
  });
  addFormatToken('hmmss', 0, 0, function() {
    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
  });
  addFormatToken('Hmm', 0, 0, function() {
    return '' + this.hours() + zeroFill(this.minutes(), 2);
  });
  addFormatToken('Hmmss', 0, 0, function() {
    return '' + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
  });
  function meridiem(token, lowercase) {
    addFormatToken(token, 0, 0, function() {
      return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
    });
  }
  meridiem('a', true);
  meridiem('A', false);
  addUnitAlias('hour', 'h');
  addUnitPriority('hour', 13);
  function matchMeridiem(isStrict, locale) {
    return locale._meridiemParse;
  }
  addRegexToken('a', matchMeridiem);
  addRegexToken('A', matchMeridiem);
  addRegexToken('H', match1to2);
  addRegexToken('h', match1to2);
  addRegexToken('HH', match1to2, match2);
  addRegexToken('hh', match1to2, match2);
  addRegexToken('hmm', match3to4);
  addRegexToken('hmmss', match5to6);
  addRegexToken('Hmm', match3to4);
  addRegexToken('Hmmss', match5to6);
  addParseToken(['H', 'HH'], HOUR);
  addParseToken(['a', 'A'], function(input, array, config) {
    config._isPm = config._locale.isPM(input);
    config._meridiem = input;
  });
  addParseToken(['h', 'hh'], function(input, array, config) {
    array[HOUR] = toInt(input);
    getParsingFlags(config).bigHour = true;
  });
  addParseToken('hmm', function(input, array, config) {
    var pos = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos));
    array[MINUTE] = toInt(input.substr(pos));
    getParsingFlags(config).bigHour = true;
  });
  addParseToken('hmmss', function(input, array, config) {
    var pos1 = input.length - 4;
    var pos2 = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos1));
    array[MINUTE] = toInt(input.substr(pos1, 2));
    array[SECOND] = toInt(input.substr(pos2));
    getParsingFlags(config).bigHour = true;
  });
  addParseToken('Hmm', function(input, array, config) {
    var pos = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos));
    array[MINUTE] = toInt(input.substr(pos));
  });
  addParseToken('Hmmss', function(input, array, config) {
    var pos1 = input.length - 4;
    var pos2 = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos1));
    array[MINUTE] = toInt(input.substr(pos1, 2));
    array[SECOND] = toInt(input.substr(pos2));
  });
  function localeIsPM(input) {
    return ((input + '').toLowerCase().charAt(0) === 'p');
  }
  var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
  function localeMeridiem(hours, minutes, isLower) {
    if (hours > 11) {
      return isLower ? 'pm' : 'PM';
    } else {
      return isLower ? 'am' : 'AM';
    }
  }
  var getSetHour = makeGetSet('Hours', true);
  var baseConfig = {
    calendar: defaultCalendar,
    longDateFormat: defaultLongDateFormat,
    invalidDate: defaultInvalidDate,
    ordinal: defaultOrdinal,
    ordinalParse: defaultOrdinalParse,
    relativeTime: defaultRelativeTime,
    months: defaultLocaleMonths,
    monthsShort: defaultLocaleMonthsShort,
    week: defaultLocaleWeek,
    weekdays: defaultLocaleWeekdays,
    weekdaysMin: defaultLocaleWeekdaysMin,
    weekdaysShort: defaultLocaleWeekdaysShort,
    meridiemParse: defaultLocaleMeridiemParse
  };
  var locales = {};
  var localeFamilies = {};
  var globalLocale;
  function normalizeLocale(key) {
    return key ? key.toLowerCase().replace('_', '-') : key;
  }
  function chooseLocale(names) {
    var i = 0,
        j,
        next,
        locale,
        split;
    while (i < names.length) {
      split = normalizeLocale(names[i]).split('-');
      j = split.length;
      next = normalizeLocale(names[i + 1]);
      next = next ? next.split('-') : null;
      while (j > 0) {
        locale = loadLocale(split.slice(0, j).join('-'));
        if (locale) {
          return locale;
        }
        if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
          break;
        }
        j--;
      }
      i++;
    }
    return null;
  }
  function loadLocale(name) {
    var oldLocale = null;
    if (!locales[name] && (typeof module !== 'undefined') && module && module.exports) {
      try {
        oldLocale = globalLocale._abbr;
        require('./locale/' + name);
        getSetGlobalLocale(oldLocale);
      } catch (e) {}
    }
    return locales[name];
  }
  function getSetGlobalLocale(key, values) {
    var data;
    if (key) {
      if (isUndefined(values)) {
        data = getLocale(key);
      } else {
        data = defineLocale(key, values);
      }
      if (data) {
        globalLocale = data;
      }
    }
    return globalLocale._abbr;
  }
  function defineLocale(name, config) {
    if (config !== null) {
      var parentConfig = baseConfig;
      config.abbr = name;
      if (locales[name] != null) {
        deprecateSimple('defineLocaleOverride', 'use moment.updateLocale(localeName, config) to change ' + 'an existing locale. moment.defineLocale(localeName, ' + 'config) should only be used for creating a new locale ' + 'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
        parentConfig = locales[name]._config;
      } else if (config.parentLocale != null) {
        if (locales[config.parentLocale] != null) {
          parentConfig = locales[config.parentLocale]._config;
        } else {
          if (!localeFamilies[config.parentLocale]) {
            localeFamilies[config.parentLocale] = [];
          }
          localeFamilies[config.parentLocale].push({
            name: name,
            config: config
          });
          return null;
        }
      }
      locales[name] = new Locale(mergeConfigs(parentConfig, config));
      if (localeFamilies[name]) {
        localeFamilies[name].forEach(function(x) {
          defineLocale(x.name, x.config);
        });
      }
      getSetGlobalLocale(name);
      return locales[name];
    } else {
      delete locales[name];
      return null;
    }
  }
  function updateLocale(name, config) {
    if (config != null) {
      var locale,
          parentConfig = baseConfig;
      if (locales[name] != null) {
        parentConfig = locales[name]._config;
      }
      config = mergeConfigs(parentConfig, config);
      locale = new Locale(config);
      locale.parentLocale = locales[name];
      locales[name] = locale;
      getSetGlobalLocale(name);
    } else {
      if (locales[name] != null) {
        if (locales[name].parentLocale != null) {
          locales[name] = locales[name].parentLocale;
        } else if (locales[name] != null) {
          delete locales[name];
        }
      }
    }
    return locales[name];
  }
  function getLocale(key) {
    var locale;
    if (key && key._locale && key._locale._abbr) {
      key = key._locale._abbr;
    }
    if (!key) {
      return globalLocale;
    }
    if (!isArray(key)) {
      locale = loadLocale(key);
      if (locale) {
        return locale;
      }
      key = [key];
    }
    return chooseLocale(key);
  }
  function listLocales() {
    return keys$1(locales);
  }
  function checkOverflow(m) {
    var overflow;
    var a = m._a;
    if (a && getParsingFlags(m).overflow === -2) {
      overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
      if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
        overflow = DATE;
      }
      if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
        overflow = WEEK;
      }
      if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
        overflow = WEEKDAY;
      }
      getParsingFlags(m).overflow = overflow;
    }
    return m;
  }
  var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
  var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
  var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;
  var isoDates = [['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/], ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/], ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/], ['GGGG-[W]WW', /\d{4}-W\d\d/, false], ['YYYY-DDD', /\d{4}-\d{3}/], ['YYYY-MM', /\d{4}-\d\d/, false], ['YYYYYYMMDD', /[+-]\d{10}/], ['YYYYMMDD', /\d{8}/], ['GGGG[W]WWE', /\d{4}W\d{3}/], ['GGGG[W]WW', /\d{4}W\d{2}/, false], ['YYYYDDD', /\d{7}/]];
  var isoTimes = [['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/], ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/], ['HH:mm:ss', /\d\d:\d\d:\d\d/], ['HH:mm', /\d\d:\d\d/], ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/], ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/], ['HHmmss', /\d\d\d\d\d\d/], ['HHmm', /\d\d\d\d/], ['HH', /\d\d/]];
  var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;
  function configFromISO(config) {
    var i,
        l,
        string = config._i,
        match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
        allowTime,
        dateFormat,
        timeFormat,
        tzFormat;
    if (match) {
      getParsingFlags(config).iso = true;
      for (i = 0, l = isoDates.length; i < l; i++) {
        if (isoDates[i][1].exec(match[1])) {
          dateFormat = isoDates[i][0];
          allowTime = isoDates[i][2] !== false;
          break;
        }
      }
      if (dateFormat == null) {
        config._isValid = false;
        return;
      }
      if (match[3]) {
        for (i = 0, l = isoTimes.length; i < l; i++) {
          if (isoTimes[i][1].exec(match[3])) {
            timeFormat = (match[2] || ' ') + isoTimes[i][0];
            break;
          }
        }
        if (timeFormat == null) {
          config._isValid = false;
          return;
        }
      }
      if (!allowTime && timeFormat != null) {
        config._isValid = false;
        return;
      }
      if (match[4]) {
        if (tzRegex.exec(match[4])) {
          tzFormat = 'Z';
        } else {
          config._isValid = false;
          return;
        }
      }
      config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
      configFromStringAndFormat(config);
    } else {
      config._isValid = false;
    }
  }
  function configFromString(config) {
    var matched = aspNetJsonRegex.exec(config._i);
    if (matched !== null) {
      config._d = new Date(+matched[1]);
      return;
    }
    configFromISO(config);
    if (config._isValid === false) {
      delete config._isValid;
      hooks.createFromInputFallback(config);
    }
  }
  hooks.createFromInputFallback = deprecate('value provided is not in a recognized ISO format. moment construction falls back to js Date(), ' + 'which is not reliable across all browsers and versions. Non ISO date formats are ' + 'discouraged and will be removed in an upcoming major release. Please refer to ' + 'http://momentjs.com/guides/#/warnings/js-date/ for more info.', function(config) {
    config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
  });
  function defaults(a, b, c) {
    if (a != null) {
      return a;
    }
    if (b != null) {
      return b;
    }
    return c;
  }
  function currentDateArray(config) {
    var nowValue = new Date(hooks.now());
    if (config._useUTC) {
      return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
    }
    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
  }
  function configFromArray(config) {
    var i,
        date,
        input = [],
        currentDate,
        yearToUse;
    if (config._d) {
      return;
    }
    currentDate = currentDateArray(config);
    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
      dayOfYearFromWeekInfo(config);
    }
    if (config._dayOfYear) {
      yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
      if (config._dayOfYear > daysInYear(yearToUse)) {
        getParsingFlags(config)._overflowDayOfYear = true;
      }
      date = createUTCDate(yearToUse, 0, config._dayOfYear);
      config._a[MONTH] = date.getUTCMonth();
      config._a[DATE] = date.getUTCDate();
    }
    for (i = 0; i < 3 && config._a[i] == null; ++i) {
      config._a[i] = input[i] = currentDate[i];
    }
    for (; i < 7; i++) {
      config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
    }
    if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
      config._nextDay = true;
      config._a[HOUR] = 0;
    }
    config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
    if (config._tzm != null) {
      config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
    }
    if (config._nextDay) {
      config._a[HOUR] = 24;
    }
  }
  function dayOfYearFromWeekInfo(config) {
    var w,
        weekYear,
        week,
        weekday,
        dow,
        doy,
        temp,
        weekdayOverflow;
    w = config._w;
    if (w.GG != null || w.W != null || w.E != null) {
      dow = 1;
      doy = 4;
      weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
      week = defaults(w.W, 1);
      weekday = defaults(w.E, 1);
      if (weekday < 1 || weekday > 7) {
        weekdayOverflow = true;
      }
    } else {
      dow = config._locale._week.dow;
      doy = config._locale._week.doy;
      var curWeek = weekOfYear(createLocal(), dow, doy);
      weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
      week = defaults(w.w, curWeek.week);
      if (w.d != null) {
        weekday = w.d;
        if (weekday < 0 || weekday > 6) {
          weekdayOverflow = true;
        }
      } else if (w.e != null) {
        weekday = w.e + dow;
        if (w.e < 0 || w.e > 6) {
          weekdayOverflow = true;
        }
      } else {
        weekday = dow;
      }
    }
    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
      getParsingFlags(config)._overflowWeeks = true;
    } else if (weekdayOverflow != null) {
      getParsingFlags(config)._overflowWeekday = true;
    } else {
      temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
      config._a[YEAR] = temp.year;
      config._dayOfYear = temp.dayOfYear;
    }
  }
  hooks.ISO_8601 = function() {};
  function configFromStringAndFormat(config) {
    if (config._f === hooks.ISO_8601) {
      configFromISO(config);
      return;
    }
    config._a = [];
    getParsingFlags(config).empty = true;
    var string = '' + config._i,
        i,
        parsedInput,
        tokens,
        token,
        skipped,
        stringLength = string.length,
        totalParsedInputLength = 0;
    tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];
    for (i = 0; i < tokens.length; i++) {
      token = tokens[i];
      parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
      if (parsedInput) {
        skipped = string.substr(0, string.indexOf(parsedInput));
        if (skipped.length > 0) {
          getParsingFlags(config).unusedInput.push(skipped);
        }
        string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
        totalParsedInputLength += parsedInput.length;
      }
      if (formatTokenFunctions[token]) {
        if (parsedInput) {
          getParsingFlags(config).empty = false;
        } else {
          getParsingFlags(config).unusedTokens.push(token);
        }
        addTimeToArrayFromToken(token, parsedInput, config);
      } else if (config._strict && !parsedInput) {
        getParsingFlags(config).unusedTokens.push(token);
      }
    }
    getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
    if (string.length > 0) {
      getParsingFlags(config).unusedInput.push(string);
    }
    if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
      getParsingFlags(config).bigHour = undefined;
    }
    getParsingFlags(config).parsedDateParts = config._a.slice(0);
    getParsingFlags(config).meridiem = config._meridiem;
    config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
    configFromArray(config);
    checkOverflow(config);
  }
  function meridiemFixWrap(locale, hour, meridiem) {
    var isPm;
    if (meridiem == null) {
      return hour;
    }
    if (locale.meridiemHour != null) {
      return locale.meridiemHour(hour, meridiem);
    } else if (locale.isPM != null) {
      isPm = locale.isPM(meridiem);
      if (isPm && hour < 12) {
        hour += 12;
      }
      if (!isPm && hour === 12) {
        hour = 0;
      }
      return hour;
    } else {
      return hour;
    }
  }
  function configFromStringAndArray(config) {
    var tempConfig,
        bestMoment,
        scoreToBeat,
        i,
        currentScore;
    if (config._f.length === 0) {
      getParsingFlags(config).invalidFormat = true;
      config._d = new Date(NaN);
      return;
    }
    for (i = 0; i < config._f.length; i++) {
      currentScore = 0;
      tempConfig = copyConfig({}, config);
      if (config._useUTC != null) {
        tempConfig._useUTC = config._useUTC;
      }
      tempConfig._f = config._f[i];
      configFromStringAndFormat(tempConfig);
      if (!isValid(tempConfig)) {
        continue;
      }
      currentScore += getParsingFlags(tempConfig).charsLeftOver;
      currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
      getParsingFlags(tempConfig).score = currentScore;
      if (scoreToBeat == null || currentScore < scoreToBeat) {
        scoreToBeat = currentScore;
        bestMoment = tempConfig;
      }
    }
    extend(config, bestMoment || tempConfig);
  }
  function configFromObject(config) {
    if (config._d) {
      return;
    }
    var i = normalizeObjectUnits(config._i);
    config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function(obj) {
      return obj && parseInt(obj, 10);
    });
    configFromArray(config);
  }
  function createFromConfig(config) {
    var res = new Moment(checkOverflow(prepareConfig(config)));
    if (res._nextDay) {
      res.add(1, 'd');
      res._nextDay = undefined;
    }
    return res;
  }
  function prepareConfig(config) {
    var input = config._i,
        format = config._f;
    config._locale = config._locale || getLocale(config._l);
    if (input === null || (format === undefined && input === '')) {
      return createInvalid({nullInput: true});
    }
    if (typeof input === 'string') {
      config._i = input = config._locale.preparse(input);
    }
    if (isMoment(input)) {
      return new Moment(checkOverflow(input));
    } else if (isDate(input)) {
      config._d = input;
    } else if (isArray(format)) {
      configFromStringAndArray(config);
    } else if (format) {
      configFromStringAndFormat(config);
    } else {
      configFromInput(config);
    }
    if (!isValid(config)) {
      config._d = null;
    }
    return config;
  }
  function configFromInput(config) {
    var input = config._i;
    if (input === undefined) {
      config._d = new Date(hooks.now());
    } else if (isDate(input)) {
      config._d = new Date(input.valueOf());
    } else if (typeof input === 'string') {
      configFromString(config);
    } else if (isArray(input)) {
      config._a = map(input.slice(0), function(obj) {
        return parseInt(obj, 10);
      });
      configFromArray(config);
    } else if (typeof(input) === 'object') {
      configFromObject(config);
    } else if (isNumber(input)) {
      config._d = new Date(input);
    } else {
      hooks.createFromInputFallback(config);
    }
  }
  function createLocalOrUTC(input, format, locale, strict, isUTC) {
    var c = {};
    if (locale === true || locale === false) {
      strict = locale;
      locale = undefined;
    }
    if ((isObject(input) && isObjectEmpty(input)) || (isArray(input) && input.length === 0)) {
      input = undefined;
    }
    c._isAMomentObject = true;
    c._useUTC = c._isUTC = isUTC;
    c._l = locale;
    c._i = input;
    c._f = format;
    c._strict = strict;
    return createFromConfig(c);
  }
  function createLocal(input, format, locale, strict) {
    return createLocalOrUTC(input, format, locale, strict, false);
  }
  var prototypeMin = deprecate('moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/', function() {
    var other = createLocal.apply(null, arguments);
    if (this.isValid() && other.isValid()) {
      return other < this ? this : other;
    } else {
      return createInvalid();
    }
  });
  var prototypeMax = deprecate('moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/', function() {
    var other = createLocal.apply(null, arguments);
    if (this.isValid() && other.isValid()) {
      return other > this ? this : other;
    } else {
      return createInvalid();
    }
  });
  function pickBy(fn, moments) {
    var res,
        i;
    if (moments.length === 1 && isArray(moments[0])) {
      moments = moments[0];
    }
    if (!moments.length) {
      return createLocal();
    }
    res = moments[0];
    for (i = 1; i < moments.length; ++i) {
      if (!moments[i].isValid() || moments[i][fn](res)) {
        res = moments[i];
      }
    }
    return res;
  }
  function min() {
    var args = [].slice.call(arguments, 0);
    return pickBy('isBefore', args);
  }
  function max() {
    var args = [].slice.call(arguments, 0);
    return pickBy('isAfter', args);
  }
  var now = function() {
    return Date.now ? Date.now() : +(new Date());
  };
  function Duration(duration) {
    var normalizedInput = normalizeObjectUnits(duration),
        years = normalizedInput.year || 0,
        quarters = normalizedInput.quarter || 0,
        months = normalizedInput.month || 0,
        weeks = normalizedInput.week || 0,
        days = normalizedInput.day || 0,
        hours = normalizedInput.hour || 0,
        minutes = normalizedInput.minute || 0,
        seconds = normalizedInput.second || 0,
        milliseconds = normalizedInput.millisecond || 0;
    this._milliseconds = +milliseconds + seconds * 1e3 + minutes * 6e4 + hours * 1000 * 60 * 60;
    this._days = +days + weeks * 7;
    this._months = +months + quarters * 3 + years * 12;
    this._data = {};
    this._locale = getLocale();
    this._bubble();
  }
  function isDuration(obj) {
    return obj instanceof Duration;
  }
  function absRound(number) {
    if (number < 0) {
      return Math.round(-1 * number) * -1;
    } else {
      return Math.round(number);
    }
  }
  function offset(token, separator) {
    addFormatToken(token, 0, 0, function() {
      var offset = this.utcOffset();
      var sign = '+';
      if (offset < 0) {
        offset = -offset;
        sign = '-';
      }
      return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
    });
  }
  offset('Z', ':');
  offset('ZZ', '');
  addRegexToken('Z', matchShortOffset);
  addRegexToken('ZZ', matchShortOffset);
  addParseToken(['Z', 'ZZ'], function(input, array, config) {
    config._useUTC = true;
    config._tzm = offsetFromString(matchShortOffset, input);
  });
  var chunkOffset = /([\+\-]|\d\d)/gi;
  function offsetFromString(matcher, string) {
    var matches = (string || '').match(matcher);
    if (matches === null) {
      return null;
    }
    var chunk = matches[matches.length - 1] || [];
    var parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
    var minutes = +(parts[1] * 60) + toInt(parts[2]);
    return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
  }
  function cloneWithOffset(input, model) {
    var res,
        diff;
    if (model._isUTC) {
      res = model.clone();
      diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
      res._d.setTime(res._d.valueOf() + diff);
      hooks.updateOffset(res, false);
      return res;
    } else {
      return createLocal(input).local();
    }
  }
  function getDateOffset(m) {
    return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
  }
  hooks.updateOffset = function() {};
  function getSetOffset(input, keepLocalTime) {
    var offset = this._offset || 0,
        localAdjust;
    if (!this.isValid()) {
      return input != null ? this : NaN;
    }
    if (input != null) {
      if (typeof input === 'string') {
        input = offsetFromString(matchShortOffset, input);
        if (input === null) {
          return this;
        }
      } else if (Math.abs(input) < 16) {
        input = input * 60;
      }
      if (!this._isUTC && keepLocalTime) {
        localAdjust = getDateOffset(this);
      }
      this._offset = input;
      this._isUTC = true;
      if (localAdjust != null) {
        this.add(localAdjust, 'm');
      }
      if (offset !== input) {
        if (!keepLocalTime || this._changeInProgress) {
          addSubtract(this, createDuration(input - offset, 'm'), 1, false);
        } else if (!this._changeInProgress) {
          this._changeInProgress = true;
          hooks.updateOffset(this, true);
          this._changeInProgress = null;
        }
      }
      return this;
    } else {
      return this._isUTC ? offset : getDateOffset(this);
    }
  }
  function getSetZone(input, keepLocalTime) {
    if (input != null) {
      if (typeof input !== 'string') {
        input = -input;
      }
      this.utcOffset(input, keepLocalTime);
      return this;
    } else {
      return -this.utcOffset();
    }
  }
  function setOffsetToUTC(keepLocalTime) {
    return this.utcOffset(0, keepLocalTime);
  }
  function setOffsetToLocal(keepLocalTime) {
    if (this._isUTC) {
      this.utcOffset(0, keepLocalTime);
      this._isUTC = false;
      if (keepLocalTime) {
        this.subtract(getDateOffset(this), 'm');
      }
    }
    return this;
  }
  function setOffsetToParsedOffset() {
    if (this._tzm != null) {
      this.utcOffset(this._tzm);
    } else if (typeof this._i === 'string') {
      var tZone = offsetFromString(matchOffset, this._i);
      if (tZone != null) {
        this.utcOffset(tZone);
      } else {
        this.utcOffset(0, true);
      }
    }
    return this;
  }
  function hasAlignedHourOffset(input) {
    if (!this.isValid()) {
      return false;
    }
    input = input ? createLocal(input).utcOffset() : 0;
    return (this.utcOffset() - input) % 60 === 0;
  }
  function isDaylightSavingTime() {
    return (this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset());
  }
  function isDaylightSavingTimeShifted() {
    if (!isUndefined(this._isDSTShifted)) {
      return this._isDSTShifted;
    }
    var c = {};
    copyConfig(c, this);
    c = prepareConfig(c);
    if (c._a) {
      var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
      this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
    } else {
      this._isDSTShifted = false;
    }
    return this._isDSTShifted;
  }
  function isLocal() {
    return this.isValid() ? !this._isUTC : false;
  }
  function isUtcOffset() {
    return this.isValid() ? this._isUTC : false;
  }
  function isUtc() {
    return this.isValid() ? this._isUTC && this._offset === 0 : false;
  }
  var aspNetRegex = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;
  var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;
  function createDuration(input, key) {
    var duration = input,
        match = null,
        sign,
        ret,
        diffRes;
    if (isDuration(input)) {
      duration = {
        ms: input._milliseconds,
        d: input._days,
        M: input._months
      };
    } else if (isNumber(input)) {
      duration = {};
      if (key) {
        duration[key] = input;
      } else {
        duration.milliseconds = input;
      }
    } else if (!!(match = aspNetRegex.exec(input))) {
      sign = (match[1] === '-') ? -1 : 1;
      duration = {
        y: 0,
        d: toInt(match[DATE]) * sign,
        h: toInt(match[HOUR]) * sign,
        m: toInt(match[MINUTE]) * sign,
        s: toInt(match[SECOND]) * sign,
        ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign
      };
    } else if (!!(match = isoRegex.exec(input))) {
      sign = (match[1] === '-') ? -1 : 1;
      duration = {
        y: parseIso(match[2], sign),
        M: parseIso(match[3], sign),
        w: parseIso(match[4], sign),
        d: parseIso(match[5], sign),
        h: parseIso(match[6], sign),
        m: parseIso(match[7], sign),
        s: parseIso(match[8], sign)
      };
    } else if (duration == null) {
      duration = {};
    } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
      diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
      duration = {};
      duration.ms = diffRes.milliseconds;
      duration.M = diffRes.months;
    }
    ret = new Duration(duration);
    if (isDuration(input) && hasOwnProp(input, '_locale')) {
      ret._locale = input._locale;
    }
    return ret;
  }
  createDuration.fn = Duration.prototype;
  function parseIso(inp, sign) {
    var res = inp && parseFloat(inp.replace(',', '.'));
    return (isNaN(res) ? 0 : res) * sign;
  }
  function positiveMomentsDifference(base, other) {
    var res = {
      milliseconds: 0,
      months: 0
    };
    res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
    if (base.clone().add(res.months, 'M').isAfter(other)) {
      --res.months;
    }
    res.milliseconds = +other - +(base.clone().add(res.months, 'M'));
    return res;
  }
  function momentsDifference(base, other) {
    var res;
    if (!(base.isValid() && other.isValid())) {
      return {
        milliseconds: 0,
        months: 0
      };
    }
    other = cloneWithOffset(other, base);
    if (base.isBefore(other)) {
      res = positiveMomentsDifference(base, other);
    } else {
      res = positiveMomentsDifference(other, base);
      res.milliseconds = -res.milliseconds;
      res.months = -res.months;
    }
    return res;
  }
  function createAdder(direction, name) {
    return function(val, period) {
      var dur,
          tmp;
      if (period !== null && !isNaN(+period)) {
        deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' + 'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
        tmp = val;
        val = period;
        period = tmp;
      }
      val = typeof val === 'string' ? +val : val;
      dur = createDuration(val, period);
      addSubtract(this, dur, direction);
      return this;
    };
  }
  function addSubtract(mom, duration, isAdding, updateOffset) {
    var milliseconds = duration._milliseconds,
        days = absRound(duration._days),
        months = absRound(duration._months);
    if (!mom.isValid()) {
      return;
    }
    updateOffset = updateOffset == null ? true : updateOffset;
    if (milliseconds) {
      mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
    }
    if (days) {
      set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
    }
    if (months) {
      setMonth(mom, get(mom, 'Month') + months * isAdding);
    }
    if (updateOffset) {
      hooks.updateOffset(mom, days || months);
    }
  }
  var add = createAdder(1, 'add');
  var subtract = createAdder(-1, 'subtract');
  function getCalendarFormat(myMoment, now) {
    var diff = myMoment.diff(now, 'days', true);
    return diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';
  }
  function calendar$1(time, formats) {
    var now = time || createLocal(),
        sod = cloneWithOffset(now, this).startOf('day'),
        format = hooks.calendarFormat(this, sod) || 'sameElse';
    var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);
    return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
  }
  function clone() {
    return new Moment(this);
  }
  function isAfter(input, units) {
    var localInput = isMoment(input) ? input : createLocal(input);
    if (!(this.isValid() && localInput.isValid())) {
      return false;
    }
    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
    if (units === 'millisecond') {
      return this.valueOf() > localInput.valueOf();
    } else {
      return localInput.valueOf() < this.clone().startOf(units).valueOf();
    }
  }
  function isBefore(input, units) {
    var localInput = isMoment(input) ? input : createLocal(input);
    if (!(this.isValid() && localInput.isValid())) {
      return false;
    }
    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
    if (units === 'millisecond') {
      return this.valueOf() < localInput.valueOf();
    } else {
      return this.clone().endOf(units).valueOf() < localInput.valueOf();
    }
  }
  function isBetween(from, to, units, inclusivity) {
    inclusivity = inclusivity || '()';
    return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) && (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
  }
  function isSame(input, units) {
    var localInput = isMoment(input) ? input : createLocal(input),
        inputMs;
    if (!(this.isValid() && localInput.isValid())) {
      return false;
    }
    units = normalizeUnits(units || 'millisecond');
    if (units === 'millisecond') {
      return this.valueOf() === localInput.valueOf();
    } else {
      inputMs = localInput.valueOf();
      return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
    }
  }
  function isSameOrAfter(input, units) {
    return this.isSame(input, units) || this.isAfter(input, units);
  }
  function isSameOrBefore(input, units) {
    return this.isSame(input, units) || this.isBefore(input, units);
  }
  function diff(input, units, asFloat) {
    var that,
        zoneDelta,
        delta,
        output;
    if (!this.isValid()) {
      return NaN;
    }
    that = cloneWithOffset(input, this);
    if (!that.isValid()) {
      return NaN;
    }
    zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
    units = normalizeUnits(units);
    if (units === 'year' || units === 'month' || units === 'quarter') {
      output = monthDiff(this, that);
      if (units === 'quarter') {
        output = output / 3;
      } else if (units === 'year') {
        output = output / 12;
      }
    } else {
      delta = this - that;
      output = units === 'second' ? delta / 1e3 : units === 'minute' ? delta / 6e4 : units === 'hour' ? delta / 36e5 : units === 'day' ? (delta - zoneDelta) / 864e5 : units === 'week' ? (delta - zoneDelta) / 6048e5 : delta;
    }
    return asFloat ? output : absFloor(output);
  }
  function monthDiff(a, b) {
    var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
        anchor = a.clone().add(wholeMonthDiff, 'months'),
        anchor2,
        adjust;
    if (b - anchor < 0) {
      anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
      adjust = (b - anchor) / (anchor - anchor2);
    } else {
      anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
      adjust = (b - anchor) / (anchor2 - anchor);
    }
    return -(wholeMonthDiff + adjust) || 0;
  }
  hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
  hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';
  function toString() {
    return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
  }
  function toISOString() {
    var m = this.clone().utc();
    if (0 < m.year() && m.year() <= 9999) {
      if (isFunction(Date.prototype.toISOString)) {
        return this.toDate().toISOString();
      } else {
        return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
      }
    } else {
      return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
    }
  }
  function inspect() {
    if (!this.isValid()) {
      return 'moment.invalid(/* ' + this._i + ' */)';
    }
    var func = 'moment';
    var zone = '';
    if (!this.isLocal()) {
      func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
      zone = 'Z';
    }
    var prefix = '[' + func + '("]';
    var year = (0 < this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
    var datetime = '-MM-DD[T]HH:mm:ss.SSS';
    var suffix = zone + '[")]';
    return this.format(prefix + year + datetime + suffix);
  }
  function format(inputString) {
    if (!inputString) {
      inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
    }
    var output = formatMoment(this, inputString);
    return this.localeData().postformat(output);
  }
  function from(time, withoutSuffix) {
    if (this.isValid() && ((isMoment(time) && time.isValid()) || createLocal(time).isValid())) {
      return createDuration({
        to: this,
        from: time
      }).locale(this.locale()).humanize(!withoutSuffix);
    } else {
      return this.localeData().invalidDate();
    }
  }
  function fromNow(withoutSuffix) {
    return this.from(createLocal(), withoutSuffix);
  }
  function to(time, withoutSuffix) {
    if (this.isValid() && ((isMoment(time) && time.isValid()) || createLocal(time).isValid())) {
      return createDuration({
        from: this,
        to: time
      }).locale(this.locale()).humanize(!withoutSuffix);
    } else {
      return this.localeData().invalidDate();
    }
  }
  function toNow(withoutSuffix) {
    return this.to(createLocal(), withoutSuffix);
  }
  function locale(key) {
    var newLocaleData;
    if (key === undefined) {
      return this._locale._abbr;
    } else {
      newLocaleData = getLocale(key);
      if (newLocaleData != null) {
        this._locale = newLocaleData;
      }
      return this;
    }
  }
  var lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function(key) {
    if (key === undefined) {
      return this.localeData();
    } else {
      return this.locale(key);
    }
  });
  function localeData() {
    return this._locale;
  }
  function startOf(units) {
    units = normalizeUnits(units);
    switch (units) {
      case 'year':
        this.month(0);
      case 'quarter':
      case 'month':
        this.date(1);
      case 'week':
      case 'isoWeek':
      case 'day':
      case 'date':
        this.hours(0);
      case 'hour':
        this.minutes(0);
      case 'minute':
        this.seconds(0);
      case 'second':
        this.milliseconds(0);
    }
    if (units === 'week') {
      this.weekday(0);
    }
    if (units === 'isoWeek') {
      this.isoWeekday(1);
    }
    if (units === 'quarter') {
      this.month(Math.floor(this.month() / 3) * 3);
    }
    return this;
  }
  function endOf(units) {
    units = normalizeUnits(units);
    if (units === undefined || units === 'millisecond') {
      return this;
    }
    if (units === 'date') {
      units = 'day';
    }
    return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
  }
  function valueOf() {
    return this._d.valueOf() - ((this._offset || 0) * 60000);
  }
  function unix() {
    return Math.floor(this.valueOf() / 1000);
  }
  function toDate() {
    return new Date(this.valueOf());
  }
  function toArray() {
    var m = this;
    return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
  }
  function toObject() {
    var m = this;
    return {
      years: m.year(),
      months: m.month(),
      date: m.date(),
      hours: m.hours(),
      minutes: m.minutes(),
      seconds: m.seconds(),
      milliseconds: m.milliseconds()
    };
  }
  function toJSON() {
    return this.isValid() ? this.toISOString() : null;
  }
  function isValid$1() {
    return isValid(this);
  }
  function parsingFlags() {
    return extend({}, getParsingFlags(this));
  }
  function invalidAt() {
    return getParsingFlags(this).overflow;
  }
  function creationData() {
    return {
      input: this._i,
      format: this._f,
      locale: this._locale,
      isUTC: this._isUTC,
      strict: this._strict
    };
  }
  addFormatToken(0, ['gg', 2], 0, function() {
    return this.weekYear() % 100;
  });
  addFormatToken(0, ['GG', 2], 0, function() {
    return this.isoWeekYear() % 100;
  });
  function addWeekYearFormatToken(token, getter) {
    addFormatToken(0, [token, token.length], 0, getter);
  }
  addWeekYearFormatToken('gggg', 'weekYear');
  addWeekYearFormatToken('ggggg', 'weekYear');
  addWeekYearFormatToken('GGGG', 'isoWeekYear');
  addWeekYearFormatToken('GGGGG', 'isoWeekYear');
  addUnitAlias('weekYear', 'gg');
  addUnitAlias('isoWeekYear', 'GG');
  addUnitPriority('weekYear', 1);
  addUnitPriority('isoWeekYear', 1);
  addRegexToken('G', matchSigned);
  addRegexToken('g', matchSigned);
  addRegexToken('GG', match1to2, match2);
  addRegexToken('gg', match1to2, match2);
  addRegexToken('GGGG', match1to4, match4);
  addRegexToken('gggg', match1to4, match4);
  addRegexToken('GGGGG', match1to6, match6);
  addRegexToken('ggggg', match1to6, match6);
  addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function(input, week, config, token) {
    week[token.substr(0, 2)] = toInt(input);
  });
  addWeekParseToken(['gg', 'GG'], function(input, week, config, token) {
    week[token] = hooks.parseTwoDigitYear(input);
  });
  function getSetWeekYear(input) {
    return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
  }
  function getSetISOWeekYear(input) {
    return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
  }
  function getISOWeeksInYear() {
    return weeksInYear(this.year(), 1, 4);
  }
  function getWeeksInYear() {
    var weekInfo = this.localeData()._week;
    return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
  }
  function getSetWeekYearHelper(input, week, weekday, dow, doy) {
    var weeksTarget;
    if (input == null) {
      return weekOfYear(this, dow, doy).year;
    } else {
      weeksTarget = weeksInYear(input, dow, doy);
      if (week > weeksTarget) {
        week = weeksTarget;
      }
      return setWeekAll.call(this, input, week, weekday, dow, doy);
    }
  }
  function setWeekAll(weekYear, week, weekday, dow, doy) {
    var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
        date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
    this.year(date.getUTCFullYear());
    this.month(date.getUTCMonth());
    this.date(date.getUTCDate());
    return this;
  }
  addFormatToken('Q', 0, 'Qo', 'quarter');
  addUnitAlias('quarter', 'Q');
  addUnitPriority('quarter', 7);
  addRegexToken('Q', match1);
  addParseToken('Q', function(input, array) {
    array[MONTH] = (toInt(input) - 1) * 3;
  });
  function getSetQuarter(input) {
    return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
  }
  addFormatToken('D', ['DD', 2], 'Do', 'date');
  addUnitAlias('date', 'D');
  addUnitPriority('date', 9);
  addRegexToken('D', match1to2);
  addRegexToken('DD', match1to2, match2);
  addRegexToken('Do', function(isStrict, locale) {
    return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;
  });
  addParseToken(['D', 'DD'], DATE);
  addParseToken('Do', function(input, array) {
    array[DATE] = toInt(input.match(match1to2)[0], 10);
  });
  var getSetDayOfMonth = makeGetSet('Date', true);
  addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');
  addUnitAlias('dayOfYear', 'DDD');
  addUnitPriority('dayOfYear', 4);
  addRegexToken('DDD', match1to3);
  addRegexToken('DDDD', match3);
  addParseToken(['DDD', 'DDDD'], function(input, array, config) {
    config._dayOfYear = toInt(input);
  });
  function getSetDayOfYear(input) {
    var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
    return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
  }
  addFormatToken('m', ['mm', 2], 0, 'minute');
  addUnitAlias('minute', 'm');
  addUnitPriority('minute', 14);
  addRegexToken('m', match1to2);
  addRegexToken('mm', match1to2, match2);
  addParseToken(['m', 'mm'], MINUTE);
  var getSetMinute = makeGetSet('Minutes', false);
  addFormatToken('s', ['ss', 2], 0, 'second');
  addUnitAlias('second', 's');
  addUnitPriority('second', 15);
  addRegexToken('s', match1to2);
  addRegexToken('ss', match1to2, match2);
  addParseToken(['s', 'ss'], SECOND);
  var getSetSecond = makeGetSet('Seconds', false);
  addFormatToken('S', 0, 0, function() {
    return ~~(this.millisecond() / 100);
  });
  addFormatToken(0, ['SS', 2], 0, function() {
    return ~~(this.millisecond() / 10);
  });
  addFormatToken(0, ['SSS', 3], 0, 'millisecond');
  addFormatToken(0, ['SSSS', 4], 0, function() {
    return this.millisecond() * 10;
  });
  addFormatToken(0, ['SSSSS', 5], 0, function() {
    return this.millisecond() * 100;
  });
  addFormatToken(0, ['SSSSSS', 6], 0, function() {
    return this.millisecond() * 1000;
  });
  addFormatToken(0, ['SSSSSSS', 7], 0, function() {
    return this.millisecond() * 10000;
  });
  addFormatToken(0, ['SSSSSSSS', 8], 0, function() {
    return this.millisecond() * 100000;
  });
  addFormatToken(0, ['SSSSSSSSS', 9], 0, function() {
    return this.millisecond() * 1000000;
  });
  addUnitAlias('millisecond', 'ms');
  addUnitPriority('millisecond', 16);
  addRegexToken('S', match1to3, match1);
  addRegexToken('SS', match1to3, match2);
  addRegexToken('SSS', match1to3, match3);
  var token;
  for (token = 'SSSS'; token.length <= 9; token += 'S') {
    addRegexToken(token, matchUnsigned);
  }
  function parseMs(input, array) {
    array[MILLISECOND] = toInt(('0.' + input) * 1000);
  }
  for (token = 'S'; token.length <= 9; token += 'S') {
    addParseToken(token, parseMs);
  }
  var getSetMillisecond = makeGetSet('Milliseconds', false);
  addFormatToken('z', 0, 0, 'zoneAbbr');
  addFormatToken('zz', 0, 0, 'zoneName');
  function getZoneAbbr() {
    return this._isUTC ? 'UTC' : '';
  }
  function getZoneName() {
    return this._isUTC ? 'Coordinated Universal Time' : '';
  }
  var proto = Moment.prototype;
  proto.add = add;
  proto.calendar = calendar$1;
  proto.clone = clone;
  proto.diff = diff;
  proto.endOf = endOf;
  proto.format = format;
  proto.from = from;
  proto.fromNow = fromNow;
  proto.to = to;
  proto.toNow = toNow;
  proto.get = stringGet;
  proto.invalidAt = invalidAt;
  proto.isAfter = isAfter;
  proto.isBefore = isBefore;
  proto.isBetween = isBetween;
  proto.isSame = isSame;
  proto.isSameOrAfter = isSameOrAfter;
  proto.isSameOrBefore = isSameOrBefore;
  proto.isValid = isValid$1;
  proto.lang = lang;
  proto.locale = locale;
  proto.localeData = localeData;
  proto.max = prototypeMax;
  proto.min = prototypeMin;
  proto.parsingFlags = parsingFlags;
  proto.set = stringSet;
  proto.startOf = startOf;
  proto.subtract = subtract;
  proto.toArray = toArray;
  proto.toObject = toObject;
  proto.toDate = toDate;
  proto.toISOString = toISOString;
  proto.inspect = inspect;
  proto.toJSON = toJSON;
  proto.toString = toString;
  proto.unix = unix;
  proto.valueOf = valueOf;
  proto.creationData = creationData;
  proto.year = getSetYear;
  proto.isLeapYear = getIsLeapYear;
  proto.weekYear = getSetWeekYear;
  proto.isoWeekYear = getSetISOWeekYear;
  proto.quarter = proto.quarters = getSetQuarter;
  proto.month = getSetMonth;
  proto.daysInMonth = getDaysInMonth;
  proto.week = proto.weeks = getSetWeek;
  proto.isoWeek = proto.isoWeeks = getSetISOWeek;
  proto.weeksInYear = getWeeksInYear;
  proto.isoWeeksInYear = getISOWeeksInYear;
  proto.date = getSetDayOfMonth;
  proto.day = proto.days = getSetDayOfWeek;
  proto.weekday = getSetLocaleDayOfWeek;
  proto.isoWeekday = getSetISODayOfWeek;
  proto.dayOfYear = getSetDayOfYear;
  proto.hour = proto.hours = getSetHour;
  proto.minute = proto.minutes = getSetMinute;
  proto.second = proto.seconds = getSetSecond;
  proto.millisecond = proto.milliseconds = getSetMillisecond;
  proto.utcOffset = getSetOffset;
  proto.utc = setOffsetToUTC;
  proto.local = setOffsetToLocal;
  proto.parseZone = setOffsetToParsedOffset;
  proto.hasAlignedHourOffset = hasAlignedHourOffset;
  proto.isDST = isDaylightSavingTime;
  proto.isLocal = isLocal;
  proto.isUtcOffset = isUtcOffset;
  proto.isUtc = isUtc;
  proto.isUTC = isUtc;
  proto.zoneAbbr = getZoneAbbr;
  proto.zoneName = getZoneName;
  proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
  proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
  proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
  proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
  proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);
  function createUnix(input) {
    return createLocal(input * 1000);
  }
  function createInZone() {
    return createLocal.apply(null, arguments).parseZone();
  }
  function preParsePostFormat(string) {
    return string;
  }
  var proto$1 = Locale.prototype;
  proto$1.calendar = calendar;
  proto$1.longDateFormat = longDateFormat;
  proto$1.invalidDate = invalidDate;
  proto$1.ordinal = ordinal;
  proto$1.preparse = preParsePostFormat;
  proto$1.postformat = preParsePostFormat;
  proto$1.relativeTime = relativeTime;
  proto$1.pastFuture = pastFuture;
  proto$1.set = set;
  proto$1.months = localeMonths;
  proto$1.monthsShort = localeMonthsShort;
  proto$1.monthsParse = localeMonthsParse;
  proto$1.monthsRegex = monthsRegex;
  proto$1.monthsShortRegex = monthsShortRegex;
  proto$1.week = localeWeek;
  proto$1.firstDayOfYear = localeFirstDayOfYear;
  proto$1.firstDayOfWeek = localeFirstDayOfWeek;
  proto$1.weekdays = localeWeekdays;
  proto$1.weekdaysMin = localeWeekdaysMin;
  proto$1.weekdaysShort = localeWeekdaysShort;
  proto$1.weekdaysParse = localeWeekdaysParse;
  proto$1.weekdaysRegex = weekdaysRegex;
  proto$1.weekdaysShortRegex = weekdaysShortRegex;
  proto$1.weekdaysMinRegex = weekdaysMinRegex;
  proto$1.isPM = localeIsPM;
  proto$1.meridiem = localeMeridiem;
  function get$1(format, index, field, setter) {
    var locale = getLocale();
    var utc = createUTC().set(setter, index);
    return locale[field](utc, format);
  }
  function listMonthsImpl(format, index, field) {
    if (isNumber(format)) {
      index = format;
      format = undefined;
    }
    format = format || '';
    if (index != null) {
      return get$1(format, index, field, 'month');
    }
    var i;
    var out = [];
    for (i = 0; i < 12; i++) {
      out[i] = get$1(format, i, field, 'month');
    }
    return out;
  }
  function listWeekdaysImpl(localeSorted, format, index, field) {
    if (typeof localeSorted === 'boolean') {
      if (isNumber(format)) {
        index = format;
        format = undefined;
      }
      format = format || '';
    } else {
      format = localeSorted;
      index = format;
      localeSorted = false;
      if (isNumber(format)) {
        index = format;
        format = undefined;
      }
      format = format || '';
    }
    var locale = getLocale(),
        shift = localeSorted ? locale._week.dow : 0;
    if (index != null) {
      return get$1(format, (index + shift) % 7, field, 'day');
    }
    var i;
    var out = [];
    for (i = 0; i < 7; i++) {
      out[i] = get$1(format, (i + shift) % 7, field, 'day');
    }
    return out;
  }
  function listMonths(format, index) {
    return listMonthsImpl(format, index, 'months');
  }
  function listMonthsShort(format, index) {
    return listMonthsImpl(format, index, 'monthsShort');
  }
  function listWeekdays(localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
  }
  function listWeekdaysShort(localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
  }
  function listWeekdaysMin(localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
  }
  getSetGlobalLocale('en', {
    ordinalParse: /\d{1,2}(th|st|nd|rd)/,
    ordinal: function(number) {
      var b = number % 10,
          output = (toInt(number % 100 / 10) === 1) ? 'th' : (b === 1) ? 'st' : (b === 2) ? 'nd' : (b === 3) ? 'rd' : 'th';
      return number + output;
    }
  });
  hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
  hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);
  var mathAbs = Math.abs;
  function abs() {
    var data = this._data;
    this._milliseconds = mathAbs(this._milliseconds);
    this._days = mathAbs(this._days);
    this._months = mathAbs(this._months);
    data.milliseconds = mathAbs(data.milliseconds);
    data.seconds = mathAbs(data.seconds);
    data.minutes = mathAbs(data.minutes);
    data.hours = mathAbs(data.hours);
    data.months = mathAbs(data.months);
    data.years = mathAbs(data.years);
    return this;
  }
  function addSubtract$1(duration, input, value, direction) {
    var other = createDuration(input, value);
    duration._milliseconds += direction * other._milliseconds;
    duration._days += direction * other._days;
    duration._months += direction * other._months;
    return duration._bubble();
  }
  function add$1(input, value) {
    return addSubtract$1(this, input, value, 1);
  }
  function subtract$1(input, value) {
    return addSubtract$1(this, input, value, -1);
  }
  function absCeil(number) {
    if (number < 0) {
      return Math.floor(number);
    } else {
      return Math.ceil(number);
    }
  }
  function bubble() {
    var milliseconds = this._milliseconds;
    var days = this._days;
    var months = this._months;
    var data = this._data;
    var seconds,
        minutes,
        hours,
        years,
        monthsFromDays;
    if (!((milliseconds >= 0 && days >= 0 && months >= 0) || (milliseconds <= 0 && days <= 0 && months <= 0))) {
      milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
      days = 0;
      months = 0;
    }
    data.milliseconds = milliseconds % 1000;
    seconds = absFloor(milliseconds / 1000);
    data.seconds = seconds % 60;
    minutes = absFloor(seconds / 60);
    data.minutes = minutes % 60;
    hours = absFloor(minutes / 60);
    data.hours = hours % 24;
    days += absFloor(hours / 24);
    monthsFromDays = absFloor(daysToMonths(days));
    months += monthsFromDays;
    days -= absCeil(monthsToDays(monthsFromDays));
    years = absFloor(months / 12);
    months %= 12;
    data.days = days;
    data.months = months;
    data.years = years;
    return this;
  }
  function daysToMonths(days) {
    return days * 4800 / 146097;
  }
  function monthsToDays(months) {
    return months * 146097 / 4800;
  }
  function as(units) {
    var days;
    var months;
    var milliseconds = this._milliseconds;
    units = normalizeUnits(units);
    if (units === 'month' || units === 'year') {
      days = this._days + milliseconds / 864e5;
      months = this._months + daysToMonths(days);
      return units === 'month' ? months : months / 12;
    } else {
      days = this._days + Math.round(monthsToDays(this._months));
      switch (units) {
        case 'week':
          return days / 7 + milliseconds / 6048e5;
        case 'day':
          return days + milliseconds / 864e5;
        case 'hour':
          return days * 24 + milliseconds / 36e5;
        case 'minute':
          return days * 1440 + milliseconds / 6e4;
        case 'second':
          return days * 86400 + milliseconds / 1000;
        case 'millisecond':
          return Math.floor(days * 864e5) + milliseconds;
        default:
          throw new Error('Unknown unit ' + units);
      }
    }
  }
  function valueOf$1() {
    return (this._milliseconds + this._days * 864e5 + (this._months % 12) * 2592e6 + toInt(this._months / 12) * 31536e6);
  }
  function makeAs(alias) {
    return function() {
      return this.as(alias);
    };
  }
  var asMilliseconds = makeAs('ms');
  var asSeconds = makeAs('s');
  var asMinutes = makeAs('m');
  var asHours = makeAs('h');
  var asDays = makeAs('d');
  var asWeeks = makeAs('w');
  var asMonths = makeAs('M');
  var asYears = makeAs('y');
  function get$2(units) {
    units = normalizeUnits(units);
    return this[units + 's']();
  }
  function makeGetter(name) {
    return function() {
      return this._data[name];
    };
  }
  var milliseconds = makeGetter('milliseconds');
  var seconds = makeGetter('seconds');
  var minutes = makeGetter('minutes');
  var hours = makeGetter('hours');
  var days = makeGetter('days');
  var months = makeGetter('months');
  var years = makeGetter('years');
  function weeks() {
    return absFloor(this.days() / 7);
  }
  var round = Math.round;
  var thresholds = {
    s: 45,
    m: 45,
    h: 22,
    d: 26,
    M: 11
  };
  function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
    return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
  }
  function relativeTime$1(posNegDuration, withoutSuffix, locale) {
    var duration = createDuration(posNegDuration).abs();
    var seconds = round(duration.as('s'));
    var minutes = round(duration.as('m'));
    var hours = round(duration.as('h'));
    var days = round(duration.as('d'));
    var months = round(duration.as('M'));
    var years = round(duration.as('y'));
    var a = seconds < thresholds.s && ['s', seconds] || minutes <= 1 && ['m'] || minutes < thresholds.m && ['mm', minutes] || hours <= 1 && ['h'] || hours < thresholds.h && ['hh', hours] || days <= 1 && ['d'] || days < thresholds.d && ['dd', days] || months <= 1 && ['M'] || months < thresholds.M && ['MM', months] || years <= 1 && ['y'] || ['yy', years];
    a[2] = withoutSuffix;
    a[3] = +posNegDuration > 0;
    a[4] = locale;
    return substituteTimeAgo.apply(null, a);
  }
  function getSetRelativeTimeRounding(roundingFunction) {
    if (roundingFunction === undefined) {
      return round;
    }
    if (typeof(roundingFunction) === 'function') {
      round = roundingFunction;
      return true;
    }
    return false;
  }
  function getSetRelativeTimeThreshold(threshold, limit) {
    if (thresholds[threshold] === undefined) {
      return false;
    }
    if (limit === undefined) {
      return thresholds[threshold];
    }
    thresholds[threshold] = limit;
    return true;
  }
  function humanize(withSuffix) {
    var locale = this.localeData();
    var output = relativeTime$1(this, !withSuffix, locale);
    if (withSuffix) {
      output = locale.pastFuture(+this, output);
    }
    return locale.postformat(output);
  }
  var abs$1 = Math.abs;
  function toISOString$1() {
    var seconds = abs$1(this._milliseconds) / 1000;
    var days = abs$1(this._days);
    var months = abs$1(this._months);
    var minutes,
        hours,
        years;
    minutes = absFloor(seconds / 60);
    hours = absFloor(minutes / 60);
    seconds %= 60;
    minutes %= 60;
    years = absFloor(months / 12);
    months %= 12;
    var Y = years;
    var M = months;
    var D = days;
    var h = hours;
    var m = minutes;
    var s = seconds;
    var total = this.asSeconds();
    if (!total) {
      return 'P0D';
    }
    return (total < 0 ? '-' : '') + 'P' + (Y ? Y + 'Y' : '') + (M ? M + 'M' : '') + (D ? D + 'D' : '') + ((h || m || s) ? 'T' : '') + (h ? h + 'H' : '') + (m ? m + 'M' : '') + (s ? s + 'S' : '');
  }
  var proto$2 = Duration.prototype;
  proto$2.abs = abs;
  proto$2.add = add$1;
  proto$2.subtract = subtract$1;
  proto$2.as = as;
  proto$2.asMilliseconds = asMilliseconds;
  proto$2.asSeconds = asSeconds;
  proto$2.asMinutes = asMinutes;
  proto$2.asHours = asHours;
  proto$2.asDays = asDays;
  proto$2.asWeeks = asWeeks;
  proto$2.asMonths = asMonths;
  proto$2.asYears = asYears;
  proto$2.valueOf = valueOf$1;
  proto$2._bubble = bubble;
  proto$2.get = get$2;
  proto$2.milliseconds = milliseconds;
  proto$2.seconds = seconds;
  proto$2.minutes = minutes;
  proto$2.hours = hours;
  proto$2.days = days;
  proto$2.weeks = weeks;
  proto$2.months = months;
  proto$2.years = years;
  proto$2.humanize = humanize;
  proto$2.toISOString = toISOString$1;
  proto$2.toString = toISOString$1;
  proto$2.toJSON = toISOString$1;
  proto$2.locale = locale;
  proto$2.localeData = localeData;
  proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
  proto$2.lang = lang;
  addFormatToken('X', 0, 0, 'unix');
  addFormatToken('x', 0, 0, 'valueOf');
  addRegexToken('x', matchSigned);
  addRegexToken('X', matchTimestamp);
  addParseToken('X', function(input, array, config) {
    config._d = new Date(parseFloat(input, 10) * 1000);
  });
  addParseToken('x', function(input, array, config) {
    config._d = new Date(toInt(input));
  });
  hooks.version = '2.17.1';
  setHookCallback(createLocal);
  hooks.fn = proto;
  hooks.min = min;
  hooks.max = max;
  hooks.now = now;
  hooks.utc = createUTC;
  hooks.unix = createUnix;
  hooks.months = listMonths;
  hooks.isDate = isDate;
  hooks.locale = getSetGlobalLocale;
  hooks.invalid = createInvalid;
  hooks.duration = createDuration;
  hooks.isMoment = isMoment;
  hooks.weekdays = listWeekdays;
  hooks.parseZone = createInZone;
  hooks.localeData = getLocale;
  hooks.isDuration = isDuration;
  hooks.monthsShort = listMonthsShort;
  hooks.weekdaysMin = listWeekdaysMin;
  hooks.defineLocale = defineLocale;
  hooks.updateLocale = updateLocale;
  hooks.locales = listLocales;
  hooks.weekdaysShort = listWeekdaysShort;
  hooks.normalizeUnits = normalizeUnits;
  hooks.relativeTimeRounding = getSetRelativeTimeRounding;
  hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
  hooks.calendarFormat = getCalendarFormat;
  hooks.prototype = proto;
  return hooks;
})));

})();
$__System.registerDynamic("App/helpers/datehelper.js", ["npm:moment/moment.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var moment = $__require("npm:moment/moment.js");
    function getAgeFromNin(nin) {
        var ageArray = nin.substr(0, 6).match(/.{1,2}/g);
        if (+ageArray[0] > 40) {
            ageArray[0] = String(+ageArray[0] - 40);
            if (ageArray[0].length === 1) ageArray[0] = "0" + ageArray[0];
        }
        ageArray[2] = +ageArray[2] <= new Date().getFullYear() % 100 ? String(+ageArray[2] + 2000) : String(+ageArray[2] + 1900);
        return moment().diff(moment(ageArray.join(""), "DDMMYYYY"), "y");
    }
    exports.getAgeFromNin = getAgeFromNin;
    function isValidDate(fromDate, toDate) {
        var valid = true;
        if (fromDate != undefined) {
            var from = moment(fromDate);
            if (moment().diff(from) > 0) valid = true;else valid = false;
        }
        if (valid) {
            if (toDate != undefined) {
                var to = moment(toDate);
                if (moment().diff(to) > 0) {
                    valid = false;
                }
            }
        }
        return valid;
    }
    exports.isValidDate = isValidDate;
    function getDateString(from, to) {
        return (from ? moment(from).format("DD/MM YYYY") : "uspesifisert") + " - " + (to ? moment(to).format("DD/MM YYYY") : "uspesifisert");
    }
    exports.getDateString = getDateString;
    function getYearFromDateString(date) {
        return moment().diff(moment(date), "y");
    }
    exports.getYearFromDateString = getYearFromDateString;
    return module.exports;
});
$__System.registerDynamic("App/person/search/active-filters/active-filters.component.js", ["npm:@angular/core/bundles/core.umd.js", "App/services/filter-manager.service.js", "App/helpers/datehelper.js", "App/services/mediator.service.js", "App/services/search-manager.service.js", "App/services/user-manager.service.js", "npm:ng2-toastr/ng2-toastr.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var filter_manager_service_1 = $__require("App/services/filter-manager.service.js");
    var datehelper_1 = $__require("App/helpers/datehelper.js");
    var mediator_service_1 = $__require("App/services/mediator.service.js");
    var search_manager_service_1 = $__require("App/services/search-manager.service.js");
    var user_manager_service_1 = $__require("App/services/user-manager.service.js");
    var ng2_toastr_1 = $__require("npm:ng2-toastr/ng2-toastr.js");
    var ActiveFiltersComponent = function () {
        function ActiveFiltersComponent(filterManager, mediator, searchManager, userManger, toastr) {
            this.filterManager = filterManager;
            this.mediator = mediator;
            this.searchManager = searchManager;
            this.userManger = userManger;
            this.toastr = toastr;
            this.activeFilters = [];
        }
        ActiveFiltersComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.filterManager.activeFilters$.subscribe(function (filters) {
                _this.activeFilters = filters;
            });
            this.mediator.searchTerm$.subscribe(function (term) {
                _this.term = term;
            });
            this.userManger.getUserName().subscribe(function (name) {
                return _this.userName = name;
            });
        };
        Object.defineProperty(ActiveFiltersComponent.prototype, "activeFilterCount", {
            get: function () {
                return this.activeFilters.length + (this.term.searchTerm === "" || this.term.searchTerm == undefined ? 0 : 1);
            },
            enumerable: true,
            configurable: true
        });
        ActiveFiltersComponent.prototype.isOwnedByUser = function () {
            return this.term.dbName && this.term.registeredBy === this.userName;
        };
        ActiveFiltersComponent.prototype.isSavable = function () {
            return !this.term.dbName && (this.term.searchTerm !== "" || this.activeFilters && this.activeFilters.some(function (i) {
                return i.selected;
            }));
        };
        ActiveFiltersComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            $("#saveSearch").popup({
                on: "click",
                onHide: function () {
                    _this.error = false;
                }
            });
            $("#deleteSearch").popup({
                on: "click"
            });
        };
        ActiveFiltersComponent.prototype.save = function (name, description) {
            var _this = this;
            this.error = false;
            if (name.length === 0) {
                this.error = true;
                return;
            }
            this.saving = true;
            this.searchManager.saveSearch(name, description).subscribe(function (res) {
                _this.term = res;
                $("#saveSearch").popup("hide");
            });
        };
        ActiveFiltersComponent.prototype.searchWithEmptyFilters = function () {
            this.searchManager.searchWithEmptyFilters();
        };
        ActiveFiltersComponent.prototype.deleteSearch = function () {
            var _this = this;
            if (!this.term.dbName) return;
            this.deleting = true;
            this.searchManager.deleteSearch(this.term).subscribe(function (res) {
                _this.deleting = false;
                if (res) {
                    _this.closeConfirmation();
                    _this.term.dbName = undefined;
                } else {}
            });
        };
        ActiveFiltersComponent.prototype.close = function () {
            this.error = false;
            $("#saveSearch").popup("hide");
        };
        ActiveFiltersComponent.prototype.closeConfirmation = function () {
            $("#deleteSearch").popup("hide");
        };
        ActiveFiltersComponent.prototype.onRemove = function (item) {
            item.selected = false;
            item.parameter = "";
            this.filterManager.filterChanged([item]);
        };
        ActiveFiltersComponent.prototype.onSearchRemove = function () {
            this.term.searchTerm = "";
            this.mediator.clearSearchTerm();
        };
        ActiveFiltersComponent.prototype.getParameter = function (item) {
            if (item.name === "Minst" || item.name === "Maks") {
                return datehelper_1.getYearFromDateString(item.parameter);
            }
        };
        return ActiveFiltersComponent;
    }();
    ActiveFiltersComponent = __decorate([core_1.Component({
        selector: "active-filters",
        moduleId: module.id,
        templateUrl: "active-filters.component.html",
        styleUrls: ["active-filters.component.css"]
    }), __metadata("design:paramtypes", [filter_manager_service_1.FilterManagerService, mediator_service_1.MediatorService, search_manager_service_1.SearchManagerService, user_manager_service_1.UserManagerService, ng2_toastr_1.ToastsManager])], ActiveFiltersComponent);
    exports.ActiveFiltersComponent = ActiveFiltersComponent;
    return module.exports;
});
$__System.registerDynamic("App/person/filter/filtertypes/children/children-filter.component.js", ["npm:@angular/core/bundles/core.umd.js", "App/models/DataModels.js", "App/services/filter-manager.service.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var DataModels_1 = $__require("App/models/DataModels.js");
    var filter_manager_service_1 = $__require("App/services/filter-manager.service.js");
    var ChildrenFilterComponent = function () {
        function ChildrenFilterComponent(filterManager) {
            var _this = this;
            this.filterManager = filterManager;
            this.hasCustodySelected = false;
            this.hasNotCustodySelected = false;
            this.agevalues = [];
            this.ageSelected = "0";
            this.filterManager.removedFilter$.subscribe(function (item) {
                if (item.parent === _this.hasCustodyGroup.name) {
                    _this.hasCustodySelected = false;
                    _this.setDropdownDefault();
                    _this.unselectGroup(true);
                }
                if (item.parent === _this.hasNotCustodyGroup.name) {
                    _this.hasNotCustodySelected = false;
                    _this.setDropdownDefault();
                    _this.unselectGroup(false);
                }
                if (item.parent === _this.group.name) {
                    _this.hasCustodySelected = false;
                    _this.hasNotCustodySelected = false;
                    _this.unselectGroup();
                    _this.group.items.forEach(function (f) {
                        return f.selected = false;
                    });
                    if (_this.ageSelected === "0") {
                        _this.setDropdownDefault();
                        if (_this.lastFilter) _this.lastFilter.selected = false;
                        _this.performeSearch();
                    } else _this.setDropdownDefault();
                }
            });
        }
        ChildrenFilterComponent.prototype.ngOnInit = function () {
            this.hasChild = this.group.items[0];
            this.hasNotChild = this.group.items[this.group.items.length - 1];
            _a = this.group.groups, this.hasCustodyGroup = _a[0], this.hasNotCustodyGroup = _a[1];
            this.agevalues = this.hasCustodyGroup.items.map(function (f) {
                return f.name;
            });
            if (this.hasCustodyGroup.items.some(function (i) {
                return i.selected;
            })) {
                this.hasCustodySelected = true;
            } else if (this.hasNotCustodyGroup.items.some(function (i) {
                return i.selected;
            })) {
                this.hasNotCustodySelected = true;
            }
            var _a;
        };
        ChildrenFilterComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            $('#agedropdown').dropdown({
                onChange: function (value) {
                    _this.ageSelected = value;
                    _this.setFilters();
                    _this.performeSearch();
                }
            });
            if (this.hasNotCustodySelected) {
                var index = this.hasNotCustodyGroup.items.findIndex(function (i) {
                    return i.selected;
                });
                this.lastFilter = this.hasNotCustodyGroup.items[index];
                this.ageSelected = String(index);
                if (index != 0) {
                    $('#agedropdown').dropdown("set selected", String(this.ageSelected));
                }
            } else if (this.hasCustodySelected) {
                var index = this.hasCustodyGroup.items.findIndex(function (i) {
                    return i.selected;
                });
                this.lastFilter = this.hasCustodyGroup.items[index];
                this.ageSelected = String(index);
                if (index != 0) {
                    $('#agedropdown').dropdown("set selected", String(this.ageSelected));
                }
            }
        };
        ChildrenFilterComponent.prototype.setDropdownDefault = function () {
            $("#agedropdown").dropdown("restore default value");
        };
        ChildrenFilterComponent.prototype.onSelect = function (isHasChild) {
            if (isHasChild) {
                this.hasNotChild.selected = false;
            } else {
                this.hasChild.selected = false;
                this.hasCustodySelected = false;
                this.hasNotCustodySelected = false;
                this.setDropdownDefault();
                this.unselectGroup();
            }
            this.performeSearch();
        };
        ChildrenFilterComponent.prototype.onCustodySelect = function (custody) {
            if (!custody) {
                this.hasCustodySelected = false;
            } else {
                this.hasNotCustodySelected = false;
            }
            if (!this.hasCustodySelected && !this.hasNotCustodySelected) {
                this.unselectGroup();
            }
            this.setFilters();
            this.performeSearch();
        };
        ChildrenFilterComponent.prototype.performeSearch = function () {
            this.filterManager.filterChanged(this.getFilterItems());
        };
        ChildrenFilterComponent.prototype.getFilterItems = function () {
            var items = this.group.items.concat(this.hasCustodyGroup.items).concat(this.hasNotCustodyGroup.items);
            return items;
        };
        ChildrenFilterComponent.prototype.unselectGroup = function (isHasCustody) {
            if (isHasCustody === undefined) {
                this.hasCustodyGroup.items.forEach(function (f) {
                    return f.selected = false;
                });
                this.hasNotCustodyGroup.items.forEach(function (f) {
                    return f.selected = false;
                });
            } else {
                var group = isHasCustody ? this.hasCustodyGroup : this.hasNotCustodyGroup;
                group.items.forEach(function (f) {
                    return f.selected = false;
                });
            }
        };
        ChildrenFilterComponent.prototype.setFilters = function () {
            if (this.lastFilter && this.lastFilter != this.hasChild) this.lastFilter.selected = false;
            var appropriateFilterGroup;
            if (this.hasNotChild.selected) {
                this.unselectGroup();
                return;
            }
            if (this.hasChild.selected) {
                appropriateFilterGroup = this.group;
            }
            if (this.hasCustodySelected) {
                appropriateFilterGroup = this.hasCustodyGroup;
            }
            if (this.hasNotCustodySelected) {
                appropriateFilterGroup = this.hasNotCustodyGroup;
            }
            if (appropriateFilterGroup === undefined) {
                return;
            }
            this.lastFilter = appropriateFilterGroup.items[Number(this.ageSelected)];
            appropriateFilterGroup.items[Number(this.ageSelected)].selected = true;
        };
        return ChildrenFilterComponent;
    }();
    __decorate([core_1.Input(), __metadata("design:type", DataModels_1.FilterGroup)], ChildrenFilterComponent.prototype, "group", void 0);
    ChildrenFilterComponent = __decorate([core_1.Component({
        selector: "children-filter",
        moduleId: module.id,
        templateUrl: "children-filter.component.html"
    }), __metadata("design:paramtypes", [filter_manager_service_1.FilterManagerService])], ChildrenFilterComponent);
    exports.ChildrenFilterComponent = ChildrenFilterComponent;
    return module.exports;
});
$__System.registerDynamic("App/error/error-message.component.js", ["npm:@angular/core/bundles/core.umd.js", "App/services/mediator.service.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var mediator_service_1 = $__require("App/services/mediator.service.js");
    var ErrorMessageComponent = function () {
        function ErrorMessageComponent(mediatorService) {
            var _this = this;
            this.mediatorService = mediatorService;
            this.mediatorService.errorMessage$.subscribe(function (message) {
                _this.error = message;
                if (_this.error.time) setTimeout(function () {
                    return _this.error = undefined;
                }, _this.error.time);
            });
        }
        return ErrorMessageComponent;
    }();
    ErrorMessageComponent = __decorate([core_1.Component({
        moduleId: module.id,
        selector: "error-message",
        templateUrl: "error-message.component.html"
    }), __metadata("design:paramtypes", [mediator_service_1.MediatorService])], ErrorMessageComponent);
    exports.ErrorMessageComponent = ErrorMessageComponent;
    return module.exports;
});
$__System.registerDynamic("App/person/search/saved-search/saved-search.component.js", ["npm:@angular/core/bundles/core.umd.js", "App/services/data-manager.service.js", "App/services/search-manager.service.js", "App/models/UtilityModels.js", "App/services/mediator.service.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var data_manager_service_1 = $__require("App/services/data-manager.service.js");
    var search_manager_service_1 = $__require("App/services/search-manager.service.js");
    var UtilityModels_1 = $__require("App/models/UtilityModels.js");
    var mediator_service_1 = $__require("App/services/mediator.service.js");
    var SavedSearchComponent = function () {
        function SavedSearchComponent(dataManager, searchManager, mediator) {
            this.dataManager = dataManager;
            this.searchManager = searchManager;
            this.mediator = mediator;
            this.searchList = [];
            this.ownedBy = UtilityModels_1.OwnedBy;
            this.selected = UtilityModels_1.OwnedBy.Me;
        }
        SavedSearchComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.searchManager.savedSearchList$.subscribe(function (list) {
                if (_this.searchList.length === list.length) $(".savedSearchList").dropdown("clear");
                _this.searchList = list;
            });
            this.mediator.searchTerm$.subscribe(function (active) {
                if (_this.currentSelection && _this.currentSelection !== active) {
                    _this.restoreDropdown();
                    _this.currentSelection = undefined;
                }
            });
            this.mediator.userInfo$.subscribe(function () {
                return _this.selected = UtilityModels_1.OwnedBy.Me;
            });
        };
        SavedSearchComponent.prototype.restoreDropdown = function () {
            $(".savedSearchList").dropdown("clear");
        };
        SavedSearchComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            $(".savedSearchList").dropdown({
                forceSelection: false,
                sortSelect: true,
                onChange: function (value) {
                    var search = _this.searchList.find(function (s) {
                        return s.dbName === value;
                    });
                    if (search) {
                        _this.currentSelection = search;
                        _this.searchManager.performeSavedSearch(search);
                    }
                }
            });
        };
        return SavedSearchComponent;
    }();
    SavedSearchComponent = __decorate([core_1.Component({
        selector: "saved-search",
        moduleId: module.id,
        templateUrl: "saved-search.component.html",
        styleUrls: ["saved-search.component.css"]
    }), __metadata("design:paramtypes", [data_manager_service_1.DataManagerService, search_manager_service_1.SearchManagerService, mediator_service_1.MediatorService])], SavedSearchComponent);
    exports.SavedSearchComponent = SavedSearchComponent;
    return module.exports;
});
$__System.registerDynamic("App/models/DataModels.js", ["App/models/UtilityModels.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var UtilityModels_1 = $__require("App/models/UtilityModels.js");
    var SurveillanceResult = function () {
        function SurveillanceResult() {}
        return SurveillanceResult;
    }();
    exports.SurveillanceResult = SurveillanceResult;
    var Surveillance = function () {
        function Surveillance() {}
        return Surveillance;
    }();
    exports.Surveillance = Surveillance;
    var FilterGroup = function () {
        function FilterGroup() {}
        return FilterGroup;
    }();
    exports.FilterGroup = FilterGroup;
    var FilterItem = function () {
        function FilterItem() {}
        return FilterItem;
    }();
    exports.FilterItem = FilterItem;
    var RegisterPerson = function () {
        function RegisterPerson() {
            this.latestSurveillanceResults = [];
            this.status = UtilityModels_1.SurveillanceStatus.Synced;
        }
        return RegisterPerson;
    }();
    exports.RegisterPerson = RegisterPerson;
    var FilterBelonging;
    (function (FilterBelonging) {
        FilterBelonging[FilterBelonging["Hpr"] = 1] = "Hpr";
        FilterBelonging[FilterBelonging["Preg"] = 2] = "Preg";
        FilterBelonging[FilterBelonging["All"] = 3] = "All";
        FilterBelonging[FilterBelonging["Flr"] = 4] = "Flr";
    })(FilterBelonging = exports.FilterBelonging || (exports.FilterBelonging = {}));
    var UserData = function () {
        function UserData(username, password) {
            if (username === void 0) {
                username = "";
            }
            if (password === void 0) {
                password = "";
            }
            this.username = username;
            this.password = password;
        }
        return UserData;
    }();
    exports.UserData = UserData;
    var LoginSubmission = function () {
        function LoginSubmission() {}
        return LoginSubmission;
    }();
    exports.LoginSubmission = LoginSubmission;
    var Tag = function () {
        function Tag() {}
        return Tag;
    }();
    exports.Tag = Tag;
    var PersonDetails = function () {
        function PersonDetails() {}
        return PersonDetails;
    }();
    exports.PersonDetails = PersonDetails;
    var Comment = function () {
        function Comment() {}
        return Comment;
    }();
    exports.Comment = Comment;
    return module.exports;
});
$__System.registerDynamic("App/person/filter/filtertypes/parent/parent-filter.component.js", ["npm:@angular/core/bundles/core.umd.js", "App/models/DataModels.js", "App/services/filter-manager.service.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var DataModels_1 = $__require("App/models/DataModels.js");
    var filter_manager_service_1 = $__require("App/services/filter-manager.service.js");
    var ParentFilterComponent = function () {
        function ParentFilterComponent(filterManager) {
            this.filterManager = filterManager;
        }
        ParentFilterComponent.prototype.onCheckBoxSelect = function (item) {
            if (item === this.hasParent && this.hasParent.selected) {
                this.hasNotParent.selected = false;
            } else {
                this.hasParent.selected = false;
                this.inPreg.selected = false;
                this.notInPreg.selected = false;
            }
            this.filterManager.filterChanged(this.getFilters());
        };
        ParentFilterComponent.prototype.onPregCheckBoxSelect = function (item) {
            if (item === this.inPreg) this.notInPreg.selected = false;else this.inPreg.selected = false;
            this.filterManager.filterChanged(this.getFilters());
        };
        ParentFilterComponent.prototype.getFilters = function () {
            return this.group.items.concat(this.preg);
        };
        ParentFilterComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.filterManager.removedFilter$.subscribe(function (f) {
                if (f.uniqueValue === _this.hasParent.uniqueValue) {
                    _this.preg.forEach(function (i) {
                        return i.selected = false;
                    });
                    _this.filterManager.filterChanged(_this.preg);
                }
                if (f.uniqueValue === _this.hasNotParent.uniqueValue) {
                    _this.preg.forEach(function (i) {
                        return i.selected = false;
                    });
                    _this.filterManager.filterChanged(_this.preg);
                }
            });
            _a = this.group.items, this.hasParent = _a[0], this.hasNotParent = _a[1];
            this.preg = [].concat.apply([], this.group.groups.map(function (g) {
                return g.items;
            }));
            _b = this.preg, this.inPreg = _b[0], this.notInPreg = _b[1];
            var _a, _b;
        };
        return ParentFilterComponent;
    }();
    __decorate([core_1.Input(), __metadata("design:type", DataModels_1.FilterGroup)], ParentFilterComponent.prototype, "group", void 0);
    ParentFilterComponent = __decorate([core_1.Component({
        selector: "parent-filter",
        moduleId: module.id,
        templateUrl: "parent-filter.component.html",
        styleUrls: ["../filter-group.component"]
    }), __metadata("design:paramtypes", [filter_manager_service_1.FilterManagerService])], ParentFilterComponent);
    exports.ParentFilterComponent = ParentFilterComponent;
    return module.exports;
});
$__System.registerDynamic("App/custom-pipes/saved-search.pipe.js", ["npm:@angular/core/bundles/core.umd.js", "App/models/UtilityModels.js", "App/services/user-manager.service.js", "npm:rxjs/observable/of.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var UtilityModels_1 = $__require("App/models/UtilityModels.js");
    var user_manager_service_1 = $__require("App/services/user-manager.service.js");
    var of_1 = $__require("npm:rxjs/observable/of.js");
    var SavedSearchPipe = function () {
        function SavedSearchPipe(userManager) {
            this.userManager = userManager;
        }
        SavedSearchPipe.prototype.transform = function (value, ownedBy) {
            if (value == undefined) {
                return of_1.of(new Array());
            }
            switch (ownedBy) {
                case UtilityModels_1.OwnedBy.Me:
                    return this.userManager.getUserName().map(function (name) {
                        return value.filter(function (s) {
                            return s.registeredBy === name;
                        });
                    });
                case UtilityModels_1.OwnedBy.Project:
                    return this.userManager.getProjectIdAsync().map(function (id) {
                        return value.filter(function (s) {
                            return s.teamProjectInt === id;
                        });
                    });
                default:
                    return this.userManager.getUserName().map(function (name) {
                        return value.filter(function (s) {
                            return s.registeredBy !== name;
                        });
                    });
            }
        };
        return SavedSearchPipe;
    }();
    SavedSearchPipe = __decorate([core_1.Pipe({ name: 'savedsearch' }), __metadata("design:paramtypes", [user_manager_service_1.UserManagerService])], SavedSearchPipe);
    exports.SavedSearchPipe = SavedSearchPipe;
    return module.exports;
});
$__System.registerDynamic("App/person/comments/comments.component.js", ["npm:@angular/core/bundles/core.umd.js", "App/services/mediator.service.js", "App/services/data-manager.service.js", "App/services/search-manager.service.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var mediator_service_1 = $__require("App/services/mediator.service.js");
    var data_manager_service_1 = $__require("App/services/data-manager.service.js");
    var search_manager_service_1 = $__require("App/services/search-manager.service.js");
    var CommentsComponent = function () {
        function CommentsComponent(mediator, dataManager, searchManager) {
            var _this = this;
            this.mediator = mediator;
            this.dataManager = dataManager;
            this.searchManager = searchManager;
            this.mediator.userInfo$.subscribe(function (user) {
                if (user) _this.userName = user.username;
            });
        }
        CommentsComponent.prototype.remove = function (comment) {
            this.dataManager.removeComment(comment);
        };
        CommentsComponent.prototype.searchWithNin = function (comment) {
            this.searchManager.searchWithNin(comment.commonIdentifier);
        };
        return CommentsComponent;
    }();
    __decorate([core_1.Input(), __metadata("design:type", Array)], CommentsComponent.prototype, "comments", void 0);
    __decorate([core_1.Input(), __metadata("design:type", Boolean)], CommentsComponent.prototype, "details", void 0);
    CommentsComponent = __decorate([core_1.Component({
        selector: "comments",
        moduleId: module.id,
        templateUrl: "comments.component.html",
        styleUrls: ["comments.component.css"]
    }), __metadata("design:paramtypes", [mediator_service_1.MediatorService, data_manager_service_1.DataManagerService, search_manager_service_1.SearchManagerService])], CommentsComponent);
    exports.CommentsComponent = CommentsComponent;
    return module.exports;
});
$__System.registerDynamic("App/person/comments/create-comment.component.js", ["npm:@angular/core/bundles/core.umd.js", "App/services/data-manager.service.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var data_manager_service_1 = $__require("App/services/data-manager.service.js");
    var CreateCommentComponent = function () {
        function CreateCommentComponent(dataManager) {
            this.dataManager = dataManager;
        }
        CreateCommentComponent.prototype.save = function () {
            var _this = this;
            if (this.content === undefined && this.content === "") return;
            this.saving = true;
            this.dataManager.addCommentToPerson(this.content, this.commonIdentifier).subscribe(function (res) {
                _this.saving = false;
                if (res) {
                    _this.showBox = false;
                    _this.content = "";
                }
            });
        };
        return CreateCommentComponent;
    }();
    __decorate([core_1.Input(), __metadata("design:type", String)], CreateCommentComponent.prototype, "commonIdentifier", void 0);
    CreateCommentComponent = __decorate([core_1.Component({
        moduleId: module.id,
        selector: "create-comment",
        templateUrl: "create-comment.component.html"
    }), __metadata("design:paramtypes", [data_manager_service_1.DataManagerService])], CreateCommentComponent);
    exports.CreateCommentComponent = CreateCommentComponent;
    return module.exports;
});
$__System.registerDynamic("App/person/index/index.component.js", ["npm:@angular/core/bundles/core.umd.js", "App/services/mediator.service.js", "App/services/data-manager.service.js", "App/models/UtilityModels.js", "App/services/user-manager.service.js", "App/services/filter-manager.service.js", "App/services/search-manager.service.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var mediator_service_1 = $__require("App/services/mediator.service.js");
    var data_manager_service_1 = $__require("App/services/data-manager.service.js");
    var UtilityModels_1 = $__require("App/models/UtilityModels.js");
    var user_manager_service_1 = $__require("App/services/user-manager.service.js");
    var filter_manager_service_1 = $__require("App/services/filter-manager.service.js");
    var search_manager_service_1 = $__require("App/services/search-manager.service.js");
    var IndexComponent = function () {
        function IndexComponent(userManagerService, mediatorService, dataManagerService, filterManager, searchManager) {
            var _this = this;
            this.userManagerService = userManagerService;
            this.mediatorService = mediatorService;
            this.dataManagerService = dataManagerService;
            this.filterManager = filterManager;
            this.searchManager = searchManager;
            this.ChildViews = UtilityModels_1.ChildViews;
            this.searchInProgress = false;
            this.active = 0;
            this.term = "";
            this.loading = false;
            this.mediatorService.searching$.subscribe(function (value) {
                return _this.searchInProgress = value;
            });
            this.mediatorService.changeMainView$.subscribe(function (view) {
                return _this.switchCurrentView(view);
            });
            this.mediatorService.searchTerm$.subscribe(function (term) {
                return _this.term = term.searchTerm;
            });
            this.filterManager.activeFilters$.subscribe(function (filter) {
                _this.active = filter ? filter.length : 0;
            });
        }
        IndexComponent.prototype.ngOnInit = function () {
            this.currentView = UtilityModels_1.ChildViews.Dashboard;
            this.userManagerService.getUserDetailsFromServer().subscribe();
        };
        Object.defineProperty(IndexComponent.prototype, "activeFilters", {
            get: function () {
                return this.active + (this.term === "" || this.term == undefined ? 0 : 1);
            },
            enumerable: true,
            configurable: true
        });
        IndexComponent.prototype.onShowSearch = function () {
            this.switchCurrentView(UtilityModels_1.ChildViews.Search);
        };
        IndexComponent.prototype.switchCurrentView = function (view) {
            this.currentView = view;
        };
        IndexComponent.prototype.showSurveillances = function () {
            this.switchCurrentView(UtilityModels_1.ChildViews.Surveillance);
        };
        IndexComponent.prototype.showSearch = function () {
            this.switchCurrentView(UtilityModels_1.ChildViews.Search);
        };
        IndexComponent.prototype.searchWithEmptyFilters = function () {
            this.searchManager.searchWithEmptyFilters();
        };
        return IndexComponent;
    }();
    IndexComponent = __decorate([core_1.Component({
        selector: "index",
        moduleId: module.id,
        templateUrl: "index.component.html",
        styleUrls: ["index.component.css"]
    }), __metadata("design:paramtypes", [user_manager_service_1.UserManagerService, mediator_service_1.MediatorService, data_manager_service_1.DataManagerService, filter_manager_service_1.FilterManagerService, search_manager_service_1.SearchManagerService])], IndexComponent);
    exports.IndexComponent = IndexComponent;
    return module.exports;
});
$__System.registerDynamic("App/helpers/searchParser.js", ["App/models/UtilityModels.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var UtilityModels_1 = $__require("App/models/UtilityModels.js");
    var SearchParser = function () {
        function SearchParser(term) {
            this._term = term;
            this.type = this.getSearchType(term);
        }
        Object.defineProperty(SearchParser.prototype, "term", {
            get: function () {
                return this._term;
            },
            set: function (searchTerm) {
                this._term = searchTerm;
                this.type = this.getSearchType(searchTerm);
            },
            enumerable: true,
            configurable: true
        });
        SearchParser.prototype.getSearchType = function (term) {
            if (term === "" || term === undefined) return UtilityModels_1.SearchType.Empty;
            if (isNaN(+term)) return UtilityModels_1.SearchType.Name;
            if (term.length >= 7 && term.length <= 9) return UtilityModels_1.SearchType.Number;
            if (term.length === 11) return UtilityModels_1.SearchType.NIN;
            return UtilityModels_1.SearchType.Query;
        };
        return SearchParser;
    }();
    exports.SearchParser = SearchParser;
    return module.exports;
});
$__System.registerDynamic("App/services/search-manager.service.js", ["npm:@angular/core/bundles/core.umd.js", "npm:rxjs/ReplaySubject.js", "App/services/mediator.service.js", "App/helpers/searchParser.js", "App/services/data-manager.service.js", "App/models/UtilityModels.js", "App/services/filter-manager.service.js", "App/services/api.service.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var ReplaySubject_1 = $__require("npm:rxjs/ReplaySubject.js");
    var mediator_service_1 = $__require("App/services/mediator.service.js");
    var searchParser_1 = $__require("App/helpers/searchParser.js");
    var data_manager_service_1 = $__require("App/services/data-manager.service.js");
    var UtilityModels_1 = $__require("App/models/UtilityModels.js");
    var filter_manager_service_1 = $__require("App/services/filter-manager.service.js");
    var api_service_1 = $__require("App/services/api.service.js");
    var SearchManagerService = function () {
        function SearchManagerService(dataManager, mediator, filterManager, apiService) {
            var _this = this;
            this.dataManager = dataManager;
            this.mediator = mediator;
            this.filterManager = filterManager;
            this.apiService = apiService;
            this.saved = [];
            this.searchTerm = new searchParser_1.SearchParser("");
            this.savedSearchList = [];
            this.savedSearches = new ReplaySubject_1.ReplaySubject(1);
            this.savedSearchList$ = this.savedSearches.asObservable();
            this.mediator.performeSearch$.subscribe(function () {
                return _this.performeSearch();
            });
            this.mediator.clearSearchTerm$.subscribe(function () {
                _this.searchTerm.term = "";
                _this.performeSearch();
            });
            this.mediator.searchTerm$.subscribe(function (term) {
                return _this.searchTerm.term = term.searchTerm;
            });
            this.apiService.getSavedSearches().subscribe(function (res) {
                _this.savedSearchList = res;
                _this.savedSearches.next(_this.savedSearchList);
            });
        }
        SearchManagerService.prototype.setSearchTerm = function (keyword) {
            this.searchTerm.term = keyword;
        };
        SearchManagerService.prototype.cancelSearch = function () {
            this.dataManager.cancelSearch();
            this.filterManager.undo();
        };
        SearchManagerService.prototype.searchWithEmptyFilters = function () {
            this.searchTerm.term = "";
            this.filterManager.resetFilters();
            this.performeSearch();
        };
        SearchManagerService.prototype.searchWithNin = function (nin) {
            this.filterManager.resetFilters();
            this.searchTerm.term = nin;
            this.performeSearch();
        };
        SearchManagerService.prototype.searchForMultipleNins = function (nins) {
            this.filterManager.resetFilters();
            this.searchTerm.term = nins.join(" | ");
            this.performeSearch();
        };
        SearchManagerService.prototype.performeSavedSearch = function (search) {
            this.filterManager.updateFilters(search.filters, search.selectedFilters);
            this.searchTerm.term = search.searchTerm;
            this.performeSearch(search);
        };
        SearchManagerService.prototype.resetSearchTerm = function () {
            this.searchTerm.term = "";
        };
        SearchManagerService.prototype.saveSearch = function (name, description) {
            var _this = this;
            var search = new UtilityModels_1.SearchQuery();
            search.filters = this.filterManager.searchFilters;
            search.friendlyName = name;
            search.description = description;
            search.searchTerm = this.searchTerm.term;
            return this.apiService.saveSearch(search).map(function (res) {
                if (res) {
                    _this.savedSearchList.unshift(res);
                    _this.savedSearches.next(_this.savedSearchList);
                }
                return res;
            });
        };
        SearchManagerService.prototype.deleteSearch = function (search) {
            var _this = this;
            return this.apiService.deleteSearch(search).map(function (res) {
                if (res) {
                    _this.savedSearchList.splice(_this.savedSearchList.findIndex(function (s) {
                        return s.dbName === search.dbName;
                    }), 1);
                    _this.savedSearches.next(_this.savedSearchList);
                    return true;
                } else {
                    return false;
                }
            });
        };
        SearchManagerService.prototype.performeSearch = function (query) {
            if (this.searchTerm.term === "invalid") return;
            this.mediator.changeMainView(UtilityModels_1.ChildViews.Search);
            var searchQuery = query;
            if (!searchQuery) {
                searchQuery = {
                    searchTerm: this.searchTerm.term,
                    filters: this.filterManager.searchFilters,
                    searchType: this.searchTerm.type
                };
            }
            this.mediator.searchTerm(searchQuery);
            this.dataManager.getSearchResult(searchQuery);
        };
        return SearchManagerService;
    }();
    SearchManagerService = __decorate([core_1.Injectable(), __metadata("design:paramtypes", [data_manager_service_1.DataManagerService, mediator_service_1.MediatorService, filter_manager_service_1.FilterManagerService, api_service_1.ApiService])], SearchManagerService);
    exports.SearchManagerService = SearchManagerService;
    return module.exports;
});
$__System.registerDynamic("App/person/dashboard/saved-search-tile/saved-search-tile.component.js", ["npm:@angular/core/bundles/core.umd.js", "App/models/UtilityModels.js", "App/services/search-manager.service.js", "App/services/mediator.service.js", "App/services/user-manager.service.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var UtilityModels_1 = $__require("App/models/UtilityModels.js");
    var search_manager_service_1 = $__require("App/services/search-manager.service.js");
    var mediator_service_1 = $__require("App/services/mediator.service.js");
    var user_manager_service_1 = $__require("App/services/user-manager.service.js");
    var SavedSearchTileComponent = function () {
        function SavedSearchTileComponent(searchManager, mediatorService, userManager) {
            this.searchManager = searchManager;
            this.mediatorService = mediatorService;
            this.userManager = userManager;
            this.ownedBy = UtilityModels_1.OwnedBy;
            this.numberToShow = 5;
            this.display = 5;
        }
        SavedSearchTileComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.loading = true;
            this.searchManager.savedSearchList$.subscribe(function (list) {
                _this.userManager.getUserName().subscribe(function (name) {
                    _this.loading = false;
                    _this.searchList = _this.selected === UtilityModels_1.OwnedBy.All ? list.filter(function (s) {
                        return s.registeredBy !== name;
                    }) : list.filter(function (s) {
                        return s.registeredBy === name;
                    });
                    setTimeout(function () {
                        return $('.filteraccordion').accordion();
                    }, 1000);
                });
            });
        };
        SavedSearchTileComponent.prototype.ngAfterViewInit = function () {
            $('.filteraccordion').accordion();
        };
        SavedSearchTileComponent.prototype.refresh = function () {
            $('.filteraccordion').accordion();
        };
        SavedSearchTileComponent.prototype.search = function (query) {
            this.searchManager.performeSavedSearch(query);
        };
        SavedSearchTileComponent.prototype.changeLength = function () {
            var _this = this;
            this.display = this.display === this.numberToShow ? this.searchList.length : this.numberToShow;
            setTimeout(function () {
                return _this.refresh();
            }, 1000);
        };
        return SavedSearchTileComponent;
    }();
    __decorate([core_1.Input(), __metadata("design:type", Number)], SavedSearchTileComponent.prototype, "selected", void 0);
    SavedSearchTileComponent = __decorate([core_1.Component({
        moduleId: module.id,
        selector: "saved-search-tile",
        templateUrl: "saved-search-tile.component.html",
        styleUrls: ["../dashboard.component.css"]
    }), __metadata("design:paramtypes", [search_manager_service_1.SearchManagerService, mediator_service_1.MediatorService, user_manager_service_1.UserManagerService])], SavedSearchTileComponent);
    exports.SavedSearchTileComponent = SavedSearchTileComponent;
    return module.exports;
});
$__System.registerDynamic("App/person/dashboard/dashboard.component.js", ["npm:@angular/core/bundles/core.umd.js", "App/models/UtilityModels.js", "App/services/user-manager.service.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var UtilityModels_1 = $__require("App/models/UtilityModels.js");
    var user_manager_service_1 = $__require("App/services/user-manager.service.js");
    var DashboardComponent = function () {
        function DashboardComponent(userManager) {
            this.userManager = userManager;
            this.ownedBy = UtilityModels_1.OwnedBy;
        }
        DashboardComponent.prototype.ngOnInit = function () {
            this.name = this.userManager.fetchName();
        };
        return DashboardComponent;
    }();
    DashboardComponent = __decorate([core_1.Component({
        moduleId: module.id,
        selector: "dashboard",
        templateUrl: "dashboard.component.html",
        styleUrls: ["dashboard.component.css"]
    }), __metadata("design:paramtypes", [user_manager_service_1.UserManagerService])], DashboardComponent);
    exports.DashboardComponent = DashboardComponent;
    return module.exports;
});
$__System.registerDynamic("App/services/filter-manager.service.js", ["npm:@angular/core/bundles/core.umd.js", "npm:rxjs/Subject.js", "npm:rxjs/ReplaySubject.js", "App/services/api.service.js", "App/services/mediator.service.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var Subject_1 = $__require("npm:rxjs/Subject.js");
    var ReplaySubject_1 = $__require("npm:rxjs/ReplaySubject.js");
    var api_service_1 = $__require("App/services/api.service.js");
    var mediator_service_1 = $__require("App/services/mediator.service.js");
    var FilterManagerService = function () {
        function FilterManagerService(apiService, mediatorService) {
            var _this = this;
            this.apiService = apiService;
            this.mediatorService = mediatorService;
            this.filtersSubject = new ReplaySubject_1.ReplaySubject(1);
            this.activeFilterSubject = new ReplaySubject_1.ReplaySubject(1);
            this.removedFilterSubject = new Subject_1.Subject();
            this.filters$ = this.filtersSubject.asObservable();
            this.activeFilters$ = this.activeFilterSubject.asObservable();
            this.removedFilter$ = this.removedFilterSubject.asObservable();
            this.lastChange = [];
            this.activeFilters = [];
            this.apiService.getFilters().subscribe(function (f) {
                //copy
                _this.initialFilters = JSON.parse(JSON.stringify(f));
                _this.processFilters(f);
            });
        }
        FilterManagerService.prototype.undo = function () {
            this.lastChange.forEach(function (f) {
                return f.selected = !f.selected;
            });
            this.activeFilterSubject.next(this.activeFilters);
        };
        FilterManagerService.prototype.filterChanged = function (item, performeSearch) {
            if (performeSearch === void 0) {
                performeSearch = true;
            }
            this.lastChange = item;
            var _loop_1 = function (filter) {
                var i = this_1.activeFilters.findIndex(function (f) {
                    return f.uniqueValue === filter.uniqueValue;
                });
                if (i === -1 && filter.selected) this_1.activeFilters.push(filter);
                if (i !== -1 && !filter.selected) this_1.activeFilters.splice(i, 1);
            };
            var this_1 = this;
            for (var _i = 0, item_1 = item; _i < item_1.length; _i++) {
                var filter = item_1[_i];
                _loop_1(filter);
            }
            if (item.length === 1 && !item[0].selected) {
                this.removedFilterSubject.next(item[0]);
            }
            this.activeFilterSubject.next(this.activeFilters);
            if (performeSearch) this.mediatorService.performeSearch();
        };
        FilterManagerService.prototype.processFilters = function (f) {
            this.filters = f;
            this.filtersSubject.next(this.filters);
        };
        FilterManagerService.prototype.updateFilters = function (filters, selectedFilters) {
            var newFilters = JSON.parse(JSON.stringify(filters));
            this.processFilters(newFilters);
            this.activeFilters = JSON.parse(JSON.stringify(selectedFilters));
            this.activeFilterSubject.next(this.activeFilters);
        };
        FilterManagerService.prototype.searchWithTag = function (name) {
            this.resetFilters();
            this.mediatorService.searchTerm({ searchTerm: "" });
            var tagGroup = this.filters.find(function (g) {
                return g.name.toLowerCase() === "tags";
            });
            var item = tagGroup.items.find(function (f) {
                return f.name === name;
            });
            if (item) {
                item.selected = true;
                this.filterChanged([item]);
            }
        };
        FilterManagerService.prototype.resetFilters = function () {
            this.filters = JSON.parse(JSON.stringify(this.initialFilters));
            this.activeFilters = [];
            this.lastChange = undefined;
            this.activeFilterSubject.next(this.activeFilters);
            this.filtersSubject.next(this.filters);
        };
        Object.defineProperty(FilterManagerService.prototype, "searchFilters", {
            get: function () {
                return this.filters;
            },
            enumerable: true,
            configurable: true
        });
        return FilterManagerService;
    }();
    FilterManagerService = __decorate([core_1.Injectable(), __metadata("design:paramtypes", [api_service_1.ApiService, mediator_service_1.MediatorService])], FilterManagerService);
    exports.FilterManagerService = FilterManagerService;
    return module.exports;
});
$__System.registerDynamic("App/helpers/registerhelper.js", ["App/resources/app-settings.js", "App/models/UtilityModels.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var app_settings_1 = $__require("App/resources/app-settings.js");
    var UtilityModels_1 = $__require("App/models/UtilityModels.js");
    function getFullRegisterName(name) {
        switch (name.toLowerCase()) {
            case "preg":
                return "Personregisteret";
            case "hpr":
                return "Helsepersonellregisteret";
            case "flr":
                return "Fastlegeregisteret";
            default:
                return name;
        }
    }
    exports.getFullRegisterName = getFullRegisterName;
    //Ikke optimalt;
    function setStarStatus(team, person) {
        team.subscribe(function (res) {
            if (person.teams.length === 0) person.starState = 1;else {
                if (person.teams.some(function (t) {
                    return t === String(res);
                })) {
                    person.starState = person.teams.length === 1 ? 2 : 4;
                } else person.starState = 3;
            }
        });
    }
    exports.setStarStatus = setStarStatus;
    function getSurveillanceColor(status) {
        if (status === UtilityModels_1.SurveillanceStatus.Unsynced) return app_settings_1.colorUnsynced;else if (status === UtilityModels_1.SurveillanceStatus.Synced) return app_settings_1.colorSynced;
        return app_settings_1.colorUndefined;
    }
    exports.getSurveillanceColor = getSurveillanceColor;
    function getSurveillanceStatus(surveillance) {
        if (surveillance.isChecked) {
            if (surveillance.latestSurveillanceResultForMyTeam === null) {
                return UtilityModels_1.SurveillanceStatus.Unknown;
            }
            if (surveillance.latestSurveillanceResultForMyTeam.success) return UtilityModels_1.SurveillanceStatus.Synced;
            return surveillance.latestSurveillanceResultForMyTeam.errorText.indexOf("Fant ikke person") === -1 ? UtilityModels_1.SurveillanceStatus.Unsynced : UtilityModels_1.SurveillanceStatus.Unknown;
        }
        return UtilityModels_1.SurveillanceStatus.Unknown;
    }
    exports.getSurveillanceStatus = getSurveillanceStatus;
    function getSurveillanceResult(res) {
        if (res.success === null) return UtilityModels_1.SurveillanceStatus.Unknown;
        if (res.success) return UtilityModels_1.SurveillanceStatus.Synced;
        //Ikke optimalt
        return res.errorText.indexOf("Fant ikke person") === -1 ? UtilityModels_1.SurveillanceStatus.Unsynced : UtilityModels_1.SurveillanceStatus.Unknown;
    }
    exports.getSurveillanceResult = getSurveillanceResult;
    function getPersonColor(status) {
        if (status === UtilityModels_1.SurveillanceStatus.Unsynced) return "redleftborder";
        return status === UtilityModels_1.SurveillanceStatus.Synced ? "tealleftborder" : "";
    }
    exports.getPersonColor = getPersonColor;
    function getPersonStatus(person) {
        if (person.surveillances.some(function (sur) {
            return sur.surveillanceState === UtilityModels_1.SurveillanceStatus.Unsynced;
        })) return UtilityModels_1.SurveillanceStatus.Unsynced;
        if (person.surveillances.some(function (sur) {
            return sur.surveillanceState === UtilityModels_1.SurveillanceStatus.Synced;
        })) return UtilityModels_1.SurveillanceStatus.Synced;
        return UtilityModels_1.SurveillanceStatus.Unknown;
    }
    exports.getPersonStatus = getPersonStatus;
    function getGPname(gp) {
        return gp.FirstName + (gp.MiddleName == undefined ? "" : " " + gp.MiddleName) + " " + gp.LastName;
    }
    exports.getGPname = getGPname;
    return module.exports;
});
$__System.registerDynamic("App/services/data-manager.service.js", ["npm:@angular/core/bundles/core.umd.js", "npm:rxjs/Subject.js", "npm:rxjs/ReplaySubject.js", "npm:rxjs/add/operator/toPromise.js", "App/services/api.service.js", "App/services/mediator.service.js", "App/models/UtilityModels.js", "App/services/user-manager.service.js", "App/helpers/registerhelper.js", "npm:rxjs/observable/of.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var Subject_1 = $__require("npm:rxjs/Subject.js");
    var ReplaySubject_1 = $__require("npm:rxjs/ReplaySubject.js");
    $__require("npm:rxjs/add/operator/toPromise.js");
    var api_service_1 = $__require("App/services/api.service.js");
    var mediator_service_1 = $__require("App/services/mediator.service.js");
    var UtilityModels_1 = $__require("App/models/UtilityModels.js");
    var user_manager_service_1 = $__require("App/services/user-manager.service.js");
    var registerhelper_1 = $__require("App/helpers/registerhelper.js");
    var of_1 = $__require("npm:rxjs/observable/of.js");
    var DataManagerService = function () {
        function DataManagerService(apiService, mediatorService, userManagerService) {
            var _this = this;
            this.apiService = apiService;
            this.mediatorService = mediatorService;
            this.userManagerService = userManagerService;
            this.searchResultsSubject = new Subject_1.Subject();
            this.surveillanceResultsSubject = new ReplaySubject_1.ReplaySubject(1);
            this.surveillanceStatusSubject = new ReplaySubject_1.ReplaySubject(1);
            this.tagsSubject = new ReplaySubject_1.ReplaySubject(1);
            this.searchResults$ = this.searchResultsSubject.asObservable();
            this.surveillanceResults$ = this.surveillanceResultsSubject.asObservable();
            this.surveillanceStatus$ = this.surveillanceStatusSubject.asObservable();
            this.tags$ = this.tagsSubject.asObservable();
            this.mediatorService.surveillancerRemoved$.subscribe(function (data) {
                return _this.updateSurveillance(data, false);
            });
            this.mediatorService.surveillanceAdded$.subscribe(function (data) {
                return _this.updateSurveillance(data, true);
            });
            this.mediatorService.userInfo$.subscribe(function (user) {
                return _this.getSurveillances(user);
            });
            this.personDetailList = [];
        }
        DataManagerService.prototype.getSurveillances = function (user) {
            var _this = this;
            if (user.projectValue === -1) return;
            this.mediatorService.isSearching(true);
            this.apiService.getIndexedProjectSurveillances(user.projectValue).subscribe(function (res) {
                if (!res) {
                    _this.mediatorService.isSearching(false);
                    return;
                }
                _this.surveillanceResults = res;
                _this.apiService.getSurveillanceForProject().subscribe(function (data) {
                    _this.processSurveillances(data);
                    _this.surveillanceResultsSubject.next(_this.surveillanceResults);
                    _this.mediatorService.isSearching(false);
                });
            });
            this.apiService.getTags().subscribe(function (tags) {
                _this.tags = tags;
                _this.tagsSubject.next(_this.tags);
            });
        };
        DataManagerService.prototype.addTag = function (tag, id, person) {
            var _this = this;
            var tagInfo = this.tags.find(function (x) {
                return x.name === tag;
            });
            if (tagInfo && person.tags.find(function (t) {
                return t === tagInfo.key;
            })) return;
            this.apiService.addTag(id, tag).subscribe(function (res) {
                if (_this.tags.find(function (t) {
                    return t.name === res.name;
                }) === undefined) {
                    _this.tags.push(res);
                    _this.tagsSubject.next(_this.tags);
                }
                person.tags.push(res.key);
            });
        };
        DataManagerService.prototype.removeTag = function (tag, id, person) {
            var t = this.tags.find(function (x) {
                return x.name === tag;
            });
            if (t) person.tags.splice(person.tags.indexOf(t.key), 1);
            this.apiService.removeTag(id, tag).subscribe();
        };
        DataManagerService.prototype.processSurveillances = function (data) {
            var _this = this;
            data.forEach(function (result) {
                var match = _this.surveillanceResults.find(function (p) {
                    return p.commonIdentifier === result.commonIdentifier;
                });
                if (match) {
                    if (match.latestSurveillanceResults == undefined) match.latestSurveillanceResults = [];
                    match.latestSurveillanceResults.push(result);
                    if (match.surveillancesInfo == undefined) match.surveillancesInfo = [];
                    match.surveillancesInfo.push({ key: result.actionKey, registeredBy: result.registeredBy });
                }
            });
            this.surveillanceResults = this.surveillanceResults.filter(function (r) {
                return r.latestSurveillanceResults != undefined;
            });
            this.setSurveillanceState(this.surveillanceResults);
            this.pushSurveillanceStatus();
        };
        DataManagerService.prototype.getSearchResult = function (query) {
            var _this = this;
            this.mediatorService.isSearching(true);
            this.searchSubscription = this.apiService.search(query).subscribe(function (data) {
                _this.processSearchResult(data);
                _this.searchResults = data;
                _this.searchResultsSubject.next(_this.searchResults);
                _this.mediatorService.isSearching(false);
            }, function (error) {
                _this.searchResultsSubject.next(undefined);
                _this.mediatorService.isSearching(false);
                console.log("Something went wrong " + error);
            });
        };
        DataManagerService.prototype.processSearchResult = function (result) {
            if (this.surveillanceResults === undefined || this.surveillanceResults.length === 0) return;
            var _loop_1 = function (person) {
                var match = this_1.surveillanceResults.find(function (s) {
                    return s.commonIdentifier === person.commonIdentifier;
                });
                if (match !== undefined) {
                    result.splice(result.indexOf(person), 1);
                    result.unshift(match);
                }
            };
            var this_1 = this;
            for (var _i = 0, result_1 = result; _i < result_1.length; _i++) {
                var person = result_1[_i];
                _loop_1(person);
            }
        };
        DataManagerService.prototype.setSurveillanceState = function (projectSurveillances) {
            projectSurveillances.forEach(function (person) {
                person.status = UtilityModels_1.SurveillanceStatus.Synced;
                if (person.latestSurveillanceResults == undefined) return;
                if (person.latestSurveillanceResults.some(function (res) {
                    return registerhelper_1.getSurveillanceResult(res) === UtilityModels_1.SurveillanceStatus.Unsynced;
                })) person.status = UtilityModels_1.SurveillanceStatus.Unsynced;
            });
        };
        DataManagerService.prototype.addCommentToPerson = function (content, ci) {
            var _this = this;
            var comment = {
                commonIdentifier: ci,
                content: content
            };
            return this.apiService.addComment(comment).map(function (res) {
                if (res) {
                    var person = _this.personDetailList.find(function (p) {
                        return p.commonIdentifier === comment.commonIdentifier;
                    });
                    if (!person.comments) person.comments = [res];else person.comments.unshift(res);
                    return true;
                }
                return false;
            });
        };
        DataManagerService.prototype.removeComment = function (comment) {
            var _this = this;
            this.apiService.removeComment(comment).subscribe(function (res) {
                if (res) {
                    var person = _this.personDetailList.find(function (p) {
                        return p.commonIdentifier === comment.commonIdentifier;
                    });
                    if (person) person.comments.splice(person.comments.findIndex(function (c) {
                        return c.key === comment.key;
                    }), 1);
                }
            });
        };
        DataManagerService.prototype.cancelSearch = function () {
            this.mediatorService.isSearching(false);
            if (this.searchSubscription) this.searchSubscription.unsubscribe();
        };
        DataManagerService.prototype.getTags = function () {
            return this.tags;
        };
        DataManagerService.prototype.updateSurveillance = function (person, add) {
            if (person === null) return;
            if (this.surveillanceResults === undefined) this.surveillanceResults = [];
            var position = this.surveillanceResults.findIndex(function (p) {
                return p.commonIdentifier === person.commonIdentifier;
            });
            if (position === -1) {
                person.status = UtilityModels_1.SurveillanceStatus.Synced;
                this.surveillanceResults.unshift(person);
            } else {
                if (!person.detail.surveillances.some(function (sur) {
                    return sur.isChecked;
                })) {
                    this.surveillanceResults.splice(position, 1);
                    this.personDetailList.splice(this.personDetailList.findIndex(function (p) {
                        return p.commonIdentifier === person.commonIdentifier;
                    }));
                } else {
                    this.surveillanceResults.splice(position, 1);
                    this.surveillanceResults.unshift(person);
                }
            }
            this.pushSurveillanceStatus();
            this.surveillanceResultsSubject.next(this.surveillanceResults);
        };
        DataManagerService.prototype.pushSurveillanceStatus = function () {
            var status = new UtilityModels_1.SurveillanceInformation();
            var name = this.userManagerService.getName();
            status.personalSynced = this.surveillanceResults.filter(function (p) {
                return p.status === UtilityModels_1.SurveillanceStatus.Synced && p.surveillancesInfo.some(function (sb) {
                    return sb.registeredBy === name;
                });
            }).length;
            status.personalUnsynced = this.surveillanceResults.filter(function (p) {
                return p.status === UtilityModels_1.SurveillanceStatus.Unsynced && p.surveillancesInfo.some(function (sb) {
                    return sb.registeredBy === name;
                });
            }).length;
            status.projectSynced = this.surveillanceResults.filter(function (p) {
                return p.status === UtilityModels_1.SurveillanceStatus.Synced && !p.surveillancesInfo.some(function (sb) {
                    return sb.registeredBy === name;
                });
            }).length;
            status.projectUnsynced = this.surveillanceResults.filter(function (p) {
                return p.status === UtilityModels_1.SurveillanceStatus.Unsynced && !p.surveillancesInfo.some(function (sb) {
                    return sb.registeredBy === name;
                });
            }).length;
            this.surveillanceStatusSubject.next(status);
        };
        DataManagerService.prototype.getPersonDetail = function (person) {
            var _this = this;
            return this.apiService.getDetails(person).map(function (res) {
                res.commonIdentifier = person.commonIdentifier;
                person.detail = res;
                _this.personDetailList.push(res);
                return res;
            });
        };
        DataManagerService.prototype.getCachedDetails = function (person) {
            var match = this.personDetailList.find(function (ele) {
                return ele.commonIdentifier === person.commonIdentifier;
            });
            return match != undefined ? of_1.of(match) : this.getPersonDetail(person);
        };
        DataManagerService.prototype.getTagName = function (id) {
            if (!this.tags) {
                return "";
            }
            var tag = this.tags.find(function (t) {
                return t.key === id;
            });
            return tag === undefined ? "" : tag.name;
        };
        DataManagerService.prototype.getTagInfo = function (name) {
            return this.tags.find(function (t) {
                return t.name === name;
            });
        };
        return DataManagerService;
    }();
    DataManagerService = __decorate([core_1.Injectable(), __metadata("design:paramtypes", [api_service_1.ApiService, mediator_service_1.MediatorService, user_manager_service_1.UserManagerService])], DataManagerService);
    exports.DataManagerService = DataManagerService;
    return module.exports;
});
$__System.registerDynamic("App/person/dashboard/tag-tile/tag-tile.component.js", ["npm:@angular/core/bundles/core.umd.js", "App/models/UtilityModels.js", "App/services/filter-manager.service.js", "App/services/data-manager.service.js", "App/services/user-manager.service.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var UtilityModels_1 = $__require("App/models/UtilityModels.js");
    var filter_manager_service_1 = $__require("App/services/filter-manager.service.js");
    var data_manager_service_1 = $__require("App/services/data-manager.service.js");
    var user_manager_service_1 = $__require("App/services/user-manager.service.js");
    var TagTileComponent = function () {
        function TagTileComponent(filterManager, dataManager, userManager) {
            this.filterManager = filterManager;
            this.dataManager = dataManager;
            this.userManager = userManager;
            this.ownedBy = UtilityModels_1.OwnedBy;
            this.numberToShow = 15;
            this.display = 15;
        }
        TagTileComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.dataManager.tags$.subscribe(function (tags) {
                _this.userManager.fetchName().subscribe(function (name) {
                    _this.taglist = _this.selected === UtilityModels_1.OwnedBy.All ? tags.filter(function (s) {
                        return s.registeredBy !== name;
                    }) : tags.filter(function (s) {
                        return s.registeredBy === name;
                    });
                });
            });
        };
        TagTileComponent.prototype.search = function (tag) {
            this.filterManager.searchWithTag(tag.name);
        };
        return TagTileComponent;
    }();
    __decorate([core_1.Input(), __metadata("design:type", Number)], TagTileComponent.prototype, "selected", void 0);
    TagTileComponent = __decorate([core_1.Component({
        moduleId: module.id,
        selector: "tag-tile",
        templateUrl: "tag-tile.component.html",
        styleUrls: ["../dashboard.component.css"]
    }), __metadata("design:paramtypes", [filter_manager_service_1.FilterManagerService, data_manager_service_1.DataManagerService, user_manager_service_1.UserManagerService])], TagTileComponent);
    exports.TagTileComponent = TagTileComponent;
    return module.exports;
});
$__System.registerDynamic("App/services/user-manager.service.js", ["npm:@angular/core/bundles/core.umd.js", "npm:rxjs/observable/of.js", "App/services/api.service.js", "App/resources/app-settings.js", "App/services/mediator.service.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var of_1 = $__require("npm:rxjs/observable/of.js");
    var api_service_1 = $__require("App/services/api.service.js");
    var app_settings_1 = $__require("App/resources/app-settings.js");
    var mediator_service_1 = $__require("App/services/mediator.service.js");
    var UserManagerService = function () {
        function UserManagerService(apiService, mediatorService) {
            this.apiService = apiService;
            this.mediatorService = mediatorService;
        }
        UserManagerService.prototype.checkIfLoginIsValid = function (username, password) {
            return this.apiService.logIn({ userName: username, password: password });
        };
        UserManagerService.prototype.setUser = function (user) {
            this.userData = user;
            if (user === undefined || user === null) return;
            this.userData.password = "";
            this.userData.oldPassword = "";
            this.mediatorService.pushUserInfo(user);
        };
        UserManagerService.prototype.getUserDetailsFromServer = function () {
            var _this = this;
            return this.apiService.getUser().map(function (res) {
                if (res === {}) {
                    return;
                }
                _this.setUser(res);
                return res;
            });
        };
        UserManagerService.prototype.setValidRegisterUser = function (value) {
            this.validRegisterUser = value;
        };
        UserManagerService.prototype.setRegisterUsername = function (username) {
            this.userData.registerUserName = username;
        };
        UserManagerService.prototype.getProjects = function () {
            return app_settings_1.projectNames;
        };
        UserManagerService.prototype.getRoles = function () {
            return app_settings_1.roleNames;
        };
        UserManagerService.prototype.getProjectIdAsync = function () {
            if (this.userData) return of_1.of(this.userData.projectValue);
            return this.getUser().map(function (user) {
                return user.projectValue;
            });
        };
        UserManagerService.prototype.getProjectId = function () {
            if (this.userData == undefined) return -1;
            return this.userData.projectValue;
        };
        UserManagerService.prototype.getUserName = function () {
            if (this.userData) return of_1.of(this.userData.username);
            return this.getUser().map(function (data) {
                return data.username;
            });
        };
        UserManagerService.prototype.getName = function () {
            return this.userData == undefined ? "" : this.userData.name;
        };
        UserManagerService.prototype.fetchName = function () {
            if (this.userData) return of_1.of(this.userData.name);
            return this.getUser().map(function (data) {
                return data.name;
            });
        };
        UserManagerService.prototype.isLoggedIn = function () {
            if (this.userData) return of_1.of(true);
            return this.apiService.isLoggedIn().map(function (res) {
                return res.json();
            });
        };
        UserManagerService.prototype.getRegisterUsername = function () {
            return this.getUser().map(function (user) {
                if (user) return user.registerUserName;
                return "";
            });
        };
        UserManagerService.prototype.hasValidRegisterUser = function () {
            return this.apiService.hasValidRegisterUser();
        };
        UserManagerService.prototype.hasValidUserInformation = function () {
            return this.apiService.validUserInformation();
        };
        UserManagerService.prototype.updateRegisterUser = function (form) {
            return this.apiService.updateRegisterUser(form);
        };
        UserManagerService.prototype.checkRegisterUser = function (form) {
            return this.apiService.checkRegisterUser(form);
        };
        UserManagerService.prototype.getUser = function () {
            if (this.userData !== undefined) {
                return of_1.of(this.userData);
            }
            return this.getUserDetailsFromServer();
        };
        UserManagerService.prototype.createUser = function (user) {
            return this.apiService.createUser(user);
        };
        UserManagerService.prototype.updateUser = function (user) {
            return this.apiService.updateUser(user);
        };
        UserManagerService.prototype.generateNewPassword = function (username) {
            return this.apiService.generateNewPassword(username);
        };
        UserManagerService.prototype.logOut = function () {
            return this.apiService.logOut();
        };
        return UserManagerService;
    }();
    UserManagerService = __decorate([core_1.Injectable(), __metadata("design:paramtypes", [api_service_1.ApiService, mediator_service_1.MediatorService])], UserManagerService);
    exports.UserManagerService = UserManagerService;
    return module.exports;
});
$__System.registerDynamic("App/custom-pipes/tag.pipe.js", ["npm:@angular/core/bundles/core.umd.js", "App/models/UtilityModels.js", "App/services/user-manager.service.js", "npm:rxjs/observable/of.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var UtilityModels_1 = $__require("App/models/UtilityModels.js");
    var user_manager_service_1 = $__require("App/services/user-manager.service.js");
    var of_1 = $__require("npm:rxjs/observable/of.js");
    var TagPipe = function () {
        function TagPipe(userManager) {
            this.userManager = userManager;
        }
        TagPipe.prototype.transform = function (value, ownedBy) {
            if (value == undefined) {
                return of_1.of(new Array());
            }
            if (ownedBy === UtilityModels_1.OwnedBy.All) return this.userManager.fetchName().map(function (name) {
                return value.filter(function (s) {
                    return s.registeredBy !== name;
                });
            });
            return this.userManager.fetchName().map(function (name) {
                return value.filter(function (s) {
                    return s.registeredBy === name;
                });
            });
        };
        return TagPipe;
    }();
    TagPipe = __decorate([core_1.Pipe({ name: 'tag' }), __metadata("design:paramtypes", [user_manager_service_1.UserManagerService])], TagPipe);
    exports.TagPipe = TagPipe;
    return module.exports;
});
$__System.registerDynamic("App/person/dashboard/links-tile/links-tile.component.js", ["npm:@angular/core/bundles/core.umd.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var LinksTileComponent = function () {
        function LinksTileComponent() {}
        return LinksTileComponent;
    }();
    LinksTileComponent = __decorate([core_1.Component({
        moduleId: module.id,
        selector: "links",
        templateUrl: "links-tile.component.html",
        styleUrls: ["../dashboard.component.css"]
    }), __metadata("design:paramtypes", [])], LinksTileComponent);
    exports.LinksTileComponent = LinksTileComponent;
    return module.exports;
});
$__System.registerDynamic("App/person/dashboard/latest-checks-tiles/latest-checks-tile.component.js", ["npm:@angular/core/bundles/core.umd.js", "App/services/api.service.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var api_service_1 = $__require("App/services/api.service.js");
    var LatestCheckTileComponent = function () {
        function LatestCheckTileComponent(apiService) {
            this.apiService = apiService;
        }
        LatestCheckTileComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.loading = true;
            this.apiService.latestSynchronization().subscribe(function (res) {
                _this.loading = false;
                _this.syncs = res;
            });
        };
        return LatestCheckTileComponent;
    }();
    LatestCheckTileComponent = __decorate([core_1.Component({
        moduleId: module.id,
        selector: "latest-checks",
        templateUrl: "latest-checks-tile.component.html",
        styleUrls: ["../dashboard.component.css"]
    }), __metadata("design:paramtypes", [api_service_1.ApiService])], LatestCheckTileComponent);
    exports.LatestCheckTileComponent = LatestCheckTileComponent;
    return module.exports;
});
(function() {
var define = $__System.amdDefine;
(function(global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs/Observable'), require('@angular/platform-browser')) : typeof define === 'function' && define.amd ? define("npm:@angular/http/bundles/http.umd.js", ["exports", "npm:@angular/core/bundles/core.umd.js", "npm:rxjs/Observable.js", "npm:@angular/platform-browser/bundles/platform-browser.umd.js"], factory) : (factory((global.ng = global.ng || {}, global.ng.http = global.ng.http || {}), global.ng.core, global.Rx, global.ng.platformBrowser));
}(this, function(exports, _angular_core, rxjs_Observable, _angular_platformBrowser) {
  'use strict';
  var BrowserXhr = (function() {
    function BrowserXhr() {}
    BrowserXhr.prototype.build = function() {
      return ((new XMLHttpRequest()));
    };
    BrowserXhr.decorators = [{type: _angular_core.Injectable}];
    BrowserXhr.ctorParameters = function() {
      return [];
    };
    return BrowserXhr;
  }());
  var RequestMethod = {};
  RequestMethod.Get = 0;
  RequestMethod.Post = 1;
  RequestMethod.Put = 2;
  RequestMethod.Delete = 3;
  RequestMethod.Options = 4;
  RequestMethod.Head = 5;
  RequestMethod.Patch = 6;
  RequestMethod[RequestMethod.Get] = "Get";
  RequestMethod[RequestMethod.Post] = "Post";
  RequestMethod[RequestMethod.Put] = "Put";
  RequestMethod[RequestMethod.Delete] = "Delete";
  RequestMethod[RequestMethod.Options] = "Options";
  RequestMethod[RequestMethod.Head] = "Head";
  RequestMethod[RequestMethod.Patch] = "Patch";
  var ReadyState = {};
  ReadyState.Unsent = 0;
  ReadyState.Open = 1;
  ReadyState.HeadersReceived = 2;
  ReadyState.Loading = 3;
  ReadyState.Done = 4;
  ReadyState.Cancelled = 5;
  ReadyState[ReadyState.Unsent] = "Unsent";
  ReadyState[ReadyState.Open] = "Open";
  ReadyState[ReadyState.HeadersReceived] = "HeadersReceived";
  ReadyState[ReadyState.Loading] = "Loading";
  ReadyState[ReadyState.Done] = "Done";
  ReadyState[ReadyState.Cancelled] = "Cancelled";
  var ResponseType = {};
  ResponseType.Basic = 0;
  ResponseType.Cors = 1;
  ResponseType.Default = 2;
  ResponseType.Error = 3;
  ResponseType.Opaque = 4;
  ResponseType[ResponseType.Basic] = "Basic";
  ResponseType[ResponseType.Cors] = "Cors";
  ResponseType[ResponseType.Default] = "Default";
  ResponseType[ResponseType.Error] = "Error";
  ResponseType[ResponseType.Opaque] = "Opaque";
  var ContentType = {};
  ContentType.NONE = 0;
  ContentType.JSON = 1;
  ContentType.FORM = 2;
  ContentType.FORM_DATA = 3;
  ContentType.TEXT = 4;
  ContentType.BLOB = 5;
  ContentType.ARRAY_BUFFER = 6;
  ContentType[ContentType.NONE] = "NONE";
  ContentType[ContentType.JSON] = "JSON";
  ContentType[ContentType.FORM] = "FORM";
  ContentType[ContentType.FORM_DATA] = "FORM_DATA";
  ContentType[ContentType.TEXT] = "TEXT";
  ContentType[ContentType.BLOB] = "BLOB";
  ContentType[ContentType.ARRAY_BUFFER] = "ARRAY_BUFFER";
  var ResponseContentType = {};
  ResponseContentType.Text = 0;
  ResponseContentType.Json = 1;
  ResponseContentType.ArrayBuffer = 2;
  ResponseContentType.Blob = 3;
  ResponseContentType[ResponseContentType.Text] = "Text";
  ResponseContentType[ResponseContentType.Json] = "Json";
  ResponseContentType[ResponseContentType.ArrayBuffer] = "ArrayBuffer";
  ResponseContentType[ResponseContentType.Blob] = "Blob";
  var Headers = (function() {
    function Headers(headers) {
      var _this = this;
      this._headers = new Map();
      this._normalizedNames = new Map();
      if (!headers) {
        return;
      }
      if (headers instanceof Headers) {
        headers.forEach(function(values, name) {
          values.forEach(function(value) {
            return _this.append(name, value);
          });
        });
        return;
      }
      Object.keys(headers).forEach(function(name) {
        var values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];
        _this.delete(name);
        values.forEach(function(value) {
          return _this.append(name, value);
        });
      });
    }
    Headers.fromResponseHeaderString = function(headersString) {
      var headers = new Headers();
      headersString.split('\n').forEach(function(line) {
        var index = line.indexOf(':');
        if (index > 0) {
          var name_1 = line.slice(0, index);
          var value = line.slice(index + 1).trim();
          headers.set(name_1, value);
        }
      });
      return headers;
    };
    Headers.prototype.append = function(name, value) {
      var values = this.getAll(name);
      if (values === null) {
        this.set(name, value);
      } else {
        values.push(value);
      }
    };
    Headers.prototype.delete = function(name) {
      var lcName = name.toLowerCase();
      this._normalizedNames.delete(lcName);
      this._headers.delete(lcName);
    };
    Headers.prototype.forEach = function(fn) {
      var _this = this;
      this._headers.forEach(function(values, lcName) {
        return fn(values, _this._normalizedNames.get(lcName), _this._headers);
      });
    };
    Headers.prototype.get = function(name) {
      var values = this.getAll(name);
      if (values === null) {
        return null;
      }
      return values.length > 0 ? values[0] : null;
    };
    Headers.prototype.has = function(name) {
      return this._headers.has(name.toLowerCase());
    };
    Headers.prototype.keys = function() {
      return Array.from(this._normalizedNames.values());
    };
    Headers.prototype.set = function(name, value) {
      if (Array.isArray(value)) {
        if (value.length) {
          this._headers.set(name.toLowerCase(), [value.join(',')]);
        }
      } else {
        this._headers.set(name.toLowerCase(), [value]);
      }
      this.mayBeSetNormalizedName(name);
    };
    Headers.prototype.values = function() {
      return Array.from(this._headers.values());
    };
    Headers.prototype.toJSON = function() {
      var _this = this;
      var serialized = {};
      this._headers.forEach(function(values, name) {
        var split = [];
        values.forEach(function(v) {
          return split.push.apply(split, v.split(','));
        });
        serialized[_this._normalizedNames.get(name)] = split;
      });
      return serialized;
    };
    Headers.prototype.getAll = function(name) {
      return this.has(name) ? this._headers.get(name.toLowerCase()) : null;
    };
    Headers.prototype.entries = function() {
      throw new Error('"entries" method is not implemented on Headers class');
    };
    Headers.prototype.mayBeSetNormalizedName = function(name) {
      var lcName = name.toLowerCase();
      if (!this._normalizedNames.has(lcName)) {
        this._normalizedNames.set(lcName, name);
      }
    };
    return Headers;
  }());
  var __extends$1 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var ResponseOptions = (function() {
    function ResponseOptions(_a) {
      var _b = _a === void 0 ? {} : _a,
          body = _b.body,
          status = _b.status,
          headers = _b.headers,
          statusText = _b.statusText,
          type = _b.type,
          url = _b.url;
      this.body = body != null ? body : null;
      this.status = status != null ? status : null;
      this.headers = headers != null ? headers : null;
      this.statusText = statusText != null ? statusText : null;
      this.type = type != null ? type : null;
      this.url = url != null ? url : null;
    }
    ResponseOptions.prototype.merge = function(options) {
      return new ResponseOptions({
        body: options && options.body != null ? options.body : this.body,
        status: options && options.status != null ? options.status : this.status,
        headers: options && options.headers != null ? options.headers : this.headers,
        statusText: options && options.statusText != null ? options.statusText : this.statusText,
        type: options && options.type != null ? options.type : this.type,
        url: options && options.url != null ? options.url : this.url
      });
    };
    return ResponseOptions;
  }());
  var BaseResponseOptions = (function(_super) {
    __extends$1(BaseResponseOptions, _super);
    function BaseResponseOptions() {
      _super.call(this, {
        status: 200,
        statusText: 'Ok',
        type: ResponseType.Default,
        headers: new Headers()
      });
    }
    BaseResponseOptions.decorators = [{type: _angular_core.Injectable}];
    BaseResponseOptions.ctorParameters = function() {
      return [];
    };
    return BaseResponseOptions;
  }(ResponseOptions));
  var ConnectionBackend = (function() {
    function ConnectionBackend() {}
    ConnectionBackend.prototype.createConnection = function(request) {};
    return ConnectionBackend;
  }());
  var Connection = (function() {
    function Connection() {}
    return Connection;
  }());
  var XSRFStrategy = (function() {
    function XSRFStrategy() {}
    XSRFStrategy.prototype.configureRequest = function(req) {};
    return XSRFStrategy;
  }());
  function normalizeMethodName(method) {
    if (typeof method !== 'string')
      return method;
    switch (method.toUpperCase()) {
      case 'GET':
        return RequestMethod.Get;
      case 'POST':
        return RequestMethod.Post;
      case 'PUT':
        return RequestMethod.Put;
      case 'DELETE':
        return RequestMethod.Delete;
      case 'OPTIONS':
        return RequestMethod.Options;
      case 'HEAD':
        return RequestMethod.Head;
      case 'PATCH':
        return RequestMethod.Patch;
    }
    throw new Error("Invalid request method. The method \"" + method + "\" is not supported.");
  }
  var isSuccess = function(status) {
    return (status >= 200 && status < 300);
  };
  function getResponseURL(xhr) {
    if ('responseURL' in xhr) {
      return xhr.responseURL;
    }
    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
      return xhr.getResponseHeader('X-Request-URL');
    }
    return;
  }
  function stringToArrayBuffer(input) {
    var view = new Uint16Array(input.length);
    for (var i = 0,
        strLen = input.length; i < strLen; i++) {
      view[i] = input.charCodeAt(i);
    }
    return view.buffer;
  }
  function paramParser(rawParams) {
    if (rawParams === void 0) {
      rawParams = '';
    }
    var map = new Map();
    if (rawParams.length > 0) {
      var params = rawParams.split('&');
      params.forEach(function(param) {
        var eqIdx = param.indexOf('=');
        var _a = eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)],
            key = _a[0],
            val = _a[1];
        var list = map.get(key) || [];
        list.push(val);
        map.set(key, list);
      });
    }
    return map;
  }
  var QueryEncoder = (function() {
    function QueryEncoder() {}
    QueryEncoder.prototype.encodeKey = function(k) {
      return standardEncoding(k);
    };
    QueryEncoder.prototype.encodeValue = function(v) {
      return standardEncoding(v);
    };
    return QueryEncoder;
  }());
  function standardEncoding(v) {
    return encodeURIComponent(v).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/gi, '$').replace(/%2C/gi, ',').replace(/%3B/gi, ';').replace(/%2B/gi, '+').replace(/%3D/gi, '=').replace(/%3F/gi, '?').replace(/%2F/gi, '/');
  }
  var URLSearchParams = (function() {
    function URLSearchParams(rawParams, queryEncoder) {
      if (rawParams === void 0) {
        rawParams = '';
      }
      if (queryEncoder === void 0) {
        queryEncoder = new QueryEncoder();
      }
      this.rawParams = rawParams;
      this.queryEncoder = queryEncoder;
      this.paramsMap = paramParser(rawParams);
    }
    URLSearchParams.prototype.clone = function() {
      var clone = new URLSearchParams('', this.queryEncoder);
      clone.appendAll(this);
      return clone;
    };
    URLSearchParams.prototype.has = function(param) {
      return this.paramsMap.has(param);
    };
    URLSearchParams.prototype.get = function(param) {
      var storedParam = this.paramsMap.get(param);
      return Array.isArray(storedParam) ? storedParam[0] : null;
    };
    URLSearchParams.prototype.getAll = function(param) {
      return this.paramsMap.get(param) || [];
    };
    URLSearchParams.prototype.set = function(param, val) {
      if (val === void 0 || val === null) {
        this.delete(param);
        return;
      }
      var list = this.paramsMap.get(param) || [];
      list.length = 0;
      list.push(val);
      this.paramsMap.set(param, list);
    };
    URLSearchParams.prototype.setAll = function(searchParams) {
      var _this = this;
      searchParams.paramsMap.forEach(function(value, param) {
        var list = _this.paramsMap.get(param) || [];
        list.length = 0;
        list.push(value[0]);
        _this.paramsMap.set(param, list);
      });
    };
    URLSearchParams.prototype.append = function(param, val) {
      if (val === void 0 || val === null)
        return;
      var list = this.paramsMap.get(param) || [];
      list.push(val);
      this.paramsMap.set(param, list);
    };
    URLSearchParams.prototype.appendAll = function(searchParams) {
      var _this = this;
      searchParams.paramsMap.forEach(function(value, param) {
        var list = _this.paramsMap.get(param) || [];
        for (var i = 0; i < value.length; ++i) {
          list.push(value[i]);
        }
        _this.paramsMap.set(param, list);
      });
    };
    URLSearchParams.prototype.replaceAll = function(searchParams) {
      var _this = this;
      searchParams.paramsMap.forEach(function(value, param) {
        var list = _this.paramsMap.get(param) || [];
        list.length = 0;
        for (var i = 0; i < value.length; ++i) {
          list.push(value[i]);
        }
        _this.paramsMap.set(param, list);
      });
    };
    URLSearchParams.prototype.toString = function() {
      var _this = this;
      var paramsList = [];
      this.paramsMap.forEach(function(values, k) {
        values.forEach(function(v) {
          return paramsList.push(_this.queryEncoder.encodeKey(k) + '=' + _this.queryEncoder.encodeValue(v));
        });
      });
      return paramsList.join('&');
    };
    URLSearchParams.prototype.delete = function(param) {
      this.paramsMap.delete(param);
    };
    return URLSearchParams;
  }());
  var Body = (function() {
    function Body() {}
    Body.prototype.json = function() {
      if (typeof this._body === 'string') {
        return JSON.parse((this._body));
      }
      if (this._body instanceof ArrayBuffer) {
        return JSON.parse(this.text());
      }
      return this._body;
    };
    Body.prototype.text = function() {
      if (this._body instanceof URLSearchParams) {
        return this._body.toString();
      }
      if (this._body instanceof ArrayBuffer) {
        return String.fromCharCode.apply(null, new Uint16Array((this._body)));
      }
      if (this._body == null) {
        return '';
      }
      if (typeof this._body === 'object') {
        return JSON.stringify(this._body, null, 2);
      }
      return this._body.toString();
    };
    Body.prototype.arrayBuffer = function() {
      if (this._body instanceof ArrayBuffer) {
        return (this._body);
      }
      return stringToArrayBuffer(this.text());
    };
    Body.prototype.blob = function() {
      if (this._body instanceof Blob) {
        return (this._body);
      }
      if (this._body instanceof ArrayBuffer) {
        return new Blob([this._body]);
      }
      throw new Error('The request body isn\'t either a blob or an array buffer');
    };
    return Body;
  }());
  var __extends$2 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Response = (function(_super) {
    __extends$2(Response, _super);
    function Response(responseOptions) {
      _super.call(this);
      this._body = responseOptions.body;
      this.status = responseOptions.status;
      this.ok = (this.status >= 200 && this.status <= 299);
      this.statusText = responseOptions.statusText;
      this.headers = responseOptions.headers;
      this.type = responseOptions.type;
      this.url = responseOptions.url;
    }
    Response.prototype.toString = function() {
      return "Response with status: " + this.status + " " + this.statusText + " for URL: " + this.url;
    };
    return Response;
  }(Body));
  var _nextRequestId = 0;
  var JSONP_HOME = '__ng_jsonp__';
  var _jsonpConnections = null;
  function _getJsonpConnections() {
    var w = typeof window == 'object' ? window : {};
    if (_jsonpConnections === null) {
      _jsonpConnections = w[JSONP_HOME] = {};
    }
    return _jsonpConnections;
  }
  var BrowserJsonp = (function() {
    function BrowserJsonp() {}
    BrowserJsonp.prototype.build = function(url) {
      var node = document.createElement('script');
      node.src = url;
      return node;
    };
    BrowserJsonp.prototype.nextRequestID = function() {
      return "__req" + _nextRequestId++;
    };
    BrowserJsonp.prototype.requestCallback = function(id) {
      return JSONP_HOME + "." + id + ".finished";
    };
    BrowserJsonp.prototype.exposeConnection = function(id, connection) {
      var connections = _getJsonpConnections();
      connections[id] = connection;
    };
    BrowserJsonp.prototype.removeConnection = function(id) {
      var connections = _getJsonpConnections();
      connections[id] = null;
    };
    BrowserJsonp.prototype.send = function(node) {
      document.body.appendChild(((node)));
    };
    BrowserJsonp.prototype.cleanup = function(node) {
      if (node.parentNode) {
        node.parentNode.removeChild(((node)));
      }
    };
    BrowserJsonp.decorators = [{type: _angular_core.Injectable}];
    BrowserJsonp.ctorParameters = function() {
      return [];
    };
    return BrowserJsonp;
  }());
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';
  var JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';
  var JSONPConnection = (function() {
    function JSONPConnection() {}
    JSONPConnection.prototype.finished = function(data) {};
    return JSONPConnection;
  }());
  var JSONPConnection_ = (function(_super) {
    __extends(JSONPConnection_, _super);
    function JSONPConnection_(req, _dom, baseResponseOptions) {
      var _this = this;
      _super.call(this);
      this._dom = _dom;
      this.baseResponseOptions = baseResponseOptions;
      this._finished = false;
      if (req.method !== RequestMethod.Get) {
        throw new TypeError(JSONP_ERR_WRONG_METHOD);
      }
      this.request = req;
      this.response = new rxjs_Observable.Observable(function(responseObserver) {
        _this.readyState = ReadyState.Loading;
        var id = _this._id = _dom.nextRequestID();
        _dom.exposeConnection(id, _this);
        var callback = _dom.requestCallback(_this._id);
        var url = req.url;
        if (url.indexOf('=JSONP_CALLBACK&') > -1) {
          url = url.replace('=JSONP_CALLBACK&', "=" + callback + "&");
        } else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {
          url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + ("=" + callback);
        }
        var script = _this._script = _dom.build(url);
        var onLoad = function(event) {
          if (_this.readyState === ReadyState.Cancelled)
            return;
          _this.readyState = ReadyState.Done;
          _dom.cleanup(script);
          if (!_this._finished) {
            var responseOptions_1 = new ResponseOptions({
              body: JSONP_ERR_NO_CALLBACK,
              type: ResponseType.Error,
              url: url
            });
            if (baseResponseOptions) {
              responseOptions_1 = baseResponseOptions.merge(responseOptions_1);
            }
            responseObserver.error(new Response(responseOptions_1));
            return;
          }
          var responseOptions = new ResponseOptions({
            body: _this._responseData,
            url: url
          });
          if (_this.baseResponseOptions) {
            responseOptions = _this.baseResponseOptions.merge(responseOptions);
          }
          responseObserver.next(new Response(responseOptions));
          responseObserver.complete();
        };
        var onError = function(error) {
          if (_this.readyState === ReadyState.Cancelled)
            return;
          _this.readyState = ReadyState.Done;
          _dom.cleanup(script);
          var responseOptions = new ResponseOptions({
            body: error.message,
            type: ResponseType.Error
          });
          if (baseResponseOptions) {
            responseOptions = baseResponseOptions.merge(responseOptions);
          }
          responseObserver.error(new Response(responseOptions));
        };
        script.addEventListener('load', onLoad);
        script.addEventListener('error', onError);
        _dom.send(script);
        return function() {
          _this.readyState = ReadyState.Cancelled;
          script.removeEventListener('load', onLoad);
          script.removeEventListener('error', onError);
          _this._dom.cleanup(script);
        };
      });
    }
    JSONPConnection_.prototype.finished = function(data) {
      this._finished = true;
      this._dom.removeConnection(this._id);
      if (this.readyState === ReadyState.Cancelled)
        return;
      this._responseData = data;
    };
    return JSONPConnection_;
  }(JSONPConnection));
  var JSONPBackend = (function(_super) {
    __extends(JSONPBackend, _super);
    function JSONPBackend() {
      _super.apply(this, arguments);
    }
    return JSONPBackend;
  }(ConnectionBackend));
  var JSONPBackend_ = (function(_super) {
    __extends(JSONPBackend_, _super);
    function JSONPBackend_(_browserJSONP, _baseResponseOptions) {
      _super.call(this);
      this._browserJSONP = _browserJSONP;
      this._baseResponseOptions = _baseResponseOptions;
    }
    JSONPBackend_.prototype.createConnection = function(request) {
      return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions);
    };
    JSONPBackend_.decorators = [{type: _angular_core.Injectable}];
    JSONPBackend_.ctorParameters = function() {
      return [{type: BrowserJsonp}, {type: ResponseOptions}];
    };
    return JSONPBackend_;
  }(JSONPBackend));
  var XSSI_PREFIX = /^\)\]\}',?\n/;
  var XHRConnection = (function() {
    function XHRConnection(req, browserXHR, baseResponseOptions) {
      var _this = this;
      this.request = req;
      this.response = new rxjs_Observable.Observable(function(responseObserver) {
        var _xhr = browserXHR.build();
        _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);
        if (req.withCredentials != null) {
          _xhr.withCredentials = req.withCredentials;
        }
        var onLoad = function() {
          var status = _xhr.status === 1223 ? 204 : _xhr.status;
          var body = null;
          if (status !== 204) {
            body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;
            if (typeof body === 'string') {
              body = body.replace(XSSI_PREFIX, '');
            }
          }
          if (status === 0) {
            status = body ? 200 : 0;
          }
          var headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());
          var url = getResponseURL(_xhr) || req.url;
          var statusText = _xhr.statusText || 'OK';
          var responseOptions = new ResponseOptions({
            body: body,
            status: status,
            headers: headers,
            statusText: statusText,
            url: url
          });
          if (baseResponseOptions != null) {
            responseOptions = baseResponseOptions.merge(responseOptions);
          }
          var response = new Response(responseOptions);
          response.ok = isSuccess(status);
          if (response.ok) {
            responseObserver.next(response);
            responseObserver.complete();
            return;
          }
          responseObserver.error(response);
        };
        var onError = function(err) {
          var responseOptions = new ResponseOptions({
            body: err,
            type: ResponseType.Error,
            status: _xhr.status,
            statusText: _xhr.statusText
          });
          if (baseResponseOptions != null) {
            responseOptions = baseResponseOptions.merge(responseOptions);
          }
          responseObserver.error(new Response(responseOptions));
        };
        _this.setDetectedContentType(req, _xhr);
        if (req.headers == null) {
          req.headers = new Headers();
        }
        if (!req.headers.has('Accept')) {
          req.headers.append('Accept', 'application/json, text/plain, */*');
        }
        req.headers.forEach(function(values, name) {
          return _xhr.setRequestHeader(name, values.join(','));
        });
        if (req.responseType != null && _xhr.responseType != null) {
          switch (req.responseType) {
            case ResponseContentType.ArrayBuffer:
              _xhr.responseType = 'arraybuffer';
              break;
            case ResponseContentType.Json:
              _xhr.responseType = 'json';
              break;
            case ResponseContentType.Text:
              _xhr.responseType = 'text';
              break;
            case ResponseContentType.Blob:
              _xhr.responseType = 'blob';
              break;
            default:
              throw new Error('The selected responseType is not supported');
          }
        }
        _xhr.addEventListener('load', onLoad);
        _xhr.addEventListener('error', onError);
        _xhr.send(_this.request.getBody());
        return function() {
          _xhr.removeEventListener('load', onLoad);
          _xhr.removeEventListener('error', onError);
          _xhr.abort();
        };
      });
    }
    XHRConnection.prototype.setDetectedContentType = function(req, _xhr) {
      if (req.headers != null && req.headers.get('Content-Type') != null) {
        return;
      }
      switch (req.contentType) {
        case ContentType.NONE:
          break;
        case ContentType.JSON:
          _xhr.setRequestHeader('content-type', 'application/json');
          break;
        case ContentType.FORM:
          _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
          break;
        case ContentType.TEXT:
          _xhr.setRequestHeader('content-type', 'text/plain');
          break;
        case ContentType.BLOB:
          var blob = req.blob();
          if (blob.type) {
            _xhr.setRequestHeader('content-type', blob.type);
          }
          break;
      }
    };
    return XHRConnection;
  }());
  var CookieXSRFStrategy = (function() {
    function CookieXSRFStrategy(_cookieName, _headerName) {
      if (_cookieName === void 0) {
        _cookieName = 'XSRF-TOKEN';
      }
      if (_headerName === void 0) {
        _headerName = 'X-XSRF-TOKEN';
      }
      this._cookieName = _cookieName;
      this._headerName = _headerName;
    }
    CookieXSRFStrategy.prototype.configureRequest = function(req) {
      var xsrfToken = _angular_platformBrowser.__platform_browser_private__.getDOM().getCookie(this._cookieName);
      if (xsrfToken) {
        req.headers.set(this._headerName, xsrfToken);
      }
    };
    return CookieXSRFStrategy;
  }());
  var XHRBackend = (function() {
    function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {
      this._browserXHR = _browserXHR;
      this._baseResponseOptions = _baseResponseOptions;
      this._xsrfStrategy = _xsrfStrategy;
    }
    XHRBackend.prototype.createConnection = function(request) {
      this._xsrfStrategy.configureRequest(request);
      return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);
    };
    XHRBackend.decorators = [{type: _angular_core.Injectable}];
    XHRBackend.ctorParameters = function() {
      return [{type: BrowserXhr}, {type: ResponseOptions}, {type: XSRFStrategy}];
    };
    return XHRBackend;
  }());
  var __extends$3 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var RequestOptions = (function() {
    function RequestOptions(_a) {
      var _b = _a === void 0 ? {} : _a,
          method = _b.method,
          headers = _b.headers,
          body = _b.body,
          url = _b.url,
          search = _b.search,
          withCredentials = _b.withCredentials,
          responseType = _b.responseType;
      this.method = method != null ? normalizeMethodName(method) : null;
      this.headers = headers != null ? headers : null;
      this.body = body != null ? body : null;
      this.url = url != null ? url : null;
      this.search = search != null ? (typeof search === 'string' ? new URLSearchParams(search) : search) : null;
      this.withCredentials = withCredentials != null ? withCredentials : null;
      this.responseType = responseType != null ? responseType : null;
    }
    RequestOptions.prototype.merge = function(options) {
      return new RequestOptions({
        method: options && options.method != null ? options.method : this.method,
        headers: options && options.headers != null ? options.headers : new Headers(this.headers),
        body: options && options.body != null ? options.body : this.body,
        url: options && options.url != null ? options.url : this.url,
        search: options && options.search != null ? (typeof options.search === 'string' ? new URLSearchParams(options.search) : options.search.clone()) : this.search,
        withCredentials: options && options.withCredentials != null ? options.withCredentials : this.withCredentials,
        responseType: options && options.responseType != null ? options.responseType : this.responseType
      });
    };
    return RequestOptions;
  }());
  var BaseRequestOptions = (function(_super) {
    __extends$3(BaseRequestOptions, _super);
    function BaseRequestOptions() {
      _super.call(this, {
        method: RequestMethod.Get,
        headers: new Headers()
      });
    }
    BaseRequestOptions.decorators = [{type: _angular_core.Injectable}];
    BaseRequestOptions.ctorParameters = function() {
      return [];
    };
    return BaseRequestOptions;
  }(RequestOptions));
  var __extends$5 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Request = (function(_super) {
    __extends$5(Request, _super);
    function Request(requestOptions) {
      _super.call(this);
      var url = requestOptions.url;
      this.url = requestOptions.url;
      if (requestOptions.search) {
        var search = requestOptions.search.toString();
        if (search.length > 0) {
          var prefix = '?';
          if (this.url.indexOf('?') != -1) {
            prefix = (this.url[this.url.length - 1] == '&') ? '' : '&';
          }
          this.url = url + prefix + search;
        }
      }
      this._body = requestOptions.body;
      this.method = normalizeMethodName(requestOptions.method);
      this.headers = new Headers(requestOptions.headers);
      this.contentType = this.detectContentType();
      this.withCredentials = requestOptions.withCredentials;
      this.responseType = requestOptions.responseType;
    }
    Request.prototype.detectContentType = function() {
      switch (this.headers.get('content-type')) {
        case 'application/json':
          return ContentType.JSON;
        case 'application/x-www-form-urlencoded':
          return ContentType.FORM;
        case 'multipart/form-data':
          return ContentType.FORM_DATA;
        case 'text/plain':
        case 'text/html':
          return ContentType.TEXT;
        case 'application/octet-stream':
          return ContentType.BLOB;
        default:
          return this.detectContentTypeFromBody();
      }
    };
    Request.prototype.detectContentTypeFromBody = function() {
      if (this._body == null) {
        return ContentType.NONE;
      } else if (this._body instanceof URLSearchParams) {
        return ContentType.FORM;
      } else if (this._body instanceof FormData) {
        return ContentType.FORM_DATA;
      } else if (this._body instanceof Blob$1) {
        return ContentType.BLOB;
      } else if (this._body instanceof ArrayBuffer$1) {
        return ContentType.ARRAY_BUFFER;
      } else if (this._body && typeof this._body == 'object') {
        return ContentType.JSON;
      } else {
        return ContentType.TEXT;
      }
    };
    Request.prototype.getBody = function() {
      switch (this.contentType) {
        case ContentType.JSON:
          return this.text();
        case ContentType.FORM:
          return this.text();
        case ContentType.FORM_DATA:
          return this._body;
        case ContentType.TEXT:
          return this.text();
        case ContentType.BLOB:
          return this.blob();
        case ContentType.ARRAY_BUFFER:
          return this.arrayBuffer();
        default:
          return null;
      }
    };
    return Request;
  }(Body));
  var noop = function() {};
  var w = typeof window == 'object' ? window : noop;
  var FormData = ((w))['FormData'] || noop;
  var Blob$1 = ((w))['Blob'] || noop;
  var ArrayBuffer$1 = ((w))['ArrayBuffer'] || noop;
  var __extends$4 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  function httpRequest(backend, request) {
    return backend.createConnection(request).response;
  }
  function mergeOptions(defaultOpts, providedOpts, method, url) {
    var newOptions = defaultOpts;
    if (providedOpts) {
      return newOptions.merge(new RequestOptions({
        method: providedOpts.method || method,
        url: providedOpts.url || url,
        search: providedOpts.search,
        headers: providedOpts.headers,
        body: providedOpts.body,
        withCredentials: providedOpts.withCredentials,
        responseType: providedOpts.responseType
      }));
    }
    return newOptions.merge(new RequestOptions({
      method: method,
      url: url
    }));
  }
  var Http = (function() {
    function Http(_backend, _defaultOptions) {
      this._backend = _backend;
      this._defaultOptions = _defaultOptions;
    }
    Http.prototype.request = function(url, options) {
      var responseObservable;
      if (typeof url === 'string') {
        responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, (url))));
      } else if (url instanceof Request) {
        responseObservable = httpRequest(this._backend, url);
      } else {
        throw new Error('First argument must be a url string or Request instance.');
      }
      return responseObservable;
    };
    Http.prototype.get = function(url, options) {
      return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));
    };
    Http.prototype.post = function(url, body, options) {
      return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Post, url)));
    };
    Http.prototype.put = function(url, body, options) {
      return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Put, url)));
    };
    Http.prototype.delete = function(url, options) {
      return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));
    };
    Http.prototype.patch = function(url, body, options) {
      return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Patch, url)));
    };
    Http.prototype.head = function(url, options) {
      return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));
    };
    Http.prototype.options = function(url, options) {
      return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));
    };
    Http.decorators = [{type: _angular_core.Injectable}];
    Http.ctorParameters = function() {
      return [{type: ConnectionBackend}, {type: RequestOptions}];
    };
    return Http;
  }());
  var Jsonp = (function(_super) {
    __extends$4(Jsonp, _super);
    function Jsonp(backend, defaultOptions) {
      _super.call(this, backend, defaultOptions);
    }
    Jsonp.prototype.request = function(url, options) {
      var responseObservable;
      if (typeof url === 'string') {
        url = new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, (url)));
      }
      if (url instanceof Request) {
        if (url.method !== RequestMethod.Get) {
          throw new Error('JSONP requests must use GET request method.');
        }
        responseObservable = httpRequest(this._backend, url);
      } else {
        throw new Error('First argument must be a url string or Request instance.');
      }
      return responseObservable;
    };
    Jsonp.decorators = [{type: _angular_core.Injectable}];
    Jsonp.ctorParameters = function() {
      return [{type: ConnectionBackend}, {type: RequestOptions}];
    };
    return Jsonp;
  }(Http));
  function _createDefaultCookieXSRFStrategy() {
    return new CookieXSRFStrategy();
  }
  function httpFactory(xhrBackend, requestOptions) {
    return new Http(xhrBackend, requestOptions);
  }
  function jsonpFactory(jsonpBackend, requestOptions) {
    return new Jsonp(jsonpBackend, requestOptions);
  }
  var HttpModule = (function() {
    function HttpModule() {}
    HttpModule.decorators = [{
      type: _angular_core.NgModule,
      args: [{providers: [{
          provide: Http,
          useFactory: httpFactory,
          deps: [XHRBackend, RequestOptions]
        }, BrowserXhr, {
          provide: RequestOptions,
          useClass: BaseRequestOptions
        }, {
          provide: ResponseOptions,
          useClass: BaseResponseOptions
        }, XHRBackend, {
          provide: XSRFStrategy,
          useFactory: _createDefaultCookieXSRFStrategy
        }]}]
    }];
    HttpModule.ctorParameters = function() {
      return [];
    };
    return HttpModule;
  }());
  var JsonpModule = (function() {
    function JsonpModule() {}
    JsonpModule.decorators = [{
      type: _angular_core.NgModule,
      args: [{providers: [{
          provide: Jsonp,
          useFactory: jsonpFactory,
          deps: [JSONPBackend, RequestOptions]
        }, BrowserJsonp, {
          provide: RequestOptions,
          useClass: BaseRequestOptions
        }, {
          provide: ResponseOptions,
          useClass: BaseResponseOptions
        }, {
          provide: JSONPBackend,
          useClass: JSONPBackend_
        }]}]
    }];
    JsonpModule.ctorParameters = function() {
      return [];
    };
    return JsonpModule;
  }());
  var VERSION = new _angular_core.Version('2.4.2');
  exports.BrowserXhr = BrowserXhr;
  exports.JSONPBackend = JSONPBackend;
  exports.JSONPConnection = JSONPConnection;
  exports.CookieXSRFStrategy = CookieXSRFStrategy;
  exports.XHRBackend = XHRBackend;
  exports.XHRConnection = XHRConnection;
  exports.BaseRequestOptions = BaseRequestOptions;
  exports.RequestOptions = RequestOptions;
  exports.BaseResponseOptions = BaseResponseOptions;
  exports.ResponseOptions = ResponseOptions;
  exports.ReadyState = ReadyState;
  exports.RequestMethod = RequestMethod;
  exports.ResponseContentType = ResponseContentType;
  exports.ResponseType = ResponseType;
  exports.Headers = Headers;
  exports.Http = Http;
  exports.Jsonp = Jsonp;
  exports.HttpModule = HttpModule;
  exports.JsonpModule = JsonpModule;
  exports.Connection = Connection;
  exports.ConnectionBackend = ConnectionBackend;
  exports.XSRFStrategy = XSRFStrategy;
  exports.Request = Request;
  exports.Response = Response;
  exports.QueryEncoder = QueryEncoder;
  exports.URLSearchParams = URLSearchParams;
  exports.VERSION = VERSION;
}));

})();
(function() {
var define = $__System.amdDefine;
(function(global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) : typeof define === 'function' && define.amd ? define("npm:@angular/common/bundles/common.umd.js", ["exports", "npm:@angular/core/bundles/core.umd.js"], factory) : (factory((global.ng = global.ng || {}, global.ng.common = global.ng.common || {}), global.ng.core));
}(this, function(exports, _angular_core) {
  'use strict';
  var PlatformLocation = (function() {
    function PlatformLocation() {}
    PlatformLocation.prototype.getBaseHrefFromDOM = function() {};
    PlatformLocation.prototype.onPopState = function(fn) {};
    PlatformLocation.prototype.onHashChange = function(fn) {};
    Object.defineProperty(PlatformLocation.prototype, "pathname", {
      get: function() {
        return null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PlatformLocation.prototype, "search", {
      get: function() {
        return null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PlatformLocation.prototype, "hash", {
      get: function() {
        return null;
      },
      enumerable: true,
      configurable: true
    });
    PlatformLocation.prototype.replaceState = function(state, title, url) {};
    PlatformLocation.prototype.pushState = function(state, title, url) {};
    PlatformLocation.prototype.forward = function() {};
    PlatformLocation.prototype.back = function() {};
    return PlatformLocation;
  }());
  var LocationStrategy = (function() {
    function LocationStrategy() {}
    LocationStrategy.prototype.path = function(includeHash) {};
    LocationStrategy.prototype.prepareExternalUrl = function(internal) {};
    LocationStrategy.prototype.pushState = function(state, title, url, queryParams) {};
    LocationStrategy.prototype.replaceState = function(state, title, url, queryParams) {};
    LocationStrategy.prototype.forward = function() {};
    LocationStrategy.prototype.back = function() {};
    LocationStrategy.prototype.onPopState = function(fn) {};
    LocationStrategy.prototype.getBaseHref = function() {};
    return LocationStrategy;
  }());
  var APP_BASE_HREF = new _angular_core.OpaqueToken('appBaseHref');
  var globalScope;
  if (typeof window === 'undefined') {
    if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
      globalScope = (self);
    } else {
      globalScope = (global);
    }
  } else {
    globalScope = (window);
  }
  var _global = globalScope;
  function getTypeNameForDebugging(type) {
    return type['name'] || typeof type;
  }
  _global.assert = function assert(condition) {};
  function isPresent(obj) {
    return obj != null;
  }
  function isBlank(obj) {
    return obj == null;
  }
  function isDate(obj) {
    return obj instanceof Date && !isNaN(obj.valueOf());
  }
  function stringify(token) {
    if (typeof token === 'string') {
      return token;
    }
    if (token == null) {
      return '' + token;
    }
    if (token.overriddenName) {
      return "" + token.overriddenName;
    }
    if (token.name) {
      return "" + token.name;
    }
    var res = token.toString();
    var newLineIndex = res.indexOf('\n');
    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
  }
  var NumberWrapper = (function() {
    function NumberWrapper() {}
    NumberWrapper.parseIntAutoRadix = function(text) {
      var result = parseInt(text);
      if (isNaN(result)) {
        throw new Error('Invalid integer literal when parsing ' + text);
      }
      return result;
    };
    NumberWrapper.isNumeric = function(value) {
      return !isNaN(value - parseFloat(value));
    };
    return NumberWrapper;
  }());
  function isJsObject(o) {
    return o !== null && (typeof o === 'function' || typeof o === 'object');
  }
  var _symbolIterator = null;
  function getSymbolIterator() {
    if (!_symbolIterator) {
      if (((globalScope)).Symbol && Symbol.iterator) {
        _symbolIterator = Symbol.iterator;
      } else {
        var keys = Object.getOwnPropertyNames(Map.prototype);
        for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];
          if (key !== 'entries' && key !== 'size' && ((Map)).prototype[key] === Map.prototype['entries']) {
            _symbolIterator = key;
          }
        }
      }
    }
    return _symbolIterator;
  }
  var Location = (function() {
    function Location(platformStrategy) {
      var _this = this;
      this._subject = new _angular_core.EventEmitter();
      this._platformStrategy = platformStrategy;
      var browserBaseHref = this._platformStrategy.getBaseHref();
      this._baseHref = Location.stripTrailingSlash(_stripIndexHtml(browserBaseHref));
      this._platformStrategy.onPopState(function(ev) {
        _this._subject.emit({
          'url': _this.path(true),
          'pop': true,
          'type': ev.type
        });
      });
    }
    Location.prototype.path = function(includeHash) {
      if (includeHash === void 0) {
        includeHash = false;
      }
      return this.normalize(this._platformStrategy.path(includeHash));
    };
    Location.prototype.isCurrentPathEqualTo = function(path, query) {
      if (query === void 0) {
        query = '';
      }
      return this.path() == this.normalize(path + Location.normalizeQueryParams(query));
    };
    Location.prototype.normalize = function(url) {
      return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));
    };
    Location.prototype.prepareExternalUrl = function(url) {
      if (url && url[0] !== '/') {
        url = '/' + url;
      }
      return this._platformStrategy.prepareExternalUrl(url);
    };
    Location.prototype.go = function(path, query) {
      if (query === void 0) {
        query = '';
      }
      this._platformStrategy.pushState(null, '', path, query);
    };
    Location.prototype.replaceState = function(path, query) {
      if (query === void 0) {
        query = '';
      }
      this._platformStrategy.replaceState(null, '', path, query);
    };
    Location.prototype.forward = function() {
      this._platformStrategy.forward();
    };
    Location.prototype.back = function() {
      this._platformStrategy.back();
    };
    Location.prototype.subscribe = function(onNext, onThrow, onReturn) {
      if (onThrow === void 0) {
        onThrow = null;
      }
      if (onReturn === void 0) {
        onReturn = null;
      }
      return this._subject.subscribe({
        next: onNext,
        error: onThrow,
        complete: onReturn
      });
    };
    Location.normalizeQueryParams = function(params) {
      return params && params[0] !== '?' ? '?' + params : params;
    };
    Location.joinWithSlash = function(start, end) {
      if (start.length == 0) {
        return end;
      }
      if (end.length == 0) {
        return start;
      }
      var slashes = 0;
      if (start.endsWith('/')) {
        slashes++;
      }
      if (end.startsWith('/')) {
        slashes++;
      }
      if (slashes == 2) {
        return start + end.substring(1);
      }
      if (slashes == 1) {
        return start + end;
      }
      return start + '/' + end;
    };
    Location.stripTrailingSlash = function(url) {
      return url.replace(/\/$/, '');
    };
    Location.decorators = [{type: _angular_core.Injectable}];
    Location.ctorParameters = function() {
      return [{type: LocationStrategy}];
    };
    return Location;
  }());
  function _stripBaseHref(baseHref, url) {
    return baseHref && url.startsWith(baseHref) ? url.substring(baseHref.length) : url;
  }
  function _stripIndexHtml(url) {
    return url.replace(/\/index.html$/, '');
  }
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var HashLocationStrategy = (function(_super) {
    __extends(HashLocationStrategy, _super);
    function HashLocationStrategy(_platformLocation, _baseHref) {
      _super.call(this);
      this._platformLocation = _platformLocation;
      this._baseHref = '';
      if (isPresent(_baseHref)) {
        this._baseHref = _baseHref;
      }
    }
    HashLocationStrategy.prototype.onPopState = function(fn) {
      this._platformLocation.onPopState(fn);
      this._platformLocation.onHashChange(fn);
    };
    HashLocationStrategy.prototype.getBaseHref = function() {
      return this._baseHref;
    };
    HashLocationStrategy.prototype.path = function(includeHash) {
      if (includeHash === void 0) {
        includeHash = false;
      }
      var path = this._platformLocation.hash;
      if (!isPresent(path))
        path = '#';
      return path.length > 0 ? path.substring(1) : path;
    };
    HashLocationStrategy.prototype.prepareExternalUrl = function(internal) {
      var url = Location.joinWithSlash(this._baseHref, internal);
      return url.length > 0 ? ('#' + url) : url;
    };
    HashLocationStrategy.prototype.pushState = function(state, title, path, queryParams) {
      var url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
      if (url.length == 0) {
        url = this._platformLocation.pathname;
      }
      this._platformLocation.pushState(state, title, url);
    };
    HashLocationStrategy.prototype.replaceState = function(state, title, path, queryParams) {
      var url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
      if (url.length == 0) {
        url = this._platformLocation.pathname;
      }
      this._platformLocation.replaceState(state, title, url);
    };
    HashLocationStrategy.prototype.forward = function() {
      this._platformLocation.forward();
    };
    HashLocationStrategy.prototype.back = function() {
      this._platformLocation.back();
    };
    HashLocationStrategy.decorators = [{type: _angular_core.Injectable}];
    HashLocationStrategy.ctorParameters = function() {
      return [{type: PlatformLocation}, {
        type: undefined,
        decorators: [{type: _angular_core.Optional}, {
          type: _angular_core.Inject,
          args: [APP_BASE_HREF]
        }]
      }];
    };
    return HashLocationStrategy;
  }(LocationStrategy));
  var __extends$1 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var PathLocationStrategy = (function(_super) {
    __extends$1(PathLocationStrategy, _super);
    function PathLocationStrategy(_platformLocation, href) {
      _super.call(this);
      this._platformLocation = _platformLocation;
      if (isBlank(href)) {
        href = this._platformLocation.getBaseHrefFromDOM();
      }
      if (isBlank(href)) {
        throw new Error("No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.");
      }
      this._baseHref = href;
    }
    PathLocationStrategy.prototype.onPopState = function(fn) {
      this._platformLocation.onPopState(fn);
      this._platformLocation.onHashChange(fn);
    };
    PathLocationStrategy.prototype.getBaseHref = function() {
      return this._baseHref;
    };
    PathLocationStrategy.prototype.prepareExternalUrl = function(internal) {
      return Location.joinWithSlash(this._baseHref, internal);
    };
    PathLocationStrategy.prototype.path = function(includeHash) {
      if (includeHash === void 0) {
        includeHash = false;
      }
      var pathname = this._platformLocation.pathname + Location.normalizeQueryParams(this._platformLocation.search);
      var hash = this._platformLocation.hash;
      return hash && includeHash ? "" + pathname + hash : pathname;
    };
    PathLocationStrategy.prototype.pushState = function(state, title, url, queryParams) {
      var externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
      this._platformLocation.pushState(state, title, externalUrl);
    };
    PathLocationStrategy.prototype.replaceState = function(state, title, url, queryParams) {
      var externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
      this._platformLocation.replaceState(state, title, externalUrl);
    };
    PathLocationStrategy.prototype.forward = function() {
      this._platformLocation.forward();
    };
    PathLocationStrategy.prototype.back = function() {
      this._platformLocation.back();
    };
    PathLocationStrategy.decorators = [{type: _angular_core.Injectable}];
    PathLocationStrategy.ctorParameters = function() {
      return [{type: PlatformLocation}, {
        type: undefined,
        decorators: [{type: _angular_core.Optional}, {
          type: _angular_core.Inject,
          args: [APP_BASE_HREF]
        }]
      }];
    };
    return PathLocationStrategy;
  }(LocationStrategy));
  var __extends$2 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var NgLocalization = (function() {
    function NgLocalization() {}
    NgLocalization.prototype.getPluralCategory = function(value) {};
    return NgLocalization;
  }());
  function getPluralCategory(value, cases, ngLocalization) {
    var key = "=" + value;
    if (cases.indexOf(key) > -1) {
      return key;
    }
    key = ngLocalization.getPluralCategory(value);
    if (cases.indexOf(key) > -1) {
      return key;
    }
    if (cases.indexOf('other') > -1) {
      return 'other';
    }
    throw new Error("No plural message found for value \"" + value + "\"");
  }
  var NgLocaleLocalization = (function(_super) {
    __extends$2(NgLocaleLocalization, _super);
    function NgLocaleLocalization(_locale) {
      _super.call(this);
      this._locale = _locale;
    }
    NgLocaleLocalization.prototype.getPluralCategory = function(value) {
      var plural = getPluralCase(this._locale, value);
      switch (plural) {
        case Plural.Zero:
          return 'zero';
        case Plural.One:
          return 'one';
        case Plural.Two:
          return 'two';
        case Plural.Few:
          return 'few';
        case Plural.Many:
          return 'many';
        default:
          return 'other';
      }
    };
    NgLocaleLocalization.decorators = [{type: _angular_core.Injectable}];
    NgLocaleLocalization.ctorParameters = function() {
      return [{
        type: undefined,
        decorators: [{
          type: _angular_core.Inject,
          args: [_angular_core.LOCALE_ID]
        }]
      }];
    };
    return NgLocaleLocalization;
  }(NgLocalization));
  var Plural = {};
  Plural.Zero = 0;
  Plural.One = 1;
  Plural.Two = 2;
  Plural.Few = 3;
  Plural.Many = 4;
  Plural.Other = 5;
  Plural[Plural.Zero] = "Zero";
  Plural[Plural.One] = "One";
  Plural[Plural.Two] = "Two";
  Plural[Plural.Few] = "Few";
  Plural[Plural.Many] = "Many";
  Plural[Plural.Other] = "Other";
  function getPluralCase(locale, nLike) {
    if (typeof nLike === 'string') {
      nLike = parseInt((nLike), 10);
    }
    var n = (nLike);
    var nDecimal = n.toString().replace(/^[^.]*\.?/, '');
    var i = Math.floor(Math.abs(n));
    var v = nDecimal.length;
    var f = parseInt(nDecimal, 10);
    var t = parseInt(n.toString().replace(/^[^.]*\.?|0+$/g, ''), 10) || 0;
    var lang = locale.split('-')[0].toLowerCase();
    switch (lang) {
      case 'af':
      case 'asa':
      case 'az':
      case 'bem':
      case 'bez':
      case 'bg':
      case 'brx':
      case 'ce':
      case 'cgg':
      case 'chr':
      case 'ckb':
      case 'ee':
      case 'el':
      case 'eo':
      case 'es':
      case 'eu':
      case 'fo':
      case 'fur':
      case 'gsw':
      case 'ha':
      case 'haw':
      case 'hu':
      case 'jgo':
      case 'jmc':
      case 'ka':
      case 'kk':
      case 'kkj':
      case 'kl':
      case 'ks':
      case 'ksb':
      case 'ky':
      case 'lb':
      case 'lg':
      case 'mas':
      case 'mgo':
      case 'ml':
      case 'mn':
      case 'nb':
      case 'nd':
      case 'ne':
      case 'nn':
      case 'nnh':
      case 'nyn':
      case 'om':
      case 'or':
      case 'os':
      case 'ps':
      case 'rm':
      case 'rof':
      case 'rwk':
      case 'saq':
      case 'seh':
      case 'sn':
      case 'so':
      case 'sq':
      case 'ta':
      case 'te':
      case 'teo':
      case 'tk':
      case 'tr':
      case 'ug':
      case 'uz':
      case 'vo':
      case 'vun':
      case 'wae':
      case 'xog':
        if (n === 1)
          return Plural.One;
        return Plural.Other;
      case 'agq':
      case 'bas':
      case 'cu':
      case 'dav':
      case 'dje':
      case 'dua':
      case 'dyo':
      case 'ebu':
      case 'ewo':
      case 'guz':
      case 'kam':
      case 'khq':
      case 'ki':
      case 'kln':
      case 'kok':
      case 'ksf':
      case 'lrc':
      case 'lu':
      case 'luo':
      case 'luy':
      case 'mer':
      case 'mfe':
      case 'mgh':
      case 'mua':
      case 'mzn':
      case 'nmg':
      case 'nus':
      case 'qu':
      case 'rn':
      case 'rw':
      case 'sbp':
      case 'twq':
      case 'vai':
      case 'yav':
      case 'yue':
      case 'zgh':
      case 'ak':
      case 'ln':
      case 'mg':
      case 'pa':
      case 'ti':
        if (n === Math.floor(n) && n >= 0 && n <= 1)
          return Plural.One;
        return Plural.Other;
      case 'am':
      case 'as':
      case 'bn':
      case 'fa':
      case 'gu':
      case 'hi':
      case 'kn':
      case 'mr':
      case 'zu':
        if (i === 0 || n === 1)
          return Plural.One;
        return Plural.Other;
      case 'ar':
        if (n === 0)
          return Plural.Zero;
        if (n === 1)
          return Plural.One;
        if (n === 2)
          return Plural.Two;
        if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10)
          return Plural.Few;
        if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99)
          return Plural.Many;
        return Plural.Other;
      case 'ast':
      case 'ca':
      case 'de':
      case 'en':
      case 'et':
      case 'fi':
      case 'fy':
      case 'gl':
      case 'it':
      case 'nl':
      case 'sv':
      case 'sw':
      case 'ur':
      case 'yi':
        if (i === 1 && v === 0)
          return Plural.One;
        return Plural.Other;
      case 'be':
        if (n % 10 === 1 && !(n % 100 === 11))
          return Plural.One;
        if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 && !(n % 100 >= 12 && n % 100 <= 14))
          return Plural.Few;
        if (n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14)
          return Plural.Many;
        return Plural.Other;
      case 'br':
        if (n % 10 === 1 && !(n % 100 === 11 || n % 100 === 71 || n % 100 === 91))
          return Plural.One;
        if (n % 10 === 2 && !(n % 100 === 12 || n % 100 === 72 || n % 100 === 92))
          return Plural.Two;
        if (n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) && !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 || n % 100 >= 90 && n % 100 <= 99))
          return Plural.Few;
        if (!(n === 0) && n % 1e6 === 0)
          return Plural.Many;
        return Plural.Other;
      case 'bs':
      case 'hr':
      case 'sr':
        if (v === 0 && i % 10 === 1 && !(i % 100 === 11) || f % 10 === 1 && !(f % 100 === 11))
          return Plural.One;
        if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 && !(i % 100 >= 12 && i % 100 <= 14) || f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 && !(f % 100 >= 12 && f % 100 <= 14))
          return Plural.Few;
        return Plural.Other;
      case 'cs':
      case 'sk':
        if (i === 1 && v === 0)
          return Plural.One;
        if (i === Math.floor(i) && i >= 2 && i <= 4 && v === 0)
          return Plural.Few;
        if (!(v === 0))
          return Plural.Many;
        return Plural.Other;
      case 'cy':
        if (n === 0)
          return Plural.Zero;
        if (n === 1)
          return Plural.One;
        if (n === 2)
          return Plural.Two;
        if (n === 3)
          return Plural.Few;
        if (n === 6)
          return Plural.Many;
        return Plural.Other;
      case 'da':
        if (n === 1 || !(t === 0) && (i === 0 || i === 1))
          return Plural.One;
        return Plural.Other;
      case 'dsb':
      case 'hsb':
        if (v === 0 && i % 100 === 1 || f % 100 === 1)
          return Plural.One;
        if (v === 0 && i % 100 === 2 || f % 100 === 2)
          return Plural.Two;
        if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4)
          return Plural.Few;
        return Plural.Other;
      case 'ff':
      case 'fr':
      case 'hy':
      case 'kab':
        if (i === 0 || i === 1)
          return Plural.One;
        return Plural.Other;
      case 'fil':
        if (v === 0 && (i === 1 || i === 2 || i === 3) || v === 0 && !(i % 10 === 4 || i % 10 === 6 || i % 10 === 9) || !(v === 0) && !(f % 10 === 4 || f % 10 === 6 || f % 10 === 9))
          return Plural.One;
        return Plural.Other;
      case 'ga':
        if (n === 1)
          return Plural.One;
        if (n === 2)
          return Plural.Two;
        if (n === Math.floor(n) && n >= 3 && n <= 6)
          return Plural.Few;
        if (n === Math.floor(n) && n >= 7 && n <= 10)
          return Plural.Many;
        return Plural.Other;
      case 'gd':
        if (n === 1 || n === 11)
          return Plural.One;
        if (n === 2 || n === 12)
          return Plural.Two;
        if (n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19))
          return Plural.Few;
        return Plural.Other;
      case 'gv':
        if (v === 0 && i % 10 === 1)
          return Plural.One;
        if (v === 0 && i % 10 === 2)
          return Plural.Two;
        if (v === 0 && (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80))
          return Plural.Few;
        if (!(v === 0))
          return Plural.Many;
        return Plural.Other;
      case 'he':
        if (i === 1 && v === 0)
          return Plural.One;
        if (i === 2 && v === 0)
          return Plural.Two;
        if (v === 0 && !(n >= 0 && n <= 10) && n % 10 === 0)
          return Plural.Many;
        return Plural.Other;
      case 'is':
        if (t === 0 && i % 10 === 1 && !(i % 100 === 11) || !(t === 0))
          return Plural.One;
        return Plural.Other;
      case 'ksh':
        if (n === 0)
          return Plural.Zero;
        if (n === 1)
          return Plural.One;
        return Plural.Other;
      case 'kw':
      case 'naq':
      case 'se':
      case 'smn':
        if (n === 1)
          return Plural.One;
        if (n === 2)
          return Plural.Two;
        return Plural.Other;
      case 'lag':
        if (n === 0)
          return Plural.Zero;
        if ((i === 0 || i === 1) && !(n === 0))
          return Plural.One;
        return Plural.Other;
      case 'lt':
        if (n % 10 === 1 && !(n % 100 >= 11 && n % 100 <= 19))
          return Plural.One;
        if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 && !(n % 100 >= 11 && n % 100 <= 19))
          return Plural.Few;
        if (!(f === 0))
          return Plural.Many;
        return Plural.Other;
      case 'lv':
      case 'prg':
        if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 || v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19)
          return Plural.Zero;
        if (n % 10 === 1 && !(n % 100 === 11) || v === 2 && f % 10 === 1 && !(f % 100 === 11) || !(v === 2) && f % 10 === 1)
          return Plural.One;
        return Plural.Other;
      case 'mk':
        if (v === 0 && i % 10 === 1 || f % 10 === 1)
          return Plural.One;
        return Plural.Other;
      case 'mt':
        if (n === 1)
          return Plural.One;
        if (n === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10)
          return Plural.Few;
        if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19)
          return Plural.Many;
        return Plural.Other;
      case 'pl':
        if (i === 1 && v === 0)
          return Plural.One;
        if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 && !(i % 100 >= 12 && i % 100 <= 14))
          return Plural.Few;
        if (v === 0 && !(i === 1) && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 || v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 || v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14)
          return Plural.Many;
        return Plural.Other;
      case 'pt':
        if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2))
          return Plural.One;
        return Plural.Other;
      case 'ro':
        if (i === 1 && v === 0)
          return Plural.One;
        if (!(v === 0) || n === 0 || !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19)
          return Plural.Few;
        return Plural.Other;
      case 'ru':
      case 'uk':
        if (v === 0 && i % 10 === 1 && !(i % 100 === 11))
          return Plural.One;
        if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 && !(i % 100 >= 12 && i % 100 <= 14))
          return Plural.Few;
        if (v === 0 && i % 10 === 0 || v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 || v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14)
          return Plural.Many;
        return Plural.Other;
      case 'shi':
        if (i === 0 || n === 1)
          return Plural.One;
        if (n === Math.floor(n) && n >= 2 && n <= 10)
          return Plural.Few;
        return Plural.Other;
      case 'si':
        if (n === 0 || n === 1 || i === 0 && f === 1)
          return Plural.One;
        return Plural.Other;
      case 'sl':
        if (v === 0 && i % 100 === 1)
          return Plural.One;
        if (v === 0 && i % 100 === 2)
          return Plural.Two;
        if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || !(v === 0))
          return Plural.Few;
        return Plural.Other;
      case 'tzm':
        if (n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99)
          return Plural.One;
        return Plural.Other;
      default:
        return Plural.Other;
    }
  }
  function isListLikeIterable(obj) {
    if (!isJsObject(obj))
      return false;
    return Array.isArray(obj) || (!(obj instanceof Map) && getSymbolIterator() in obj);
  }
  var NgClass = (function() {
    function NgClass(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {
      this._iterableDiffers = _iterableDiffers;
      this._keyValueDiffers = _keyValueDiffers;
      this._ngEl = _ngEl;
      this._renderer = _renderer;
      this._initialClasses = [];
    }
    Object.defineProperty(NgClass.prototype, "klass", {
      set: function(v) {
        this._applyInitialClasses(true);
        this._initialClasses = typeof v === 'string' ? v.split(/\s+/) : [];
        this._applyInitialClasses(false);
        this._applyClasses(this._rawClass, false);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgClass.prototype, "ngClass", {
      set: function(v) {
        this._cleanupClasses(this._rawClass);
        this._iterableDiffer = null;
        this._keyValueDiffer = null;
        this._rawClass = typeof v === 'string' ? v.split(/\s+/) : v;
        if (this._rawClass) {
          if (isListLikeIterable(this._rawClass)) {
            this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create(null);
          } else {
            this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create(null);
          }
        }
      },
      enumerable: true,
      configurable: true
    });
    NgClass.prototype.ngDoCheck = function() {
      if (this._iterableDiffer) {
        var changes = this._iterableDiffer.diff(this._rawClass);
        if (changes) {
          this._applyIterableChanges(changes);
        }
      } else if (this._keyValueDiffer) {
        var changes = this._keyValueDiffer.diff(this._rawClass);
        if (changes) {
          this._applyKeyValueChanges(changes);
        }
      }
    };
    NgClass.prototype._cleanupClasses = function(rawClassVal) {
      this._applyClasses(rawClassVal, true);
      this._applyInitialClasses(false);
    };
    NgClass.prototype._applyKeyValueChanges = function(changes) {
      var _this = this;
      changes.forEachAddedItem(function(record) {
        return _this._toggleClass(record.key, record.currentValue);
      });
      changes.forEachChangedItem(function(record) {
        return _this._toggleClass(record.key, record.currentValue);
      });
      changes.forEachRemovedItem(function(record) {
        if (record.previousValue) {
          _this._toggleClass(record.key, false);
        }
      });
    };
    NgClass.prototype._applyIterableChanges = function(changes) {
      var _this = this;
      changes.forEachAddedItem(function(record) {
        if (typeof record.item === 'string') {
          _this._toggleClass(record.item, true);
        } else {
          throw new Error("NgClass can only toggle CSS classes expressed as strings, got " + stringify(record.item));
        }
      });
      changes.forEachRemovedItem(function(record) {
        return _this._toggleClass(record.item, false);
      });
    };
    NgClass.prototype._applyInitialClasses = function(isCleanup) {
      var _this = this;
      this._initialClasses.forEach(function(klass) {
        return _this._toggleClass(klass, !isCleanup);
      });
    };
    NgClass.prototype._applyClasses = function(rawClassVal, isCleanup) {
      var _this = this;
      if (rawClassVal) {
        if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {
          ((rawClassVal)).forEach(function(klass) {
            return _this._toggleClass(klass, !isCleanup);
          });
        } else {
          Object.keys(rawClassVal).forEach(function(klass) {
            if (isPresent(rawClassVal[klass]))
              _this._toggleClass(klass, !isCleanup);
          });
        }
      }
    };
    NgClass.prototype._toggleClass = function(klass, enabled) {
      var _this = this;
      klass = klass.trim();
      if (klass) {
        klass.split(/\s+/g).forEach(function(klass) {
          _this._renderer.setElementClass(_this._ngEl.nativeElement, klass, enabled);
        });
      }
    };
    NgClass.decorators = [{
      type: _angular_core.Directive,
      args: [{selector: '[ngClass]'}]
    }];
    NgClass.ctorParameters = function() {
      return [{type: _angular_core.IterableDiffers}, {type: _angular_core.KeyValueDiffers}, {type: _angular_core.ElementRef}, {type: _angular_core.Renderer}];
    };
    NgClass.propDecorators = {
      'klass': [{
        type: _angular_core.Input,
        args: ['class']
      }],
      'ngClass': [{type: _angular_core.Input}]
    };
    return NgClass;
  }());
  var NgForRow = (function() {
    function NgForRow($implicit, index, count) {
      this.$implicit = $implicit;
      this.index = index;
      this.count = count;
    }
    Object.defineProperty(NgForRow.prototype, "first", {
      get: function() {
        return this.index === 0;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgForRow.prototype, "last", {
      get: function() {
        return this.index === this.count - 1;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgForRow.prototype, "even", {
      get: function() {
        return this.index % 2 === 0;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgForRow.prototype, "odd", {
      get: function() {
        return !this.even;
      },
      enumerable: true,
      configurable: true
    });
    return NgForRow;
  }());
  var NgFor = (function() {
    function NgFor(_viewContainer, _template, _differs, _cdr) {
      this._viewContainer = _viewContainer;
      this._template = _template;
      this._differs = _differs;
      this._cdr = _cdr;
      this._differ = null;
    }
    Object.defineProperty(NgFor.prototype, "ngForTrackBy", {
      get: function() {
        return this._trackByFn;
      },
      set: function(fn) {
        if (_angular_core.isDevMode() && fn != null && typeof fn !== 'function') {
          if ((console) && (console.warn)) {
            console.warn(("trackBy must be a function, but received " + JSON.stringify(fn) + ". ") + "See https://angular.io/docs/ts/latest/api/common/index/NgFor-directive.html#!#change-propagation for more information.");
          }
        }
        this._trackByFn = fn;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgFor.prototype, "ngForTemplate", {
      set: function(value) {
        if (value) {
          this._template = value;
        }
      },
      enumerable: true,
      configurable: true
    });
    NgFor.prototype.ngOnChanges = function(changes) {
      if ('ngForOf' in changes) {
        var value = changes['ngForOf'].currentValue;
        if (!this._differ && value) {
          try {
            this._differ = this._differs.find(value).create(this._cdr, this.ngForTrackBy);
          } catch (e) {
            throw new Error("Cannot find a differ supporting object '" + value + "' of type '" + getTypeNameForDebugging(value) + "'. NgFor only supports binding to Iterables such as Arrays.");
          }
        }
      }
    };
    NgFor.prototype.ngDoCheck = function() {
      if (this._differ) {
        var changes = this._differ.diff(this.ngForOf);
        if (changes)
          this._applyChanges(changes);
      }
    };
    NgFor.prototype._applyChanges = function(changes) {
      var _this = this;
      var insertTuples = [];
      changes.forEachOperation(function(item, adjustedPreviousIndex, currentIndex) {
        if (item.previousIndex == null) {
          var view = _this._viewContainer.createEmbeddedView(_this._template, new NgForRow(null, null, null), currentIndex);
          var tuple = new RecordViewTuple(item, view);
          insertTuples.push(tuple);
        } else if (currentIndex == null) {
          _this._viewContainer.remove(adjustedPreviousIndex);
        } else {
          var view = _this._viewContainer.get(adjustedPreviousIndex);
          _this._viewContainer.move(view, currentIndex);
          var tuple = new RecordViewTuple(item, (view));
          insertTuples.push(tuple);
        }
      });
      for (var i = 0; i < insertTuples.length; i++) {
        this._perViewChange(insertTuples[i].view, insertTuples[i].record);
      }
      for (var i = 0,
          ilen = this._viewContainer.length; i < ilen; i++) {
        var viewRef = (this._viewContainer.get(i));
        viewRef.context.index = i;
        viewRef.context.count = ilen;
      }
      changes.forEachIdentityChange(function(record) {
        var viewRef = (_this._viewContainer.get(record.currentIndex));
        viewRef.context.$implicit = record.item;
      });
    };
    NgFor.prototype._perViewChange = function(view, record) {
      view.context.$implicit = record.item;
    };
    NgFor.decorators = [{
      type: _angular_core.Directive,
      args: [{selector: '[ngFor][ngForOf]'}]
    }];
    NgFor.ctorParameters = function() {
      return [{type: _angular_core.ViewContainerRef}, {type: _angular_core.TemplateRef}, {type: _angular_core.IterableDiffers}, {type: _angular_core.ChangeDetectorRef}];
    };
    NgFor.propDecorators = {
      'ngForOf': [{type: _angular_core.Input}],
      'ngForTrackBy': [{type: _angular_core.Input}],
      'ngForTemplate': [{type: _angular_core.Input}]
    };
    return NgFor;
  }());
  var RecordViewTuple = (function() {
    function RecordViewTuple(record, view) {
      this.record = record;
      this.view = view;
    }
    return RecordViewTuple;
  }());
  var NgIf = (function() {
    function NgIf(_viewContainer, _template) {
      this._viewContainer = _viewContainer;
      this._template = _template;
      this._hasView = false;
    }
    Object.defineProperty(NgIf.prototype, "ngIf", {
      set: function(condition) {
        if (condition && !this._hasView) {
          this._hasView = true;
          this._viewContainer.createEmbeddedView(this._template);
        } else if (!condition && this._hasView) {
          this._hasView = false;
          this._viewContainer.clear();
        }
      },
      enumerable: true,
      configurable: true
    });
    NgIf.decorators = [{
      type: _angular_core.Directive,
      args: [{selector: '[ngIf]'}]
    }];
    NgIf.ctorParameters = function() {
      return [{type: _angular_core.ViewContainerRef}, {type: _angular_core.TemplateRef}];
    };
    NgIf.propDecorators = {'ngIf': [{type: _angular_core.Input}]};
    return NgIf;
  }());
  var SwitchView = (function() {
    function SwitchView(_viewContainerRef, _templateRef) {
      this._viewContainerRef = _viewContainerRef;
      this._templateRef = _templateRef;
      this._created = false;
    }
    SwitchView.prototype.create = function() {
      this._created = true;
      this._viewContainerRef.createEmbeddedView(this._templateRef);
    };
    SwitchView.prototype.destroy = function() {
      this._created = false;
      this._viewContainerRef.clear();
    };
    SwitchView.prototype.enforceState = function(created) {
      if (created && !this._created) {
        this.create();
      } else if (!created && this._created) {
        this.destroy();
      }
    };
    return SwitchView;
  }());
  var NgSwitch = (function() {
    function NgSwitch() {
      this._defaultUsed = false;
      this._caseCount = 0;
      this._lastCaseCheckIndex = 0;
      this._lastCasesMatched = false;
    }
    Object.defineProperty(NgSwitch.prototype, "ngSwitch", {
      set: function(newValue) {
        this._ngSwitch = newValue;
        if (this._caseCount === 0) {
          this._updateDefaultCases(true);
        }
      },
      enumerable: true,
      configurable: true
    });
    NgSwitch.prototype._addCase = function() {
      return this._caseCount++;
    };
    NgSwitch.prototype._addDefault = function(view) {
      if (!this._defaultViews) {
        this._defaultViews = [];
      }
      this._defaultViews.push(view);
    };
    NgSwitch.prototype._matchCase = function(value) {
      var matched = value == this._ngSwitch;
      this._lastCasesMatched = this._lastCasesMatched || matched;
      this._lastCaseCheckIndex++;
      if (this._lastCaseCheckIndex === this._caseCount) {
        this._updateDefaultCases(!this._lastCasesMatched);
        this._lastCaseCheckIndex = 0;
        this._lastCasesMatched = false;
      }
      return matched;
    };
    NgSwitch.prototype._updateDefaultCases = function(useDefault) {
      if (this._defaultViews && useDefault !== this._defaultUsed) {
        this._defaultUsed = useDefault;
        for (var i = 0; i < this._defaultViews.length; i++) {
          var defaultView = this._defaultViews[i];
          defaultView.enforceState(useDefault);
        }
      }
    };
    NgSwitch.decorators = [{
      type: _angular_core.Directive,
      args: [{selector: '[ngSwitch]'}]
    }];
    NgSwitch.ctorParameters = function() {
      return [];
    };
    NgSwitch.propDecorators = {'ngSwitch': [{type: _angular_core.Input}]};
    return NgSwitch;
  }());
  var NgSwitchCase = (function() {
    function NgSwitchCase(viewContainer, templateRef, ngSwitch) {
      this.ngSwitch = ngSwitch;
      ngSwitch._addCase();
      this._view = new SwitchView(viewContainer, templateRef);
    }
    NgSwitchCase.prototype.ngDoCheck = function() {
      this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase));
    };
    NgSwitchCase.decorators = [{
      type: _angular_core.Directive,
      args: [{selector: '[ngSwitchCase]'}]
    }];
    NgSwitchCase.ctorParameters = function() {
      return [{type: _angular_core.ViewContainerRef}, {type: _angular_core.TemplateRef}, {
        type: NgSwitch,
        decorators: [{type: _angular_core.Host}]
      }];
    };
    NgSwitchCase.propDecorators = {'ngSwitchCase': [{type: _angular_core.Input}]};
    return NgSwitchCase;
  }());
  var NgSwitchDefault = (function() {
    function NgSwitchDefault(viewContainer, templateRef, ngSwitch) {
      ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));
    }
    NgSwitchDefault.decorators = [{
      type: _angular_core.Directive,
      args: [{selector: '[ngSwitchDefault]'}]
    }];
    NgSwitchDefault.ctorParameters = function() {
      return [{type: _angular_core.ViewContainerRef}, {type: _angular_core.TemplateRef}, {
        type: NgSwitch,
        decorators: [{type: _angular_core.Host}]
      }];
    };
    return NgSwitchDefault;
  }());
  var NgPlural = (function() {
    function NgPlural(_localization) {
      this._localization = _localization;
      this._caseViews = {};
    }
    Object.defineProperty(NgPlural.prototype, "ngPlural", {
      set: function(value) {
        this._switchValue = value;
        this._updateView();
      },
      enumerable: true,
      configurable: true
    });
    NgPlural.prototype.addCase = function(value, switchView) {
      this._caseViews[value] = switchView;
    };
    NgPlural.prototype._updateView = function() {
      this._clearViews();
      var cases = Object.keys(this._caseViews);
      var key = getPluralCategory(this._switchValue, cases, this._localization);
      this._activateView(this._caseViews[key]);
    };
    NgPlural.prototype._clearViews = function() {
      if (this._activeView)
        this._activeView.destroy();
    };
    NgPlural.prototype._activateView = function(view) {
      if (view) {
        this._activeView = view;
        this._activeView.create();
      }
    };
    NgPlural.decorators = [{
      type: _angular_core.Directive,
      args: [{selector: '[ngPlural]'}]
    }];
    NgPlural.ctorParameters = function() {
      return [{type: NgLocalization}];
    };
    NgPlural.propDecorators = {'ngPlural': [{type: _angular_core.Input}]};
    return NgPlural;
  }());
  var NgPluralCase = (function() {
    function NgPluralCase(value, template, viewContainer, ngPlural) {
      this.value = value;
      ngPlural.addCase(value, new SwitchView(viewContainer, template));
    }
    NgPluralCase.decorators = [{
      type: _angular_core.Directive,
      args: [{selector: '[ngPluralCase]'}]
    }];
    NgPluralCase.ctorParameters = function() {
      return [{
        type: undefined,
        decorators: [{
          type: _angular_core.Attribute,
          args: ['ngPluralCase']
        }]
      }, {type: _angular_core.TemplateRef}, {type: _angular_core.ViewContainerRef}, {
        type: NgPlural,
        decorators: [{type: _angular_core.Host}]
      }];
    };
    return NgPluralCase;
  }());
  var NgStyle = (function() {
    function NgStyle(_differs, _ngEl, _renderer) {
      this._differs = _differs;
      this._ngEl = _ngEl;
      this._renderer = _renderer;
    }
    Object.defineProperty(NgStyle.prototype, "ngStyle", {
      set: function(v) {
        this._ngStyle = v;
        if (!this._differ && v) {
          this._differ = this._differs.find(v).create(null);
        }
      },
      enumerable: true,
      configurable: true
    });
    NgStyle.prototype.ngDoCheck = function() {
      if (this._differ) {
        var changes = this._differ.diff(this._ngStyle);
        if (changes) {
          this._applyChanges(changes);
        }
      }
    };
    NgStyle.prototype._applyChanges = function(changes) {
      var _this = this;
      changes.forEachRemovedItem(function(record) {
        return _this._setStyle(record.key, null);
      });
      changes.forEachAddedItem(function(record) {
        return _this._setStyle(record.key, record.currentValue);
      });
      changes.forEachChangedItem(function(record) {
        return _this._setStyle(record.key, record.currentValue);
      });
    };
    NgStyle.prototype._setStyle = function(nameAndUnit, value) {
      var _a = nameAndUnit.split('.'),
          name = _a[0],
          unit = _a[1];
      value = value && unit ? "" + value + unit : value;
      this._renderer.setElementStyle(this._ngEl.nativeElement, name, value);
    };
    NgStyle.decorators = [{
      type: _angular_core.Directive,
      args: [{selector: '[ngStyle]'}]
    }];
    NgStyle.ctorParameters = function() {
      return [{type: _angular_core.KeyValueDiffers}, {type: _angular_core.ElementRef}, {type: _angular_core.Renderer}];
    };
    NgStyle.propDecorators = {'ngStyle': [{type: _angular_core.Input}]};
    return NgStyle;
  }());
  var NgTemplateOutlet = (function() {
    function NgTemplateOutlet(_viewContainerRef) {
      this._viewContainerRef = _viewContainerRef;
    }
    Object.defineProperty(NgTemplateOutlet.prototype, "ngOutletContext", {
      set: function(context) {
        this._context = context;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgTemplateOutlet.prototype, "ngTemplateOutlet", {
      set: function(templateRef) {
        this._templateRef = templateRef;
      },
      enumerable: true,
      configurable: true
    });
    NgTemplateOutlet.prototype.ngOnChanges = function(changes) {
      if (this._viewRef) {
        this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));
      }
      if (this._templateRef) {
        this._viewRef = this._viewContainerRef.createEmbeddedView(this._templateRef, this._context);
      }
    };
    NgTemplateOutlet.decorators = [{
      type: _angular_core.Directive,
      args: [{selector: '[ngTemplateOutlet]'}]
    }];
    NgTemplateOutlet.ctorParameters = function() {
      return [{type: _angular_core.ViewContainerRef}];
    };
    NgTemplateOutlet.propDecorators = {
      'ngOutletContext': [{type: _angular_core.Input}],
      'ngTemplateOutlet': [{type: _angular_core.Input}]
    };
    return NgTemplateOutlet;
  }());
  var COMMON_DIRECTIVES = [NgClass, NgFor, NgIf, NgTemplateOutlet, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase];
  var isPromise = _angular_core.__core_private__.isPromise;
  var __extends$4 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var BaseError = (function(_super) {
    __extends$4(BaseError, _super);
    function BaseError(message) {
      _super.call(this, message);
      var nativeError = new Error(message);
      this._nativeError = nativeError;
    }
    Object.defineProperty(BaseError.prototype, "message", {
      get: function() {
        return this._nativeError.message;
      },
      set: function(message) {
        this._nativeError.message = message;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(BaseError.prototype, "name", {
      get: function() {
        return this._nativeError.name;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(BaseError.prototype, "stack", {
      get: function() {
        return ((this._nativeError)).stack;
      },
      set: function(value) {
        ((this._nativeError)).stack = value;
      },
      enumerable: true,
      configurable: true
    });
    BaseError.prototype.toString = function() {
      return this._nativeError.toString();
    };
    return BaseError;
  }(Error));
  var WrappedError = (function(_super) {
    __extends$4(WrappedError, _super);
    function WrappedError(message, error) {
      _super.call(this, message + " caused by: " + (error instanceof Error ? error.message : error));
      this.originalError = error;
    }
    Object.defineProperty(WrappedError.prototype, "stack", {
      get: function() {
        return (((this.originalError instanceof Error ? this.originalError : this._nativeError))).stack;
      },
      enumerable: true,
      configurable: true
    });
    return WrappedError;
  }(BaseError));
  var __extends$3 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var InvalidPipeArgumentError = (function(_super) {
    __extends$3(InvalidPipeArgumentError, _super);
    function InvalidPipeArgumentError(type, value) {
      _super.call(this, "Invalid argument '" + value + "' for pipe '" + stringify(type) + "'");
    }
    return InvalidPipeArgumentError;
  }(BaseError));
  var ObservableStrategy = (function() {
    function ObservableStrategy() {}
    ObservableStrategy.prototype.createSubscription = function(async, updateLatestValue) {
      return async.subscribe({
        next: updateLatestValue,
        error: function(e) {
          throw e;
        }
      });
    };
    ObservableStrategy.prototype.dispose = function(subscription) {
      subscription.unsubscribe();
    };
    ObservableStrategy.prototype.onDestroy = function(subscription) {
      subscription.unsubscribe();
    };
    return ObservableStrategy;
  }());
  var PromiseStrategy = (function() {
    function PromiseStrategy() {}
    PromiseStrategy.prototype.createSubscription = function(async, updateLatestValue) {
      return async.then(updateLatestValue, function(e) {
        throw e;
      });
    };
    PromiseStrategy.prototype.dispose = function(subscription) {};
    PromiseStrategy.prototype.onDestroy = function(subscription) {};
    return PromiseStrategy;
  }());
  var _promiseStrategy = new PromiseStrategy();
  var _observableStrategy = new ObservableStrategy();
  var AsyncPipe = (function() {
    function AsyncPipe(_ref) {
      this._ref = _ref;
      this._latestValue = null;
      this._latestReturnedValue = null;
      this._subscription = null;
      this._obj = null;
      this._strategy = null;
    }
    AsyncPipe.prototype.ngOnDestroy = function() {
      if (this._subscription) {
        this._dispose();
      }
    };
    AsyncPipe.prototype.transform = function(obj) {
      if (!this._obj) {
        if (obj) {
          this._subscribe(obj);
        }
        this._latestReturnedValue = this._latestValue;
        return this._latestValue;
      }
      if (obj !== this._obj) {
        this._dispose();
        return this.transform(obj);
      }
      if (this._latestValue === this._latestReturnedValue) {
        return this._latestReturnedValue;
      }
      this._latestReturnedValue = this._latestValue;
      return _angular_core.WrappedValue.wrap(this._latestValue);
    };
    AsyncPipe.prototype._subscribe = function(obj) {
      var _this = this;
      this._obj = obj;
      this._strategy = this._selectStrategy(obj);
      this._subscription = this._strategy.createSubscription(obj, function(value) {
        return _this._updateLatestValue(obj, value);
      });
    };
    AsyncPipe.prototype._selectStrategy = function(obj) {
      if (isPromise(obj)) {
        return _promiseStrategy;
      }
      if (((obj)).subscribe) {
        return _observableStrategy;
      }
      throw new InvalidPipeArgumentError(AsyncPipe, obj);
    };
    AsyncPipe.prototype._dispose = function() {
      this._strategy.dispose(this._subscription);
      this._latestValue = null;
      this._latestReturnedValue = null;
      this._subscription = null;
      this._obj = null;
    };
    AsyncPipe.prototype._updateLatestValue = function(async, value) {
      if (async === this._obj) {
        this._latestValue = value;
        this._ref.markForCheck();
      }
    };
    AsyncPipe.decorators = [{
      type: _angular_core.Pipe,
      args: [{
        name: 'async',
        pure: false
      }]
    }];
    AsyncPipe.ctorParameters = function() {
      return [{type: _angular_core.ChangeDetectorRef}];
    };
    return AsyncPipe;
  }());
  var NumberFormatStyle = {};
  NumberFormatStyle.Decimal = 0;
  NumberFormatStyle.Percent = 1;
  NumberFormatStyle.Currency = 2;
  NumberFormatStyle[NumberFormatStyle.Decimal] = "Decimal";
  NumberFormatStyle[NumberFormatStyle.Percent] = "Percent";
  NumberFormatStyle[NumberFormatStyle.Currency] = "Currency";
  var NumberFormatter = (function() {
    function NumberFormatter() {}
    NumberFormatter.format = function(num, locale, style, _a) {
      var _b = _a === void 0 ? {} : _a,
          minimumIntegerDigits = _b.minimumIntegerDigits,
          minimumFractionDigits = _b.minimumFractionDigits,
          maximumFractionDigits = _b.maximumFractionDigits,
          currency = _b.currency,
          _c = _b.currencyAsSymbol,
          currencyAsSymbol = _c === void 0 ? false : _c;
      var options = {
        minimumIntegerDigits: minimumIntegerDigits,
        minimumFractionDigits: minimumFractionDigits,
        maximumFractionDigits: maximumFractionDigits,
        style: NumberFormatStyle[style].toLowerCase()
      };
      if (style == NumberFormatStyle.Currency) {
        options.currency = currency;
        options.currencyDisplay = currencyAsSymbol ? 'symbol' : 'code';
      }
      return new Intl.NumberFormat(locale, options).format(num);
    };
    return NumberFormatter;
  }());
  var DATE_FORMATS_SPLIT = /((?:[^yMLdHhmsazZEwGjJ']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|J+|j+|m+|s+|a|z|Z|G+|w+))(.*)/;
  var PATTERN_ALIASES = {
    'yMMMdjms': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 3), digitCondition('day', 1), digitCondition('hour', 1), digitCondition('minute', 1), digitCondition('second', 1)])),
    'yMdjm': datePartGetterFactory(combine([digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1), digitCondition('hour', 1), digitCondition('minute', 1)])),
    'yMMMMEEEEd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 4), nameCondition('weekday', 4), digitCondition('day', 1)])),
    'yMMMMd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 4), digitCondition('day', 1)])),
    'yMMMd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 3), digitCondition('day', 1)])),
    'yMd': datePartGetterFactory(combine([digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1)])),
    'jms': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('second', 1), digitCondition('minute', 1)])),
    'jm': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('minute', 1)]))
  };
  var DATE_FORMATS = {
    'yyyy': datePartGetterFactory(digitCondition('year', 4)),
    'yy': datePartGetterFactory(digitCondition('year', 2)),
    'y': datePartGetterFactory(digitCondition('year', 1)),
    'MMMM': datePartGetterFactory(nameCondition('month', 4)),
    'MMM': datePartGetterFactory(nameCondition('month', 3)),
    'MM': datePartGetterFactory(digitCondition('month', 2)),
    'M': datePartGetterFactory(digitCondition('month', 1)),
    'LLLL': datePartGetterFactory(nameCondition('month', 4)),
    'L': datePartGetterFactory(nameCondition('month', 1)),
    'dd': datePartGetterFactory(digitCondition('day', 2)),
    'd': datePartGetterFactory(digitCondition('day', 1)),
    'HH': digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), false)))),
    'H': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), false))),
    'hh': digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), true)))),
    'h': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),
    'jj': datePartGetterFactory(digitCondition('hour', 2)),
    'j': datePartGetterFactory(digitCondition('hour', 1)),
    'mm': digitModifier(datePartGetterFactory(digitCondition('minute', 2))),
    'm': datePartGetterFactory(digitCondition('minute', 1)),
    'ss': digitModifier(datePartGetterFactory(digitCondition('second', 2))),
    's': datePartGetterFactory(digitCondition('second', 1)),
    'sss': datePartGetterFactory(digitCondition('second', 3)),
    'EEEE': datePartGetterFactory(nameCondition('weekday', 4)),
    'EEE': datePartGetterFactory(nameCondition('weekday', 3)),
    'EE': datePartGetterFactory(nameCondition('weekday', 2)),
    'E': datePartGetterFactory(nameCondition('weekday', 1)),
    'a': hourClockExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),
    'Z': timeZoneGetter('short'),
    'z': timeZoneGetter('long'),
    'ww': datePartGetterFactory({}),
    'w': datePartGetterFactory({}),
    'G': datePartGetterFactory(nameCondition('era', 1)),
    'GG': datePartGetterFactory(nameCondition('era', 2)),
    'GGG': datePartGetterFactory(nameCondition('era', 3)),
    'GGGG': datePartGetterFactory(nameCondition('era', 4))
  };
  function digitModifier(inner) {
    return function(date, locale) {
      var result = inner(date, locale);
      return result.length == 1 ? '0' + result : result;
    };
  }
  function hourClockExtractor(inner) {
    return function(date, locale) {
      return inner(date, locale).split(' ')[1];
    };
  }
  function hourExtractor(inner) {
    return function(date, locale) {
      return inner(date, locale).split(' ')[0];
    };
  }
  function intlDateFormat(date, locale, options) {
    return new Intl.DateTimeFormat(locale, options).format(date).replace(/[\u200e\u200f]/g, '');
  }
  function timeZoneGetter(timezone) {
    var options = {
      hour: '2-digit',
      hour12: false,
      timeZoneName: timezone
    };
    return function(date, locale) {
      var result = intlDateFormat(date, locale, options);
      return result ? result.substring(3) : '';
    };
  }
  function hour12Modify(options, value) {
    options.hour12 = value;
    return options;
  }
  function digitCondition(prop, len) {
    var result = {};
    result[prop] = len === 2 ? '2-digit' : 'numeric';
    return result;
  }
  function nameCondition(prop, len) {
    var result = {};
    if (len < 4) {
      result[prop] = len > 1 ? 'short' : 'narrow';
    } else {
      result[prop] = 'long';
    }
    return result;
  }
  function combine(options) {
    return (_a = ((Object))).assign.apply(_a, [{}].concat(options));
    var _a;
  }
  function datePartGetterFactory(ret) {
    return function(date, locale) {
      return intlDateFormat(date, locale, ret);
    };
  }
  var DATE_FORMATTER_CACHE = new Map();
  function dateFormatter(format, date, locale) {
    var fn = PATTERN_ALIASES[format];
    if (fn)
      return fn(date, locale);
    var cacheKey = format;
    var parts = DATE_FORMATTER_CACHE.get(cacheKey);
    if (!parts) {
      parts = [];
      var match = void 0;
      DATE_FORMATS_SPLIT.exec(format);
      while (format) {
        match = DATE_FORMATS_SPLIT.exec(format);
        if (match) {
          parts = parts.concat(match.slice(1));
          format = parts.pop();
        } else {
          parts.push(format);
          format = null;
        }
      }
      DATE_FORMATTER_CACHE.set(cacheKey, parts);
    }
    return parts.reduce(function(text, part) {
      var fn = DATE_FORMATS[part];
      return text + (fn ? fn(date, locale) : partToTime(part));
    }, '');
  }
  function partToTime(part) {
    return part === '\'\'' ? '\'' : part.replace(/(^'|'$)/g, '').replace(/''/g, '\'');
  }
  var DateFormatter = (function() {
    function DateFormatter() {}
    DateFormatter.format = function(date, locale, pattern) {
      return dateFormatter(pattern, date, locale);
    };
    return DateFormatter;
  }());
  var DatePipe = (function() {
    function DatePipe(_locale) {
      this._locale = _locale;
    }
    DatePipe.prototype.transform = function(value, pattern) {
      if (pattern === void 0) {
        pattern = 'mediumDate';
      }
      var date;
      if (isBlank$1(value))
        return null;
      if (typeof value === 'string') {
        value = value.trim();
      }
      if (isDate(value)) {
        date = value;
      } else if (NumberWrapper.isNumeric(value)) {
        date = new Date(parseFloat(value));
      } else if (typeof value === 'string' && /^(\d{4}-\d{1,2}-\d{1,2})$/.test(value)) {
        var _a = value.split('-').map(function(val) {
          return parseInt(val, 10);
        }),
            y = _a[0],
            m = _a[1],
            d = _a[2];
        date = new Date(y, m - 1, d);
      } else {
        date = new Date(value);
      }
      if (!isDate(date)) {
        throw new InvalidPipeArgumentError(DatePipe, value);
      }
      return DateFormatter.format(date, this._locale, DatePipe._ALIASES[pattern] || pattern);
    };
    DatePipe._ALIASES = {
      'medium': 'yMMMdjms',
      'short': 'yMdjm',
      'fullDate': 'yMMMMEEEEd',
      'longDate': 'yMMMMd',
      'mediumDate': 'yMMMd',
      'shortDate': 'yMd',
      'mediumTime': 'jms',
      'shortTime': 'jm'
    };
    DatePipe.decorators = [{
      type: _angular_core.Pipe,
      args: [{
        name: 'date',
        pure: true
      }]
    }];
    DatePipe.ctorParameters = function() {
      return [{
        type: undefined,
        decorators: [{
          type: _angular_core.Inject,
          args: [_angular_core.LOCALE_ID]
        }]
      }];
    };
    return DatePipe;
  }());
  function isBlank$1(obj) {
    return obj == null || obj === '';
  }
  var _INTERPOLATION_REGEXP = /#/g;
  var I18nPluralPipe = (function() {
    function I18nPluralPipe(_localization) {
      this._localization = _localization;
    }
    I18nPluralPipe.prototype.transform = function(value, pluralMap) {
      if (isBlank(value))
        return '';
      if (typeof pluralMap !== 'object' || pluralMap === null) {
        throw new InvalidPipeArgumentError(I18nPluralPipe, pluralMap);
      }
      var key = getPluralCategory(value, Object.keys(pluralMap), this._localization);
      return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());
    };
    I18nPluralPipe.decorators = [{
      type: _angular_core.Pipe,
      args: [{
        name: 'i18nPlural',
        pure: true
      }]
    }];
    I18nPluralPipe.ctorParameters = function() {
      return [{type: NgLocalization}];
    };
    return I18nPluralPipe;
  }());
  var I18nSelectPipe = (function() {
    function I18nSelectPipe() {}
    I18nSelectPipe.prototype.transform = function(value, mapping) {
      if (value == null)
        return '';
      if (typeof mapping !== 'object' || typeof value !== 'string') {
        throw new InvalidPipeArgumentError(I18nSelectPipe, mapping);
      }
      if (mapping.hasOwnProperty(value)) {
        return mapping[value];
      }
      if (mapping.hasOwnProperty('other')) {
        return mapping['other'];
      }
      return '';
    };
    I18nSelectPipe.decorators = [{
      type: _angular_core.Pipe,
      args: [{
        name: 'i18nSelect',
        pure: true
      }]
    }];
    I18nSelectPipe.ctorParameters = function() {
      return [];
    };
    return I18nSelectPipe;
  }());
  var JsonPipe = (function() {
    function JsonPipe() {}
    JsonPipe.prototype.transform = function(value) {
      return JSON.stringify(value, null, 2);
    };
    JsonPipe.decorators = [{
      type: _angular_core.Pipe,
      args: [{
        name: 'json',
        pure: false
      }]
    }];
    JsonPipe.ctorParameters = function() {
      return [];
    };
    return JsonPipe;
  }());
  var LowerCasePipe = (function() {
    function LowerCasePipe() {}
    LowerCasePipe.prototype.transform = function(value) {
      if (isBlank(value))
        return value;
      if (typeof value !== 'string') {
        throw new InvalidPipeArgumentError(LowerCasePipe, value);
      }
      return value.toLowerCase();
    };
    LowerCasePipe.decorators = [{
      type: _angular_core.Pipe,
      args: [{name: 'lowercase'}]
    }];
    LowerCasePipe.ctorParameters = function() {
      return [];
    };
    return LowerCasePipe;
  }());
  var _NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(-(\d+))?)?$/;
  function formatNumber(pipe, locale, value, style, digits, currency, currencyAsSymbol) {
    if (currency === void 0) {
      currency = null;
    }
    if (currencyAsSymbol === void 0) {
      currencyAsSymbol = false;
    }
    if (isBlank(value))
      return null;
    value = typeof value === 'string' && NumberWrapper.isNumeric(value) ? +value : value;
    if (typeof value !== 'number') {
      throw new InvalidPipeArgumentError(pipe, value);
    }
    var minInt;
    var minFraction;
    var maxFraction;
    if (style !== NumberFormatStyle.Currency) {
      minInt = 1;
      minFraction = 0;
      maxFraction = 3;
    }
    if (digits) {
      var parts = digits.match(_NUMBER_FORMAT_REGEXP);
      if (parts === null) {
        throw new Error(digits + " is not a valid digit info for number pipes");
      }
      if (isPresent(parts[1])) {
        minInt = NumberWrapper.parseIntAutoRadix(parts[1]);
      }
      if (isPresent(parts[3])) {
        minFraction = NumberWrapper.parseIntAutoRadix(parts[3]);
      }
      if (isPresent(parts[5])) {
        maxFraction = NumberWrapper.parseIntAutoRadix(parts[5]);
      }
    }
    return NumberFormatter.format((value), locale, style, {
      minimumIntegerDigits: minInt,
      minimumFractionDigits: minFraction,
      maximumFractionDigits: maxFraction,
      currency: currency,
      currencyAsSymbol: currencyAsSymbol
    });
  }
  var DecimalPipe = (function() {
    function DecimalPipe(_locale) {
      this._locale = _locale;
    }
    DecimalPipe.prototype.transform = function(value, digits) {
      if (digits === void 0) {
        digits = null;
      }
      return formatNumber(DecimalPipe, this._locale, value, NumberFormatStyle.Decimal, digits);
    };
    DecimalPipe.decorators = [{
      type: _angular_core.Pipe,
      args: [{name: 'number'}]
    }];
    DecimalPipe.ctorParameters = function() {
      return [{
        type: undefined,
        decorators: [{
          type: _angular_core.Inject,
          args: [_angular_core.LOCALE_ID]
        }]
      }];
    };
    return DecimalPipe;
  }());
  var PercentPipe = (function() {
    function PercentPipe(_locale) {
      this._locale = _locale;
    }
    PercentPipe.prototype.transform = function(value, digits) {
      if (digits === void 0) {
        digits = null;
      }
      return formatNumber(PercentPipe, this._locale, value, NumberFormatStyle.Percent, digits);
    };
    PercentPipe.decorators = [{
      type: _angular_core.Pipe,
      args: [{name: 'percent'}]
    }];
    PercentPipe.ctorParameters = function() {
      return [{
        type: undefined,
        decorators: [{
          type: _angular_core.Inject,
          args: [_angular_core.LOCALE_ID]
        }]
      }];
    };
    return PercentPipe;
  }());
  var CurrencyPipe = (function() {
    function CurrencyPipe(_locale) {
      this._locale = _locale;
    }
    CurrencyPipe.prototype.transform = function(value, currencyCode, symbolDisplay, digits) {
      if (currencyCode === void 0) {
        currencyCode = 'USD';
      }
      if (symbolDisplay === void 0) {
        symbolDisplay = false;
      }
      if (digits === void 0) {
        digits = null;
      }
      return formatNumber(CurrencyPipe, this._locale, value, NumberFormatStyle.Currency, digits, currencyCode, symbolDisplay);
    };
    CurrencyPipe.decorators = [{
      type: _angular_core.Pipe,
      args: [{name: 'currency'}]
    }];
    CurrencyPipe.ctorParameters = function() {
      return [{
        type: undefined,
        decorators: [{
          type: _angular_core.Inject,
          args: [_angular_core.LOCALE_ID]
        }]
      }];
    };
    return CurrencyPipe;
  }());
  var SlicePipe = (function() {
    function SlicePipe() {}
    SlicePipe.prototype.transform = function(value, start, end) {
      if (isBlank(value))
        return value;
      if (!this.supports(value)) {
        throw new InvalidPipeArgumentError(SlicePipe, value);
      }
      return value.slice(start, end);
    };
    SlicePipe.prototype.supports = function(obj) {
      return typeof obj === 'string' || Array.isArray(obj);
    };
    SlicePipe.decorators = [{
      type: _angular_core.Pipe,
      args: [{
        name: 'slice',
        pure: false
      }]
    }];
    SlicePipe.ctorParameters = function() {
      return [];
    };
    return SlicePipe;
  }());
  var UpperCasePipe = (function() {
    function UpperCasePipe() {}
    UpperCasePipe.prototype.transform = function(value) {
      if (isBlank(value))
        return value;
      if (typeof value !== 'string') {
        throw new InvalidPipeArgumentError(UpperCasePipe, value);
      }
      return value.toUpperCase();
    };
    UpperCasePipe.decorators = [{
      type: _angular_core.Pipe,
      args: [{name: 'uppercase'}]
    }];
    UpperCasePipe.ctorParameters = function() {
      return [];
    };
    return UpperCasePipe;
  }());
  var COMMON_PIPES = [AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, CurrencyPipe, DatePipe, I18nPluralPipe, I18nSelectPipe];
  var CommonModule = (function() {
    function CommonModule() {}
    CommonModule.decorators = [{
      type: _angular_core.NgModule,
      args: [{
        declarations: [COMMON_DIRECTIVES, COMMON_PIPES],
        exports: [COMMON_DIRECTIVES, COMMON_PIPES],
        providers: [{
          provide: NgLocalization,
          useClass: NgLocaleLocalization
        }]
      }]
    }];
    CommonModule.ctorParameters = function() {
      return [];
    };
    return CommonModule;
  }());
  var VERSION = new _angular_core.Version('2.4.2');
  exports.NgLocalization = NgLocalization;
  exports.CommonModule = CommonModule;
  exports.NgClass = NgClass;
  exports.NgFor = NgFor;
  exports.NgIf = NgIf;
  exports.NgPlural = NgPlural;
  exports.NgPluralCase = NgPluralCase;
  exports.NgStyle = NgStyle;
  exports.NgSwitch = NgSwitch;
  exports.NgSwitchCase = NgSwitchCase;
  exports.NgSwitchDefault = NgSwitchDefault;
  exports.NgTemplateOutlet = NgTemplateOutlet;
  exports.AsyncPipe = AsyncPipe;
  exports.DatePipe = DatePipe;
  exports.I18nPluralPipe = I18nPluralPipe;
  exports.I18nSelectPipe = I18nSelectPipe;
  exports.JsonPipe = JsonPipe;
  exports.LowerCasePipe = LowerCasePipe;
  exports.CurrencyPipe = CurrencyPipe;
  exports.DecimalPipe = DecimalPipe;
  exports.PercentPipe = PercentPipe;
  exports.SlicePipe = SlicePipe;
  exports.UpperCasePipe = UpperCasePipe;
  exports.VERSION = VERSION;
  exports.Version = _angular_core.Version;
  exports.PlatformLocation = PlatformLocation;
  exports.LocationStrategy = LocationStrategy;
  exports.APP_BASE_HREF = APP_BASE_HREF;
  exports.HashLocationStrategy = HashLocationStrategy;
  exports.PathLocationStrategy = PathLocationStrategy;
  exports.Location = Location;
}));

})();
(function() {
var define = $__System.amdDefine;
(function(global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core')) : typeof define === 'function' && define.amd ? define("npm:@angular/platform-browser/bundles/platform-browser.umd.js", ["exports", "npm:@angular/common/bundles/common.umd.js", "npm:@angular/core/bundles/core.umd.js"], factory) : (factory((global.ng = global.ng || {}, global.ng.platformBrowser = global.ng.platformBrowser || {}), global.ng.common, global.ng.core));
}(this, function(exports, _angular_common, core) {
  'use strict';
  var DebugDomRootRenderer = core.__core_private__.DebugDomRootRenderer;
  var NoOpAnimationPlayer = core.__core_private__.NoOpAnimationPlayer;
  var NoOpAnimationDriver = (function() {
    function NoOpAnimationDriver() {}
    NoOpAnimationDriver.prototype.animate = function(element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {
      if (previousPlayers === void 0) {
        previousPlayers = [];
      }
      return new NoOpAnimationPlayer();
    };
    return NoOpAnimationDriver;
  }());
  var AnimationDriver = (function() {
    function AnimationDriver() {}
    AnimationDriver.prototype.animate = function(element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {};
    AnimationDriver.NOOP = new NoOpAnimationDriver();
    return AnimationDriver;
  }());
  var globalScope;
  if (typeof window === 'undefined') {
    if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
      globalScope = (self);
    } else {
      globalScope = (global);
    }
  } else {
    globalScope = (window);
  }
  var global$1 = globalScope;
  global$1.assert = function assert(condition) {};
  function isPresent(obj) {
    return obj != null;
  }
  function isBlank(obj) {
    return obj == null;
  }
  function stringify(token) {
    if (typeof token === 'string') {
      return token;
    }
    if (token == null) {
      return '' + token;
    }
    if (token.overriddenName) {
      return "" + token.overriddenName;
    }
    if (token.name) {
      return "" + token.name;
    }
    var res = token.toString();
    var newLineIndex = res.indexOf('\n');
    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
  }
  function setValueOnPath(global, path, value) {
    var parts = path.split('.');
    var obj = global;
    while (parts.length > 1) {
      var name_1 = parts.shift();
      if (obj.hasOwnProperty(name_1) && obj[name_1] != null) {
        obj = obj[name_1];
      } else {
        obj = obj[name_1] = {};
      }
    }
    if (obj === undefined || obj === null) {
      obj = {};
    }
    obj[parts.shift()] = value;
  }
  var _DOM = null;
  function getDOM() {
    return _DOM;
  }
  function setRootDomAdapter(adapter) {
    if (!_DOM) {
      _DOM = adapter;
    }
  }
  var DomAdapter = (function() {
    function DomAdapter() {
      this.resourceLoaderType = null;
    }
    DomAdapter.prototype.hasProperty = function(element, name) {};
    DomAdapter.prototype.setProperty = function(el, name, value) {};
    DomAdapter.prototype.getProperty = function(el, name) {};
    DomAdapter.prototype.invoke = function(el, methodName, args) {};
    DomAdapter.prototype.logError = function(error) {};
    DomAdapter.prototype.log = function(error) {};
    DomAdapter.prototype.logGroup = function(error) {};
    DomAdapter.prototype.logGroupEnd = function() {};
    Object.defineProperty(DomAdapter.prototype, "attrToPropMap", {
      get: function() {
        return this._attrToPropMap;
      },
      set: function(value) {
        this._attrToPropMap = value;
      },
      enumerable: true,
      configurable: true
    });
    ;
    ;
    DomAdapter.prototype.parse = function(templateHtml) {};
    DomAdapter.prototype.query = function(selector) {};
    DomAdapter.prototype.querySelector = function(el, selector) {};
    DomAdapter.prototype.querySelectorAll = function(el, selector) {};
    DomAdapter.prototype.on = function(el, evt, listener) {};
    DomAdapter.prototype.onAndCancel = function(el, evt, listener) {};
    DomAdapter.prototype.dispatchEvent = function(el, evt) {};
    DomAdapter.prototype.createMouseEvent = function(eventType) {};
    DomAdapter.prototype.createEvent = function(eventType) {};
    DomAdapter.prototype.preventDefault = function(evt) {};
    DomAdapter.prototype.isPrevented = function(evt) {};
    DomAdapter.prototype.getInnerHTML = function(el) {};
    DomAdapter.prototype.getTemplateContent = function(el) {};
    DomAdapter.prototype.getOuterHTML = function(el) {};
    DomAdapter.prototype.nodeName = function(node) {};
    DomAdapter.prototype.nodeValue = function(node) {};
    DomAdapter.prototype.type = function(node) {};
    DomAdapter.prototype.content = function(node) {};
    DomAdapter.prototype.firstChild = function(el) {};
    DomAdapter.prototype.nextSibling = function(el) {};
    DomAdapter.prototype.parentElement = function(el) {};
    DomAdapter.prototype.childNodes = function(el) {};
    DomAdapter.prototype.childNodesAsList = function(el) {};
    DomAdapter.prototype.clearNodes = function(el) {};
    DomAdapter.prototype.appendChild = function(el, node) {};
    DomAdapter.prototype.removeChild = function(el, node) {};
    DomAdapter.prototype.replaceChild = function(el, newNode, oldNode) {};
    DomAdapter.prototype.remove = function(el) {};
    DomAdapter.prototype.insertBefore = function(el, node) {};
    DomAdapter.prototype.insertAllBefore = function(el, nodes) {};
    DomAdapter.prototype.insertAfter = function(el, node) {};
    DomAdapter.prototype.setInnerHTML = function(el, value) {};
    DomAdapter.prototype.getText = function(el) {};
    DomAdapter.prototype.setText = function(el, value) {};
    DomAdapter.prototype.getValue = function(el) {};
    DomAdapter.prototype.setValue = function(el, value) {};
    DomAdapter.prototype.getChecked = function(el) {};
    DomAdapter.prototype.setChecked = function(el, value) {};
    DomAdapter.prototype.createComment = function(text) {};
    DomAdapter.prototype.createTemplate = function(html) {};
    DomAdapter.prototype.createElement = function(tagName, doc) {};
    DomAdapter.prototype.createElementNS = function(ns, tagName, doc) {};
    DomAdapter.prototype.createTextNode = function(text, doc) {};
    DomAdapter.prototype.createScriptTag = function(attrName, attrValue, doc) {};
    DomAdapter.prototype.createStyleElement = function(css, doc) {};
    DomAdapter.prototype.createShadowRoot = function(el) {};
    DomAdapter.prototype.getShadowRoot = function(el) {};
    DomAdapter.prototype.getHost = function(el) {};
    DomAdapter.prototype.getDistributedNodes = function(el) {};
    DomAdapter.prototype.clone = function(node) {};
    DomAdapter.prototype.getElementsByClassName = function(element, name) {};
    DomAdapter.prototype.getElementsByTagName = function(element, name) {};
    DomAdapter.prototype.classList = function(element) {};
    DomAdapter.prototype.addClass = function(element, className) {};
    DomAdapter.prototype.removeClass = function(element, className) {};
    DomAdapter.prototype.hasClass = function(element, className) {};
    DomAdapter.prototype.setStyle = function(element, styleName, styleValue) {};
    DomAdapter.prototype.removeStyle = function(element, styleName) {};
    DomAdapter.prototype.getStyle = function(element, styleName) {};
    DomAdapter.prototype.hasStyle = function(element, styleName, styleValue) {};
    DomAdapter.prototype.tagName = function(element) {};
    DomAdapter.prototype.attributeMap = function(element) {};
    DomAdapter.prototype.hasAttribute = function(element, attribute) {};
    DomAdapter.prototype.hasAttributeNS = function(element, ns, attribute) {};
    DomAdapter.prototype.getAttribute = function(element, attribute) {};
    DomAdapter.prototype.getAttributeNS = function(element, ns, attribute) {};
    DomAdapter.prototype.setAttribute = function(element, name, value) {};
    DomAdapter.prototype.setAttributeNS = function(element, ns, name, value) {};
    DomAdapter.prototype.removeAttribute = function(element, attribute) {};
    DomAdapter.prototype.removeAttributeNS = function(element, ns, attribute) {};
    DomAdapter.prototype.templateAwareRoot = function(el) {};
    DomAdapter.prototype.createHtmlDocument = function() {};
    DomAdapter.prototype.defaultDoc = function() {};
    DomAdapter.prototype.getBoundingClientRect = function(el) {};
    DomAdapter.prototype.getTitle = function() {};
    DomAdapter.prototype.setTitle = function(newTitle) {};
    DomAdapter.prototype.elementMatches = function(n, selector) {};
    DomAdapter.prototype.isTemplateElement = function(el) {};
    DomAdapter.prototype.isTextNode = function(node) {};
    DomAdapter.prototype.isCommentNode = function(node) {};
    DomAdapter.prototype.isElementNode = function(node) {};
    DomAdapter.prototype.hasShadowRoot = function(node) {};
    DomAdapter.prototype.isShadowRoot = function(node) {};
    DomAdapter.prototype.importIntoDoc = function(node) {};
    DomAdapter.prototype.adoptNode = function(node) {};
    DomAdapter.prototype.getHref = function(element) {};
    DomAdapter.prototype.getEventKey = function(event) {};
    DomAdapter.prototype.resolveAndSetHref = function(element, baseUrl, href) {};
    DomAdapter.prototype.supportsDOMEvents = function() {};
    DomAdapter.prototype.supportsNativeShadowDOM = function() {};
    DomAdapter.prototype.getGlobalEventTarget = function(target) {};
    DomAdapter.prototype.getHistory = function() {};
    DomAdapter.prototype.getLocation = function() {};
    DomAdapter.prototype.getBaseHref = function() {};
    DomAdapter.prototype.resetBaseElement = function() {};
    DomAdapter.prototype.getUserAgent = function() {};
    DomAdapter.prototype.setData = function(element, name, value) {};
    DomAdapter.prototype.getComputedStyle = function(element) {};
    DomAdapter.prototype.getData = function(element, name) {};
    DomAdapter.prototype.setGlobalVar = function(name, value) {};
    DomAdapter.prototype.supportsWebAnimation = function() {};
    DomAdapter.prototype.performanceNow = function() {};
    DomAdapter.prototype.getAnimationPrefix = function() {};
    DomAdapter.prototype.getTransitionEnd = function() {};
    DomAdapter.prototype.supportsAnimation = function() {};
    DomAdapter.prototype.supportsCookies = function() {};
    DomAdapter.prototype.getCookie = function(name) {};
    DomAdapter.prototype.setCookie = function(name, value) {};
    return DomAdapter;
  }());
  var WebAnimationsPlayer = (function() {
    function WebAnimationsPlayer(element, keyframes, options, previousPlayers) {
      var _this = this;
      if (previousPlayers === void 0) {
        previousPlayers = [];
      }
      this.element = element;
      this.keyframes = keyframes;
      this.options = options;
      this._onDoneFns = [];
      this._onStartFns = [];
      this._initialized = false;
      this._finished = false;
      this._started = false;
      this._destroyed = false;
      this.parentPlayer = null;
      this._duration = options['duration'];
      this.previousStyles = {};
      previousPlayers.forEach(function(player) {
        var styles = player._captureStyles();
        Object.keys(styles).forEach(function(prop) {
          return _this.previousStyles[prop] = styles[prop];
        });
      });
    }
    WebAnimationsPlayer.prototype._onFinish = function() {
      if (!this._finished) {
        this._finished = true;
        this._onDoneFns.forEach(function(fn) {
          return fn();
        });
        this._onDoneFns = [];
      }
    };
    WebAnimationsPlayer.prototype.init = function() {
      var _this = this;
      if (this._initialized)
        return;
      this._initialized = true;
      var keyframes = this.keyframes.map(function(styles) {
        var formattedKeyframe = {};
        Object.keys(styles).forEach(function(prop, index) {
          var value = styles[prop];
          if (value == core.AUTO_STYLE) {
            value = _computeStyle(_this.element, prop);
          }
          if (value != undefined) {
            formattedKeyframe[prop] = value;
          }
        });
        return formattedKeyframe;
      });
      var previousStyleProps = Object.keys(this.previousStyles);
      if (previousStyleProps.length) {
        var startingKeyframe_1 = keyframes[0];
        var missingStyleProps_1 = [];
        previousStyleProps.forEach(function(prop) {
          if (!isPresent(startingKeyframe_1[prop])) {
            missingStyleProps_1.push(prop);
          }
          startingKeyframe_1[prop] = _this.previousStyles[prop];
        });
        if (missingStyleProps_1.length) {
          var _loop_1 = function(i) {
            var kf = keyframes[i];
            missingStyleProps_1.forEach(function(prop) {
              kf[prop] = _computeStyle(_this.element, prop);
            });
          };
          for (var i = 1; i < keyframes.length; i++) {
            _loop_1(i);
          }
        }
      }
      this._player = this._triggerWebAnimation(this.element, keyframes, this.options);
      this._finalKeyframe = _copyKeyframeStyles(keyframes[keyframes.length - 1]);
      this._resetDomPlayerState();
      this._player.addEventListener('finish', function() {
        return _this._onFinish();
      });
    };
    WebAnimationsPlayer.prototype._triggerWebAnimation = function(element, keyframes, options) {
      return (element.animate(keyframes, options));
    };
    Object.defineProperty(WebAnimationsPlayer.prototype, "domPlayer", {
      get: function() {
        return this._player;
      },
      enumerable: true,
      configurable: true
    });
    WebAnimationsPlayer.prototype.onStart = function(fn) {
      this._onStartFns.push(fn);
    };
    WebAnimationsPlayer.prototype.onDone = function(fn) {
      this._onDoneFns.push(fn);
    };
    WebAnimationsPlayer.prototype.play = function() {
      this.init();
      if (!this.hasStarted()) {
        this._onStartFns.forEach(function(fn) {
          return fn();
        });
        this._onStartFns = [];
        this._started = true;
      }
      this._player.play();
    };
    WebAnimationsPlayer.prototype.pause = function() {
      this.init();
      this._player.pause();
    };
    WebAnimationsPlayer.prototype.finish = function() {
      this.init();
      this._onFinish();
      this._player.finish();
    };
    WebAnimationsPlayer.prototype.reset = function() {
      this._resetDomPlayerState();
      this._destroyed = false;
      this._finished = false;
      this._started = false;
    };
    WebAnimationsPlayer.prototype._resetDomPlayerState = function() {
      if (this._player) {
        this._player.cancel();
      }
    };
    WebAnimationsPlayer.prototype.restart = function() {
      this.reset();
      this.play();
    };
    WebAnimationsPlayer.prototype.hasStarted = function() {
      return this._started;
    };
    WebAnimationsPlayer.prototype.destroy = function() {
      if (!this._destroyed) {
        this._resetDomPlayerState();
        this._onFinish();
        this._destroyed = true;
      }
    };
    Object.defineProperty(WebAnimationsPlayer.prototype, "totalTime", {
      get: function() {
        return this._duration;
      },
      enumerable: true,
      configurable: true
    });
    WebAnimationsPlayer.prototype.setPosition = function(p) {
      this._player.currentTime = p * this.totalTime;
    };
    WebAnimationsPlayer.prototype.getPosition = function() {
      return this._player.currentTime / this.totalTime;
    };
    WebAnimationsPlayer.prototype._captureStyles = function() {
      var _this = this;
      var styles = {};
      if (this.hasStarted()) {
        Object.keys(this._finalKeyframe).forEach(function(prop) {
          if (prop != 'offset') {
            styles[prop] = _this._finished ? _this._finalKeyframe[prop] : _computeStyle(_this.element, prop);
          }
        });
      }
      return styles;
    };
    return WebAnimationsPlayer;
  }());
  function _computeStyle(element, prop) {
    return getDOM().getComputedStyle(element)[prop];
  }
  function _copyKeyframeStyles(styles) {
    var newStyles = {};
    Object.keys(styles).forEach(function(prop) {
      if (prop != 'offset') {
        newStyles[prop] = styles[prop];
      }
    });
    return newStyles;
  }
  var WebAnimationsDriver = (function() {
    function WebAnimationsDriver() {}
    WebAnimationsDriver.prototype.animate = function(element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {
      if (previousPlayers === void 0) {
        previousPlayers = [];
      }
      var formattedSteps = [];
      var startingStyleLookup = {};
      if (isPresent(startingStyles)) {
        startingStyleLookup = _populateStyles(startingStyles, {});
      }
      keyframes.forEach(function(keyframe) {
        var data = _populateStyles(keyframe.styles, startingStyleLookup);
        data['offset'] = Math.max(0, Math.min(1, keyframe.offset));
        formattedSteps.push(data);
      });
      if (formattedSteps.length == 0) {
        formattedSteps = [startingStyleLookup, startingStyleLookup];
      } else if (formattedSteps.length == 1) {
        var start = startingStyleLookup;
        var end = formattedSteps[0];
        end['offset'] = null;
        formattedSteps = [start, end];
      }
      var playerOptions = {
        'duration': duration,
        'delay': delay,
        'fill': 'both'
      };
      if (easing) {
        playerOptions['easing'] = easing;
      }
      previousPlayers = previousPlayers.filter(filterWebAnimationPlayerFn);
      return new WebAnimationsPlayer(element, formattedSteps, playerOptions, (previousPlayers));
    };
    return WebAnimationsDriver;
  }());
  function _populateStyles(styles, defaultStyles) {
    var data = {};
    styles.styles.forEach(function(entry) {
      Object.keys(entry).forEach(function(prop) {
        data[prop] = entry[prop];
      });
    });
    Object.keys(defaultStyles).forEach(function(prop) {
      if (!isPresent(data[prop])) {
        data[prop] = defaultStyles[prop];
      }
    });
    return data;
  }
  function filterWebAnimationPlayerFn(player) {
    return player instanceof WebAnimationsPlayer;
  }
  var __extends$1 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var GenericBrowserDomAdapter = (function(_super) {
    __extends$1(GenericBrowserDomAdapter, _super);
    function GenericBrowserDomAdapter() {
      var _this = this;
      _super.call(this);
      this._animationPrefix = null;
      this._transitionEnd = null;
      try {
        var element_1 = this.createElement('div', this.defaultDoc());
        if (isPresent(this.getStyle(element_1, 'animationName'))) {
          this._animationPrefix = '';
        } else {
          var domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];
          for (var i = 0; i < domPrefixes.length; i++) {
            if (isPresent(this.getStyle(element_1, domPrefixes[i] + 'AnimationName'))) {
              this._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';
              break;
            }
          }
        }
        var transEndEventNames_1 = {
          WebkitTransition: 'webkitTransitionEnd',
          MozTransition: 'transitionend',
          OTransition: 'oTransitionEnd otransitionend',
          transition: 'transitionend'
        };
        Object.keys(transEndEventNames_1).forEach(function(key) {
          if (isPresent(_this.getStyle(element_1, key))) {
            _this._transitionEnd = transEndEventNames_1[key];
          }
        });
      } catch (e) {
        this._animationPrefix = null;
        this._transitionEnd = null;
      }
    }
    GenericBrowserDomAdapter.prototype.getDistributedNodes = function(el) {
      return ((el)).getDistributedNodes();
    };
    GenericBrowserDomAdapter.prototype.resolveAndSetHref = function(el, baseUrl, href) {
      el.href = href == null ? baseUrl : baseUrl + '/../' + href;
    };
    GenericBrowserDomAdapter.prototype.supportsDOMEvents = function() {
      return true;
    };
    GenericBrowserDomAdapter.prototype.supportsNativeShadowDOM = function() {
      return typeof((this.defaultDoc().body)).createShadowRoot === 'function';
    };
    GenericBrowserDomAdapter.prototype.getAnimationPrefix = function() {
      return this._animationPrefix ? this._animationPrefix : '';
    };
    GenericBrowserDomAdapter.prototype.getTransitionEnd = function() {
      return this._transitionEnd ? this._transitionEnd : '';
    };
    GenericBrowserDomAdapter.prototype.supportsAnimation = function() {
      return isPresent(this._animationPrefix) && isPresent(this._transitionEnd);
    };
    return GenericBrowserDomAdapter;
  }(DomAdapter));
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var _attrToPropMap = {
    'class': 'className',
    'innerHtml': 'innerHTML',
    'readonly': 'readOnly',
    'tabindex': 'tabIndex'
  };
  var DOM_KEY_LOCATION_NUMPAD = 3;
  var _keyMap = {
    '\b': 'Backspace',
    '\t': 'Tab',
    '\x7F': 'Delete',
    '\x1B': 'Escape',
    'Del': 'Delete',
    'Esc': 'Escape',
    'Left': 'ArrowLeft',
    'Right': 'ArrowRight',
    'Up': 'ArrowUp',
    'Down': 'ArrowDown',
    'Menu': 'ContextMenu',
    'Scroll': 'ScrollLock',
    'Win': 'OS'
  };
  var _chromeNumKeyPadMap = {
    'A': '1',
    'B': '2',
    'C': '3',
    'D': '4',
    'E': '5',
    'F': '6',
    'G': '7',
    'H': '8',
    'I': '9',
    'J': '*',
    'K': '+',
    'M': '-',
    'N': '.',
    'O': '/',
    '\x60': '0',
    '\x90': 'NumLock'
  };
  var BrowserDomAdapter = (function(_super) {
    __extends(BrowserDomAdapter, _super);
    function BrowserDomAdapter() {
      _super.apply(this, arguments);
    }
    BrowserDomAdapter.prototype.parse = function(templateHtml) {
      throw new Error('parse not implemented');
    };
    BrowserDomAdapter.makeCurrent = function() {
      setRootDomAdapter(new BrowserDomAdapter());
    };
    BrowserDomAdapter.prototype.hasProperty = function(element, name) {
      return name in element;
    };
    BrowserDomAdapter.prototype.setProperty = function(el, name, value) {
      ((el))[name] = value;
    };
    BrowserDomAdapter.prototype.getProperty = function(el, name) {
      return ((el))[name];
    };
    BrowserDomAdapter.prototype.invoke = function(el, methodName, args) {
      (_a = ((el)))[methodName].apply(_a, args);
      var _a;
    };
    BrowserDomAdapter.prototype.logError = function(error) {
      if (window.console) {
        if (console.error) {
          console.error(error);
        } else {
          console.log(error);
        }
      }
    };
    BrowserDomAdapter.prototype.log = function(error) {
      if (window.console) {
        window.console.log && window.console.log(error);
      }
    };
    BrowserDomAdapter.prototype.logGroup = function(error) {
      if (window.console) {
        window.console.group && window.console.group(error);
      }
    };
    BrowserDomAdapter.prototype.logGroupEnd = function() {
      if (window.console) {
        window.console.groupEnd && window.console.groupEnd();
      }
    };
    Object.defineProperty(BrowserDomAdapter.prototype, "attrToPropMap", {
      get: function() {
        return _attrToPropMap;
      },
      enumerable: true,
      configurable: true
    });
    BrowserDomAdapter.prototype.query = function(selector) {
      return document.querySelector(selector);
    };
    BrowserDomAdapter.prototype.querySelector = function(el, selector) {
      return (el.querySelector(selector));
    };
    BrowserDomAdapter.prototype.querySelectorAll = function(el, selector) {
      return el.querySelectorAll(selector);
    };
    BrowserDomAdapter.prototype.on = function(el, evt, listener) {
      el.addEventListener(evt, listener, false);
    };
    BrowserDomAdapter.prototype.onAndCancel = function(el, evt, listener) {
      el.addEventListener(evt, listener, false);
      return function() {
        el.removeEventListener(evt, listener, false);
      };
    };
    BrowserDomAdapter.prototype.dispatchEvent = function(el, evt) {
      el.dispatchEvent(evt);
    };
    BrowserDomAdapter.prototype.createMouseEvent = function(eventType) {
      var evt = document.createEvent('MouseEvent');
      evt.initEvent(eventType, true, true);
      return evt;
    };
    BrowserDomAdapter.prototype.createEvent = function(eventType) {
      var evt = document.createEvent('Event');
      evt.initEvent(eventType, true, true);
      return evt;
    };
    BrowserDomAdapter.prototype.preventDefault = function(evt) {
      evt.preventDefault();
      evt.returnValue = false;
    };
    BrowserDomAdapter.prototype.isPrevented = function(evt) {
      return evt.defaultPrevented || isPresent(evt.returnValue) && !evt.returnValue;
    };
    BrowserDomAdapter.prototype.getInnerHTML = function(el) {
      return el.innerHTML;
    };
    BrowserDomAdapter.prototype.getTemplateContent = function(el) {
      return 'content' in el && el instanceof HTMLTemplateElement ? el.content : null;
    };
    BrowserDomAdapter.prototype.getOuterHTML = function(el) {
      return el.outerHTML;
    };
    BrowserDomAdapter.prototype.nodeName = function(node) {
      return node.nodeName;
    };
    BrowserDomAdapter.prototype.nodeValue = function(node) {
      return node.nodeValue;
    };
    BrowserDomAdapter.prototype.type = function(node) {
      return node.type;
    };
    BrowserDomAdapter.prototype.content = function(node) {
      if (this.hasProperty(node, 'content')) {
        return ((node)).content;
      } else {
        return node;
      }
    };
    BrowserDomAdapter.prototype.firstChild = function(el) {
      return el.firstChild;
    };
    BrowserDomAdapter.prototype.nextSibling = function(el) {
      return el.nextSibling;
    };
    BrowserDomAdapter.prototype.parentElement = function(el) {
      return el.parentNode;
    };
    BrowserDomAdapter.prototype.childNodes = function(el) {
      return el.childNodes;
    };
    BrowserDomAdapter.prototype.childNodesAsList = function(el) {
      var childNodes = el.childNodes;
      var res = new Array(childNodes.length);
      for (var i = 0; i < childNodes.length; i++) {
        res[i] = childNodes[i];
      }
      return res;
    };
    BrowserDomAdapter.prototype.clearNodes = function(el) {
      while (el.firstChild) {
        el.removeChild(el.firstChild);
      }
    };
    BrowserDomAdapter.prototype.appendChild = function(el, node) {
      el.appendChild(node);
    };
    BrowserDomAdapter.prototype.removeChild = function(el, node) {
      el.removeChild(node);
    };
    BrowserDomAdapter.prototype.replaceChild = function(el, newChild, oldChild) {
      el.replaceChild(newChild, oldChild);
    };
    BrowserDomAdapter.prototype.remove = function(node) {
      if (node.parentNode) {
        node.parentNode.removeChild(node);
      }
      return node;
    };
    BrowserDomAdapter.prototype.insertBefore = function(el, node) {
      el.parentNode.insertBefore(node, el);
    };
    BrowserDomAdapter.prototype.insertAllBefore = function(el, nodes) {
      nodes.forEach(function(n) {
        return el.parentNode.insertBefore(n, el);
      });
    };
    BrowserDomAdapter.prototype.insertAfter = function(el, node) {
      el.parentNode.insertBefore(node, el.nextSibling);
    };
    BrowserDomAdapter.prototype.setInnerHTML = function(el, value) {
      el.innerHTML = value;
    };
    BrowserDomAdapter.prototype.getText = function(el) {
      return el.textContent;
    };
    BrowserDomAdapter.prototype.setText = function(el, value) {
      el.textContent = value;
    };
    BrowserDomAdapter.prototype.getValue = function(el) {
      return el.value;
    };
    BrowserDomAdapter.prototype.setValue = function(el, value) {
      el.value = value;
    };
    BrowserDomAdapter.prototype.getChecked = function(el) {
      return el.checked;
    };
    BrowserDomAdapter.prototype.setChecked = function(el, value) {
      el.checked = value;
    };
    BrowserDomAdapter.prototype.createComment = function(text) {
      return document.createComment(text);
    };
    BrowserDomAdapter.prototype.createTemplate = function(html) {
      var t = document.createElement('template');
      t.innerHTML = html;
      return t;
    };
    BrowserDomAdapter.prototype.createElement = function(tagName, doc) {
      if (doc === void 0) {
        doc = document;
      }
      return doc.createElement(tagName);
    };
    BrowserDomAdapter.prototype.createElementNS = function(ns, tagName, doc) {
      if (doc === void 0) {
        doc = document;
      }
      return doc.createElementNS(ns, tagName);
    };
    BrowserDomAdapter.prototype.createTextNode = function(text, doc) {
      if (doc === void 0) {
        doc = document;
      }
      return doc.createTextNode(text);
    };
    BrowserDomAdapter.prototype.createScriptTag = function(attrName, attrValue, doc) {
      if (doc === void 0) {
        doc = document;
      }
      var el = (doc.createElement('SCRIPT'));
      el.setAttribute(attrName, attrValue);
      return el;
    };
    BrowserDomAdapter.prototype.createStyleElement = function(css, doc) {
      if (doc === void 0) {
        doc = document;
      }
      var style = (doc.createElement('style'));
      this.appendChild(style, this.createTextNode(css));
      return style;
    };
    BrowserDomAdapter.prototype.createShadowRoot = function(el) {
      return ((el)).createShadowRoot();
    };
    BrowserDomAdapter.prototype.getShadowRoot = function(el) {
      return ((el)).shadowRoot;
    };
    BrowserDomAdapter.prototype.getHost = function(el) {
      return ((el)).host;
    };
    BrowserDomAdapter.prototype.clone = function(node) {
      return node.cloneNode(true);
    };
    BrowserDomAdapter.prototype.getElementsByClassName = function(element, name) {
      return element.getElementsByClassName(name);
    };
    BrowserDomAdapter.prototype.getElementsByTagName = function(element, name) {
      return element.getElementsByTagName(name);
    };
    BrowserDomAdapter.prototype.classList = function(element) {
      return Array.prototype.slice.call(element.classList, 0);
    };
    BrowserDomAdapter.prototype.addClass = function(element, className) {
      element.classList.add(className);
    };
    BrowserDomAdapter.prototype.removeClass = function(element, className) {
      element.classList.remove(className);
    };
    BrowserDomAdapter.prototype.hasClass = function(element, className) {
      return element.classList.contains(className);
    };
    BrowserDomAdapter.prototype.setStyle = function(element, styleName, styleValue) {
      element.style[styleName] = styleValue;
    };
    BrowserDomAdapter.prototype.removeStyle = function(element, stylename) {
      element.style[stylename] = '';
    };
    BrowserDomAdapter.prototype.getStyle = function(element, stylename) {
      return element.style[stylename];
    };
    BrowserDomAdapter.prototype.hasStyle = function(element, styleName, styleValue) {
      if (styleValue === void 0) {
        styleValue = null;
      }
      var value = this.getStyle(element, styleName) || '';
      return styleValue ? value == styleValue : value.length > 0;
    };
    BrowserDomAdapter.prototype.tagName = function(element) {
      return element.tagName;
    };
    BrowserDomAdapter.prototype.attributeMap = function(element) {
      var res = new Map();
      var elAttrs = element.attributes;
      for (var i = 0; i < elAttrs.length; i++) {
        var attrib = elAttrs[i];
        res.set(attrib.name, attrib.value);
      }
      return res;
    };
    BrowserDomAdapter.prototype.hasAttribute = function(element, attribute) {
      return element.hasAttribute(attribute);
    };
    BrowserDomAdapter.prototype.hasAttributeNS = function(element, ns, attribute) {
      return element.hasAttributeNS(ns, attribute);
    };
    BrowserDomAdapter.prototype.getAttribute = function(element, attribute) {
      return element.getAttribute(attribute);
    };
    BrowserDomAdapter.prototype.getAttributeNS = function(element, ns, name) {
      return element.getAttributeNS(ns, name);
    };
    BrowserDomAdapter.prototype.setAttribute = function(element, name, value) {
      element.setAttribute(name, value);
    };
    BrowserDomAdapter.prototype.setAttributeNS = function(element, ns, name, value) {
      element.setAttributeNS(ns, name, value);
    };
    BrowserDomAdapter.prototype.removeAttribute = function(element, attribute) {
      element.removeAttribute(attribute);
    };
    BrowserDomAdapter.prototype.removeAttributeNS = function(element, ns, name) {
      element.removeAttributeNS(ns, name);
    };
    BrowserDomAdapter.prototype.templateAwareRoot = function(el) {
      return this.isTemplateElement(el) ? this.content(el) : el;
    };
    BrowserDomAdapter.prototype.createHtmlDocument = function() {
      return document.implementation.createHTMLDocument('fakeTitle');
    };
    BrowserDomAdapter.prototype.defaultDoc = function() {
      return document;
    };
    BrowserDomAdapter.prototype.getBoundingClientRect = function(el) {
      try {
        return el.getBoundingClientRect();
      } catch (e) {
        return {
          top: 0,
          bottom: 0,
          left: 0,
          right: 0,
          width: 0,
          height: 0
        };
      }
    };
    BrowserDomAdapter.prototype.getTitle = function() {
      return document.title;
    };
    BrowserDomAdapter.prototype.setTitle = function(newTitle) {
      document.title = newTitle || '';
    };
    BrowserDomAdapter.prototype.elementMatches = function(n, selector) {
      if (n instanceof HTMLElement) {
        return n.matches && n.matches(selector) || n.msMatchesSelector && n.msMatchesSelector(selector) || n.webkitMatchesSelector && n.webkitMatchesSelector(selector);
      }
      return false;
    };
    BrowserDomAdapter.prototype.isTemplateElement = function(el) {
      return el instanceof HTMLElement && el.nodeName == 'TEMPLATE';
    };
    BrowserDomAdapter.prototype.isTextNode = function(node) {
      return node.nodeType === Node.TEXT_NODE;
    };
    BrowserDomAdapter.prototype.isCommentNode = function(node) {
      return node.nodeType === Node.COMMENT_NODE;
    };
    BrowserDomAdapter.prototype.isElementNode = function(node) {
      return node.nodeType === Node.ELEMENT_NODE;
    };
    BrowserDomAdapter.prototype.hasShadowRoot = function(node) {
      return isPresent(node.shadowRoot) && node instanceof HTMLElement;
    };
    BrowserDomAdapter.prototype.isShadowRoot = function(node) {
      return node instanceof DocumentFragment;
    };
    BrowserDomAdapter.prototype.importIntoDoc = function(node) {
      return document.importNode(this.templateAwareRoot(node), true);
    };
    BrowserDomAdapter.prototype.adoptNode = function(node) {
      return document.adoptNode(node);
    };
    BrowserDomAdapter.prototype.getHref = function(el) {
      return ((el)).href;
    };
    BrowserDomAdapter.prototype.getEventKey = function(event) {
      var key = event.key;
      if (isBlank(key)) {
        key = event.keyIdentifier;
        if (isBlank(key)) {
          return 'Unidentified';
        }
        if (key.startsWith('U+')) {
          key = String.fromCharCode(parseInt(key.substring(2), 16));
          if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {
            key = ((_chromeNumKeyPadMap))[key];
          }
        }
      }
      return _keyMap[key] || key;
    };
    BrowserDomAdapter.prototype.getGlobalEventTarget = function(target) {
      if (target === 'window') {
        return window;
      }
      if (target === 'document') {
        return document;
      }
      if (target === 'body') {
        return document.body;
      }
    };
    BrowserDomAdapter.prototype.getHistory = function() {
      return window.history;
    };
    BrowserDomAdapter.prototype.getLocation = function() {
      return window.location;
    };
    BrowserDomAdapter.prototype.getBaseHref = function() {
      var href = getBaseElementHref();
      return isBlank(href) ? null : relativePath(href);
    };
    BrowserDomAdapter.prototype.resetBaseElement = function() {
      baseElement = null;
    };
    BrowserDomAdapter.prototype.getUserAgent = function() {
      return window.navigator.userAgent;
    };
    BrowserDomAdapter.prototype.setData = function(element, name, value) {
      this.setAttribute(element, 'data-' + name, value);
    };
    BrowserDomAdapter.prototype.getData = function(element, name) {
      return this.getAttribute(element, 'data-' + name);
    };
    BrowserDomAdapter.prototype.getComputedStyle = function(element) {
      return getComputedStyle(element);
    };
    BrowserDomAdapter.prototype.setGlobalVar = function(path, value) {
      setValueOnPath(global$1, path, value);
    };
    BrowserDomAdapter.prototype.supportsWebAnimation = function() {
      return typeof((Element)).prototype['animate'] === 'function';
    };
    BrowserDomAdapter.prototype.performanceNow = function() {
      return window.performance && window.performance.now ? window.performance.now() : new Date().getTime();
    };
    BrowserDomAdapter.prototype.supportsCookies = function() {
      return true;
    };
    BrowserDomAdapter.prototype.getCookie = function(name) {
      return parseCookieValue(document.cookie, name);
    };
    BrowserDomAdapter.prototype.setCookie = function(name, value) {
      document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);
    };
    return BrowserDomAdapter;
  }(GenericBrowserDomAdapter));
  var baseElement = null;
  function getBaseElementHref() {
    if (!baseElement) {
      baseElement = document.querySelector('base');
      if (!baseElement) {
        return null;
      }
    }
    return baseElement.getAttribute('href');
  }
  var urlParsingNode;
  function relativePath(url) {
    if (!urlParsingNode) {
      urlParsingNode = document.createElement('a');
    }
    urlParsingNode.setAttribute('href', url);
    return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname : '/' + urlParsingNode.pathname;
  }
  function parseCookieValue(cookieStr, name) {
    name = encodeURIComponent(name);
    for (var _i = 0,
        _a = cookieStr.split(';'); _i < _a.length; _i++) {
      var cookie = _a[_i];
      var eqIndex = cookie.indexOf('=');
      var _b = eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)],
          cookieName = _b[0],
          cookieValue = _b[1];
      if (cookieName.trim() === name) {
        return decodeURIComponent(cookieValue);
      }
    }
    return null;
  }
  function supportsState() {
    return !!window.history.pushState;
  }
  var __extends$2 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var BrowserPlatformLocation = (function(_super) {
    __extends$2(BrowserPlatformLocation, _super);
    function BrowserPlatformLocation() {
      _super.call(this);
      this._init();
    }
    BrowserPlatformLocation.prototype._init = function() {
      this._location = getDOM().getLocation();
      this._history = getDOM().getHistory();
    };
    Object.defineProperty(BrowserPlatformLocation.prototype, "location", {
      get: function() {
        return this._location;
      },
      enumerable: true,
      configurable: true
    });
    BrowserPlatformLocation.prototype.getBaseHrefFromDOM = function() {
      return getDOM().getBaseHref();
    };
    BrowserPlatformLocation.prototype.onPopState = function(fn) {
      getDOM().getGlobalEventTarget('window').addEventListener('popstate', fn, false);
    };
    BrowserPlatformLocation.prototype.onHashChange = function(fn) {
      getDOM().getGlobalEventTarget('window').addEventListener('hashchange', fn, false);
    };
    Object.defineProperty(BrowserPlatformLocation.prototype, "pathname", {
      get: function() {
        return this._location.pathname;
      },
      set: function(newPath) {
        this._location.pathname = newPath;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(BrowserPlatformLocation.prototype, "search", {
      get: function() {
        return this._location.search;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(BrowserPlatformLocation.prototype, "hash", {
      get: function() {
        return this._location.hash;
      },
      enumerable: true,
      configurable: true
    });
    BrowserPlatformLocation.prototype.pushState = function(state, title, url) {
      if (supportsState()) {
        this._history.pushState(state, title, url);
      } else {
        this._location.hash = url;
      }
    };
    BrowserPlatformLocation.prototype.replaceState = function(state, title, url) {
      if (supportsState()) {
        this._history.replaceState(state, title, url);
      } else {
        this._location.hash = url;
      }
    };
    BrowserPlatformLocation.prototype.forward = function() {
      this._history.forward();
    };
    BrowserPlatformLocation.prototype.back = function() {
      this._history.back();
    };
    BrowserPlatformLocation.decorators = [{type: core.Injectable}];
    BrowserPlatformLocation.ctorParameters = function() {
      return [];
    };
    return BrowserPlatformLocation;
  }(_angular_common.PlatformLocation));
  var BrowserGetTestability = (function() {
    function BrowserGetTestability() {}
    BrowserGetTestability.init = function() {
      core.setTestabilityGetter(new BrowserGetTestability());
    };
    BrowserGetTestability.prototype.addToWindow = function(registry) {
      global$1.getAngularTestability = function(elem, findInAncestors) {
        if (findInAncestors === void 0) {
          findInAncestors = true;
        }
        var testability = registry.findTestabilityInTree(elem, findInAncestors);
        if (testability == null) {
          throw new Error('Could not find testability for element.');
        }
        return testability;
      };
      global$1.getAllAngularTestabilities = function() {
        return registry.getAllTestabilities();
      };
      global$1.getAllAngularRootElements = function() {
        return registry.getAllRootElements();
      };
      var whenAllStable = function(callback) {
        var testabilities = global$1.getAllAngularTestabilities();
        var count = testabilities.length;
        var didWork = false;
        var decrement = function(didWork_) {
          didWork = didWork || didWork_;
          count--;
          if (count == 0) {
            callback(didWork);
          }
        };
        testabilities.forEach(function(testability) {
          testability.whenStable(decrement);
        });
      };
      if (!global$1['frameworkStabilizers']) {
        global$1['frameworkStabilizers'] = [];
      }
      global$1['frameworkStabilizers'].push(whenAllStable);
    };
    BrowserGetTestability.prototype.findTestabilityInTree = function(registry, elem, findInAncestors) {
      if (elem == null) {
        return null;
      }
      var t = registry.getTestability(elem);
      if (isPresent(t)) {
        return t;
      } else if (!findInAncestors) {
        return null;
      }
      if (getDOM().isShadowRoot(elem)) {
        return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);
      }
      return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);
    };
    return BrowserGetTestability;
  }());
  var Title = (function() {
    function Title() {}
    Title.prototype.getTitle = function() {
      return getDOM().getTitle();
    };
    Title.prototype.setTitle = function(newTitle) {
      getDOM().setTitle(newTitle);
    };
    return Title;
  }());
  var StringMapWrapper = (function() {
    function StringMapWrapper() {}
    StringMapWrapper.merge = function(m1, m2) {
      var m = {};
      for (var _i = 0,
          _a = Object.keys(m1); _i < _a.length; _i++) {
        var k = _a[_i];
        m[k] = m1[k];
      }
      for (var _b = 0,
          _c = Object.keys(m2); _b < _c.length; _b++) {
        var k = _c[_b];
        m[k] = m2[k];
      }
      return m;
    };
    StringMapWrapper.equals = function(m1, m2) {
      var k1 = Object.keys(m1);
      var k2 = Object.keys(m2);
      if (k1.length != k2.length) {
        return false;
      }
      for (var i = 0; i < k1.length; i++) {
        var key = k1[i];
        if (m1[key] !== m2[key]) {
          return false;
        }
      }
      return true;
    };
    return StringMapWrapper;
  }());
  var DOCUMENT = new core.OpaqueToken('DocumentToken');
  var EVENT_MANAGER_PLUGINS = new core.OpaqueToken('EventManagerPlugins');
  var EventManager = (function() {
    function EventManager(plugins, _zone) {
      var _this = this;
      this._zone = _zone;
      this._eventNameToPlugin = new Map();
      plugins.forEach(function(p) {
        return p.manager = _this;
      });
      this._plugins = plugins.slice().reverse();
    }
    EventManager.prototype.addEventListener = function(element, eventName, handler) {
      var plugin = this._findPluginFor(eventName);
      return plugin.addEventListener(element, eventName, handler);
    };
    EventManager.prototype.addGlobalEventListener = function(target, eventName, handler) {
      var plugin = this._findPluginFor(eventName);
      return plugin.addGlobalEventListener(target, eventName, handler);
    };
    EventManager.prototype.getZone = function() {
      return this._zone;
    };
    EventManager.prototype._findPluginFor = function(eventName) {
      var plugin = this._eventNameToPlugin.get(eventName);
      if (plugin) {
        return plugin;
      }
      var plugins = this._plugins;
      for (var i = 0; i < plugins.length; i++) {
        var plugin_1 = plugins[i];
        if (plugin_1.supports(eventName)) {
          this._eventNameToPlugin.set(eventName, plugin_1);
          return plugin_1;
        }
      }
      throw new Error("No event manager plugin found for event " + eventName);
    };
    EventManager.decorators = [{type: core.Injectable}];
    EventManager.ctorParameters = function() {
      return [{
        type: Array,
        decorators: [{
          type: core.Inject,
          args: [EVENT_MANAGER_PLUGINS]
        }]
      }, {type: core.NgZone}];
    };
    return EventManager;
  }());
  var EventManagerPlugin = (function() {
    function EventManagerPlugin() {}
    EventManagerPlugin.prototype.supports = function(eventName) {};
    EventManagerPlugin.prototype.addEventListener = function(element, eventName, handler) {};
    EventManagerPlugin.prototype.addGlobalEventListener = function(element, eventName, handler) {
      var target = getDOM().getGlobalEventTarget(element);
      if (!target) {
        throw new Error("Unsupported event target " + target + " for event " + eventName);
      }
      return this.addEventListener(target, eventName, handler);
    };
    ;
    return EventManagerPlugin;
  }());
  var __extends$4 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var SharedStylesHost = (function() {
    function SharedStylesHost() {
      this._styles = [];
      this._stylesSet = new Set();
    }
    SharedStylesHost.prototype.addStyles = function(styles) {
      var _this = this;
      var additions = [];
      styles.forEach(function(style) {
        if (!_this._stylesSet.has(style)) {
          _this._stylesSet.add(style);
          _this._styles.push(style);
          additions.push(style);
        }
      });
      this.onStylesAdded(additions);
    };
    SharedStylesHost.prototype.onStylesAdded = function(additions) {};
    SharedStylesHost.prototype.getAllStyles = function() {
      return this._styles;
    };
    SharedStylesHost.decorators = [{type: core.Injectable}];
    SharedStylesHost.ctorParameters = function() {
      return [];
    };
    return SharedStylesHost;
  }());
  var DomSharedStylesHost = (function(_super) {
    __extends$4(DomSharedStylesHost, _super);
    function DomSharedStylesHost(doc) {
      _super.call(this);
      this._hostNodes = new Set();
      this._hostNodes.add(doc.head);
    }
    DomSharedStylesHost.prototype._addStylesToHost = function(styles, host) {
      for (var i = 0; i < styles.length; i++) {
        var styleEl = document.createElement('style');
        styleEl.textContent = styles[i];
        host.appendChild(styleEl);
      }
    };
    DomSharedStylesHost.prototype.addHost = function(hostNode) {
      this._addStylesToHost(this._styles, hostNode);
      this._hostNodes.add(hostNode);
    };
    DomSharedStylesHost.prototype.removeHost = function(hostNode) {
      this._hostNodes.delete(hostNode);
    };
    DomSharedStylesHost.prototype.onStylesAdded = function(additions) {
      var _this = this;
      this._hostNodes.forEach(function(hostNode) {
        _this._addStylesToHost(additions, hostNode);
      });
    };
    DomSharedStylesHost.decorators = [{type: core.Injectable}];
    DomSharedStylesHost.ctorParameters = function() {
      return [{
        type: undefined,
        decorators: [{
          type: core.Inject,
          args: [DOCUMENT]
        }]
      }];
    };
    return DomSharedStylesHost;
  }(SharedStylesHost));
  var __extends$3 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var NAMESPACE_URIS = {
    'xlink': 'http://www.w3.org/1999/xlink',
    'svg': 'http://www.w3.org/2000/svg',
    'xhtml': 'http://www.w3.org/1999/xhtml'
  };
  var TEMPLATE_COMMENT_TEXT = 'template bindings={}';
  var TEMPLATE_BINDINGS_EXP = /^template bindings=(.*)$/;
  var DomRootRenderer = (function() {
    function DomRootRenderer(document, eventManager, sharedStylesHost, animationDriver, appId) {
      this.document = document;
      this.eventManager = eventManager;
      this.sharedStylesHost = sharedStylesHost;
      this.animationDriver = animationDriver;
      this.appId = appId;
      this.registeredComponents = new Map();
    }
    DomRootRenderer.prototype.renderComponent = function(componentProto) {
      var renderer = this.registeredComponents.get(componentProto.id);
      if (!renderer) {
        renderer = new DomRenderer(this, componentProto, this.animationDriver, this.appId + "-" + componentProto.id);
        this.registeredComponents.set(componentProto.id, renderer);
      }
      return renderer;
    };
    return DomRootRenderer;
  }());
  var DomRootRenderer_ = (function(_super) {
    __extends$3(DomRootRenderer_, _super);
    function DomRootRenderer_(_document, _eventManager, sharedStylesHost, animationDriver, appId) {
      _super.call(this, _document, _eventManager, sharedStylesHost, animationDriver, appId);
    }
    DomRootRenderer_.decorators = [{type: core.Injectable}];
    DomRootRenderer_.ctorParameters = function() {
      return [{
        type: undefined,
        decorators: [{
          type: core.Inject,
          args: [DOCUMENT]
        }]
      }, {type: EventManager}, {type: DomSharedStylesHost}, {type: AnimationDriver}, {
        type: undefined,
        decorators: [{
          type: core.Inject,
          args: [core.APP_ID]
        }]
      }];
    };
    return DomRootRenderer_;
  }(DomRootRenderer));
  var DIRECT_DOM_RENDERER = {
    remove: function(node) {
      if (node.parentNode) {
        node.parentNode.removeChild(node);
      }
    },
    appendChild: function(node, parent) {
      parent.appendChild(node);
    },
    insertBefore: function(node, refNode) {
      refNode.parentNode.insertBefore(node, refNode);
    },
    nextSibling: function(node) {
      return node.nextSibling;
    },
    parentElement: function(node) {
      return (node.parentNode);
    }
  };
  var DomRenderer = (function() {
    function DomRenderer(_rootRenderer, componentProto, _animationDriver, styleShimId) {
      this._rootRenderer = _rootRenderer;
      this.componentProto = componentProto;
      this._animationDriver = _animationDriver;
      this.directRenderer = DIRECT_DOM_RENDERER;
      this._styles = flattenStyles(styleShimId, componentProto.styles, []);
      if (componentProto.encapsulation !== core.ViewEncapsulation.Native) {
        this._rootRenderer.sharedStylesHost.addStyles(this._styles);
      }
      if (this.componentProto.encapsulation === core.ViewEncapsulation.Emulated) {
        this._contentAttr = shimContentAttribute(styleShimId);
        this._hostAttr = shimHostAttribute(styleShimId);
      } else {
        this._contentAttr = null;
        this._hostAttr = null;
      }
    }
    DomRenderer.prototype.selectRootElement = function(selectorOrNode, debugInfo) {
      var el;
      if (typeof selectorOrNode === 'string') {
        el = this._rootRenderer.document.querySelector(selectorOrNode);
        if (!el) {
          throw new Error("The selector \"" + selectorOrNode + "\" did not match any elements");
        }
      } else {
        el = selectorOrNode;
      }
      while (el.firstChild) {
        el.removeChild(el.firstChild);
      }
      return el;
    };
    DomRenderer.prototype.createElement = function(parent, name, debugInfo) {
      var el;
      if (isNamespaced(name)) {
        var nsAndName = splitNamespace(name);
        el = document.createElementNS((NAMESPACE_URIS)[nsAndName[0]], nsAndName[1]);
      } else {
        el = document.createElement(name);
      }
      if (this._contentAttr) {
        el.setAttribute(this._contentAttr, '');
      }
      if (parent) {
        parent.appendChild(el);
      }
      return el;
    };
    DomRenderer.prototype.createViewRoot = function(hostElement) {
      var nodesParent;
      if (this.componentProto.encapsulation === core.ViewEncapsulation.Native) {
        nodesParent = ((hostElement)).createShadowRoot();
        this._rootRenderer.sharedStylesHost.addHost(nodesParent);
        for (var i = 0; i < this._styles.length; i++) {
          var styleEl = document.createElement('style');
          styleEl.textContent = this._styles[i];
          nodesParent.appendChild(styleEl);
        }
      } else {
        if (this._hostAttr) {
          hostElement.setAttribute(this._hostAttr, '');
        }
        nodesParent = hostElement;
      }
      return nodesParent;
    };
    DomRenderer.prototype.createTemplateAnchor = function(parentElement, debugInfo) {
      var comment = document.createComment(TEMPLATE_COMMENT_TEXT);
      if (parentElement) {
        parentElement.appendChild(comment);
      }
      return comment;
    };
    DomRenderer.prototype.createText = function(parentElement, value, debugInfo) {
      var node = document.createTextNode(value);
      if (parentElement) {
        parentElement.appendChild(node);
      }
      return node;
    };
    DomRenderer.prototype.projectNodes = function(parentElement, nodes) {
      if (!parentElement)
        return;
      appendNodes(parentElement, nodes);
    };
    DomRenderer.prototype.attachViewAfter = function(node, viewRootNodes) {
      moveNodesAfterSibling(node, viewRootNodes);
    };
    DomRenderer.prototype.detachView = function(viewRootNodes) {
      for (var i = 0; i < viewRootNodes.length; i++) {
        var node = viewRootNodes[i];
        if (node.parentNode) {
          node.parentNode.removeChild(node);
        }
      }
    };
    DomRenderer.prototype.destroyView = function(hostElement, viewAllNodes) {
      if (this.componentProto.encapsulation === core.ViewEncapsulation.Native && hostElement) {
        this._rootRenderer.sharedStylesHost.removeHost(((hostElement)).shadowRoot);
      }
    };
    DomRenderer.prototype.listen = function(renderElement, name, callback) {
      return this._rootRenderer.eventManager.addEventListener(renderElement, name, decoratePreventDefault(callback));
    };
    DomRenderer.prototype.listenGlobal = function(target, name, callback) {
      return this._rootRenderer.eventManager.addGlobalEventListener(target, name, decoratePreventDefault(callback));
    };
    DomRenderer.prototype.setElementProperty = function(renderElement, propertyName, propertyValue) {
      ((renderElement))[propertyName] = propertyValue;
    };
    DomRenderer.prototype.setElementAttribute = function(renderElement, attributeName, attributeValue) {
      var attrNs;
      var attrNameWithoutNs = attributeName;
      if (isNamespaced(attributeName)) {
        var nsAndName = splitNamespace(attributeName);
        attrNameWithoutNs = nsAndName[1];
        attributeName = nsAndName[0] + ':' + nsAndName[1];
        attrNs = NAMESPACE_URIS[nsAndName[0]];
      }
      if (isPresent(attributeValue)) {
        if (attrNs) {
          renderElement.setAttributeNS(attrNs, attributeName, attributeValue);
        } else {
          renderElement.setAttribute(attributeName, attributeValue);
        }
      } else {
        if (isPresent(attrNs)) {
          renderElement.removeAttributeNS(attrNs, attrNameWithoutNs);
        } else {
          renderElement.removeAttribute(attributeName);
        }
      }
    };
    DomRenderer.prototype.setBindingDebugInfo = function(renderElement, propertyName, propertyValue) {
      if (renderElement.nodeType === Node.COMMENT_NODE) {
        var existingBindings = renderElement.nodeValue.replace(/\n/g, '').match(TEMPLATE_BINDINGS_EXP);
        var parsedBindings = JSON.parse(existingBindings[1]);
        parsedBindings[propertyName] = propertyValue;
        renderElement.nodeValue = TEMPLATE_COMMENT_TEXT.replace('{}', JSON.stringify(parsedBindings, null, 2));
      } else {
        this.setElementAttribute(renderElement, propertyName, propertyValue);
      }
    };
    DomRenderer.prototype.setElementClass = function(renderElement, className, isAdd) {
      if (isAdd) {
        renderElement.classList.add(className);
      } else {
        renderElement.classList.remove(className);
      }
    };
    DomRenderer.prototype.setElementStyle = function(renderElement, styleName, styleValue) {
      if (isPresent(styleValue)) {
        ((renderElement.style))[styleName] = stringify(styleValue);
      } else {
        ((renderElement.style))[styleName] = '';
      }
    };
    DomRenderer.prototype.invokeElementMethod = function(renderElement, methodName, args) {
      ((renderElement))[methodName].apply(renderElement, args);
    };
    DomRenderer.prototype.setText = function(renderNode, text) {
      renderNode.nodeValue = text;
    };
    DomRenderer.prototype.animate = function(element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {
      if (previousPlayers === void 0) {
        previousPlayers = [];
      }
      if (this._rootRenderer.document.body.contains(element)) {
        return this._animationDriver.animate(element, startingStyles, keyframes, duration, delay, easing, previousPlayers);
      }
      return new NoOpAnimationPlayer();
    };
    return DomRenderer;
  }());
  function moveNodesAfterSibling(sibling, nodes) {
    var parent = sibling.parentNode;
    if (nodes.length > 0 && parent) {
      var nextSibling = sibling.nextSibling;
      if (nextSibling) {
        for (var i = 0; i < nodes.length; i++) {
          parent.insertBefore(nodes[i], nextSibling);
        }
      } else {
        for (var i = 0; i < nodes.length; i++) {
          parent.appendChild(nodes[i]);
        }
      }
    }
  }
  function appendNodes(parent, nodes) {
    for (var i = 0; i < nodes.length; i++) {
      parent.appendChild(nodes[i]);
    }
  }
  function decoratePreventDefault(eventHandler) {
    return function(event) {
      var allowDefaultBehavior = eventHandler(event);
      if (allowDefaultBehavior === false) {
        event.preventDefault();
        event.returnValue = false;
      }
    };
  }
  var COMPONENT_REGEX = /%COMP%/g;
  var COMPONENT_VARIABLE = '%COMP%';
  var HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
  var CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
  function shimContentAttribute(componentShortId) {
    return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);
  }
  function shimHostAttribute(componentShortId) {
    return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);
  }
  function flattenStyles(compId, styles, target) {
    for (var i = 0; i < styles.length; i++) {
      var style = styles[i];
      if (Array.isArray(style)) {
        flattenStyles(compId, style, target);
      } else {
        style = style.replace(COMPONENT_REGEX, compId);
        target.push(style);
      }
    }
    return target;
  }
  var NS_PREFIX_RE = /^:([^:]+):(.+)$/;
  function isNamespaced(name) {
    return name[0] === ':';
  }
  function splitNamespace(name) {
    var match = name.match(NS_PREFIX_RE);
    return [match[1], match[2]];
  }
  var CORE_TOKENS = {
    'ApplicationRef': core.ApplicationRef,
    'NgZone': core.NgZone
  };
  var INSPECT_GLOBAL_NAME = 'ng.probe';
  var CORE_TOKENS_GLOBAL_NAME = 'ng.coreTokens';
  function inspectNativeElement(element) {
    return core.getDebugNode(element);
  }
  var NgProbeToken = (function() {
    function NgProbeToken(name, token) {
      this.name = name;
      this.token = token;
    }
    return NgProbeToken;
  }());
  function _createConditionalRootRenderer(rootRenderer, extraTokens, coreTokens) {
    return core.isDevMode() ? _createRootRenderer(rootRenderer, (extraTokens || []).concat(coreTokens || [])) : rootRenderer;
  }
  function _createRootRenderer(rootRenderer, extraTokens) {
    getDOM().setGlobalVar(INSPECT_GLOBAL_NAME, inspectNativeElement);
    getDOM().setGlobalVar(CORE_TOKENS_GLOBAL_NAME, StringMapWrapper.merge(CORE_TOKENS, _ngProbeTokensToMap(extraTokens || [])));
    return new DebugDomRootRenderer(rootRenderer);
  }
  function _ngProbeTokensToMap(tokens) {
    return tokens.reduce(function(prev, t) {
      return (prev[t.name] = t.token, prev);
    }, {});
  }
  var ELEMENT_PROBE_PROVIDERS = [{
    provide: core.RootRenderer,
    useFactory: _createConditionalRootRenderer,
    deps: [DomRootRenderer, [NgProbeToken, new core.Optional()], [core.NgProbeToken, new core.Optional()]]
  }];
  var __extends$5 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var DomEventsPlugin = (function(_super) {
    __extends$5(DomEventsPlugin, _super);
    function DomEventsPlugin() {
      _super.apply(this, arguments);
    }
    DomEventsPlugin.prototype.supports = function(eventName) {
      return true;
    };
    DomEventsPlugin.prototype.addEventListener = function(element, eventName, handler) {
      element.addEventListener(eventName, (handler), false);
      return function() {
        return element.removeEventListener(eventName, (handler), false);
      };
    };
    DomEventsPlugin.decorators = [{type: core.Injectable}];
    DomEventsPlugin.ctorParameters = function() {
      return [];
    };
    return DomEventsPlugin;
  }(EventManagerPlugin));
  var __extends$6 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var EVENT_NAMES = {
    'pan': true,
    'panstart': true,
    'panmove': true,
    'panend': true,
    'pancancel': true,
    'panleft': true,
    'panright': true,
    'panup': true,
    'pandown': true,
    'pinch': true,
    'pinchstart': true,
    'pinchmove': true,
    'pinchend': true,
    'pinchcancel': true,
    'pinchin': true,
    'pinchout': true,
    'press': true,
    'pressup': true,
    'rotate': true,
    'rotatestart': true,
    'rotatemove': true,
    'rotateend': true,
    'rotatecancel': true,
    'swipe': true,
    'swipeleft': true,
    'swiperight': true,
    'swipeup': true,
    'swipedown': true,
    'tap': true
  };
  var HAMMER_GESTURE_CONFIG = new core.OpaqueToken('HammerGestureConfig');
  var HammerGestureConfig = (function() {
    function HammerGestureConfig() {
      this.events = [];
      this.overrides = {};
    }
    HammerGestureConfig.prototype.buildHammer = function(element) {
      var mc = new Hammer(element);
      mc.get('pinch').set({enable: true});
      mc.get('rotate').set({enable: true});
      for (var eventName in this.overrides) {
        mc.get(eventName).set(this.overrides[eventName]);
      }
      return mc;
    };
    HammerGestureConfig.decorators = [{type: core.Injectable}];
    HammerGestureConfig.ctorParameters = function() {
      return [];
    };
    return HammerGestureConfig;
  }());
  var HammerGesturesPlugin = (function(_super) {
    __extends$6(HammerGesturesPlugin, _super);
    function HammerGesturesPlugin(_config) {
      _super.call(this);
      this._config = _config;
    }
    HammerGesturesPlugin.prototype.supports = function(eventName) {
      if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {
        return false;
      }
      if (!((window)).Hammer) {
        throw new Error("Hammer.js is not loaded, can not bind " + eventName + " event");
      }
      return true;
    };
    HammerGesturesPlugin.prototype.addEventListener = function(element, eventName, handler) {
      var _this = this;
      var zone = this.manager.getZone();
      eventName = eventName.toLowerCase();
      return zone.runOutsideAngular(function() {
        var mc = _this._config.buildHammer(element);
        var callback = function(eventObj) {
          zone.runGuarded(function() {
            handler(eventObj);
          });
        };
        mc.on(eventName, callback);
        return function() {
          return mc.off(eventName, callback);
        };
      });
    };
    HammerGesturesPlugin.prototype.isCustomEvent = function(eventName) {
      return this._config.events.indexOf(eventName) > -1;
    };
    HammerGesturesPlugin.decorators = [{type: core.Injectable}];
    HammerGesturesPlugin.ctorParameters = function() {
      return [{
        type: HammerGestureConfig,
        decorators: [{
          type: core.Inject,
          args: [HAMMER_GESTURE_CONFIG]
        }]
      }];
    };
    return HammerGesturesPlugin;
  }(EventManagerPlugin));
  var __extends$7 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];
  var MODIFIER_KEY_GETTERS = {
    'alt': function(event) {
      return event.altKey;
    },
    'control': function(event) {
      return event.ctrlKey;
    },
    'meta': function(event) {
      return event.metaKey;
    },
    'shift': function(event) {
      return event.shiftKey;
    }
  };
  var KeyEventsPlugin = (function(_super) {
    __extends$7(KeyEventsPlugin, _super);
    function KeyEventsPlugin() {
      _super.call(this);
    }
    KeyEventsPlugin.prototype.supports = function(eventName) {
      return KeyEventsPlugin.parseEventName(eventName) != null;
    };
    KeyEventsPlugin.prototype.addEventListener = function(element, eventName, handler) {
      var parsedEvent = KeyEventsPlugin.parseEventName(eventName);
      var outsideHandler = KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());
      return this.manager.getZone().runOutsideAngular(function() {
        return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);
      });
    };
    KeyEventsPlugin.parseEventName = function(eventName) {
      var parts = eventName.toLowerCase().split('.');
      var domEventName = parts.shift();
      if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {
        return null;
      }
      var key = KeyEventsPlugin._normalizeKey(parts.pop());
      var fullKey = '';
      MODIFIER_KEYS.forEach(function(modifierName) {
        var index = parts.indexOf(modifierName);
        if (index > -1) {
          parts.splice(index, 1);
          fullKey += modifierName + '.';
        }
      });
      fullKey += key;
      if (parts.length != 0 || key.length === 0) {
        return null;
      }
      var result = {};
      result['domEventName'] = domEventName;
      result['fullKey'] = fullKey;
      return result;
    };
    KeyEventsPlugin.getEventFullKey = function(event) {
      var fullKey = '';
      var key = getDOM().getEventKey(event);
      key = key.toLowerCase();
      if (key === ' ') {
        key = 'space';
      } else if (key === '.') {
        key = 'dot';
      }
      MODIFIER_KEYS.forEach(function(modifierName) {
        if (modifierName != key) {
          var modifierGetter = MODIFIER_KEY_GETTERS[modifierName];
          if (modifierGetter(event)) {
            fullKey += modifierName + '.';
          }
        }
      });
      fullKey += key;
      return fullKey;
    };
    KeyEventsPlugin.eventCallback = function(fullKey, handler, zone) {
      return function(event) {
        if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {
          zone.runGuarded(function() {
            return handler(event);
          });
        }
      };
    };
    KeyEventsPlugin._normalizeKey = function(keyName) {
      switch (keyName) {
        case 'esc':
          return 'escape';
        default:
          return keyName;
      }
    };
    KeyEventsPlugin.decorators = [{type: core.Injectable}];
    KeyEventsPlugin.ctorParameters = function() {
      return [];
    };
    return KeyEventsPlugin;
  }(EventManagerPlugin));
  var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;
  var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i;
  function sanitizeUrl(url) {
    url = String(url);
    if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN))
      return url;
    if (core.isDevMode()) {
      getDOM().log("WARNING: sanitizing unsafe URL value " + url + " (see http://g.co/ng/security#xss)");
    }
    return 'unsafe:' + url;
  }
  function sanitizeSrcset(srcset) {
    srcset = String(srcset);
    return srcset.split(',').map(function(srcset) {
      return sanitizeUrl(srcset.trim());
    }).join(', ');
  }
  var inertElement = null;
  var DOM = null;
  function getInertElement() {
    if (inertElement)
      return inertElement;
    DOM = getDOM();
    var templateEl = DOM.createElement('template');
    if ('content' in templateEl)
      return templateEl;
    var doc = DOM.createHtmlDocument();
    inertElement = DOM.querySelector(doc, 'body');
    if (inertElement == null) {
      var html = DOM.createElement('html', doc);
      inertElement = DOM.createElement('body', doc);
      DOM.appendChild(html, inertElement);
      DOM.appendChild(doc, html);
    }
    return inertElement;
  }
  function tagSet(tags) {
    var res = {};
    for (var _i = 0,
        _a = tags.split(','); _i < _a.length; _i++) {
      var t = _a[_i];
      res[t] = true;
    }
    return res;
  }
  function merge() {
    var sets = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      sets[_i - 0] = arguments[_i];
    }
    var res = {};
    for (var _a = 0,
        sets_1 = sets; _a < sets_1.length; _a++) {
      var s = sets_1[_a];
      for (var v in s) {
        if (s.hasOwnProperty(v))
          res[v] = true;
      }
    }
    return res;
  }
  var VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');
  var OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');
  var OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');
  var OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);
  var BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' + 'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' + 'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));
  var INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' + 'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' + 'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));
  var VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);
  var URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');
  var SRCSET_ATTRS = tagSet('srcset');
  var HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' + 'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' + 'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' + 'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' + 'valign,value,vspace,width');
  var VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);
  var SanitizingHtmlSerializer = (function() {
    function SanitizingHtmlSerializer() {
      this.sanitizedSomething = false;
      this.buf = [];
    }
    SanitizingHtmlSerializer.prototype.sanitizeChildren = function(el) {
      var current = el.firstChild;
      while (current) {
        if (DOM.isElementNode(current)) {
          this.startElement((current));
        } else if (DOM.isTextNode(current)) {
          this.chars(DOM.nodeValue(current));
        } else {
          this.sanitizedSomething = true;
        }
        if (DOM.firstChild(current)) {
          current = DOM.firstChild(current);
          continue;
        }
        while (current) {
          if (DOM.isElementNode(current)) {
            this.endElement((current));
          }
          if (DOM.nextSibling(current)) {
            current = DOM.nextSibling(current);
            break;
          }
          current = DOM.parentElement(current);
        }
      }
      return this.buf.join('');
    };
    SanitizingHtmlSerializer.prototype.startElement = function(element) {
      var _this = this;
      var tagName = DOM.nodeName(element).toLowerCase();
      if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {
        this.sanitizedSomething = true;
        return;
      }
      this.buf.push('<');
      this.buf.push(tagName);
      DOM.attributeMap(element).forEach(function(value, attrName) {
        var lower = attrName.toLowerCase();
        if (!VALID_ATTRS.hasOwnProperty(lower)) {
          _this.sanitizedSomething = true;
          return;
        }
        if (URI_ATTRS[lower])
          value = sanitizeUrl(value);
        if (SRCSET_ATTRS[lower])
          value = sanitizeSrcset(value);
        _this.buf.push(' ');
        _this.buf.push(attrName);
        _this.buf.push('="');
        _this.buf.push(encodeEntities(value));
        _this.buf.push('"');
      });
      this.buf.push('>');
    };
    SanitizingHtmlSerializer.prototype.endElement = function(current) {
      var tagName = DOM.nodeName(current).toLowerCase();
      if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {
        this.buf.push('</');
        this.buf.push(tagName);
        this.buf.push('>');
      }
    };
    SanitizingHtmlSerializer.prototype.chars = function(chars) {
      this.buf.push(encodeEntities(chars));
    };
    return SanitizingHtmlSerializer;
  }());
  var SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
  var NON_ALPHANUMERIC_REGEXP = /([^\#-~ |!])/g;
  function encodeEntities(value) {
    return value.replace(/&/g, '&amp;').replace(SURROGATE_PAIR_REGEXP, function(match) {
      var hi = match.charCodeAt(0);
      var low = match.charCodeAt(1);
      return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';
    }).replace(NON_ALPHANUMERIC_REGEXP, function(match) {
      return '&#' + match.charCodeAt(0) + ';';
    }).replace(/</g, '&lt;').replace(/>/g, '&gt;');
  }
  function stripCustomNsAttrs(el) {
    DOM.attributeMap(el).forEach(function(_, attrName) {
      if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {
        DOM.removeAttribute(el, attrName);
      }
    });
    for (var _i = 0,
        _a = DOM.childNodesAsList(el); _i < _a.length; _i++) {
      var n = _a[_i];
      if (DOM.isElementNode(n))
        stripCustomNsAttrs((n));
    }
  }
  function sanitizeHtml(unsafeHtmlInput) {
    try {
      var containerEl = getInertElement();
      var unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';
      var mXSSAttempts = 5;
      var parsedHtml = unsafeHtml;
      do {
        if (mXSSAttempts === 0) {
          throw new Error('Failed to sanitize html because the input is unstable');
        }
        mXSSAttempts--;
        unsafeHtml = parsedHtml;
        DOM.setInnerHTML(containerEl, unsafeHtml);
        if (((DOM.defaultDoc())).documentMode) {
          stripCustomNsAttrs(containerEl);
        }
        parsedHtml = DOM.getInnerHTML(containerEl);
      } while (unsafeHtml !== parsedHtml);
      var sanitizer = new SanitizingHtmlSerializer();
      var safeHtml = sanitizer.sanitizeChildren(DOM.getTemplateContent(containerEl) || containerEl);
      var parent_1 = DOM.getTemplateContent(containerEl) || containerEl;
      for (var _i = 0,
          _a = DOM.childNodesAsList(parent_1); _i < _a.length; _i++) {
        var child = _a[_i];
        DOM.removeChild(parent_1, child);
      }
      if (core.isDevMode() && sanitizer.sanitizedSomething) {
        DOM.log('WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).');
      }
      return safeHtml;
    } catch (e) {
      inertElement = null;
      throw e;
    }
  }
  var VALUES = '[-,."\'%_!# a-zA-Z0-9]+';
  var TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';
  var COLOR_FNS = '(?:rgb|hsl)a?';
  var FN_ARGS = '\\([-0-9.%, a-zA-Z]+\\)';
  var SAFE_STYLE_VALUE = new RegExp("^(" + VALUES + "|(?:" + TRANSFORMATION_FNS + "|" + COLOR_FNS + ")" + FN_ARGS + ")$", 'g');
  var URL_RE = /^url\(([^)]+)\)$/;
  function hasBalancedQuotes(value) {
    var outsideSingle = true;
    var outsideDouble = true;
    for (var i = 0; i < value.length; i++) {
      var c = value.charAt(i);
      if (c === '\'' && outsideDouble) {
        outsideSingle = !outsideSingle;
      } else if (c === '"' && outsideSingle) {
        outsideDouble = !outsideDouble;
      }
    }
    return outsideSingle && outsideDouble;
  }
  function sanitizeStyle(value) {
    value = String(value).trim();
    if (!value)
      return '';
    var urlMatch = value.match(URL_RE);
    if ((urlMatch && sanitizeUrl(urlMatch[1]) === urlMatch[1]) || value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {
      return value;
    }
    if (core.isDevMode()) {
      getDOM().log("WARNING: sanitizing unsafe style value " + value + " (see http://g.co/ng/security#xss).");
    }
    return 'unsafe';
  }
  var __extends$8 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var DomSanitizer = (function() {
    function DomSanitizer() {}
    DomSanitizer.prototype.sanitize = function(context, value) {};
    DomSanitizer.prototype.bypassSecurityTrustHtml = function(value) {};
    DomSanitizer.prototype.bypassSecurityTrustStyle = function(value) {};
    DomSanitizer.prototype.bypassSecurityTrustScript = function(value) {};
    DomSanitizer.prototype.bypassSecurityTrustUrl = function(value) {};
    DomSanitizer.prototype.bypassSecurityTrustResourceUrl = function(value) {};
    return DomSanitizer;
  }());
  var DomSanitizerImpl = (function(_super) {
    __extends$8(DomSanitizerImpl, _super);
    function DomSanitizerImpl() {
      _super.apply(this, arguments);
    }
    DomSanitizerImpl.prototype.sanitize = function(ctx, value) {
      if (value == null)
        return null;
      switch (ctx) {
        case core.SecurityContext.NONE:
          return value;
        case core.SecurityContext.HTML:
          if (value instanceof SafeHtmlImpl)
            return value.changingThisBreaksApplicationSecurity;
          this.checkNotSafeValue(value, 'HTML');
          return sanitizeHtml(String(value));
        case core.SecurityContext.STYLE:
          if (value instanceof SafeStyleImpl)
            return value.changingThisBreaksApplicationSecurity;
          this.checkNotSafeValue(value, 'Style');
          return sanitizeStyle(value);
        case core.SecurityContext.SCRIPT:
          if (value instanceof SafeScriptImpl)
            return value.changingThisBreaksApplicationSecurity;
          this.checkNotSafeValue(value, 'Script');
          throw new Error('unsafe value used in a script context');
        case core.SecurityContext.URL:
          if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {
            return value.changingThisBreaksApplicationSecurity;
          }
          this.checkNotSafeValue(value, 'URL');
          return sanitizeUrl(String(value));
        case core.SecurityContext.RESOURCE_URL:
          if (value instanceof SafeResourceUrlImpl) {
            return value.changingThisBreaksApplicationSecurity;
          }
          this.checkNotSafeValue(value, 'ResourceURL');
          throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');
        default:
          throw new Error("Unexpected SecurityContext " + ctx + " (see http://g.co/ng/security#xss)");
      }
    };
    DomSanitizerImpl.prototype.checkNotSafeValue = function(value, expectedType) {
      if (value instanceof SafeValueImpl) {
        throw new Error(("Required a safe " + expectedType + ", got a " + value.getTypeName() + " ") + "(see http://g.co/ng/security#xss)");
      }
    };
    DomSanitizerImpl.prototype.bypassSecurityTrustHtml = function(value) {
      return new SafeHtmlImpl(value);
    };
    DomSanitizerImpl.prototype.bypassSecurityTrustStyle = function(value) {
      return new SafeStyleImpl(value);
    };
    DomSanitizerImpl.prototype.bypassSecurityTrustScript = function(value) {
      return new SafeScriptImpl(value);
    };
    DomSanitizerImpl.prototype.bypassSecurityTrustUrl = function(value) {
      return new SafeUrlImpl(value);
    };
    DomSanitizerImpl.prototype.bypassSecurityTrustResourceUrl = function(value) {
      return new SafeResourceUrlImpl(value);
    };
    DomSanitizerImpl.decorators = [{type: core.Injectable}];
    DomSanitizerImpl.ctorParameters = function() {
      return [];
    };
    return DomSanitizerImpl;
  }(DomSanitizer));
  var SafeValueImpl = (function() {
    function SafeValueImpl(changingThisBreaksApplicationSecurity) {
      this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;
    }
    SafeValueImpl.prototype.getTypeName = function() {};
    SafeValueImpl.prototype.toString = function() {
      return ("SafeValue must use [property]=binding: " + this.changingThisBreaksApplicationSecurity) + " (see http://g.co/ng/security#xss)";
    };
    return SafeValueImpl;
  }());
  var SafeHtmlImpl = (function(_super) {
    __extends$8(SafeHtmlImpl, _super);
    function SafeHtmlImpl() {
      _super.apply(this, arguments);
    }
    SafeHtmlImpl.prototype.getTypeName = function() {
      return 'HTML';
    };
    return SafeHtmlImpl;
  }(SafeValueImpl));
  var SafeStyleImpl = (function(_super) {
    __extends$8(SafeStyleImpl, _super);
    function SafeStyleImpl() {
      _super.apply(this, arguments);
    }
    SafeStyleImpl.prototype.getTypeName = function() {
      return 'Style';
    };
    return SafeStyleImpl;
  }(SafeValueImpl));
  var SafeScriptImpl = (function(_super) {
    __extends$8(SafeScriptImpl, _super);
    function SafeScriptImpl() {
      _super.apply(this, arguments);
    }
    SafeScriptImpl.prototype.getTypeName = function() {
      return 'Script';
    };
    return SafeScriptImpl;
  }(SafeValueImpl));
  var SafeUrlImpl = (function(_super) {
    __extends$8(SafeUrlImpl, _super);
    function SafeUrlImpl() {
      _super.apply(this, arguments);
    }
    SafeUrlImpl.prototype.getTypeName = function() {
      return 'URL';
    };
    return SafeUrlImpl;
  }(SafeValueImpl));
  var SafeResourceUrlImpl = (function(_super) {
    __extends$8(SafeResourceUrlImpl, _super);
    function SafeResourceUrlImpl() {
      _super.apply(this, arguments);
    }
    SafeResourceUrlImpl.prototype.getTypeName = function() {
      return 'ResourceURL';
    };
    return SafeResourceUrlImpl;
  }(SafeValueImpl));
  var INTERNAL_BROWSER_PLATFORM_PROVIDERS = [{
    provide: core.PLATFORM_INITIALIZER,
    useValue: initDomAdapter,
    multi: true
  }, {
    provide: _angular_common.PlatformLocation,
    useClass: BrowserPlatformLocation
  }];
  var BROWSER_SANITIZATION_PROVIDERS = [{
    provide: core.Sanitizer,
    useExisting: DomSanitizer
  }, {
    provide: DomSanitizer,
    useClass: DomSanitizerImpl
  }];
  var platformBrowser = core.createPlatformFactory(core.platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);
  function initDomAdapter() {
    BrowserDomAdapter.makeCurrent();
    BrowserGetTestability.init();
  }
  function errorHandler() {
    return new core.ErrorHandler();
  }
  function _document() {
    return getDOM().defaultDoc();
  }
  function _resolveDefaultAnimationDriver() {
    if (getDOM().supportsWebAnimation()) {
      return new WebAnimationsDriver();
    }
    return AnimationDriver.NOOP;
  }
  var BrowserModule = (function() {
    function BrowserModule(parentModule) {
      if (parentModule) {
        throw new Error("BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.");
      }
    }
    BrowserModule.decorators = [{
      type: core.NgModule,
      args: [{
        providers: [BROWSER_SANITIZATION_PROVIDERS, {
          provide: core.ErrorHandler,
          useFactory: errorHandler,
          deps: []
        }, {
          provide: DOCUMENT,
          useFactory: _document,
          deps: []
        }, {
          provide: EVENT_MANAGER_PLUGINS,
          useClass: DomEventsPlugin,
          multi: true
        }, {
          provide: EVENT_MANAGER_PLUGINS,
          useClass: KeyEventsPlugin,
          multi: true
        }, {
          provide: EVENT_MANAGER_PLUGINS,
          useClass: HammerGesturesPlugin,
          multi: true
        }, {
          provide: HAMMER_GESTURE_CONFIG,
          useClass: HammerGestureConfig
        }, {
          provide: DomRootRenderer,
          useClass: DomRootRenderer_
        }, {
          provide: core.RootRenderer,
          useExisting: DomRootRenderer
        }, {
          provide: SharedStylesHost,
          useExisting: DomSharedStylesHost
        }, {
          provide: AnimationDriver,
          useFactory: _resolveDefaultAnimationDriver
        }, DomSharedStylesHost, core.Testability, EventManager, ELEMENT_PROBE_PROVIDERS, Title],
        exports: [_angular_common.CommonModule, core.ApplicationModule]
      }]
    }];
    BrowserModule.ctorParameters = function() {
      return [{
        type: BrowserModule,
        decorators: [{type: core.Optional}, {type: core.SkipSelf}]
      }];
    };
    return BrowserModule;
  }());
  var win = typeof window !== 'undefined' && window || ({});
  var ChangeDetectionPerfRecord = (function() {
    function ChangeDetectionPerfRecord(msPerTick, numTicks) {
      this.msPerTick = msPerTick;
      this.numTicks = numTicks;
    }
    return ChangeDetectionPerfRecord;
  }());
  var AngularTools = (function() {
    function AngularTools(ref) {
      this.profiler = new AngularProfiler(ref);
    }
    return AngularTools;
  }());
  var AngularProfiler = (function() {
    function AngularProfiler(ref) {
      this.appRef = ref.injector.get(core.ApplicationRef);
    }
    AngularProfiler.prototype.timeChangeDetection = function(config) {
      var record = config && config['record'];
      var profileName = 'Change Detection';
      var isProfilerAvailable = isPresent(win.console.profile);
      if (record && isProfilerAvailable) {
        win.console.profile(profileName);
      }
      var start = getDOM().performanceNow();
      var numTicks = 0;
      while (numTicks < 5 || (getDOM().performanceNow() - start) < 500) {
        this.appRef.tick();
        numTicks++;
      }
      var end = getDOM().performanceNow();
      if (record && isProfilerAvailable) {
        ((win.console.profileEnd))(profileName);
      }
      var msPerTick = (end - start) / numTicks;
      win.console.log("ran " + numTicks + " change detection cycles");
      win.console.log(msPerTick.toFixed(2) + " ms per check");
      return new ChangeDetectionPerfRecord(msPerTick, numTicks);
    };
    return AngularProfiler;
  }());
  var context = (global$1);
  function enableDebugTools(ref) {
    ((Object)).assign(context.ng, new AngularTools(ref));
    return ref;
  }
  function disableDebugTools() {
    if (context.ng) {
      delete context.ng.profiler;
    }
  }
  var By = (function() {
    function By() {}
    By.all = function() {
      return function(debugElement) {
        return true;
      };
    };
    By.css = function(selector) {
      return function(debugElement) {
        return isPresent(debugElement.nativeElement) ? getDOM().elementMatches(debugElement.nativeElement, selector) : false;
      };
    };
    By.directive = function(type) {
      return function(debugElement) {
        return debugElement.providerTokens.indexOf(type) !== -1;
      };
    };
    return By;
  }());
  var __platform_browser_private__ = {
    BrowserPlatformLocation: BrowserPlatformLocation,
    DomAdapter: DomAdapter,
    BrowserDomAdapter: BrowserDomAdapter,
    BrowserGetTestability: BrowserGetTestability,
    getDOM: getDOM,
    setRootDomAdapter: setRootDomAdapter,
    DomRootRenderer_: DomRootRenderer_,
    DomRootRenderer: DomRootRenderer,
    NAMESPACE_URIS: NAMESPACE_URIS,
    shimContentAttribute: shimContentAttribute,
    shimHostAttribute: shimHostAttribute,
    flattenStyles: flattenStyles,
    splitNamespace: splitNamespace,
    isNamespaced: isNamespaced,
    DomSharedStylesHost: DomSharedStylesHost,
    SharedStylesHost: SharedStylesHost,
    ELEMENT_PROBE_PROVIDERS: ELEMENT_PROBE_PROVIDERS,
    DomEventsPlugin: DomEventsPlugin,
    KeyEventsPlugin: KeyEventsPlugin,
    HammerGesturesPlugin: HammerGesturesPlugin,
    initDomAdapter: initDomAdapter,
    INTERNAL_BROWSER_PLATFORM_PROVIDERS: INTERNAL_BROWSER_PLATFORM_PROVIDERS,
    BROWSER_SANITIZATION_PROVIDERS: BROWSER_SANITIZATION_PROVIDERS,
    WebAnimationsDriver: WebAnimationsDriver
  };
  var VERSION = new core.Version('2.4.2');
  exports.BrowserModule = BrowserModule;
  exports.platformBrowser = platformBrowser;
  exports.Title = Title;
  exports.disableDebugTools = disableDebugTools;
  exports.enableDebugTools = enableDebugTools;
  exports.AnimationDriver = AnimationDriver;
  exports.By = By;
  exports.NgProbeToken = NgProbeToken;
  exports.DOCUMENT = DOCUMENT;
  exports.EVENT_MANAGER_PLUGINS = EVENT_MANAGER_PLUGINS;
  exports.EventManager = EventManager;
  exports.HAMMER_GESTURE_CONFIG = HAMMER_GESTURE_CONFIG;
  exports.HammerGestureConfig = HammerGestureConfig;
  exports.DomSanitizer = DomSanitizer;
  exports.VERSION = VERSION;
  exports.__platform_browser_private__ = __platform_browser_private__;
}));

})();
$__System.registerDynamic('npm:ng2-toastr/src/toast-container.component.js', ['npm:@angular/core/bundles/core.umd.js', 'npm:ng2-toastr/src/toast-options.js', 'npm:@angular/platform-browser/bundles/platform-browser.umd.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('npm:@angular/core/bundles/core.umd.js');
    var toast_options_1 = $__require('npm:ng2-toastr/src/toast-options.js');
    var platform_browser_1 = $__require('npm:@angular/platform-browser/bundles/platform-browser.umd.js');
    var ToastContainer = function () {
        function ToastContainer(sanitizer, cdr, options) {
            this.sanitizer = sanitizer;
            this.cdr = cdr;
            this.position = 'fixed';
            this.messageClass = 'toast-message';
            this.titleClass = 'toast-title';
            this.positionClass = 'toast-top-right';
            this.toasts = [];
            this.maxShown = 5;
            this.newestOnTop = false;
            this.animate = 'fade';
            if (options) {
                Object.assign(this, options);
            }
        }
        ToastContainer.prototype.addToast = function (toast) {
            if (this.positionClass.indexOf('top') > 0) {
                if (this.newestOnTop) {
                    this.toasts.unshift(toast);
                } else {
                    this.toasts.push(toast);
                }
                if (this.toasts.length > this.maxShown) {
                    var diff = this.toasts.length - this.maxShown;
                    if (this.newestOnTop) {
                        this.toasts.splice(this.maxShown);
                    } else {
                        this.toasts.splice(0, diff);
                    }
                }
            } else {
                this.toasts.unshift(toast);
                if (this.toasts.length > this.maxShown) {
                    this.toasts.splice(this.maxShown);
                }
            }
            this.cdr.detectChanges();
        };
        ToastContainer.prototype.removeToast = function (toast) {
            if (toast.timeoutId) {
                clearTimeout(toast.timeoutId);
                toast.timeoutId = null;
            }
            this.toasts = this.toasts.filter(function (t) {
                return t.id !== toast.id;
            });
        };
        ToastContainer.prototype.removeAllToasts = function () {
            this.toasts = [];
        };
        ToastContainer.prototype.clicked = function (toast) {
            if (this.onToastClicked) {
                this.onToastClicked(toast);
            }
        };
        ToastContainer.prototype.anyToast = function () {
            return this.toasts.length > 0;
        };
        ToastContainer.prototype.findToast = function (toastId) {
            for (var _i = 0, _a = this.toasts; _i < _a.length; _i++) {
                var toast = _a[_i];
                if (toast.id === toastId) {
                    return toast;
                }
            }
            return null;
        };
        ToastContainer.decorators = [{ type: core_1.Component, args: [{
                selector: 'toast-container',
                template: "\n    <div #toastContainer id=\"toast-container\" [style.position]=\"position\" class=\"{{positionClass}}\">\n      <div *ngFor=\"let toast of toasts\" [@inOut]=\"animate\" class=\"toast toast-{{toast.type}}\" \n      (click)=\"clicked(toast)\">\n        <div class=\"toast-close-button\" *ngIf=\"toast.config.showCloseButton\" (click)=\"removeToast(toast)\">&times;\n        </div> \n        <div *ngIf=\"toast.title\" class=\"{{toast.config.titleClass || titleClass}}\">{{toast.title}}</div>\n        <div [ngSwitch]=\"toast.config.enableHTML\">\n          <span *ngSwitchCase=\"true\" [innerHTML]=\"sanitizer.bypassSecurityTrustHtml(toast.message)\"></span>\n          <span *ngSwitchDefault class=\"{{toast.config.messageClass || messageClass}}\">{{toast.message}}</span>\n        </div>             \n      </div>\n    </div>\n    ",
                animations: [core_1.trigger('inOut', [core_1.state('flyRight, flyLeft', core_1.style({ opacity: 1, transform: 'translateX(0)' })), core_1.state('fade', core_1.style({ opacity: 1 })), core_1.state('slideDown, slideUp', core_1.style({ opacity: 1, transform: 'translateY(0)' })), core_1.transition('void => flyRight', [core_1.style({
                    opacity: 0,
                    transform: 'translateX(100%)'
                }), core_1.animate('0.2s ease-in')]), core_1.transition('flyRight => void', [core_1.animate('0.2s 10 ease-out', core_1.style({
                    opacity: 0,
                    transform: 'translateX(100%)'
                }))]), core_1.transition('void => flyLeft', [core_1.style({
                    opacity: 0,
                    transform: 'translateX(-100%)'
                }), core_1.animate('0.2s ease-in')]), core_1.transition('flyLeft => void', [core_1.animate('0.2s 10 ease-out', core_1.style({
                    opacity: 0,
                    transform: 'translateX(-100%)'
                }))]), core_1.transition('void => fade', [core_1.style({
                    opacity: 0
                }), core_1.animate('0.3s ease-in')]), core_1.transition('fade => void', [core_1.animate('0.3s 10 ease-out', core_1.style({
                    opacity: 0
                }))]), core_1.transition('void => slideDown', [core_1.style({
                    opacity: 0,
                    transform: 'translateY(-200%)'
                }), core_1.animate('0.3s ease-in')]), core_1.transition('slideDown => void', [core_1.animate('0.3s 10 ease-out', core_1.style({
                    opacity: 0,
                    transform: 'translateY(-200%)'
                }))]), core_1.transition('void => slideUp', [core_1.style({
                    opacity: 0,
                    transform: 'translateY(200%)'
                }), core_1.animate('0.3s ease-in')]), core_1.transition('slideUp => void', [core_1.animate('0.3s 10 ease-out', core_1.style({
                    opacity: 0,
                    transform: 'translateY(200%)'
                }))])])]
            }] }];
        /** @nocollapse */
        ToastContainer.ctorParameters = function () {
            return [{ type: platform_browser_1.DomSanitizer }, { type: core_1.ChangeDetectorRef }, { type: toast_options_1.ToastOptions, decorators: [{ type: core_1.Optional }] }];
        };
        return ToastContainer;
    }();
    exports.ToastContainer = ToastContainer;
    

    return module.exports;
});
$__System.registerDynamic('npm:ng2-toastr/src/toast.js', [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var Toast = function () {
        function Toast(type, message, title, data) {
            this.type = type;
            this.message = message;
            this.title = title;
            this.data = data;
            this.config = {
                dismiss: 'auto',
                enableHTML: false,
                titleClass: '',
                messageClass: '',
                toastLife: 3000,
                showCloseButton: false
            };
        }
        return Toast;
    }();
    exports.Toast = Toast;
    

    return module.exports;
});
$__System.registerDynamic('npm:ng2-toastr/src/toast-manager.js', ['npm:@angular/core/bundles/core.umd.js', 'npm:ng2-toastr/src/toast-container.component.js', 'npm:ng2-toastr/src/toast-options.js', 'npm:ng2-toastr/src/toast.js', 'npm:rxjs/Subject.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('npm:@angular/core/bundles/core.umd.js');
    var toast_container_component_1 = $__require('npm:ng2-toastr/src/toast-container.component.js');
    var toast_options_1 = $__require('npm:ng2-toastr/src/toast-options.js');
    var toast_1 = $__require('npm:ng2-toastr/src/toast.js');
    var Subject_1 = $__require('npm:rxjs/Subject.js');
    var ToastsManager = function () {
        function ToastsManager(componentFactoryResolver, appRef, options) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.appRef = appRef;
            this.options = {};
            this.index = 0;
            this.toastClicked = new Subject_1.Subject();
            if (options) {
                Object.assign(this.options, options);
            }
        }
        ToastsManager.prototype.setRootViewContainerRef = function (vRef) {
            this._rootViewContainerRef = vRef;
        };
        ToastsManager.prototype.onClickToast = function () {
            return this.toastClicked.asObservable();
        };
        ToastsManager.prototype.show = function (toast, options) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                if (!_this.container) {
                    // get app root view component ref
                    if (!_this._rootViewContainerRef) {
                        try {
                            _this._rootViewContainerRef = _this.appRef['_rootComponents'][0]['_hostElement'].vcRef;
                        } catch (e) {
                            reject(new Error('Please set root ViewContainerRef using setRootViewContainerRef(vRef: ViewContainerRef) method.'));
                        }
                    }
                    // get options providers
                    var providers = core_1.ReflectiveInjector.resolve([{ provide: toast_options_1.ToastOptions, useValue: _this.options }]);
                    // create and load ToastContainer
                    var toastFactory = _this.componentFactoryResolver.resolveComponentFactory(toast_container_component_1.ToastContainer);
                    var childInjector = core_1.ReflectiveInjector.fromResolvedProviders(providers, _this._rootViewContainerRef.parentInjector);
                    _this.container = _this._rootViewContainerRef.createComponent(toastFactory, _this._rootViewContainerRef.length, childInjector);
                    _this.container.instance.onToastClicked = function (toast) {
                        _this._onToastClicked(toast);
                    };
                }
                resolve(_this.setupToast(toast, options));
            });
        };
        ToastsManager.prototype.createTimeout = function (toast) {
            var _this = this;
            var task = setTimeout(function () {
                _this.clearToast(toast);
            }, toast.config.toastLife);
            return task.toString();
        };
        ToastsManager.prototype.setupToast = function (toast, options) {
            var _this = this;
            toast.id = ++this.index;
            Object.keys(toast.config).forEach(function (k) {
                if (_this.options.hasOwnProperty(k)) {
                    toast.config[k] = _this.options[k];
                }
                if (options && options.hasOwnProperty(k)) {
                    toast.config[k] = options[k];
                }
            });
            if (toast.config.dismiss === 'auto') {
                toast.timeoutId = this.createTimeout(toast);
            }
            this.container.instance.addToast(toast);
            return toast;
        };
        ToastsManager.prototype._onToastClicked = function (toast) {
            this.toastClicked.next(toast);
            if (toast.config.dismiss === 'click') {
                this.clearToast(toast);
            }
        };
        ToastsManager.prototype.dismissToast = function (toast) {
            this.clearToast(toast);
        };
        ToastsManager.prototype.clearToast = function (toast) {
            if (this.container) {
                var instance = this.container.instance;
                instance.removeToast(toast);
                if (!instance.anyToast()) {
                    this.dispose();
                }
            }
        };
        ToastsManager.prototype.clearAllToasts = function () {
            if (this.container) {
                var instance = this.container.instance;
                instance.removeAllToasts();
                this.dispose();
            }
        };
        ToastsManager.prototype.dispose = function () {
            var _this = this;
            // using timeout to allow animation to finish
            setTimeout(function () {
                if (_this.container && !_this.container.instance.anyToast()) {
                    _this.container.destroy();
                    _this.container = null;
                }
            }, 2000);
        };
        ToastsManager.prototype.error = function (message, title, options) {
            var data = options && options.data ? options.data : null;
            var toast = new toast_1.Toast('error', message, title, data);
            return this.show(toast, options);
        };
        ToastsManager.prototype.info = function (message, title, options) {
            var data = options && options.data ? options.data : null;
            var toast = new toast_1.Toast('info', message, title, data);
            return this.show(toast, options);
        };
        ToastsManager.prototype.success = function (message, title, options) {
            var data = options && options.data ? options.data : null;
            var toast = new toast_1.Toast('success', message, title, data);
            return this.show(toast, options);
        };
        ToastsManager.prototype.warning = function (message, title, options) {
            var data = options && options.data ? options.data : null;
            var toast = new toast_1.Toast('warning', message, title, data);
            return this.show(toast, options);
        };
        // allow user define custom background color and image
        ToastsManager.prototype.custom = function (message, title, options) {
            var data = options && options.data ? options.data : null;
            var toast = new toast_1.Toast('custom', message, title, data);
            return this.show(toast, options);
        };
        ToastsManager.decorators = [{ type: core_1.Injectable }];
        /** @nocollapse */
        ToastsManager.ctorParameters = function () {
            return [{ type: core_1.ComponentFactoryResolver }, { type: core_1.ApplicationRef }, { type: toast_options_1.ToastOptions, decorators: [{ type: core_1.Optional }] }];
        };
        return ToastsManager;
    }();
    exports.ToastsManager = ToastsManager;
    

    return module.exports;
});
$__System.registerDynamic('npm:ng2-toastr/src/toast-options.js', ['npm:@angular/core/bundles/core.umd.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('npm:@angular/core/bundles/core.umd.js');
    var ToastOptions = function () {
        function ToastOptions(options) {
            this.newestOnTop = false;
            this.animate = 'fade';
            this.enableHTML = false;
            this.showCloseButton = false;
            Object.assign(this, options);
        }
        ToastOptions.decorators = [{ type: core_1.Injectable }];
        /** @nocollapse */
        ToastOptions.ctorParameters = function () {
            return [{ type: Object }];
        };
        return ToastOptions;
    }();
    exports.ToastOptions = ToastOptions;
    

    return module.exports;
});
$__System.registerDynamic('npm:ng2-toastr/src/toast.module.js', ['npm:@angular/core/bundles/core.umd.js', 'npm:@angular/common/bundles/common.umd.js', 'npm:ng2-toastr/src/toast-container.component.js', 'npm:ng2-toastr/src/toast-manager.js', 'npm:ng2-toastr/src/toast-options.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('npm:@angular/core/bundles/core.umd.js');
    var common_1 = $__require('npm:@angular/common/bundles/common.umd.js');
    var toast_container_component_1 = $__require('npm:ng2-toastr/src/toast-container.component.js');
    var toast_manager_1 = $__require('npm:ng2-toastr/src/toast-manager.js');
    var toast_options_1 = $__require('npm:ng2-toastr/src/toast-options.js');
    var ToastModule = function () {
        function ToastModule() {}
        ToastModule.forRoot = function (config) {
            return {
                ngModule: ToastModule,
                providers: [{ provide: toast_options_1.ToastOptions, useValue: config }]
            };
        };
        ToastModule.decorators = [{ type: core_1.NgModule, args: [{
                imports: [common_1.CommonModule],
                declarations: [toast_container_component_1.ToastContainer],
                exports: [toast_container_component_1.ToastContainer],
                providers: [toast_manager_1.ToastsManager],
                entryComponents: [toast_container_component_1.ToastContainer]
            }] }];
        /** @nocollapse */
        ToastModule.ctorParameters = function () {
            return [];
        };
        return ToastModule;
    }();
    exports.ToastModule = ToastModule;
    

    return module.exports;
});
$__System.registerDynamic('npm:ng2-toastr/ng2-toastr.js', ['npm:ng2-toastr/src/toast.js', 'npm:ng2-toastr/src/toast-manager.js', 'npm:ng2-toastr/src/toast-container.component.js', 'npm:ng2-toastr/src/toast-options.js', 'npm:ng2-toastr/src/toast.module.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    __export($__require('npm:ng2-toastr/src/toast.js'));
    __export($__require('npm:ng2-toastr/src/toast-manager.js'));
    __export($__require('npm:ng2-toastr/src/toast-container.component.js'));
    __export($__require('npm:ng2-toastr/src/toast-options.js'));
    __export($__require('npm:ng2-toastr/src/toast.module.js'));
    

    return module.exports;
});
$__System.registerDynamic('npm:rxjs/operator/map.js', ['npm:rxjs/Subscriber.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('npm:rxjs/Subscriber.js');
    /**
     * Applies a given `project` function to each value emitted by the source
     * Observable, and emits the resulting values as an Observable.
     *
     * <span class="informal">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),
     * it passes each source value through a transformation function to get
     * corresponding output values.</span>
     *
     * <img src="./img/map.png" width="100%">
     *
     * Similar to the well known `Array.prototype.map` function, this operator
     * applies a projection to each value and emits that projection in the output
     * Observable.
     *
     * @example <caption>Map every every click to the clientX position of that click</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var positions = clicks.map(ev => ev.clientX);
     * positions.subscribe(x => console.log(x));
     *
     * @see {@link mapTo}
     * @see {@link pluck}
     *
     * @param {function(value: T, index: number): R} project The function to apply
     * to each `value` emitted by the source Observable. The `index` parameter is
     * the number `i` for the i-th emission that has happened since the
     * subscription, starting from the number `0`.
     * @param {any} [thisArg] An optional argument to define what `this` is in the
     * `project` function.
     * @return {Observable<R>} An Observable that emits the values from the source
     * Observable transformed by the given `project` function.
     * @method map
     * @owner Observable
     */
    function map(project, thisArg) {
        if (typeof project !== 'function') {
            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
        }
        return this.lift(new MapOperator(project, thisArg));
    }
    exports.map = map;
    var MapOperator = function () {
        function MapOperator(project, thisArg) {
            this.project = project;
            this.thisArg = thisArg;
        }
        MapOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
        };
        return MapOperator;
    }();
    exports.MapOperator = MapOperator;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var MapSubscriber = function (_super) {
        __extends(MapSubscriber, _super);
        function MapSubscriber(destination, project, thisArg) {
            _super.call(this, destination);
            this.project = project;
            this.count = 0;
            this.thisArg = thisArg || this;
        }
        // NOTE: This looks unoptimized, but it's actually purposefully NOT
        // using try/catch optimizations.
        MapSubscriber.prototype._next = function (value) {
            var result;
            try {
                result = this.project.call(this.thisArg, value, this.count++);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(result);
        };
        return MapSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('npm:rxjs/add/operator/map.js', ['npm:rxjs/Observable.js', 'npm:rxjs/operator/map.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('npm:rxjs/Observable.js');
  var map_1 = $__require('npm:rxjs/operator/map.js');
  Observable_1.Observable.prototype.map = map_1.map;
  

  return module.exports;
});
$__System.registerDynamic("npm:rxjs/OuterSubscriber.js", ["npm:rxjs/Subscriber.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require("npm:rxjs/Subscriber.js");
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var OuterSubscriber = function (_super) {
        __extends(OuterSubscriber, _super);
        function OuterSubscriber() {
            _super.apply(this, arguments);
        }
        OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.destination.next(innerValue);
        };
        OuterSubscriber.prototype.notifyError = function (error, innerSub) {
            this.destination.error(error);
        };
        OuterSubscriber.prototype.notifyComplete = function (innerSub) {
            this.destination.complete();
        };
        return OuterSubscriber;
    }(Subscriber_1.Subscriber);
    exports.OuterSubscriber = OuterSubscriber;
    

    return module.exports;
});
$__System.registerDynamic('npm:rxjs/util/isPromise.js', [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function isPromise(value) {
        return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
    }
    exports.isPromise = isPromise;
    

    return module.exports;
});
$__System.registerDynamic('npm:rxjs/symbol/iterator.js', ['npm:rxjs/util/root.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var root_1 = $__require('npm:rxjs/util/root.js');
    function symbolIteratorPonyfill(root) {
        var Symbol = root.Symbol;
        if (typeof Symbol === 'function') {
            if (!Symbol.iterator) {
                Symbol.iterator = Symbol('iterator polyfill');
            }
            return Symbol.iterator;
        } else {
            // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)
            var Set_1 = root.Set;
            if (Set_1 && typeof new Set_1()['@@iterator'] === 'function') {
                return '@@iterator';
            }
            var Map_1 = root.Map;
            // required for compatability with es6-shim
            if (Map_1) {
                var keys = Object.getOwnPropertyNames(Map_1.prototype);
                for (var i = 0; i < keys.length; ++i) {
                    var key = keys[i];
                    // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.
                    if (key !== 'entries' && key !== 'size' && Map_1.prototype[key] === Map_1.prototype['entries']) {
                        return key;
                    }
                }
            }
            return '@@iterator';
        }
    }
    exports.symbolIteratorPonyfill = symbolIteratorPonyfill;
    exports.$$iterator = symbolIteratorPonyfill(root_1.root);
    

    return module.exports;
});
$__System.registerDynamic("npm:rxjs/InnerSubscriber.js", ["npm:rxjs/Subscriber.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require("npm:rxjs/Subscriber.js");
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var InnerSubscriber = function (_super) {
        __extends(InnerSubscriber, _super);
        function InnerSubscriber(parent, outerValue, outerIndex) {
            _super.call(this);
            this.parent = parent;
            this.outerValue = outerValue;
            this.outerIndex = outerIndex;
            this.index = 0;
        }
        InnerSubscriber.prototype._next = function (value) {
            this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
        };
        InnerSubscriber.prototype._error = function (error) {
            this.parent.notifyError(error, this);
            this.unsubscribe();
        };
        InnerSubscriber.prototype._complete = function () {
            this.parent.notifyComplete(this);
            this.unsubscribe();
        };
        return InnerSubscriber;
    }(Subscriber_1.Subscriber);
    exports.InnerSubscriber = InnerSubscriber;
    

    return module.exports;
});
$__System.registerDynamic('npm:rxjs/util/subscribeToResult.js', ['npm:rxjs/util/root.js', 'npm:rxjs/util/isArray.js', 'npm:rxjs/util/isPromise.js', 'npm:rxjs/util/isObject.js', 'npm:rxjs/Observable.js', 'npm:rxjs/symbol/iterator.js', 'npm:rxjs/InnerSubscriber.js', 'npm:rxjs/symbol/observable.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var root_1 = $__require('npm:rxjs/util/root.js');
    var isArray_1 = $__require('npm:rxjs/util/isArray.js');
    var isPromise_1 = $__require('npm:rxjs/util/isPromise.js');
    var isObject_1 = $__require('npm:rxjs/util/isObject.js');
    var Observable_1 = $__require('npm:rxjs/Observable.js');
    var iterator_1 = $__require('npm:rxjs/symbol/iterator.js');
    var InnerSubscriber_1 = $__require('npm:rxjs/InnerSubscriber.js');
    var observable_1 = $__require('npm:rxjs/symbol/observable.js');
    function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {
        var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);
        if (destination.closed) {
            return null;
        }
        if (result instanceof Observable_1.Observable) {
            if (result._isScalar) {
                destination.next(result.value);
                destination.complete();
                return null;
            } else {
                return result.subscribe(destination);
            }
        } else if (isArray_1.isArray(result)) {
            for (var i = 0, len = result.length; i < len && !destination.closed; i++) {
                destination.next(result[i]);
            }
            if (!destination.closed) {
                destination.complete();
            }
        } else if (isPromise_1.isPromise(result)) {
            result.then(function (value) {
                if (!destination.closed) {
                    destination.next(value);
                    destination.complete();
                }
            }, function (err) {
                return destination.error(err);
            }).then(null, function (err) {
                // Escaping the Promise trap: globally throw unhandled errors
                root_1.root.setTimeout(function () {
                    throw err;
                });
            });
            return destination;
        } else if (result && typeof result[iterator_1.$$iterator] === 'function') {
            var iterator = result[iterator_1.$$iterator]();
            do {
                var item = iterator.next();
                if (item.done) {
                    destination.complete();
                    break;
                }
                destination.next(item.value);
                if (destination.closed) {
                    break;
                }
            } while (true);
        } else if (result && typeof result[observable_1.$$observable] === 'function') {
            var obs = result[observable_1.$$observable]();
            if (typeof obs.subscribe !== 'function') {
                destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));
            } else {
                return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));
            }
        } else {
            var value = isObject_1.isObject(result) ? 'an invalid object' : "'" + result + "'";
            var msg = "You provided " + value + " where a stream was expected." + ' You can provide an Observable, Promise, Array, or Iterable.';
            destination.error(new TypeError(msg));
        }
        return null;
    }
    exports.subscribeToResult = subscribeToResult;
    

    return module.exports;
});
$__System.registerDynamic('npm:rxjs/operator/catch.js', ['npm:rxjs/OuterSubscriber.js', 'npm:rxjs/util/subscribeToResult.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var OuterSubscriber_1 = $__require('npm:rxjs/OuterSubscriber.js');
    var subscribeToResult_1 = $__require('npm:rxjs/util/subscribeToResult.js');
    /**
     * Catches errors on the observable to be handled by returning a new observable or throwing an error.
     * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which
     *  is the source observable, in case you'd like to "retry" that observable by returning it again. Whatever observable
     *  is returned by the `selector` will be used to continue the observable chain.
     * @return {Observable} an observable that originates from either the source or the observable returned by the
     *  catch `selector` function.
     * @method catch
     * @name catch
     * @owner Observable
     */
    function _catch(selector) {
        var operator = new CatchOperator(selector);
        var caught = this.lift(operator);
        return operator.caught = caught;
    }
    exports._catch = _catch;
    var CatchOperator = function () {
        function CatchOperator(selector) {
            this.selector = selector;
        }
        CatchOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));
        };
        return CatchOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var CatchSubscriber = function (_super) {
        __extends(CatchSubscriber, _super);
        function CatchSubscriber(destination, selector, caught) {
            _super.call(this, destination);
            this.selector = selector;
            this.caught = caught;
        }
        // NOTE: overriding `error` instead of `_error` because we don't want
        // to have this flag this subscriber as `isStopped`.
        CatchSubscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                var result = void 0;
                try {
                    result = this.selector(err, this.caught);
                } catch (err) {
                    this.destination.error(err);
                    return;
                }
                this.unsubscribe();
                this.destination.remove(this);
                subscribeToResult_1.subscribeToResult(this, result);
            }
        };
        return CatchSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    

    return module.exports;
});
$__System.registerDynamic('npm:rxjs/add/operator/catch.js', ['npm:rxjs/Observable.js', 'npm:rxjs/operator/catch.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('npm:rxjs/Observable.js');
  var catch_1 = $__require('npm:rxjs/operator/catch.js');
  Observable_1.Observable.prototype.catch = catch_1._catch;
  Observable_1.Observable.prototype._catch = catch_1._catch;
  

  return module.exports;
});
$__System.registerDynamic("npm:rxjs/observable/ScalarObservable.js", ["npm:rxjs/Observable.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require("npm:rxjs/Observable.js");
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var ScalarObservable = function (_super) {
        __extends(ScalarObservable, _super);
        function ScalarObservable(value, scheduler) {
            _super.call(this);
            this.value = value;
            this.scheduler = scheduler;
            this._isScalar = true;
            if (scheduler) {
                this._isScalar = false;
            }
        }
        ScalarObservable.create = function (value, scheduler) {
            return new ScalarObservable(value, scheduler);
        };
        ScalarObservable.dispatch = function (state) {
            var done = state.done,
                value = state.value,
                subscriber = state.subscriber;
            if (done) {
                subscriber.complete();
                return;
            }
            subscriber.next(value);
            if (subscriber.closed) {
                return;
            }
            state.done = true;
            this.schedule(state);
        };
        ScalarObservable.prototype._subscribe = function (subscriber) {
            var value = this.value;
            var scheduler = this.scheduler;
            if (scheduler) {
                return scheduler.schedule(ScalarObservable.dispatch, 0, {
                    done: false, value: value, subscriber: subscriber
                });
            } else {
                subscriber.next(value);
                if (!subscriber.closed) {
                    subscriber.complete();
                }
            }
        };
        return ScalarObservable;
    }(Observable_1.Observable);
    exports.ScalarObservable = ScalarObservable;
    

    return module.exports;
});
$__System.registerDynamic("npm:rxjs/observable/EmptyObservable.js", ["npm:rxjs/Observable.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require("npm:rxjs/Observable.js");
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var EmptyObservable = function (_super) {
        __extends(EmptyObservable, _super);
        function EmptyObservable(scheduler) {
            _super.call(this);
            this.scheduler = scheduler;
        }
        /**
         * Creates an Observable that emits no items to the Observer and immediately
         * emits a complete notification.
         *
         * <span class="informal">Just emits 'complete', and nothing else.
         * </span>
         *
         * <img src="./img/empty.png" width="100%">
         *
         * This static operator is useful for creating a simple Observable that only
         * emits the complete notification. It can be used for composing with other
         * Observables, such as in a {@link mergeMap}.
         *
         * @example <caption>Emit the number 7, then complete.</caption>
         * var result = Rx.Observable.empty().startWith(7);
         * result.subscribe(x => console.log(x));
         *
         * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>
         * var interval = Rx.Observable.interval(1000);
         * var result = interval.mergeMap(x =>
         *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()
         * );
         * result.subscribe(x => console.log(x));
         *
         * // Results in the following to the console:
         * // x is equal to the count on the interval eg(0,1,2,3,...)
         * // x will occur every 1000ms
         * // if x % 2 is equal to 1 print abc
         * // if x % 2 is not equal to 1 nothing will be output
         *
         * @see {@link create}
         * @see {@link never}
         * @see {@link of}
         * @see {@link throw}
         *
         * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
         * the emission of the complete notification.
         * @return {Observable} An "empty" Observable: emits only the complete
         * notification.
         * @static true
         * @name empty
         * @owner Observable
         */
        EmptyObservable.create = function (scheduler) {
            return new EmptyObservable(scheduler);
        };
        EmptyObservable.dispatch = function (arg) {
            var subscriber = arg.subscriber;
            subscriber.complete();
        };
        EmptyObservable.prototype._subscribe = function (subscriber) {
            var scheduler = this.scheduler;
            if (scheduler) {
                return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });
            } else {
                subscriber.complete();
            }
        };
        return EmptyObservable;
    }(Observable_1.Observable);
    exports.EmptyObservable = EmptyObservable;
    

    return module.exports;
});
$__System.registerDynamic("npm:rxjs/util/isScheduler.js", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function isScheduler(value) {
        return value && typeof value.schedule === 'function';
    }
    exports.isScheduler = isScheduler;
    

    return module.exports;
});
$__System.registerDynamic('npm:rxjs/observable/ArrayObservable.js', ['npm:rxjs/Observable.js', 'npm:rxjs/observable/ScalarObservable.js', 'npm:rxjs/observable/EmptyObservable.js', 'npm:rxjs/util/isScheduler.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require('npm:rxjs/Observable.js');
    var ScalarObservable_1 = $__require('npm:rxjs/observable/ScalarObservable.js');
    var EmptyObservable_1 = $__require('npm:rxjs/observable/EmptyObservable.js');
    var isScheduler_1 = $__require('npm:rxjs/util/isScheduler.js');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var ArrayObservable = function (_super) {
        __extends(ArrayObservable, _super);
        function ArrayObservable(array, scheduler) {
            _super.call(this);
            this.array = array;
            this.scheduler = scheduler;
            if (!scheduler && array.length === 1) {
                this._isScalar = true;
                this.value = array[0];
            }
        }
        ArrayObservable.create = function (array, scheduler) {
            return new ArrayObservable(array, scheduler);
        };
        /**
         * Creates an Observable that emits some values you specify as arguments,
         * immediately one after the other, and then emits a complete notification.
         *
         * <span class="informal">Emits the arguments you provide, then completes.
         * </span>
         *
         * <img src="./img/of.png" width="100%">
         *
         * This static operator is useful for creating a simple Observable that only
         * emits the arguments given, and the complete notification thereafter. It can
         * be used for composing with other Observables, such as with {@link concat}.
         * By default, it uses a `null` IScheduler, which means the `next`
         * notifications are sent synchronously, although with a different IScheduler
         * it is possible to determine when those notifications will be delivered.
         *
         * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>
         * var numbers = Rx.Observable.of(10, 20, 30);
         * var letters = Rx.Observable.of('a', 'b', 'c');
         * var interval = Rx.Observable.interval(1000);
         * var result = numbers.concat(letters).concat(interval);
         * result.subscribe(x => console.log(x));
         *
         * @see {@link create}
         * @see {@link empty}
         * @see {@link never}
         * @see {@link throw}
         *
         * @param {...T} values Arguments that represent `next` values to be emitted.
         * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
         * the emissions of the `next` notifications.
         * @return {Observable<T>} An Observable that emits each given input value.
         * @static true
         * @name of
         * @owner Observable
         */
        ArrayObservable.of = function () {
            var array = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                array[_i - 0] = arguments[_i];
            }
            var scheduler = array[array.length - 1];
            if (isScheduler_1.isScheduler(scheduler)) {
                array.pop();
            } else {
                scheduler = null;
            }
            var len = array.length;
            if (len > 1) {
                return new ArrayObservable(array, scheduler);
            } else if (len === 1) {
                return new ScalarObservable_1.ScalarObservable(array[0], scheduler);
            } else {
                return new EmptyObservable_1.EmptyObservable(scheduler);
            }
        };
        ArrayObservable.dispatch = function (state) {
            var array = state.array,
                index = state.index,
                count = state.count,
                subscriber = state.subscriber;
            if (index >= count) {
                subscriber.complete();
                return;
            }
            subscriber.next(array[index]);
            if (subscriber.closed) {
                return;
            }
            state.index = index + 1;
            this.schedule(state);
        };
        ArrayObservable.prototype._subscribe = function (subscriber) {
            var index = 0;
            var array = this.array;
            var count = array.length;
            var scheduler = this.scheduler;
            if (scheduler) {
                return scheduler.schedule(ArrayObservable.dispatch, 0, {
                    array: array, index: index, count: count, subscriber: subscriber
                });
            } else {
                for (var i = 0; i < count && !subscriber.closed; i++) {
                    subscriber.next(array[i]);
                }
                subscriber.complete();
            }
        };
        return ArrayObservable;
    }(Observable_1.Observable);
    exports.ArrayObservable = ArrayObservable;
    

    return module.exports;
});
$__System.registerDynamic("npm:rxjs/observable/of.js", ["npm:rxjs/observable/ArrayObservable.js"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var ArrayObservable_1 = $__require("npm:rxjs/observable/ArrayObservable.js");
  exports.of = ArrayObservable_1.ArrayObservable.of;
  

  return module.exports;
});
$__System.registerDynamic("App/resources/app-settings.js", [], true, function ($__require, exports, module) {
    //Kanskje lage en injecteable evt global class? 
    "use strict";
    // Surveillance

    var define,
        global = this || self,
        GLOBAL = global;
    exports.apiProjectSurveillance = "api/Surveillance/All";
    exports.apiNextCheck = "api/Surveillance/Next";
    exports.apiPreviousCheck = "api/Surveillance/Previous";
    exports.apiIndexedProjectSurveillance = "api/Search/ProjectSurveillances/";
    // Search
    exports.apiGetFilters = "api/Search/Filters";
    exports.apiPersonSearch = "api/AdvancedSearch/";
    exports.apiSavedSearches = "api/Filters/Saved";
    // User
    exports.apiLogIn = "api/User/Login";
    exports.apiLogOut = "api/User/Logout";
    exports.apiGetUser = "api/User/GetUser";
    exports.apiIsLoggedIn = "api/User/IsLoggedIn";
    exports.apiUpdateRegisterUser = "api/User/UpdateRegisterUser";
    exports.apiHasValidRegisterUser = "api/user/HasValidRegisterUser";
    exports.apiCheckRegisterUser = "api/User/CheckRegisterUser";
    exports.apiCreateUser = "api/User/CreateUser";
    exports.apiUpdateUser = "api/User/UpdateUserDetails";
    exports.apiUpdatePassword = "api/User/UpdatePassword";
    exports.apiGenerateNewPassword = "api/User/GenerateNewPassword/";
    exports.apiValidUserInformation = "api/User/ValidUserInformation";
    // Paths
    exports.login = "/login/";
    exports.user = "/createuser/";
    exports.main = "";
    exports.registerUser = "/registeruser";
    // Misc
    exports.apiPersonDetail = "api/Details/Person";
    exports.apiGetFamily = "api/Search/GetFamily?nin=";
    exports.apiGetHprCategories = "api/Search/GetHprCategories?code=";
    exports.apiGetTags = "api/Tag/all";
    exports.apiUpdateTag = "api/Tag";
    exports.apiComments = "api/Details/Comment";
    exports.apiLastestSync = "api/Surveillance/synchronized/";
    exports.colorSynced = "#70A8A3";
    exports.colorUnsynced = "#FF6A5C";
    exports.colorUndefined = "";
    exports.searchLocation = "search";
    exports.surveillanceLocation = "surveillance";
    exports.projectNames = ["Helsenorge", "E-Resept", "Kjernejournal", "Grunndata", "FIA-prosjektet", "Helsedirektoratet", "NHN"];
    exports.roleNames = ["Testleder", "Funksjonell tester", "Teknisk tester", "Utvikler", "Annet"];
    var RegisterNames;
    (function (RegisterNames) {
        RegisterNames[RegisterNames["Preg"] = 0] = "Preg";
        RegisterNames[RegisterNames["Hpr"] = 1] = "Hpr";
        RegisterNames[RegisterNames["FlrDoctor"] = 6] = "FlrDoctor";
        RegisterNames[RegisterNames["FlrPasient"] = 7] = "FlrPasient";
    })(RegisterNames = exports.RegisterNames || (exports.RegisterNames = {}));
    ;
    exports.sivilStatus = ["Ukjent", "Ugift", "Gift", "Enke(mann)", "Skilt", "Separert", "Registrert partner", "Separert partner", "Skilt partner", "Gjenlevende partner"];
    return module.exports;
});
$__System.registerDynamic("App/models/UtilityModels.js", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var SurveillanceStatus;
    (function (SurveillanceStatus) {
        SurveillanceStatus[SurveillanceStatus["Synced"] = 1] = "Synced";
        SurveillanceStatus[SurveillanceStatus["Unsynced"] = 2] = "Unsynced";
        SurveillanceStatus[SurveillanceStatus["Unknown"] = 3] = "Unknown";
    })(SurveillanceStatus = exports.SurveillanceStatus || (exports.SurveillanceStatus = {}));
    var OwnedBy;
    (function (OwnedBy) {
        OwnedBy[OwnedBy["Me"] = 1] = "Me";
        OwnedBy[OwnedBy["Project"] = 2] = "Project";
        OwnedBy[OwnedBy["All"] = 3] = "All";
    })(OwnedBy = exports.OwnedBy || (exports.OwnedBy = {}));
    var ChildViews;
    (function (ChildViews) {
        ChildViews[ChildViews["Search"] = 0] = "Search";
        ChildViews[ChildViews["Surveillance"] = 1] = "Surveillance";
        ChildViews[ChildViews["Dashboard"] = 2] = "Dashboard";
        ChildViews[ChildViews["Json"] = 3] = "Json";
        ChildViews[ChildViews["Diff"] = 4] = "Diff";
        ChildViews[ChildViews["None"] = 5] = "None";
        ChildViews[ChildViews["Family"] = 6] = "Family";
    })(ChildViews = exports.ChildViews || (exports.ChildViews = {}));
    var SearchType;
    (function (SearchType) {
        SearchType[SearchType["NIN"] = 1] = "NIN";
        SearchType[SearchType["Number"] = 2] = "Number";
        SearchType[SearchType["Name"] = 3] = "Name";
        SearchType[SearchType["Empty"] = 4] = "Empty";
        SearchType[SearchType["Query"] = 5] = "Query";
    })(SearchType = exports.SearchType || (exports.SearchType = {}));
    var OrderBy;
    (function (OrderBy) {
        OrderBy[OrderBy["HprName"] = 1] = "HprName";
        OrderBy[OrderBy["FodselsDato"] = 2] = "FodselsDato";
        OrderBy[OrderBy["PregName"] = 3] = "PregName";
    })(OrderBy = exports.OrderBy || (exports.OrderBy = {}));
    var SearchQuery = function () {
        function SearchQuery() {}
        return SearchQuery;
    }();
    exports.SearchQuery = SearchQuery;
    var HitInformation = function () {
        function HitInformation() {}
        return HitInformation;
    }();
    exports.HitInformation = HitInformation;
    var Detail = function () {
        function Detail() {}
        return Detail;
    }();
    exports.Detail = Detail;
    var SurveillanceItemInformation = function () {
        function SurveillanceItemInformation() {}
        return SurveillanceItemInformation;
    }();
    exports.SurveillanceItemInformation = SurveillanceItemInformation;
    var SurveillanceInformation = function () {
        function SurveillanceInformation() {}
        return SurveillanceInformation;
    }();
    exports.SurveillanceInformation = SurveillanceInformation;
    var ErrorMessage = function () {
        function ErrorMessage(message) {
            this.message = message;
        }
        return ErrorMessage;
    }();
    exports.ErrorMessage = ErrorMessage;
    return module.exports;
});
(function() {
var define = $__System.amdDefine;
(function(global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs/Subject'), require('rxjs/Observable')) : typeof define === 'function' && define.amd ? define("npm:@angular/core/bundles/core.umd.js", ["exports", "npm:rxjs/Subject.js", "npm:rxjs/Observable.js"], factory) : (factory((global.ng = global.ng || {}, global.ng.core = global.ng.core || {}), global.Rx, global.Rx));
}(this, function(exports, rxjs_Subject, rxjs_Observable) {
  'use strict';
  var globalScope;
  if (typeof window === 'undefined') {
    if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
      globalScope = (self);
    } else {
      globalScope = (global);
    }
  } else {
    globalScope = (window);
  }
  function scheduleMicroTask(fn) {
    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
  }
  var global$1 = globalScope;
  function getTypeNameForDebugging(type) {
    return type['name'] || typeof type;
  }
  global$1.assert = function assert(condition) {};
  function isPresent(obj) {
    return obj != null;
  }
  function isBlank(obj) {
    return obj == null;
  }
  function stringify(token) {
    if (typeof token === 'string') {
      return token;
    }
    if (token == null) {
      return '' + token;
    }
    if (token.overriddenName) {
      return "" + token.overriddenName;
    }
    if (token.name) {
      return "" + token.name;
    }
    var res = token.toString();
    var newLineIndex = res.indexOf('\n');
    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
  }
  function looseIdentical(a, b) {
    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
  }
  function isJsObject(o) {
    return o !== null && (typeof o === 'function' || typeof o === 'object');
  }
  function print(obj) {
    console.log(obj);
  }
  function warn(obj) {
    console.warn(obj);
  }
  var _symbolIterator = null;
  function getSymbolIterator() {
    if (!_symbolIterator) {
      if (((globalScope)).Symbol && Symbol.iterator) {
        _symbolIterator = Symbol.iterator;
      } else {
        var keys = Object.getOwnPropertyNames(Map.prototype);
        for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];
          if (key !== 'entries' && key !== 'size' && ((Map)).prototype[key] === Map.prototype['entries']) {
            _symbolIterator = key;
          }
        }
      }
    }
    return _symbolIterator;
  }
  function isPrimitive(obj) {
    return !isJsObject(obj);
  }
  var _nextClassId = 0;
  var Reflect = global$1.Reflect;
  function extractAnnotation(annotation) {
    if (typeof annotation === 'function' && annotation.hasOwnProperty('annotation')) {
      annotation = annotation.annotation;
    }
    return annotation;
  }
  function applyParams(fnOrArray, key) {
    if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function || fnOrArray === Number || fnOrArray === Array) {
      throw new Error("Can not use native " + stringify(fnOrArray) + " as constructor");
    }
    if (typeof fnOrArray === 'function') {
      return fnOrArray;
    }
    if (Array.isArray(fnOrArray)) {
      var annotations = fnOrArray;
      var annoLength = annotations.length - 1;
      var fn = fnOrArray[annoLength];
      if (typeof fn !== 'function') {
        throw new Error("Last position of Class method array must be Function in key " + key + " was '" + stringify(fn) + "'");
      }
      if (annoLength != fn.length) {
        throw new Error("Number of annotations (" + annoLength + ") does not match number of arguments (" + fn.length + ") in the function: " + stringify(fn));
      }
      var paramsAnnotations = [];
      for (var i = 0,
          ii = annotations.length - 1; i < ii; i++) {
        var paramAnnotations = [];
        paramsAnnotations.push(paramAnnotations);
        var annotation = annotations[i];
        if (Array.isArray(annotation)) {
          for (var j = 0; j < annotation.length; j++) {
            paramAnnotations.push(extractAnnotation(annotation[j]));
          }
        } else if (typeof annotation === 'function') {
          paramAnnotations.push(extractAnnotation(annotation));
        } else {
          paramAnnotations.push(annotation);
        }
      }
      Reflect.defineMetadata('parameters', paramsAnnotations, fn);
      return fn;
    }
    throw new Error("Only Function or Array is supported in Class definition for key '" + key + "' is '" + stringify(fnOrArray) + "'");
  }
  function Class(clsDef) {
    var constructor = applyParams(clsDef.hasOwnProperty('constructor') ? clsDef.constructor : undefined, 'constructor');
    var proto = constructor.prototype;
    if (clsDef.hasOwnProperty('extends')) {
      if (typeof clsDef.extends === 'function') {
        ((constructor)).prototype = proto = Object.create(((clsDef.extends)).prototype);
      } else {
        throw new Error("Class definition 'extends' property must be a constructor function was: " + stringify(clsDef.extends));
      }
    }
    for (var key in clsDef) {
      if (key !== 'extends' && key !== 'prototype' && clsDef.hasOwnProperty(key)) {
        proto[key] = applyParams(clsDef[key], key);
      }
    }
    if (this && this.annotations instanceof Array) {
      Reflect.defineMetadata('annotations', this.annotations, constructor);
    }
    var constructorName = constructor['name'];
    if (!constructorName || constructorName === 'constructor') {
      ((constructor))['overriddenName'] = "class" + _nextClassId++;
    }
    return (constructor);
  }
  function makeDecorator(name, props, parentClass, chainFn) {
    if (chainFn === void 0) {
      chainFn = null;
    }
    var metaCtor = makeMetadataCtor([props]);
    function DecoratorFactory(objOrType) {
      if (!(Reflect && Reflect.getOwnMetadata)) {
        throw 'reflect-metadata shim is required when using class decorators';
      }
      if (this instanceof DecoratorFactory) {
        metaCtor.call(this, objOrType);
        return this;
      }
      var annotationInstance = new ((DecoratorFactory))(objOrType);
      var chainAnnotation = typeof this === 'function' && Array.isArray(this.annotations) ? this.annotations : [];
      chainAnnotation.push(annotationInstance);
      var TypeDecorator = (function TypeDecorator(cls) {
        var annotations = Reflect.getOwnMetadata('annotations', cls) || [];
        annotations.push(annotationInstance);
        Reflect.defineMetadata('annotations', annotations, cls);
        return cls;
      });
      TypeDecorator.annotations = chainAnnotation;
      TypeDecorator.Class = Class;
      if (chainFn)
        chainFn(TypeDecorator);
      return TypeDecorator;
    }
    if (parentClass) {
      DecoratorFactory.prototype = Object.create(parentClass.prototype);
    }
    DecoratorFactory.prototype.toString = function() {
      return ("@" + name);
    };
    ((DecoratorFactory)).annotationCls = DecoratorFactory;
    return DecoratorFactory;
  }
  function makeMetadataCtor(props) {
    return function ctor() {
      var _this = this;
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i - 0] = arguments[_i];
      }
      props.forEach(function(prop, i) {
        var argVal = args[i];
        if (Array.isArray(prop)) {
          _this[prop[0]] = argVal === undefined ? prop[1] : argVal;
        } else {
          for (var propName in prop) {
            _this[propName] = argVal && argVal.hasOwnProperty(propName) ? argVal[propName] : prop[propName];
          }
        }
      });
    };
  }
  function makeParamDecorator(name, props, parentClass) {
    var metaCtor = makeMetadataCtor(props);
    function ParamDecoratorFactory() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i - 0] = arguments[_i];
      }
      if (this instanceof ParamDecoratorFactory) {
        metaCtor.apply(this, args);
        return this;
      }
      var annotationInstance = new ((_a = ((ParamDecoratorFactory))).bind.apply(_a, [void 0].concat(args)))();
      ((ParamDecorator)).annotation = annotationInstance;
      return ParamDecorator;
      function ParamDecorator(cls, unusedKey, index) {
        var parameters = Reflect.getOwnMetadata('parameters', cls) || [];
        while (parameters.length <= index) {
          parameters.push(null);
        }
        parameters[index] = parameters[index] || [];
        parameters[index].push(annotationInstance);
        Reflect.defineMetadata('parameters', parameters, cls);
        return cls;
      }
      var _a;
    }
    if (parentClass) {
      ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);
    }
    ParamDecoratorFactory.prototype.toString = function() {
      return ("@" + name);
    };
    ((ParamDecoratorFactory)).annotationCls = ParamDecoratorFactory;
    return ParamDecoratorFactory;
  }
  function makePropDecorator(name, props, parentClass) {
    var metaCtor = makeMetadataCtor(props);
    function PropDecoratorFactory() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i - 0] = arguments[_i];
      }
      if (this instanceof PropDecoratorFactory) {
        metaCtor.apply(this, args);
        return this;
      }
      var decoratorInstance = new ((_a = ((PropDecoratorFactory))).bind.apply(_a, [void 0].concat(args)))();
      return function PropDecorator(target, name) {
        var meta = Reflect.getOwnMetadata('propMetadata', target.constructor) || {};
        meta[name] = meta.hasOwnProperty(name) && meta[name] || [];
        meta[name].unshift(decoratorInstance);
        Reflect.defineMetadata('propMetadata', meta, target.constructor);
      };
      var _a;
    }
    if (parentClass) {
      PropDecoratorFactory.prototype = Object.create(parentClass.prototype);
    }
    PropDecoratorFactory.prototype.toString = function() {
      return ("@" + name);
    };
    ((PropDecoratorFactory)).annotationCls = PropDecoratorFactory;
    return PropDecoratorFactory;
  }
  var Inject = makeParamDecorator('Inject', [['token', undefined]]);
  var Optional = makeParamDecorator('Optional', []);
  var Injectable = (makeDecorator('Injectable', []));
  var Self = makeParamDecorator('Self', []);
  var SkipSelf = makeParamDecorator('SkipSelf', []);
  var Host = makeParamDecorator('Host', []);
  var OpaqueToken = (function() {
    function OpaqueToken(_desc) {
      this._desc = _desc;
    }
    OpaqueToken.prototype.toString = function() {
      return "Token " + this._desc;
    };
    OpaqueToken.decorators = [{type: Injectable}];
    OpaqueToken.ctorParameters = function() {
      return [null];
    };
    return OpaqueToken;
  }());
  var ANALYZE_FOR_ENTRY_COMPONENTS = new OpaqueToken('AnalyzeForEntryComponents');
  var Attribute = makeParamDecorator('Attribute', [['attributeName', undefined]]);
  var Query = (function() {
    function Query() {}
    return Query;
  }());
  var ContentChildren = (makePropDecorator('ContentChildren', [['selector', undefined], {
    first: false,
    isViewQuery: false,
    descendants: false,
    read: undefined
  }], Query));
  var ContentChild = makePropDecorator('ContentChild', [['selector', undefined], {
    first: true,
    isViewQuery: false,
    descendants: true,
    read: undefined
  }], Query);
  var ViewChildren = makePropDecorator('ViewChildren', [['selector', undefined], {
    first: false,
    isViewQuery: true,
    descendants: true,
    read: undefined
  }], Query);
  var ViewChild = makePropDecorator('ViewChild', [['selector', undefined], {
    first: true,
    isViewQuery: true,
    descendants: true,
    read: undefined
  }], Query);
  var ChangeDetectionStrategy = {};
  ChangeDetectionStrategy.OnPush = 0;
  ChangeDetectionStrategy.Default = 1;
  ChangeDetectionStrategy[ChangeDetectionStrategy.OnPush] = "OnPush";
  ChangeDetectionStrategy[ChangeDetectionStrategy.Default] = "Default";
  var ChangeDetectorStatus = {};
  ChangeDetectorStatus.CheckOnce = 0;
  ChangeDetectorStatus.Checked = 1;
  ChangeDetectorStatus.CheckAlways = 2;
  ChangeDetectorStatus.Detached = 3;
  ChangeDetectorStatus.Errored = 4;
  ChangeDetectorStatus.Destroyed = 5;
  ChangeDetectorStatus[ChangeDetectorStatus.CheckOnce] = "CheckOnce";
  ChangeDetectorStatus[ChangeDetectorStatus.Checked] = "Checked";
  ChangeDetectorStatus[ChangeDetectorStatus.CheckAlways] = "CheckAlways";
  ChangeDetectorStatus[ChangeDetectorStatus.Detached] = "Detached";
  ChangeDetectorStatus[ChangeDetectorStatus.Errored] = "Errored";
  ChangeDetectorStatus[ChangeDetectorStatus.Destroyed] = "Destroyed";
  function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {
    return isBlank(changeDetectionStrategy) || changeDetectionStrategy === ChangeDetectionStrategy.Default;
  }
  var Directive = (makeDecorator('Directive', {
    selector: undefined,
    inputs: undefined,
    outputs: undefined,
    host: undefined,
    providers: undefined,
    exportAs: undefined,
    queries: undefined
  }));
  var Component = (makeDecorator('Component', {
    selector: undefined,
    inputs: undefined,
    outputs: undefined,
    host: undefined,
    exportAs: undefined,
    moduleId: undefined,
    providers: undefined,
    viewProviders: undefined,
    changeDetection: ChangeDetectionStrategy.Default,
    queries: undefined,
    templateUrl: undefined,
    template: undefined,
    styleUrls: undefined,
    styles: undefined,
    animations: undefined,
    encapsulation: undefined,
    interpolation: undefined,
    entryComponents: undefined
  }, Directive));
  var Pipe = (makeDecorator('Pipe', {
    name: undefined,
    pure: true
  }));
  var Input = makePropDecorator('Input', [['bindingPropertyName', undefined]]);
  var Output = makePropDecorator('Output', [['bindingPropertyName', undefined]]);
  var HostBinding = makePropDecorator('HostBinding', [['hostPropertyName', undefined]]);
  var HostListener = makePropDecorator('HostListener', [['eventName', undefined], ['args', []]]);
  var LifecycleHooks = {};
  LifecycleHooks.OnInit = 0;
  LifecycleHooks.OnDestroy = 1;
  LifecycleHooks.DoCheck = 2;
  LifecycleHooks.OnChanges = 3;
  LifecycleHooks.AfterContentInit = 4;
  LifecycleHooks.AfterContentChecked = 5;
  LifecycleHooks.AfterViewInit = 6;
  LifecycleHooks.AfterViewChecked = 7;
  LifecycleHooks[LifecycleHooks.OnInit] = "OnInit";
  LifecycleHooks[LifecycleHooks.OnDestroy] = "OnDestroy";
  LifecycleHooks[LifecycleHooks.DoCheck] = "DoCheck";
  LifecycleHooks[LifecycleHooks.OnChanges] = "OnChanges";
  LifecycleHooks[LifecycleHooks.AfterContentInit] = "AfterContentInit";
  LifecycleHooks[LifecycleHooks.AfterContentChecked] = "AfterContentChecked";
  LifecycleHooks[LifecycleHooks.AfterViewInit] = "AfterViewInit";
  LifecycleHooks[LifecycleHooks.AfterViewChecked] = "AfterViewChecked";
  var LIFECYCLE_HOOKS_VALUES = [LifecycleHooks.OnInit, LifecycleHooks.OnDestroy, LifecycleHooks.DoCheck, LifecycleHooks.OnChanges, LifecycleHooks.AfterContentInit, LifecycleHooks.AfterContentChecked, LifecycleHooks.AfterViewInit, LifecycleHooks.AfterViewChecked];
  var OnChanges = (function() {
    function OnChanges() {}
    OnChanges.prototype.ngOnChanges = function(changes) {};
    return OnChanges;
  }());
  var OnInit = (function() {
    function OnInit() {}
    OnInit.prototype.ngOnInit = function() {};
    return OnInit;
  }());
  var DoCheck = (function() {
    function DoCheck() {}
    DoCheck.prototype.ngDoCheck = function() {};
    return DoCheck;
  }());
  var OnDestroy = (function() {
    function OnDestroy() {}
    OnDestroy.prototype.ngOnDestroy = function() {};
    return OnDestroy;
  }());
  var AfterContentInit = (function() {
    function AfterContentInit() {}
    AfterContentInit.prototype.ngAfterContentInit = function() {};
    return AfterContentInit;
  }());
  var AfterContentChecked = (function() {
    function AfterContentChecked() {}
    AfterContentChecked.prototype.ngAfterContentChecked = function() {};
    return AfterContentChecked;
  }());
  var AfterViewInit = (function() {
    function AfterViewInit() {}
    AfterViewInit.prototype.ngAfterViewInit = function() {};
    return AfterViewInit;
  }());
  var AfterViewChecked = (function() {
    function AfterViewChecked() {}
    AfterViewChecked.prototype.ngAfterViewChecked = function() {};
    return AfterViewChecked;
  }());
  var CUSTOM_ELEMENTS_SCHEMA = {name: 'custom-elements'};
  var NO_ERRORS_SCHEMA = {name: 'no-errors-schema'};
  var NgModule = (makeDecorator('NgModule', {
    providers: undefined,
    declarations: undefined,
    imports: undefined,
    exports: undefined,
    entryComponents: undefined,
    bootstrap: undefined,
    schemas: undefined,
    id: undefined
  }));
  var ViewEncapsulation = {};
  ViewEncapsulation.Emulated = 0;
  ViewEncapsulation.Native = 1;
  ViewEncapsulation.None = 2;
  ViewEncapsulation[ViewEncapsulation.Emulated] = "Emulated";
  ViewEncapsulation[ViewEncapsulation.Native] = "Native";
  ViewEncapsulation[ViewEncapsulation.None] = "None";
  var ViewMetadata = (function() {
    function ViewMetadata(_a) {
      var _b = _a === void 0 ? {} : _a,
          templateUrl = _b.templateUrl,
          template = _b.template,
          encapsulation = _b.encapsulation,
          styles = _b.styles,
          styleUrls = _b.styleUrls,
          animations = _b.animations,
          interpolation = _b.interpolation;
      this.templateUrl = templateUrl;
      this.template = template;
      this.styleUrls = styleUrls;
      this.styles = styles;
      this.encapsulation = encapsulation;
      this.animations = animations;
      this.interpolation = interpolation;
    }
    return ViewMetadata;
  }());
  var Version = (function() {
    function Version(full) {
      this.full = full;
    }
    Object.defineProperty(Version.prototype, "major", {
      get: function() {
        return this.full.split('.')[0];
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Version.prototype, "minor", {
      get: function() {
        return this.full.split('.')[1];
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Version.prototype, "patch", {
      get: function() {
        return this.full.split('.').slice(2).join('.');
      },
      enumerable: true,
      configurable: true
    });
    return Version;
  }());
  var VERSION = new Version('2.4.2');
  function forwardRef(forwardRefFn) {
    ((forwardRefFn)).__forward_ref__ = forwardRef;
    ((forwardRefFn)).toString = function() {
      return stringify(this());
    };
    return (((forwardRefFn)));
  }
  function resolveForwardRef(type) {
    if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__') && type.__forward_ref__ === forwardRef) {
      return ((type))();
    } else {
      return type;
    }
  }
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  function unimplemented() {
    throw new Error('unimplemented');
  }
  var BaseError = (function(_super) {
    __extends(BaseError, _super);
    function BaseError(message) {
      _super.call(this, message);
      var nativeError = new Error(message);
      this._nativeError = nativeError;
    }
    Object.defineProperty(BaseError.prototype, "message", {
      get: function() {
        return this._nativeError.message;
      },
      set: function(message) {
        this._nativeError.message = message;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(BaseError.prototype, "name", {
      get: function() {
        return this._nativeError.name;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(BaseError.prototype, "stack", {
      get: function() {
        return ((this._nativeError)).stack;
      },
      set: function(value) {
        ((this._nativeError)).stack = value;
      },
      enumerable: true,
      configurable: true
    });
    BaseError.prototype.toString = function() {
      return this._nativeError.toString();
    };
    return BaseError;
  }(Error));
  var WrappedError = (function(_super) {
    __extends(WrappedError, _super);
    function WrappedError(message, error) {
      _super.call(this, message + " caused by: " + (error instanceof Error ? error.message : error));
      this.originalError = error;
    }
    Object.defineProperty(WrappedError.prototype, "stack", {
      get: function() {
        return (((this.originalError instanceof Error ? this.originalError : this._nativeError))).stack;
      },
      enumerable: true,
      configurable: true
    });
    return WrappedError;
  }(BaseError));
  var _THROW_IF_NOT_FOUND = new Object();
  var THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
  var _NullInjector = (function() {
    function _NullInjector() {}
    _NullInjector.prototype.get = function(token, notFoundValue) {
      if (notFoundValue === void 0) {
        notFoundValue = _THROW_IF_NOT_FOUND;
      }
      if (notFoundValue === _THROW_IF_NOT_FOUND) {
        throw new Error("No provider for " + stringify(token) + "!");
      }
      return notFoundValue;
    };
    return _NullInjector;
  }());
  var Injector = (function() {
    function Injector() {}
    Injector.prototype.get = function(token, notFoundValue) {
      return unimplemented();
    };
    Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
    Injector.NULL = new _NullInjector();
    return Injector;
  }());
  var __extends$1 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  function findFirstClosedCycle(keys) {
    var res = [];
    for (var i = 0; i < keys.length; ++i) {
      if (res.indexOf(keys[i]) > -1) {
        res.push(keys[i]);
        return res;
      }
      res.push(keys[i]);
    }
    return res;
  }
  function constructResolvingPath(keys) {
    if (keys.length > 1) {
      var reversed = findFirstClosedCycle(keys.slice().reverse());
      var tokenStrs = reversed.map(function(k) {
        return stringify(k.token);
      });
      return ' (' + tokenStrs.join(' -> ') + ')';
    }
    return '';
  }
  var AbstractProviderError = (function(_super) {
    __extends$1(AbstractProviderError, _super);
    function AbstractProviderError(injector, key, constructResolvingMessage) {
      _super.call(this, 'DI Error');
      this.keys = [key];
      this.injectors = [injector];
      this.constructResolvingMessage = constructResolvingMessage;
      this.message = this.constructResolvingMessage(this.keys);
    }
    AbstractProviderError.prototype.addKey = function(injector, key) {
      this.injectors.push(injector);
      this.keys.push(key);
      this.message = this.constructResolvingMessage(this.keys);
    };
    return AbstractProviderError;
  }(BaseError));
  var NoProviderError = (function(_super) {
    __extends$1(NoProviderError, _super);
    function NoProviderError(injector, key) {
      _super.call(this, injector, key, function(keys) {
        var first = stringify(keys[0].token);
        return "No provider for " + first + "!" + constructResolvingPath(keys);
      });
    }
    return NoProviderError;
  }(AbstractProviderError));
  var CyclicDependencyError = (function(_super) {
    __extends$1(CyclicDependencyError, _super);
    function CyclicDependencyError(injector, key) {
      _super.call(this, injector, key, function(keys) {
        return "Cannot instantiate cyclic dependency!" + constructResolvingPath(keys);
      });
    }
    return CyclicDependencyError;
  }(AbstractProviderError));
  var InstantiationError = (function(_super) {
    __extends$1(InstantiationError, _super);
    function InstantiationError(injector, originalException, originalStack, key) {
      _super.call(this, 'DI Error', originalException);
      this.keys = [key];
      this.injectors = [injector];
    }
    InstantiationError.prototype.addKey = function(injector, key) {
      this.injectors.push(injector);
      this.keys.push(key);
    };
    Object.defineProperty(InstantiationError.prototype, "message", {
      get: function() {
        var first = stringify(this.keys[0].token);
        return this.originalError.message + ": Error during instantiation of " + first + "!" + constructResolvingPath(this.keys) + ".";
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(InstantiationError.prototype, "causeKey", {
      get: function() {
        return this.keys[0];
      },
      enumerable: true,
      configurable: true
    });
    return InstantiationError;
  }(WrappedError));
  var InvalidProviderError = (function(_super) {
    __extends$1(InvalidProviderError, _super);
    function InvalidProviderError(provider) {
      _super.call(this, "Invalid provider - only instances of Provider and Type are allowed, got: " + provider);
    }
    return InvalidProviderError;
  }(BaseError));
  var NoAnnotationError = (function(_super) {
    __extends$1(NoAnnotationError, _super);
    function NoAnnotationError(typeOrFunc, params) {
      _super.call(this, NoAnnotationError._genMessage(typeOrFunc, params));
    }
    NoAnnotationError._genMessage = function(typeOrFunc, params) {
      var signature = [];
      for (var i = 0,
          ii = params.length; i < ii; i++) {
        var parameter = params[i];
        if (!parameter || parameter.length == 0) {
          signature.push('?');
        } else {
          signature.push(parameter.map(stringify).join(' '));
        }
      }
      return 'Cannot resolve all parameters for \'' + stringify(typeOrFunc) + '\'(' + signature.join(', ') + '). ' + 'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \'' + stringify(typeOrFunc) + '\' is decorated with Injectable.';
    };
    return NoAnnotationError;
  }(BaseError));
  var OutOfBoundsError = (function(_super) {
    __extends$1(OutOfBoundsError, _super);
    function OutOfBoundsError(index) {
      _super.call(this, "Index " + index + " is out-of-bounds.");
    }
    return OutOfBoundsError;
  }(BaseError));
  var MixingMultiProvidersWithRegularProvidersError = (function(_super) {
    __extends$1(MixingMultiProvidersWithRegularProvidersError, _super);
    function MixingMultiProvidersWithRegularProvidersError(provider1, provider2) {
      _super.call(this, 'Cannot mix multi providers and regular providers, got: ' + provider1.toString() + ' ' + provider2.toString());
    }
    return MixingMultiProvidersWithRegularProvidersError;
  }(BaseError));
  var ReflectiveKey = (function() {
    function ReflectiveKey(token, id) {
      this.token = token;
      this.id = id;
      if (!token) {
        throw new Error('Token must be defined!');
      }
    }
    Object.defineProperty(ReflectiveKey.prototype, "displayName", {
      get: function() {
        return stringify(this.token);
      },
      enumerable: true,
      configurable: true
    });
    ReflectiveKey.get = function(token) {
      return _globalKeyRegistry.get(resolveForwardRef(token));
    };
    Object.defineProperty(ReflectiveKey, "numberOfKeys", {
      get: function() {
        return _globalKeyRegistry.numberOfKeys;
      },
      enumerable: true,
      configurable: true
    });
    return ReflectiveKey;
  }());
  var KeyRegistry = (function() {
    function KeyRegistry() {
      this._allKeys = new Map();
    }
    KeyRegistry.prototype.get = function(token) {
      if (token instanceof ReflectiveKey)
        return token;
      if (this._allKeys.has(token)) {
        return this._allKeys.get(token);
      }
      var newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);
      this._allKeys.set(token, newKey);
      return newKey;
    };
    Object.defineProperty(KeyRegistry.prototype, "numberOfKeys", {
      get: function() {
        return this._allKeys.size;
      },
      enumerable: true,
      configurable: true
    });
    return KeyRegistry;
  }());
  var _globalKeyRegistry = new KeyRegistry();
  var Type = Function;
  function isType(v) {
    return typeof v === 'function';
  }
  var DELEGATE_CTOR = /^function\s+\S+\(\)\s*{\s*("use strict";)?\s*(return\s+)?\S+\.apply\(this,\s*arguments\)/;
  var ReflectionCapabilities = (function() {
    function ReflectionCapabilities(reflect) {
      this._reflect = reflect || global$1.Reflect;
    }
    ReflectionCapabilities.prototype.isReflectionEnabled = function() {
      return true;
    };
    ReflectionCapabilities.prototype.factory = function(t) {
      return function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i - 0] = arguments[_i];
        }
        return new (t.bind.apply(t, [void 0].concat(args)))();
      };
    };
    ReflectionCapabilities.prototype._zipTypesAndAnnotations = function(paramTypes, paramAnnotations) {
      var result;
      if (typeof paramTypes === 'undefined') {
        result = new Array(paramAnnotations.length);
      } else {
        result = new Array(paramTypes.length);
      }
      for (var i = 0; i < result.length; i++) {
        if (typeof paramTypes === 'undefined') {
          result[i] = [];
        } else if (paramTypes[i] != Object) {
          result[i] = [paramTypes[i]];
        } else {
          result[i] = [];
        }
        if (paramAnnotations && isPresent(paramAnnotations[i])) {
          result[i] = result[i].concat(paramAnnotations[i]);
        }
      }
      return result;
    };
    ReflectionCapabilities.prototype._ownParameters = function(type, parentCtor) {
      if (DELEGATE_CTOR.exec(type.toString())) {
        return null;
      }
      if (((type)).parameters && ((type)).parameters !== parentCtor.parameters) {
        return ((type)).parameters;
      }
      var tsickleCtorParams = ((type)).ctorParameters;
      if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {
        var ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;
        var paramTypes = ctorParameters.map(function(ctorParam) {
          return ctorParam && ctorParam.type;
        });
        var paramAnnotations = ctorParameters.map(function(ctorParam) {
          return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);
        });
        return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
      }
      if (isPresent(this._reflect) && isPresent(this._reflect.getOwnMetadata)) {
        var paramAnnotations = this._reflect.getOwnMetadata('parameters', type);
        var paramTypes = this._reflect.getOwnMetadata('design:paramtypes', type);
        if (paramTypes || paramAnnotations) {
          return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
        }
      }
      return new Array(((type.length))).fill(undefined);
    };
    ReflectionCapabilities.prototype.parameters = function(type) {
      if (!isType(type)) {
        return [];
      }
      var parentCtor = getParentCtor(type);
      var parameters = this._ownParameters(type, parentCtor);
      if (!parameters && parentCtor !== Object) {
        parameters = this.parameters(parentCtor);
      }
      return parameters || [];
    };
    ReflectionCapabilities.prototype._ownAnnotations = function(typeOrFunc, parentCtor) {
      if (((typeOrFunc)).annotations && ((typeOrFunc)).annotations !== parentCtor.annotations) {
        var annotations = ((typeOrFunc)).annotations;
        if (typeof annotations === 'function' && annotations.annotations) {
          annotations = annotations.annotations;
        }
        return annotations;
      }
      if (((typeOrFunc)).decorators && ((typeOrFunc)).decorators !== parentCtor.decorators) {
        return convertTsickleDecoratorIntoMetadata(((typeOrFunc)).decorators);
      }
      if (this._reflect && this._reflect.getOwnMetadata) {
        return this._reflect.getOwnMetadata('annotations', typeOrFunc);
      }
    };
    ReflectionCapabilities.prototype.annotations = function(typeOrFunc) {
      if (!isType(typeOrFunc)) {
        return [];
      }
      var parentCtor = getParentCtor(typeOrFunc);
      var ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];
      var parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];
      return parentAnnotations.concat(ownAnnotations);
    };
    ReflectionCapabilities.prototype._ownPropMetadata = function(typeOrFunc, parentCtor) {
      if (((typeOrFunc)).propMetadata && ((typeOrFunc)).propMetadata !== parentCtor.propMetadata) {
        var propMetadata = ((typeOrFunc)).propMetadata;
        if (typeof propMetadata === 'function' && propMetadata.propMetadata) {
          propMetadata = propMetadata.propMetadata;
        }
        return propMetadata;
      }
      if (((typeOrFunc)).propDecorators && ((typeOrFunc)).propDecorators !== parentCtor.propDecorators) {
        var propDecorators_1 = ((typeOrFunc)).propDecorators;
        var propMetadata_1 = ({});
        Object.keys(propDecorators_1).forEach(function(prop) {
          propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);
        });
        return propMetadata_1;
      }
      if (this._reflect && this._reflect.getOwnMetadata) {
        return this._reflect.getOwnMetadata('propMetadata', typeOrFunc);
      }
    };
    ReflectionCapabilities.prototype.propMetadata = function(typeOrFunc) {
      if (!isType(typeOrFunc)) {
        return {};
      }
      var parentCtor = getParentCtor(typeOrFunc);
      var propMetadata = {};
      if (parentCtor !== Object) {
        var parentPropMetadata_1 = this.propMetadata(parentCtor);
        Object.keys(parentPropMetadata_1).forEach(function(propName) {
          propMetadata[propName] = parentPropMetadata_1[propName];
        });
      }
      var ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);
      if (ownPropMetadata) {
        Object.keys(ownPropMetadata).forEach(function(propName) {
          var decorators = [];
          if (propMetadata.hasOwnProperty(propName)) {
            decorators.push.apply(decorators, propMetadata[propName]);
          }
          decorators.push.apply(decorators, ownPropMetadata[propName]);
          propMetadata[propName] = decorators;
        });
      }
      return propMetadata;
    };
    ReflectionCapabilities.prototype.hasLifecycleHook = function(type, lcProperty) {
      return type instanceof Type && lcProperty in type.prototype;
    };
    ReflectionCapabilities.prototype.getter = function(name) {
      return ((new Function('o', 'return o.' + name + ';')));
    };
    ReflectionCapabilities.prototype.setter = function(name) {
      return ((new Function('o', 'v', 'return o.' + name + ' = v;')));
    };
    ReflectionCapabilities.prototype.method = function(name) {
      var functionBody = "if (!o." + name + ") throw new Error('\"" + name + "\" is undefined');\n        return o." + name + ".apply(o, args);";
      return ((new Function('o', 'args', functionBody)));
    };
    ReflectionCapabilities.prototype.importUri = function(type) {
      if (typeof type === 'object' && type['filePath']) {
        return type['filePath'];
      }
      return "./" + stringify(type);
    };
    ReflectionCapabilities.prototype.resolveIdentifier = function(name, moduleUrl, runtime) {
      return runtime;
    };
    ReflectionCapabilities.prototype.resolveEnum = function(enumIdentifier, name) {
      return enumIdentifier[name];
    };
    return ReflectionCapabilities;
  }());
  function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {
    if (!decoratorInvocations) {
      return [];
    }
    return decoratorInvocations.map(function(decoratorInvocation) {
      var decoratorType = decoratorInvocation.type;
      var annotationCls = decoratorType.annotationCls;
      var annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];
      return new (annotationCls.bind.apply(annotationCls, [void 0].concat(annotationArgs)))();
    });
  }
  function getParentCtor(ctor) {
    var parentProto = Object.getPrototypeOf(ctor.prototype);
    var parentCtor = parentProto ? parentProto.constructor : null;
    return parentCtor || Object;
  }
  var ReflectorReader = (function() {
    function ReflectorReader() {}
    ReflectorReader.prototype.parameters = function(typeOrFunc) {};
    ReflectorReader.prototype.annotations = function(typeOrFunc) {};
    ReflectorReader.prototype.propMetadata = function(typeOrFunc) {};
    ReflectorReader.prototype.importUri = function(typeOrFunc) {};
    ReflectorReader.prototype.resolveIdentifier = function(name, moduleUrl, runtime) {};
    ReflectorReader.prototype.resolveEnum = function(identifier, name) {};
    return ReflectorReader;
  }());
  var __extends$2 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Reflector = (function(_super) {
    __extends$2(Reflector, _super);
    function Reflector(reflectionCapabilities) {
      _super.call(this);
      this.reflectionCapabilities = reflectionCapabilities;
    }
    Reflector.prototype.updateCapabilities = function(caps) {
      this.reflectionCapabilities = caps;
    };
    Reflector.prototype.factory = function(type) {
      return this.reflectionCapabilities.factory(type);
    };
    Reflector.prototype.parameters = function(typeOrFunc) {
      return this.reflectionCapabilities.parameters(typeOrFunc);
    };
    Reflector.prototype.annotations = function(typeOrFunc) {
      return this.reflectionCapabilities.annotations(typeOrFunc);
    };
    Reflector.prototype.propMetadata = function(typeOrFunc) {
      return this.reflectionCapabilities.propMetadata(typeOrFunc);
    };
    Reflector.prototype.hasLifecycleHook = function(type, lcProperty) {
      return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);
    };
    Reflector.prototype.getter = function(name) {
      return this.reflectionCapabilities.getter(name);
    };
    Reflector.prototype.setter = function(name) {
      return this.reflectionCapabilities.setter(name);
    };
    Reflector.prototype.method = function(name) {
      return this.reflectionCapabilities.method(name);
    };
    Reflector.prototype.importUri = function(type) {
      return this.reflectionCapabilities.importUri(type);
    };
    Reflector.prototype.resolveIdentifier = function(name, moduleUrl, runtime) {
      return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, runtime);
    };
    Reflector.prototype.resolveEnum = function(identifier, name) {
      return this.reflectionCapabilities.resolveEnum(identifier, name);
    };
    return Reflector;
  }(ReflectorReader));
  var reflector = new Reflector(new ReflectionCapabilities());
  var ReflectiveDependency = (function() {
    function ReflectiveDependency(key, optional, lowerBoundVisibility, upperBoundVisibility, properties) {
      this.key = key;
      this.optional = optional;
      this.lowerBoundVisibility = lowerBoundVisibility;
      this.upperBoundVisibility = upperBoundVisibility;
      this.properties = properties;
    }
    ReflectiveDependency.fromKey = function(key) {
      return new ReflectiveDependency(key, false, null, null, []);
    };
    return ReflectiveDependency;
  }());
  var _EMPTY_LIST = [];
  var ResolvedReflectiveProvider_ = (function() {
    function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {
      this.key = key;
      this.resolvedFactories = resolvedFactories;
      this.multiProvider = multiProvider;
    }
    Object.defineProperty(ResolvedReflectiveProvider_.prototype, "resolvedFactory", {
      get: function() {
        return this.resolvedFactories[0];
      },
      enumerable: true,
      configurable: true
    });
    return ResolvedReflectiveProvider_;
  }());
  var ResolvedReflectiveFactory = (function() {
    function ResolvedReflectiveFactory(factory, dependencies) {
      this.factory = factory;
      this.dependencies = dependencies;
    }
    return ResolvedReflectiveFactory;
  }());
  function resolveReflectiveFactory(provider) {
    var factoryFn;
    var resolvedDeps;
    if (provider.useClass) {
      var useClass = resolveForwardRef(provider.useClass);
      factoryFn = reflector.factory(useClass);
      resolvedDeps = _dependenciesFor(useClass);
    } else if (provider.useExisting) {
      factoryFn = function(aliasInstance) {
        return aliasInstance;
      };
      resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];
    } else if (provider.useFactory) {
      factoryFn = provider.useFactory;
      resolvedDeps = constructDependencies(provider.useFactory, provider.deps);
    } else {
      factoryFn = function() {
        return provider.useValue;
      };
      resolvedDeps = _EMPTY_LIST;
    }
    return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);
  }
  function resolveReflectiveProvider(provider) {
    return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi);
  }
  function resolveReflectiveProviders(providers) {
    var normalized = _normalizeProviders(providers, []);
    var resolved = normalized.map(resolveReflectiveProvider);
    var resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());
    return Array.from(resolvedProviderMap.values());
  }
  function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {
    for (var i = 0; i < providers.length; i++) {
      var provider = providers[i];
      var existing = normalizedProvidersMap.get(provider.key.id);
      if (existing) {
        if (provider.multiProvider !== existing.multiProvider) {
          throw new MixingMultiProvidersWithRegularProvidersError(existing, provider);
        }
        if (provider.multiProvider) {
          for (var j = 0; j < provider.resolvedFactories.length; j++) {
            existing.resolvedFactories.push(provider.resolvedFactories[j]);
          }
        } else {
          normalizedProvidersMap.set(provider.key.id, provider);
        }
      } else {
        var resolvedProvider = void 0;
        if (provider.multiProvider) {
          resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);
        } else {
          resolvedProvider = provider;
        }
        normalizedProvidersMap.set(provider.key.id, resolvedProvider);
      }
    }
    return normalizedProvidersMap;
  }
  function _normalizeProviders(providers, res) {
    providers.forEach(function(b) {
      if (b instanceof Type) {
        res.push({
          provide: b,
          useClass: b
        });
      } else if (b && typeof b == 'object' && ((b)).provide !== undefined) {
        res.push((b));
      } else if (b instanceof Array) {
        _normalizeProviders(b, res);
      } else {
        throw new InvalidProviderError(b);
      }
    });
    return res;
  }
  function constructDependencies(typeOrFunc, dependencies) {
    if (!dependencies) {
      return _dependenciesFor(typeOrFunc);
    } else {
      var params_1 = dependencies.map(function(t) {
        return [t];
      });
      return dependencies.map(function(t) {
        return _extractToken(typeOrFunc, t, params_1);
      });
    }
  }
  function _dependenciesFor(typeOrFunc) {
    var params = reflector.parameters(typeOrFunc);
    if (!params)
      return [];
    if (params.some(function(p) {
      return p == null;
    })) {
      throw new NoAnnotationError(typeOrFunc, params);
    }
    return params.map(function(p) {
      return _extractToken(typeOrFunc, p, params);
    });
  }
  function _extractToken(typeOrFunc, metadata, params) {
    var depProps = [];
    var token = null;
    var optional = false;
    if (!Array.isArray(metadata)) {
      if (metadata instanceof Inject) {
        return _createDependency(metadata.token, optional, null, null, depProps);
      } else {
        return _createDependency(metadata, optional, null, null, depProps);
      }
    }
    var lowerBoundVisibility = null;
    var upperBoundVisibility = null;
    for (var i = 0; i < metadata.length; ++i) {
      var paramMetadata = metadata[i];
      if (paramMetadata instanceof Type) {
        token = paramMetadata;
      } else if (paramMetadata instanceof Inject) {
        token = paramMetadata.token;
      } else if (paramMetadata instanceof Optional) {
        optional = true;
      } else if (paramMetadata instanceof Self) {
        upperBoundVisibility = paramMetadata;
      } else if (paramMetadata instanceof Host) {
        upperBoundVisibility = paramMetadata;
      } else if (paramMetadata instanceof SkipSelf) {
        lowerBoundVisibility = paramMetadata;
      }
    }
    token = resolveForwardRef(token);
    if (token != null) {
      return _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps);
    } else {
      throw new NoAnnotationError(typeOrFunc, params);
    }
  }
  function _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps) {
    return new ReflectiveDependency(ReflectiveKey.get(token), optional, lowerBoundVisibility, upperBoundVisibility, depProps);
  }
  var _MAX_CONSTRUCTION_COUNTER = 10;
  var UNDEFINED = new Object();
  var ReflectiveProtoInjectorInlineStrategy = (function() {
    function ReflectiveProtoInjectorInlineStrategy(protoEI, providers) {
      this.provider0 = null;
      this.provider1 = null;
      this.provider2 = null;
      this.provider3 = null;
      this.provider4 = null;
      this.provider5 = null;
      this.provider6 = null;
      this.provider7 = null;
      this.provider8 = null;
      this.provider9 = null;
      this.keyId0 = null;
      this.keyId1 = null;
      this.keyId2 = null;
      this.keyId3 = null;
      this.keyId4 = null;
      this.keyId5 = null;
      this.keyId6 = null;
      this.keyId7 = null;
      this.keyId8 = null;
      this.keyId9 = null;
      var length = providers.length;
      if (length > 0) {
        this.provider0 = providers[0];
        this.keyId0 = providers[0].key.id;
      }
      if (length > 1) {
        this.provider1 = providers[1];
        this.keyId1 = providers[1].key.id;
      }
      if (length > 2) {
        this.provider2 = providers[2];
        this.keyId2 = providers[2].key.id;
      }
      if (length > 3) {
        this.provider3 = providers[3];
        this.keyId3 = providers[3].key.id;
      }
      if (length > 4) {
        this.provider4 = providers[4];
        this.keyId4 = providers[4].key.id;
      }
      if (length > 5) {
        this.provider5 = providers[5];
        this.keyId5 = providers[5].key.id;
      }
      if (length > 6) {
        this.provider6 = providers[6];
        this.keyId6 = providers[6].key.id;
      }
      if (length > 7) {
        this.provider7 = providers[7];
        this.keyId7 = providers[7].key.id;
      }
      if (length > 8) {
        this.provider8 = providers[8];
        this.keyId8 = providers[8].key.id;
      }
      if (length > 9) {
        this.provider9 = providers[9];
        this.keyId9 = providers[9].key.id;
      }
    }
    ReflectiveProtoInjectorInlineStrategy.prototype.getProviderAtIndex = function(index) {
      if (index == 0)
        return this.provider0;
      if (index == 1)
        return this.provider1;
      if (index == 2)
        return this.provider2;
      if (index == 3)
        return this.provider3;
      if (index == 4)
        return this.provider4;
      if (index == 5)
        return this.provider5;
      if (index == 6)
        return this.provider6;
      if (index == 7)
        return this.provider7;
      if (index == 8)
        return this.provider8;
      if (index == 9)
        return this.provider9;
      throw new OutOfBoundsError(index);
    };
    ReflectiveProtoInjectorInlineStrategy.prototype.createInjectorStrategy = function(injector) {
      return new ReflectiveInjectorInlineStrategy(injector, this);
    };
    return ReflectiveProtoInjectorInlineStrategy;
  }());
  var ReflectiveProtoInjectorDynamicStrategy = (function() {
    function ReflectiveProtoInjectorDynamicStrategy(protoInj, providers) {
      this.providers = providers;
      var len = providers.length;
      this.keyIds = new Array(len);
      for (var i = 0; i < len; i++) {
        this.keyIds[i] = providers[i].key.id;
      }
    }
    ReflectiveProtoInjectorDynamicStrategy.prototype.getProviderAtIndex = function(index) {
      if (index < 0 || index >= this.providers.length) {
        throw new OutOfBoundsError(index);
      }
      return this.providers[index];
    };
    ReflectiveProtoInjectorDynamicStrategy.prototype.createInjectorStrategy = function(ei) {
      return new ReflectiveInjectorDynamicStrategy(this, ei);
    };
    return ReflectiveProtoInjectorDynamicStrategy;
  }());
  var ReflectiveProtoInjector = (function() {
    function ReflectiveProtoInjector(providers) {
      this.numberOfProviders = providers.length;
      this._strategy = providers.length > _MAX_CONSTRUCTION_COUNTER ? new ReflectiveProtoInjectorDynamicStrategy(this, providers) : new ReflectiveProtoInjectorInlineStrategy(this, providers);
    }
    ReflectiveProtoInjector.fromResolvedProviders = function(providers) {
      return new ReflectiveProtoInjector(providers);
    };
    ReflectiveProtoInjector.prototype.getProviderAtIndex = function(index) {
      return this._strategy.getProviderAtIndex(index);
    };
    return ReflectiveProtoInjector;
  }());
  var ReflectiveInjectorInlineStrategy = (function() {
    function ReflectiveInjectorInlineStrategy(injector, protoStrategy) {
      this.injector = injector;
      this.protoStrategy = protoStrategy;
      this.obj0 = UNDEFINED;
      this.obj1 = UNDEFINED;
      this.obj2 = UNDEFINED;
      this.obj3 = UNDEFINED;
      this.obj4 = UNDEFINED;
      this.obj5 = UNDEFINED;
      this.obj6 = UNDEFINED;
      this.obj7 = UNDEFINED;
      this.obj8 = UNDEFINED;
      this.obj9 = UNDEFINED;
    }
    ReflectiveInjectorInlineStrategy.prototype.resetConstructionCounter = function() {
      this.injector._constructionCounter = 0;
    };
    ReflectiveInjectorInlineStrategy.prototype.instantiateProvider = function(provider) {
      return this.injector._new(provider);
    };
    ReflectiveInjectorInlineStrategy.prototype.getObjByKeyId = function(keyId) {
      var p = this.protoStrategy;
      var inj = this.injector;
      if (p.keyId0 === keyId) {
        if (this.obj0 === UNDEFINED) {
          this.obj0 = inj._new(p.provider0);
        }
        return this.obj0;
      }
      if (p.keyId1 === keyId) {
        if (this.obj1 === UNDEFINED) {
          this.obj1 = inj._new(p.provider1);
        }
        return this.obj1;
      }
      if (p.keyId2 === keyId) {
        if (this.obj2 === UNDEFINED) {
          this.obj2 = inj._new(p.provider2);
        }
        return this.obj2;
      }
      if (p.keyId3 === keyId) {
        if (this.obj3 === UNDEFINED) {
          this.obj3 = inj._new(p.provider3);
        }
        return this.obj3;
      }
      if (p.keyId4 === keyId) {
        if (this.obj4 === UNDEFINED) {
          this.obj4 = inj._new(p.provider4);
        }
        return this.obj4;
      }
      if (p.keyId5 === keyId) {
        if (this.obj5 === UNDEFINED) {
          this.obj5 = inj._new(p.provider5);
        }
        return this.obj5;
      }
      if (p.keyId6 === keyId) {
        if (this.obj6 === UNDEFINED) {
          this.obj6 = inj._new(p.provider6);
        }
        return this.obj6;
      }
      if (p.keyId7 === keyId) {
        if (this.obj7 === UNDEFINED) {
          this.obj7 = inj._new(p.provider7);
        }
        return this.obj7;
      }
      if (p.keyId8 === keyId) {
        if (this.obj8 === UNDEFINED) {
          this.obj8 = inj._new(p.provider8);
        }
        return this.obj8;
      }
      if (p.keyId9 === keyId) {
        if (this.obj9 === UNDEFINED) {
          this.obj9 = inj._new(p.provider9);
        }
        return this.obj9;
      }
      return UNDEFINED;
    };
    ReflectiveInjectorInlineStrategy.prototype.getObjAtIndex = function(index) {
      if (index == 0)
        return this.obj0;
      if (index == 1)
        return this.obj1;
      if (index == 2)
        return this.obj2;
      if (index == 3)
        return this.obj3;
      if (index == 4)
        return this.obj4;
      if (index == 5)
        return this.obj5;
      if (index == 6)
        return this.obj6;
      if (index == 7)
        return this.obj7;
      if (index == 8)
        return this.obj8;
      if (index == 9)
        return this.obj9;
      throw new OutOfBoundsError(index);
    };
    ReflectiveInjectorInlineStrategy.prototype.getMaxNumberOfObjects = function() {
      return _MAX_CONSTRUCTION_COUNTER;
    };
    return ReflectiveInjectorInlineStrategy;
  }());
  var ReflectiveInjectorDynamicStrategy = (function() {
    function ReflectiveInjectorDynamicStrategy(protoStrategy, injector) {
      this.protoStrategy = protoStrategy;
      this.injector = injector;
      this.objs = new Array(protoStrategy.providers.length).fill(UNDEFINED);
    }
    ReflectiveInjectorDynamicStrategy.prototype.resetConstructionCounter = function() {
      this.injector._constructionCounter = 0;
    };
    ReflectiveInjectorDynamicStrategy.prototype.instantiateProvider = function(provider) {
      return this.injector._new(provider);
    };
    ReflectiveInjectorDynamicStrategy.prototype.getObjByKeyId = function(keyId) {
      var p = this.protoStrategy;
      for (var i = 0; i < p.keyIds.length; i++) {
        if (p.keyIds[i] === keyId) {
          if (this.objs[i] === UNDEFINED) {
            this.objs[i] = this.injector._new(p.providers[i]);
          }
          return this.objs[i];
        }
      }
      return UNDEFINED;
    };
    ReflectiveInjectorDynamicStrategy.prototype.getObjAtIndex = function(index) {
      if (index < 0 || index >= this.objs.length) {
        throw new OutOfBoundsError(index);
      }
      return this.objs[index];
    };
    ReflectiveInjectorDynamicStrategy.prototype.getMaxNumberOfObjects = function() {
      return this.objs.length;
    };
    return ReflectiveInjectorDynamicStrategy;
  }());
  var ReflectiveInjector = (function() {
    function ReflectiveInjector() {}
    ReflectiveInjector.resolve = function(providers) {
      return resolveReflectiveProviders(providers);
    };
    ReflectiveInjector.resolveAndCreate = function(providers, parent) {
      if (parent === void 0) {
        parent = null;
      }
      var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
      return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);
    };
    ReflectiveInjector.fromResolvedProviders = function(providers, parent) {
      if (parent === void 0) {
        parent = null;
      }
      return new ReflectiveInjector_(ReflectiveProtoInjector.fromResolvedProviders(providers), parent);
    };
    Object.defineProperty(ReflectiveInjector.prototype, "parent", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    ReflectiveInjector.prototype.resolveAndCreateChild = function(providers) {
      return unimplemented();
    };
    ReflectiveInjector.prototype.createChildFromResolved = function(providers) {
      return unimplemented();
    };
    ReflectiveInjector.prototype.resolveAndInstantiate = function(provider) {
      return unimplemented();
    };
    ReflectiveInjector.prototype.instantiateResolved = function(provider) {
      return unimplemented();
    };
    ReflectiveInjector.prototype.get = function(token, notFoundValue) {};
    return ReflectiveInjector;
  }());
  var ReflectiveInjector_ = (function() {
    function ReflectiveInjector_(_proto, _parent) {
      if (_parent === void 0) {
        _parent = null;
      }
      this._constructionCounter = 0;
      this._proto = _proto;
      this._parent = _parent;
      this._strategy = _proto._strategy.createInjectorStrategy(this);
    }
    ReflectiveInjector_.prototype.get = function(token, notFoundValue) {
      if (notFoundValue === void 0) {
        notFoundValue = THROW_IF_NOT_FOUND;
      }
      return this._getByKey(ReflectiveKey.get(token), null, null, notFoundValue);
    };
    ReflectiveInjector_.prototype.getAt = function(index) {
      return this._strategy.getObjAtIndex(index);
    };
    Object.defineProperty(ReflectiveInjector_.prototype, "parent", {
      get: function() {
        return this._parent;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ReflectiveInjector_.prototype, "internalStrategy", {
      get: function() {
        return this._strategy;
      },
      enumerable: true,
      configurable: true
    });
    ReflectiveInjector_.prototype.resolveAndCreateChild = function(providers) {
      var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
      return this.createChildFromResolved(ResolvedReflectiveProviders);
    };
    ReflectiveInjector_.prototype.createChildFromResolved = function(providers) {
      var proto = new ReflectiveProtoInjector(providers);
      var inj = new ReflectiveInjector_(proto);
      inj._parent = this;
      return inj;
    };
    ReflectiveInjector_.prototype.resolveAndInstantiate = function(provider) {
      return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);
    };
    ReflectiveInjector_.prototype.instantiateResolved = function(provider) {
      return this._instantiateProvider(provider);
    };
    ReflectiveInjector_.prototype._new = function(provider) {
      if (this._constructionCounter++ > this._strategy.getMaxNumberOfObjects()) {
        throw new CyclicDependencyError(this, provider.key);
      }
      return this._instantiateProvider(provider);
    };
    ReflectiveInjector_.prototype._instantiateProvider = function(provider) {
      if (provider.multiProvider) {
        var res = new Array(provider.resolvedFactories.length);
        for (var i = 0; i < provider.resolvedFactories.length; ++i) {
          res[i] = this._instantiate(provider, provider.resolvedFactories[i]);
        }
        return res;
      } else {
        return this._instantiate(provider, provider.resolvedFactories[0]);
      }
    };
    ReflectiveInjector_.prototype._instantiate = function(provider, ResolvedReflectiveFactory) {
      var factory = ResolvedReflectiveFactory.factory;
      var deps = ResolvedReflectiveFactory.dependencies;
      var length = deps.length;
      var d0;
      var d1;
      var d2;
      var d3;
      var d4;
      var d5;
      var d6;
      var d7;
      var d8;
      var d9;
      var d10;
      var d11;
      var d12;
      var d13;
      var d14;
      var d15;
      var d16;
      var d17;
      var d18;
      var d19;
      try {
        d0 = length > 0 ? this._getByReflectiveDependency(provider, deps[0]) : null;
        d1 = length > 1 ? this._getByReflectiveDependency(provider, deps[1]) : null;
        d2 = length > 2 ? this._getByReflectiveDependency(provider, deps[2]) : null;
        d3 = length > 3 ? this._getByReflectiveDependency(provider, deps[3]) : null;
        d4 = length > 4 ? this._getByReflectiveDependency(provider, deps[4]) : null;
        d5 = length > 5 ? this._getByReflectiveDependency(provider, deps[5]) : null;
        d6 = length > 6 ? this._getByReflectiveDependency(provider, deps[6]) : null;
        d7 = length > 7 ? this._getByReflectiveDependency(provider, deps[7]) : null;
        d8 = length > 8 ? this._getByReflectiveDependency(provider, deps[8]) : null;
        d9 = length > 9 ? this._getByReflectiveDependency(provider, deps[9]) : null;
        d10 = length > 10 ? this._getByReflectiveDependency(provider, deps[10]) : null;
        d11 = length > 11 ? this._getByReflectiveDependency(provider, deps[11]) : null;
        d12 = length > 12 ? this._getByReflectiveDependency(provider, deps[12]) : null;
        d13 = length > 13 ? this._getByReflectiveDependency(provider, deps[13]) : null;
        d14 = length > 14 ? this._getByReflectiveDependency(provider, deps[14]) : null;
        d15 = length > 15 ? this._getByReflectiveDependency(provider, deps[15]) : null;
        d16 = length > 16 ? this._getByReflectiveDependency(provider, deps[16]) : null;
        d17 = length > 17 ? this._getByReflectiveDependency(provider, deps[17]) : null;
        d18 = length > 18 ? this._getByReflectiveDependency(provider, deps[18]) : null;
        d19 = length > 19 ? this._getByReflectiveDependency(provider, deps[19]) : null;
      } catch (e) {
        if (e instanceof AbstractProviderError || e instanceof InstantiationError) {
          e.addKey(this, provider.key);
        }
        throw e;
      }
      var obj;
      try {
        switch (length) {
          case 0:
            obj = factory();
            break;
          case 1:
            obj = factory(d0);
            break;
          case 2:
            obj = factory(d0, d1);
            break;
          case 3:
            obj = factory(d0, d1, d2);
            break;
          case 4:
            obj = factory(d0, d1, d2, d3);
            break;
          case 5:
            obj = factory(d0, d1, d2, d3, d4);
            break;
          case 6:
            obj = factory(d0, d1, d2, d3, d4, d5);
            break;
          case 7:
            obj = factory(d0, d1, d2, d3, d4, d5, d6);
            break;
          case 8:
            obj = factory(d0, d1, d2, d3, d4, d5, d6, d7);
            break;
          case 9:
            obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8);
            break;
          case 10:
            obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9);
            break;
          case 11:
            obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10);
            break;
          case 12:
            obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11);
            break;
          case 13:
            obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12);
            break;
          case 14:
            obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13);
            break;
          case 15:
            obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14);
            break;
          case 16:
            obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15);
            break;
          case 17:
            obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16);
            break;
          case 18:
            obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17);
            break;
          case 19:
            obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18);
            break;
          case 20:
            obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19);
            break;
          default:
            throw new Error("Cannot instantiate '" + provider.key.displayName + "' because it has more than 20 dependencies");
        }
      } catch (e) {
        throw new InstantiationError(this, e, e.stack, provider.key);
      }
      return obj;
    };
    ReflectiveInjector_.prototype._getByReflectiveDependency = function(provider, dep) {
      return this._getByKey(dep.key, dep.lowerBoundVisibility, dep.upperBoundVisibility, dep.optional ? null : THROW_IF_NOT_FOUND);
    };
    ReflectiveInjector_.prototype._getByKey = function(key, lowerBoundVisibility, upperBoundVisibility, notFoundValue) {
      if (key === INJECTOR_KEY) {
        return this;
      }
      if (upperBoundVisibility instanceof Self) {
        return this._getByKeySelf(key, notFoundValue);
      } else {
        return this._getByKeyDefault(key, notFoundValue, lowerBoundVisibility);
      }
    };
    ReflectiveInjector_.prototype._throwOrNull = function(key, notFoundValue) {
      if (notFoundValue !== THROW_IF_NOT_FOUND) {
        return notFoundValue;
      } else {
        throw new NoProviderError(this, key);
      }
    };
    ReflectiveInjector_.prototype._getByKeySelf = function(key, notFoundValue) {
      var obj = this._strategy.getObjByKeyId(key.id);
      return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);
    };
    ReflectiveInjector_.prototype._getByKeyDefault = function(key, notFoundValue, lowerBoundVisibility) {
      var inj;
      if (lowerBoundVisibility instanceof SkipSelf) {
        inj = this._parent;
      } else {
        inj = this;
      }
      while (inj instanceof ReflectiveInjector_) {
        var inj_ = (inj);
        var obj = inj_._strategy.getObjByKeyId(key.id);
        if (obj !== UNDEFINED)
          return obj;
        inj = inj_._parent;
      }
      if (inj !== null) {
        return inj.get(key.token, notFoundValue);
      } else {
        return this._throwOrNull(key, notFoundValue);
      }
    };
    Object.defineProperty(ReflectiveInjector_.prototype, "displayName", {
      get: function() {
        var providers = _mapProviders(this, function(b) {
          return ' "' + b.key.displayName + '" ';
        }).join(', ');
        return "ReflectiveInjector(providers: [" + providers + "])";
      },
      enumerable: true,
      configurable: true
    });
    ReflectiveInjector_.prototype.toString = function() {
      return this.displayName;
    };
    return ReflectiveInjector_;
  }());
  var INJECTOR_KEY = ReflectiveKey.get(Injector);
  function _mapProviders(injector, fn) {
    var res = new Array(injector._proto.numberOfProviders);
    for (var i = 0; i < injector._proto.numberOfProviders; ++i) {
      res[i] = fn(injector._proto.getProviderAtIndex(i));
    }
    return res;
  }
  var ErrorHandler = (function() {
    function ErrorHandler(rethrowError) {
      if (rethrowError === void 0) {
        rethrowError = true;
      }
      this._console = console;
      this.rethrowError = rethrowError;
    }
    ErrorHandler.prototype.handleError = function(error) {
      var originalError = this._findOriginalError(error);
      var originalStack = this._findOriginalStack(error);
      var context = this._findContext(error);
      this._console.error("EXCEPTION: " + this._extractMessage(error));
      if (originalError) {
        this._console.error("ORIGINAL EXCEPTION: " + this._extractMessage(originalError));
      }
      if (originalStack) {
        this._console.error('ORIGINAL STACKTRACE:');
        this._console.error(originalStack);
      }
      if (context) {
        this._console.error('ERROR CONTEXT:');
        this._console.error(context);
      }
      if (this.rethrowError)
        throw error;
    };
    ErrorHandler.prototype._extractMessage = function(error) {
      return error instanceof Error ? error.message : error.toString();
    };
    ErrorHandler.prototype._findContext = function(error) {
      if (error) {
        return error.context ? error.context : this._findContext(((error)).originalError);
      }
      return null;
    };
    ErrorHandler.prototype._findOriginalError = function(error) {
      var e = ((error)).originalError;
      while (e && ((e)).originalError) {
        e = ((e)).originalError;
      }
      return e;
    };
    ErrorHandler.prototype._findOriginalStack = function(error) {
      if (!(error instanceof Error))
        return null;
      var e = error;
      var stack = e.stack;
      while (e instanceof Error && ((e)).originalError) {
        e = ((e)).originalError;
        if (e instanceof Error && e.stack) {
          stack = e.stack;
        }
      }
      return stack;
    };
    return ErrorHandler;
  }());
  var StringMapWrapper = (function() {
    function StringMapWrapper() {}
    StringMapWrapper.merge = function(m1, m2) {
      var m = {};
      for (var _i = 0,
          _a = Object.keys(m1); _i < _a.length; _i++) {
        var k = _a[_i];
        m[k] = m1[k];
      }
      for (var _b = 0,
          _c = Object.keys(m2); _b < _c.length; _b++) {
        var k = _c[_b];
        m[k] = m2[k];
      }
      return m;
    };
    StringMapWrapper.equals = function(m1, m2) {
      var k1 = Object.keys(m1);
      var k2 = Object.keys(m2);
      if (k1.length != k2.length) {
        return false;
      }
      for (var i = 0; i < k1.length; i++) {
        var key = k1[i];
        if (m1[key] !== m2[key]) {
          return false;
        }
      }
      return true;
    };
    return StringMapWrapper;
  }());
  var ListWrapper = (function() {
    function ListWrapper() {}
    ListWrapper.findLast = function(arr, condition) {
      for (var i = arr.length - 1; i >= 0; i--) {
        if (condition(arr[i])) {
          return arr[i];
        }
      }
      return null;
    };
    ListWrapper.removeAll = function(list, items) {
      for (var i = 0; i < items.length; ++i) {
        var index = list.indexOf(items[i]);
        if (index > -1) {
          list.splice(index, 1);
        }
      }
    };
    ListWrapper.remove = function(list, el) {
      var index = list.indexOf(el);
      if (index > -1) {
        list.splice(index, 1);
        return true;
      }
      return false;
    };
    ListWrapper.equals = function(a, b) {
      if (a.length != b.length)
        return false;
      for (var i = 0; i < a.length; ++i) {
        if (a[i] !== b[i])
          return false;
      }
      return true;
    };
    ListWrapper.flatten = function(list) {
      return list.reduce(function(flat, item) {
        var flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item;
        return ((flat)).concat(flatItem);
      }, []);
    };
    return ListWrapper;
  }());
  function isListLikeIterable(obj) {
    if (!isJsObject(obj))
      return false;
    return Array.isArray(obj) || (!(obj instanceof Map) && getSymbolIterator() in obj);
  }
  function areIterablesEqual(a, b, comparator) {
    var iterator1 = a[getSymbolIterator()]();
    var iterator2 = b[getSymbolIterator()]();
    while (true) {
      var item1 = iterator1.next();
      var item2 = iterator2.next();
      if (item1.done && item2.done)
        return true;
      if (item1.done || item2.done)
        return false;
      if (!comparator(item1.value, item2.value))
        return false;
    }
  }
  function iterateListLike(obj, fn) {
    if (Array.isArray(obj)) {
      for (var i = 0; i < obj.length; i++) {
        fn(obj[i]);
      }
    } else {
      var iterator = obj[getSymbolIterator()]();
      var item = void 0;
      while (!((item = iterator.next()).done)) {
        fn(item.value);
      }
    }
  }
  function isPromise(obj) {
    return !!obj && typeof obj.then === 'function';
  }
  var APP_INITIALIZER = new OpaqueToken('Application Initializer');
  var ApplicationInitStatus = (function() {
    function ApplicationInitStatus(appInits) {
      var _this = this;
      this._done = false;
      var asyncInitPromises = [];
      if (appInits) {
        for (var i = 0; i < appInits.length; i++) {
          var initResult = appInits[i]();
          if (isPromise(initResult)) {
            asyncInitPromises.push(initResult);
          }
        }
      }
      this._donePromise = Promise.all(asyncInitPromises).then(function() {
        _this._done = true;
      });
      if (asyncInitPromises.length === 0) {
        this._done = true;
      }
    }
    Object.defineProperty(ApplicationInitStatus.prototype, "done", {
      get: function() {
        return this._done;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ApplicationInitStatus.prototype, "donePromise", {
      get: function() {
        return this._donePromise;
      },
      enumerable: true,
      configurable: true
    });
    ApplicationInitStatus.decorators = [{type: Injectable}];
    ApplicationInitStatus.ctorParameters = function() {
      return [{
        type: Array,
        decorators: [{
          type: Inject,
          args: [APP_INITIALIZER]
        }, {type: Optional}]
      }];
    };
    return ApplicationInitStatus;
  }());
  var APP_ID = new OpaqueToken('AppId');
  function _appIdRandomProviderFactory() {
    return "" + _randomChar() + _randomChar() + _randomChar();
  }
  var APP_ID_RANDOM_PROVIDER = {
    provide: APP_ID,
    useFactory: _appIdRandomProviderFactory,
    deps: ([])
  };
  function _randomChar() {
    return String.fromCharCode(97 + Math.floor(Math.random() * 25));
  }
  var PLATFORM_INITIALIZER = new OpaqueToken('Platform Initializer');
  var APP_BOOTSTRAP_LISTENER = new OpaqueToken('appBootstrapListener');
  var PACKAGE_ROOT_URL = new OpaqueToken('Application Packages Root URL');
  var Console = (function() {
    function Console() {}
    Console.prototype.log = function(message) {
      print(message);
    };
    Console.prototype.warn = function(message) {
      warn(message);
    };
    Console.decorators = [{type: Injectable}];
    Console.ctorParameters = function() {
      return [];
    };
    return Console;
  }());
  var __extends$4 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var ComponentStillLoadingError = (function(_super) {
    __extends$4(ComponentStillLoadingError, _super);
    function ComponentStillLoadingError(compType) {
      _super.call(this, "Can't compile synchronously as " + stringify(compType) + " is still being loaded!");
      this.compType = compType;
    }
    return ComponentStillLoadingError;
  }(BaseError));
  var ModuleWithComponentFactories = (function() {
    function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {
      this.ngModuleFactory = ngModuleFactory;
      this.componentFactories = componentFactories;
    }
    return ModuleWithComponentFactories;
  }());
  function _throwError() {
    throw new Error("Runtime compiler is not loaded");
  }
  var Compiler = (function() {
    function Compiler() {}
    Compiler.prototype.compileModuleSync = function(moduleType) {
      throw _throwError();
    };
    Compiler.prototype.compileModuleAsync = function(moduleType) {
      throw _throwError();
    };
    Compiler.prototype.compileModuleAndAllComponentsSync = function(moduleType) {
      throw _throwError();
    };
    Compiler.prototype.compileModuleAndAllComponentsAsync = function(moduleType) {
      throw _throwError();
    };
    Compiler.prototype.getNgContentSelectors = function(component) {
      throw _throwError();
    };
    Compiler.prototype.clearCache = function() {};
    Compiler.prototype.clearCacheFor = function(type) {};
    Compiler.decorators = [{type: Injectable}];
    Compiler.ctorParameters = function() {
      return [];
    };
    return Compiler;
  }());
  var COMPILER_OPTIONS = new OpaqueToken('compilerOptions');
  var CompilerFactory = (function() {
    function CompilerFactory() {}
    CompilerFactory.prototype.createCompiler = function(options) {};
    return CompilerFactory;
  }());
  var ElementRef = (function() {
    function ElementRef(nativeElement) {
      this.nativeElement = nativeElement;
    }
    return ElementRef;
  }());
  var __extends$6 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var EventEmitter = (function(_super) {
    __extends$6(EventEmitter, _super);
    function EventEmitter(isAsync) {
      if (isAsync === void 0) {
        isAsync = false;
      }
      _super.call(this);
      this.__isAsync = isAsync;
    }
    EventEmitter.prototype.emit = function(value) {
      _super.prototype.next.call(this, value);
    };
    EventEmitter.prototype.subscribe = function(generatorOrNext, error, complete) {
      var schedulerFn;
      var errorFn = function(err) {
        return null;
      };
      var completeFn = function() {
        return null;
      };
      if (generatorOrNext && typeof generatorOrNext === 'object') {
        schedulerFn = this.__isAsync ? function(value) {
          setTimeout(function() {
            return generatorOrNext.next(value);
          });
        } : function(value) {
          generatorOrNext.next(value);
        };
        if (generatorOrNext.error) {
          errorFn = this.__isAsync ? function(err) {
            setTimeout(function() {
              return generatorOrNext.error(err);
            });
          } : function(err) {
            generatorOrNext.error(err);
          };
        }
        if (generatorOrNext.complete) {
          completeFn = this.__isAsync ? function() {
            setTimeout(function() {
              return generatorOrNext.complete();
            });
          } : function() {
            generatorOrNext.complete();
          };
        }
      } else {
        schedulerFn = this.__isAsync ? function(value) {
          setTimeout(function() {
            return generatorOrNext(value);
          });
        } : function(value) {
          generatorOrNext(value);
        };
        if (error) {
          errorFn = this.__isAsync ? function(err) {
            setTimeout(function() {
              return error(err);
            });
          } : function(err) {
            error(err);
          };
        }
        if (complete) {
          completeFn = this.__isAsync ? function() {
            setTimeout(function() {
              return complete();
            });
          } : function() {
            complete();
          };
        }
      }
      return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
    };
    return EventEmitter;
  }(rxjs_Subject.Subject));
  var NgZone = (function() {
    function NgZone(_a) {
      var _b = _a.enableLongStackTrace,
          enableLongStackTrace = _b === void 0 ? false : _b;
      this._hasPendingMicrotasks = false;
      this._hasPendingMacrotasks = false;
      this._isStable = true;
      this._nesting = 0;
      this._onUnstable = new EventEmitter(false);
      this._onMicrotaskEmpty = new EventEmitter(false);
      this._onStable = new EventEmitter(false);
      this._onErrorEvents = new EventEmitter(false);
      if (typeof Zone == 'undefined') {
        throw new Error('Angular requires Zone.js prolyfill.');
      }
      Zone.assertZonePatched();
      this.outer = this.inner = Zone.current;
      if (Zone['wtfZoneSpec']) {
        this.inner = this.inner.fork(Zone['wtfZoneSpec']);
      }
      if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {
        this.inner = this.inner.fork(Zone['longStackTraceZoneSpec']);
      }
      this.forkInnerZoneWithAngularBehavior();
    }
    NgZone.isInAngularZone = function() {
      return Zone.current.get('isAngularZone') === true;
    };
    NgZone.assertInAngularZone = function() {
      if (!NgZone.isInAngularZone()) {
        throw new Error('Expected to be in Angular Zone, but it is not!');
      }
    };
    NgZone.assertNotInAngularZone = function() {
      if (NgZone.isInAngularZone()) {
        throw new Error('Expected to not be in Angular Zone, but it is!');
      }
    };
    NgZone.prototype.run = function(fn) {
      return this.inner.run(fn);
    };
    NgZone.prototype.runGuarded = function(fn) {
      return this.inner.runGuarded(fn);
    };
    NgZone.prototype.runOutsideAngular = function(fn) {
      return this.outer.run(fn);
    };
    Object.defineProperty(NgZone.prototype, "onUnstable", {
      get: function() {
        return this._onUnstable;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgZone.prototype, "onMicrotaskEmpty", {
      get: function() {
        return this._onMicrotaskEmpty;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgZone.prototype, "onStable", {
      get: function() {
        return this._onStable;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgZone.prototype, "onError", {
      get: function() {
        return this._onErrorEvents;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgZone.prototype, "isStable", {
      get: function() {
        return this._isStable;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgZone.prototype, "hasPendingMicrotasks", {
      get: function() {
        return this._hasPendingMicrotasks;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgZone.prototype, "hasPendingMacrotasks", {
      get: function() {
        return this._hasPendingMacrotasks;
      },
      enumerable: true,
      configurable: true
    });
    NgZone.prototype.checkStable = function() {
      var _this = this;
      if (this._nesting == 0 && !this._hasPendingMicrotasks && !this._isStable) {
        try {
          this._nesting++;
          this._onMicrotaskEmpty.emit(null);
        } finally {
          this._nesting--;
          if (!this._hasPendingMicrotasks) {
            try {
              this.runOutsideAngular(function() {
                return _this._onStable.emit(null);
              });
            } finally {
              this._isStable = true;
            }
          }
        }
      }
    };
    NgZone.prototype.forkInnerZoneWithAngularBehavior = function() {
      var _this = this;
      this.inner = this.inner.fork({
        name: 'angular',
        properties: ({'isAngularZone': true}),
        onInvokeTask: function(delegate, current, target, task, applyThis, applyArgs) {
          try {
            _this.onEnter();
            return delegate.invokeTask(target, task, applyThis, applyArgs);
          } finally {
            _this.onLeave();
          }
        },
        onInvoke: function(delegate, current, target, callback, applyThis, applyArgs, source) {
          try {
            _this.onEnter();
            return delegate.invoke(target, callback, applyThis, applyArgs, source);
          } finally {
            _this.onLeave();
          }
        },
        onHasTask: function(delegate, current, target, hasTaskState) {
          delegate.hasTask(target, hasTaskState);
          if (current === target) {
            if (hasTaskState.change == 'microTask') {
              _this.setHasMicrotask(hasTaskState.microTask);
            } else if (hasTaskState.change == 'macroTask') {
              _this.setHasMacrotask(hasTaskState.macroTask);
            }
          }
        },
        onHandleError: function(delegate, current, target, error) {
          delegate.handleError(target, error);
          _this.triggerError(error);
          return false;
        }
      });
    };
    NgZone.prototype.onEnter = function() {
      this._nesting++;
      if (this._isStable) {
        this._isStable = false;
        this._onUnstable.emit(null);
      }
    };
    NgZone.prototype.onLeave = function() {
      this._nesting--;
      this.checkStable();
    };
    NgZone.prototype.setHasMicrotask = function(hasMicrotasks) {
      this._hasPendingMicrotasks = hasMicrotasks;
      this.checkStable();
    };
    NgZone.prototype.setHasMacrotask = function(hasMacrotasks) {
      this._hasPendingMacrotasks = hasMacrotasks;
    };
    NgZone.prototype.triggerError = function(error) {
      this._onErrorEvents.emit(error);
    };
    return NgZone;
  }());
  var AnimationQueue = (function() {
    function AnimationQueue(_zone) {
      this._zone = _zone;
      this.entries = [];
    }
    AnimationQueue.prototype.enqueue = function(player) {
      this.entries.push(player);
    };
    AnimationQueue.prototype.flush = function() {
      var _this = this;
      if (this.entries.length) {
        this._zone.runOutsideAngular(function() {
          Promise.resolve(null).then(function() {
            return _this._triggerAnimations();
          });
        });
      }
    };
    AnimationQueue.prototype._triggerAnimations = function() {
      NgZone.assertNotInAngularZone();
      while (this.entries.length) {
        var player = this.entries.shift();
        if (!player.hasStarted()) {
          player.play();
        }
      }
    };
    AnimationQueue.decorators = [{type: Injectable}];
    AnimationQueue.ctorParameters = function() {
      return [{type: NgZone}];
    };
    return AnimationQueue;
  }());
  var DefaultIterableDifferFactory = (function() {
    function DefaultIterableDifferFactory() {}
    DefaultIterableDifferFactory.prototype.supports = function(obj) {
      return isListLikeIterable(obj);
    };
    DefaultIterableDifferFactory.prototype.create = function(cdRef, trackByFn) {
      return new DefaultIterableDiffer(trackByFn);
    };
    return DefaultIterableDifferFactory;
  }());
  var trackByIdentity = function(index, item) {
    return item;
  };
  var DefaultIterableDiffer = (function() {
    function DefaultIterableDiffer(_trackByFn) {
      this._trackByFn = _trackByFn;
      this._length = null;
      this._collection = null;
      this._linkedRecords = null;
      this._unlinkedRecords = null;
      this._previousItHead = null;
      this._itHead = null;
      this._itTail = null;
      this._additionsHead = null;
      this._additionsTail = null;
      this._movesHead = null;
      this._movesTail = null;
      this._removalsHead = null;
      this._removalsTail = null;
      this._identityChangesHead = null;
      this._identityChangesTail = null;
      this._trackByFn = this._trackByFn || trackByIdentity;
    }
    Object.defineProperty(DefaultIterableDiffer.prototype, "collection", {
      get: function() {
        return this._collection;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DefaultIterableDiffer.prototype, "length", {
      get: function() {
        return this._length;
      },
      enumerable: true,
      configurable: true
    });
    DefaultIterableDiffer.prototype.forEachItem = function(fn) {
      var record;
      for (record = this._itHead; record !== null; record = record._next) {
        fn(record);
      }
    };
    DefaultIterableDiffer.prototype.forEachOperation = function(fn) {
      var nextIt = this._itHead;
      var nextRemove = this._removalsHead;
      var addRemoveOffset = 0;
      var moveOffsets = null;
      while (nextIt || nextRemove) {
        var record = !nextRemove || nextIt && nextIt.currentIndex < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ? nextIt : nextRemove;
        var adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);
        var currentIndex = record.currentIndex;
        if (record === nextRemove) {
          addRemoveOffset--;
          nextRemove = nextRemove._nextRemoved;
        } else {
          nextIt = nextIt._next;
          if (record.previousIndex == null) {
            addRemoveOffset++;
          } else {
            if (!moveOffsets)
              moveOffsets = [];
            var localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;
            var localCurrentIndex = currentIndex - addRemoveOffset;
            if (localMovePreviousIndex != localCurrentIndex) {
              for (var i = 0; i < localMovePreviousIndex; i++) {
                var offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);
                var index = offset + i;
                if (localCurrentIndex <= index && index < localMovePreviousIndex) {
                  moveOffsets[i] = offset + 1;
                }
              }
              var previousIndex = record.previousIndex;
              moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;
            }
          }
        }
        if (adjPreviousIndex !== currentIndex) {
          fn(record, adjPreviousIndex, currentIndex);
        }
      }
    };
    DefaultIterableDiffer.prototype.forEachPreviousItem = function(fn) {
      var record;
      for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
        fn(record);
      }
    };
    DefaultIterableDiffer.prototype.forEachAddedItem = function(fn) {
      var record;
      for (record = this._additionsHead; record !== null; record = record._nextAdded) {
        fn(record);
      }
    };
    DefaultIterableDiffer.prototype.forEachMovedItem = function(fn) {
      var record;
      for (record = this._movesHead; record !== null; record = record._nextMoved) {
        fn(record);
      }
    };
    DefaultIterableDiffer.prototype.forEachRemovedItem = function(fn) {
      var record;
      for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
        fn(record);
      }
    };
    DefaultIterableDiffer.prototype.forEachIdentityChange = function(fn) {
      var record;
      for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {
        fn(record);
      }
    };
    DefaultIterableDiffer.prototype.diff = function(collection) {
      if (isBlank(collection))
        collection = [];
      if (!isListLikeIterable(collection)) {
        throw new Error("Error trying to diff '" + collection + "'");
      }
      if (this.check(collection)) {
        return this;
      } else {
        return null;
      }
    };
    DefaultIterableDiffer.prototype.onDestroy = function() {};
    DefaultIterableDiffer.prototype.check = function(collection) {
      var _this = this;
      this._reset();
      var record = this._itHead;
      var mayBeDirty = false;
      var index;
      var item;
      var itemTrackBy;
      if (Array.isArray(collection)) {
        var list = collection;
        this._length = collection.length;
        for (var index_1 = 0; index_1 < this._length; index_1++) {
          item = list[index_1];
          itemTrackBy = this._trackByFn(index_1, item);
          if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
            record = this._mismatch(record, item, itemTrackBy, index_1);
            mayBeDirty = true;
          } else {
            if (mayBeDirty) {
              record = this._verifyReinsertion(record, item, itemTrackBy, index_1);
            }
            if (!looseIdentical(record.item, item))
              this._addIdentityChange(record, item);
          }
          record = record._next;
        }
      } else {
        index = 0;
        iterateListLike(collection, function(item) {
          itemTrackBy = _this._trackByFn(index, item);
          if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
            record = _this._mismatch(record, item, itemTrackBy, index);
            mayBeDirty = true;
          } else {
            if (mayBeDirty) {
              record = _this._verifyReinsertion(record, item, itemTrackBy, index);
            }
            if (!looseIdentical(record.item, item))
              _this._addIdentityChange(record, item);
          }
          record = record._next;
          index++;
        });
        this._length = index;
      }
      this._truncate(record);
      this._collection = collection;
      return this.isDirty;
    };
    Object.defineProperty(DefaultIterableDiffer.prototype, "isDirty", {
      get: function() {
        return this._additionsHead !== null || this._movesHead !== null || this._removalsHead !== null || this._identityChangesHead !== null;
      },
      enumerable: true,
      configurable: true
    });
    DefaultIterableDiffer.prototype._reset = function() {
      if (this.isDirty) {
        var record = void 0;
        var nextRecord = void 0;
        for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
          record._nextPrevious = record._next;
        }
        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
          record.previousIndex = record.currentIndex;
        }
        this._additionsHead = this._additionsTail = null;
        for (record = this._movesHead; record !== null; record = nextRecord) {
          record.previousIndex = record.currentIndex;
          nextRecord = record._nextMoved;
        }
        this._movesHead = this._movesTail = null;
        this._removalsHead = this._removalsTail = null;
        this._identityChangesHead = this._identityChangesTail = null;
      }
    };
    DefaultIterableDiffer.prototype._mismatch = function(record, item, itemTrackBy, index) {
      var previousRecord;
      if (record === null) {
        previousRecord = this._itTail;
      } else {
        previousRecord = record._prev;
        this._remove(record);
      }
      record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);
      if (record !== null) {
        if (!looseIdentical(record.item, item))
          this._addIdentityChange(record, item);
        this._moveAfter(record, previousRecord, index);
      } else {
        record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
        if (record !== null) {
          if (!looseIdentical(record.item, item))
            this._addIdentityChange(record, item);
          this._reinsertAfter(record, previousRecord, index);
        } else {
          record = this._addAfter(new CollectionChangeRecord(item, itemTrackBy), previousRecord, index);
        }
      }
      return record;
    };
    DefaultIterableDiffer.prototype._verifyReinsertion = function(record, item, itemTrackBy, index) {
      var reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
      if (reinsertRecord !== null) {
        record = this._reinsertAfter(reinsertRecord, record._prev, index);
      } else if (record.currentIndex != index) {
        record.currentIndex = index;
        this._addToMoves(record, index);
      }
      return record;
    };
    DefaultIterableDiffer.prototype._truncate = function(record) {
      while (record !== null) {
        var nextRecord = record._next;
        this._addToRemovals(this._unlink(record));
        record = nextRecord;
      }
      if (this._unlinkedRecords !== null) {
        this._unlinkedRecords.clear();
      }
      if (this._additionsTail !== null) {
        this._additionsTail._nextAdded = null;
      }
      if (this._movesTail !== null) {
        this._movesTail._nextMoved = null;
      }
      if (this._itTail !== null) {
        this._itTail._next = null;
      }
      if (this._removalsTail !== null) {
        this._removalsTail._nextRemoved = null;
      }
      if (this._identityChangesTail !== null) {
        this._identityChangesTail._nextIdentityChange = null;
      }
    };
    DefaultIterableDiffer.prototype._reinsertAfter = function(record, prevRecord, index) {
      if (this._unlinkedRecords !== null) {
        this._unlinkedRecords.remove(record);
      }
      var prev = record._prevRemoved;
      var next = record._nextRemoved;
      if (prev === null) {
        this._removalsHead = next;
      } else {
        prev._nextRemoved = next;
      }
      if (next === null) {
        this._removalsTail = prev;
      } else {
        next._prevRemoved = prev;
      }
      this._insertAfter(record, prevRecord, index);
      this._addToMoves(record, index);
      return record;
    };
    DefaultIterableDiffer.prototype._moveAfter = function(record, prevRecord, index) {
      this._unlink(record);
      this._insertAfter(record, prevRecord, index);
      this._addToMoves(record, index);
      return record;
    };
    DefaultIterableDiffer.prototype._addAfter = function(record, prevRecord, index) {
      this._insertAfter(record, prevRecord, index);
      if (this._additionsTail === null) {
        this._additionsTail = this._additionsHead = record;
      } else {
        this._additionsTail = this._additionsTail._nextAdded = record;
      }
      return record;
    };
    DefaultIterableDiffer.prototype._insertAfter = function(record, prevRecord, index) {
      var next = prevRecord === null ? this._itHead : prevRecord._next;
      record._next = next;
      record._prev = prevRecord;
      if (next === null) {
        this._itTail = record;
      } else {
        next._prev = record;
      }
      if (prevRecord === null) {
        this._itHead = record;
      } else {
        prevRecord._next = record;
      }
      if (this._linkedRecords === null) {
        this._linkedRecords = new _DuplicateMap();
      }
      this._linkedRecords.put(record);
      record.currentIndex = index;
      return record;
    };
    DefaultIterableDiffer.prototype._remove = function(record) {
      return this._addToRemovals(this._unlink(record));
    };
    DefaultIterableDiffer.prototype._unlink = function(record) {
      if (this._linkedRecords !== null) {
        this._linkedRecords.remove(record);
      }
      var prev = record._prev;
      var next = record._next;
      if (prev === null) {
        this._itHead = next;
      } else {
        prev._next = next;
      }
      if (next === null) {
        this._itTail = prev;
      } else {
        next._prev = prev;
      }
      return record;
    };
    DefaultIterableDiffer.prototype._addToMoves = function(record, toIndex) {
      if (record.previousIndex === toIndex) {
        return record;
      }
      if (this._movesTail === null) {
        this._movesTail = this._movesHead = record;
      } else {
        this._movesTail = this._movesTail._nextMoved = record;
      }
      return record;
    };
    DefaultIterableDiffer.prototype._addToRemovals = function(record) {
      if (this._unlinkedRecords === null) {
        this._unlinkedRecords = new _DuplicateMap();
      }
      this._unlinkedRecords.put(record);
      record.currentIndex = null;
      record._nextRemoved = null;
      if (this._removalsTail === null) {
        this._removalsTail = this._removalsHead = record;
        record._prevRemoved = null;
      } else {
        record._prevRemoved = this._removalsTail;
        this._removalsTail = this._removalsTail._nextRemoved = record;
      }
      return record;
    };
    DefaultIterableDiffer.prototype._addIdentityChange = function(record, item) {
      record.item = item;
      if (this._identityChangesTail === null) {
        this._identityChangesTail = this._identityChangesHead = record;
      } else {
        this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;
      }
      return record;
    };
    DefaultIterableDiffer.prototype.toString = function() {
      var list = [];
      this.forEachItem(function(record) {
        return list.push(record);
      });
      var previous = [];
      this.forEachPreviousItem(function(record) {
        return previous.push(record);
      });
      var additions = [];
      this.forEachAddedItem(function(record) {
        return additions.push(record);
      });
      var moves = [];
      this.forEachMovedItem(function(record) {
        return moves.push(record);
      });
      var removals = [];
      this.forEachRemovedItem(function(record) {
        return removals.push(record);
      });
      var identityChanges = [];
      this.forEachIdentityChange(function(record) {
        return identityChanges.push(record);
      });
      return 'collection: ' + list.join(', ') + '\n' + 'previous: ' + previous.join(', ') + '\n' + 'additions: ' + additions.join(', ') + '\n' + 'moves: ' + moves.join(', ') + '\n' + 'removals: ' + removals.join(', ') + '\n' + 'identityChanges: ' + identityChanges.join(', ') + '\n';
    };
    return DefaultIterableDiffer;
  }());
  var CollectionChangeRecord = (function() {
    function CollectionChangeRecord(item, trackById) {
      this.item = item;
      this.trackById = trackById;
      this.currentIndex = null;
      this.previousIndex = null;
      this._nextPrevious = null;
      this._prev = null;
      this._next = null;
      this._prevDup = null;
      this._nextDup = null;
      this._prevRemoved = null;
      this._nextRemoved = null;
      this._nextAdded = null;
      this._nextMoved = null;
      this._nextIdentityChange = null;
    }
    CollectionChangeRecord.prototype.toString = function() {
      return this.previousIndex === this.currentIndex ? stringify(this.item) : stringify(this.item) + '[' + stringify(this.previousIndex) + '->' + stringify(this.currentIndex) + ']';
    };
    return CollectionChangeRecord;
  }());
  var _DuplicateItemRecordList = (function() {
    function _DuplicateItemRecordList() {
      this._head = null;
      this._tail = null;
    }
    _DuplicateItemRecordList.prototype.add = function(record) {
      if (this._head === null) {
        this._head = this._tail = record;
        record._nextDup = null;
        record._prevDup = null;
      } else {
        this._tail._nextDup = record;
        record._prevDup = this._tail;
        record._nextDup = null;
        this._tail = record;
      }
    };
    _DuplicateItemRecordList.prototype.get = function(trackById, afterIndex) {
      var record;
      for (record = this._head; record !== null; record = record._nextDup) {
        if ((afterIndex === null || afterIndex < record.currentIndex) && looseIdentical(record.trackById, trackById)) {
          return record;
        }
      }
      return null;
    };
    _DuplicateItemRecordList.prototype.remove = function(record) {
      var prev = record._prevDup;
      var next = record._nextDup;
      if (prev === null) {
        this._head = next;
      } else {
        prev._nextDup = next;
      }
      if (next === null) {
        this._tail = prev;
      } else {
        next._prevDup = prev;
      }
      return this._head === null;
    };
    return _DuplicateItemRecordList;
  }());
  var _DuplicateMap = (function() {
    function _DuplicateMap() {
      this.map = new Map();
    }
    _DuplicateMap.prototype.put = function(record) {
      var key = record.trackById;
      var duplicates = this.map.get(key);
      if (!duplicates) {
        duplicates = new _DuplicateItemRecordList();
        this.map.set(key, duplicates);
      }
      duplicates.add(record);
    };
    _DuplicateMap.prototype.get = function(trackById, afterIndex) {
      if (afterIndex === void 0) {
        afterIndex = null;
      }
      var key = trackById;
      var recordList = this.map.get(key);
      return recordList ? recordList.get(trackById, afterIndex) : null;
    };
    _DuplicateMap.prototype.remove = function(record) {
      var key = record.trackById;
      var recordList = this.map.get(key);
      if (recordList.remove(record)) {
        this.map.delete(key);
      }
      return record;
    };
    Object.defineProperty(_DuplicateMap.prototype, "isEmpty", {
      get: function() {
        return this.map.size === 0;
      },
      enumerable: true,
      configurable: true
    });
    _DuplicateMap.prototype.clear = function() {
      this.map.clear();
    };
    _DuplicateMap.prototype.toString = function() {
      return '_DuplicateMap(' + stringify(this.map) + ')';
    };
    return _DuplicateMap;
  }());
  function getPreviousIndex(item, addRemoveOffset, moveOffsets) {
    var previousIndex = item.previousIndex;
    if (previousIndex === null)
      return previousIndex;
    var moveOffset = 0;
    if (moveOffsets && previousIndex < moveOffsets.length) {
      moveOffset = moveOffsets[previousIndex];
    }
    return previousIndex + addRemoveOffset + moveOffset;
  }
  var DefaultKeyValueDifferFactory = (function() {
    function DefaultKeyValueDifferFactory() {}
    DefaultKeyValueDifferFactory.prototype.supports = function(obj) {
      return obj instanceof Map || isJsObject(obj);
    };
    DefaultKeyValueDifferFactory.prototype.create = function(cdRef) {
      return new DefaultKeyValueDiffer();
    };
    return DefaultKeyValueDifferFactory;
  }());
  var DefaultKeyValueDiffer = (function() {
    function DefaultKeyValueDiffer() {
      this._records = new Map();
      this._mapHead = null;
      this._previousMapHead = null;
      this._changesHead = null;
      this._changesTail = null;
      this._additionsHead = null;
      this._additionsTail = null;
      this._removalsHead = null;
      this._removalsTail = null;
    }
    Object.defineProperty(DefaultKeyValueDiffer.prototype, "isDirty", {
      get: function() {
        return this._additionsHead !== null || this._changesHead !== null || this._removalsHead !== null;
      },
      enumerable: true,
      configurable: true
    });
    DefaultKeyValueDiffer.prototype.forEachItem = function(fn) {
      var record;
      for (record = this._mapHead; record !== null; record = record._next) {
        fn(record);
      }
    };
    DefaultKeyValueDiffer.prototype.forEachPreviousItem = function(fn) {
      var record;
      for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
        fn(record);
      }
    };
    DefaultKeyValueDiffer.prototype.forEachChangedItem = function(fn) {
      var record;
      for (record = this._changesHead; record !== null; record = record._nextChanged) {
        fn(record);
      }
    };
    DefaultKeyValueDiffer.prototype.forEachAddedItem = function(fn) {
      var record;
      for (record = this._additionsHead; record !== null; record = record._nextAdded) {
        fn(record);
      }
    };
    DefaultKeyValueDiffer.prototype.forEachRemovedItem = function(fn) {
      var record;
      for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
        fn(record);
      }
    };
    DefaultKeyValueDiffer.prototype.diff = function(map) {
      if (!map) {
        map = new Map();
      } else if (!(map instanceof Map || isJsObject(map))) {
        throw new Error("Error trying to diff '" + map + "'");
      }
      return this.check(map) ? this : null;
    };
    DefaultKeyValueDiffer.prototype.onDestroy = function() {};
    DefaultKeyValueDiffer.prototype.check = function(map) {
      var _this = this;
      this._reset();
      var records = this._records;
      var oldSeqRecord = this._mapHead;
      var lastOldSeqRecord = null;
      var lastNewSeqRecord = null;
      var seqChanged = false;
      this._forEach(map, function(value, key) {
        var newSeqRecord;
        if (oldSeqRecord && key === oldSeqRecord.key) {
          newSeqRecord = oldSeqRecord;
          _this._maybeAddToChanges(newSeqRecord, value);
        } else {
          seqChanged = true;
          if (oldSeqRecord !== null) {
            _this._removeFromSeq(lastOldSeqRecord, oldSeqRecord);
            _this._addToRemovals(oldSeqRecord);
          }
          if (records.has(key)) {
            newSeqRecord = records.get(key);
            _this._maybeAddToChanges(newSeqRecord, value);
          } else {
            newSeqRecord = new KeyValueChangeRecord(key);
            records.set(key, newSeqRecord);
            newSeqRecord.currentValue = value;
            _this._addToAdditions(newSeqRecord);
          }
        }
        if (seqChanged) {
          if (_this._isInRemovals(newSeqRecord)) {
            _this._removeFromRemovals(newSeqRecord);
          }
          if (lastNewSeqRecord == null) {
            _this._mapHead = newSeqRecord;
          } else {
            lastNewSeqRecord._next = newSeqRecord;
          }
        }
        lastOldSeqRecord = oldSeqRecord;
        lastNewSeqRecord = newSeqRecord;
        oldSeqRecord = oldSeqRecord && oldSeqRecord._next;
      });
      this._truncate(lastOldSeqRecord, oldSeqRecord);
      return this.isDirty;
    };
    DefaultKeyValueDiffer.prototype._reset = function() {
      if (this.isDirty) {
        var record = void 0;
        for (record = this._previousMapHead = this._mapHead; record !== null; record = record._next) {
          record._nextPrevious = record._next;
        }
        for (record = this._changesHead; record !== null; record = record._nextChanged) {
          record.previousValue = record.currentValue;
        }
        for (record = this._additionsHead; record != null; record = record._nextAdded) {
          record.previousValue = record.currentValue;
        }
        this._changesHead = this._changesTail = null;
        this._additionsHead = this._additionsTail = null;
        this._removalsHead = this._removalsTail = null;
      }
    };
    DefaultKeyValueDiffer.prototype._truncate = function(lastRecord, record) {
      while (record !== null) {
        if (lastRecord === null) {
          this._mapHead = null;
        } else {
          lastRecord._next = null;
        }
        var nextRecord = record._next;
        this._addToRemovals(record);
        lastRecord = record;
        record = nextRecord;
      }
      for (var rec = this._removalsHead; rec !== null; rec = rec._nextRemoved) {
        rec.previousValue = rec.currentValue;
        rec.currentValue = null;
        this._records.delete(rec.key);
      }
    };
    DefaultKeyValueDiffer.prototype._maybeAddToChanges = function(record, newValue) {
      if (!looseIdentical(newValue, record.currentValue)) {
        record.previousValue = record.currentValue;
        record.currentValue = newValue;
        this._addToChanges(record);
      }
    };
    DefaultKeyValueDiffer.prototype._isInRemovals = function(record) {
      return record === this._removalsHead || record._nextRemoved !== null || record._prevRemoved !== null;
    };
    DefaultKeyValueDiffer.prototype._addToRemovals = function(record) {
      if (this._removalsHead === null) {
        this._removalsHead = this._removalsTail = record;
      } else {
        this._removalsTail._nextRemoved = record;
        record._prevRemoved = this._removalsTail;
        this._removalsTail = record;
      }
    };
    DefaultKeyValueDiffer.prototype._removeFromSeq = function(prev, record) {
      var next = record._next;
      if (prev === null) {
        this._mapHead = next;
      } else {
        prev._next = next;
      }
      record._next = null;
    };
    DefaultKeyValueDiffer.prototype._removeFromRemovals = function(record) {
      var prev = record._prevRemoved;
      var next = record._nextRemoved;
      if (prev === null) {
        this._removalsHead = next;
      } else {
        prev._nextRemoved = next;
      }
      if (next === null) {
        this._removalsTail = prev;
      } else {
        next._prevRemoved = prev;
      }
      record._prevRemoved = record._nextRemoved = null;
    };
    DefaultKeyValueDiffer.prototype._addToAdditions = function(record) {
      if (this._additionsHead === null) {
        this._additionsHead = this._additionsTail = record;
      } else {
        this._additionsTail._nextAdded = record;
        this._additionsTail = record;
      }
    };
    DefaultKeyValueDiffer.prototype._addToChanges = function(record) {
      if (this._changesHead === null) {
        this._changesHead = this._changesTail = record;
      } else {
        this._changesTail._nextChanged = record;
        this._changesTail = record;
      }
    };
    DefaultKeyValueDiffer.prototype.toString = function() {
      var items = [];
      var previous = [];
      var changes = [];
      var additions = [];
      var removals = [];
      var record;
      for (record = this._mapHead; record !== null; record = record._next) {
        items.push(stringify(record));
      }
      for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
        previous.push(stringify(record));
      }
      for (record = this._changesHead; record !== null; record = record._nextChanged) {
        changes.push(stringify(record));
      }
      for (record = this._additionsHead; record !== null; record = record._nextAdded) {
        additions.push(stringify(record));
      }
      for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
        removals.push(stringify(record));
      }
      return 'map: ' + items.join(', ') + '\n' + 'previous: ' + previous.join(', ') + '\n' + 'additions: ' + additions.join(', ') + '\n' + 'changes: ' + changes.join(', ') + '\n' + 'removals: ' + removals.join(', ') + '\n';
    };
    DefaultKeyValueDiffer.prototype._forEach = function(obj, fn) {
      if (obj instanceof Map) {
        obj.forEach(fn);
      } else {
        Object.keys(obj).forEach(function(k) {
          return fn(obj[k], k);
        });
      }
    };
    return DefaultKeyValueDiffer;
  }());
  var KeyValueChangeRecord = (function() {
    function KeyValueChangeRecord(key) {
      this.key = key;
      this.previousValue = null;
      this.currentValue = null;
      this._nextPrevious = null;
      this._next = null;
      this._nextAdded = null;
      this._nextRemoved = null;
      this._prevRemoved = null;
      this._nextChanged = null;
    }
    KeyValueChangeRecord.prototype.toString = function() {
      return looseIdentical(this.previousValue, this.currentValue) ? stringify(this.key) : (stringify(this.key) + '[' + stringify(this.previousValue) + '->' + stringify(this.currentValue) + ']');
    };
    return KeyValueChangeRecord;
  }());
  var IterableDiffers = (function() {
    function IterableDiffers(factories) {
      this.factories = factories;
    }
    IterableDiffers.create = function(factories, parent) {
      if (isPresent(parent)) {
        var copied = parent.factories.slice();
        factories = factories.concat(copied);
        return new IterableDiffers(factories);
      } else {
        return new IterableDiffers(factories);
      }
    };
    IterableDiffers.extend = function(factories) {
      return {
        provide: IterableDiffers,
        useFactory: function(parent) {
          if (!parent) {
            throw new Error('Cannot extend IterableDiffers without a parent injector');
          }
          return IterableDiffers.create(factories, parent);
        },
        deps: [[IterableDiffers, new SkipSelf(), new Optional()]]
      };
    };
    IterableDiffers.prototype.find = function(iterable) {
      var factory = this.factories.find(function(f) {
        return f.supports(iterable);
      });
      if (isPresent(factory)) {
        return factory;
      } else {
        throw new Error("Cannot find a differ supporting object '" + iterable + "' of type '" + getTypeNameForDebugging(iterable) + "'");
      }
    };
    return IterableDiffers;
  }());
  var KeyValueDiffers = (function() {
    function KeyValueDiffers(factories) {
      this.factories = factories;
    }
    KeyValueDiffers.create = function(factories, parent) {
      if (isPresent(parent)) {
        var copied = parent.factories.slice();
        factories = factories.concat(copied);
        return new KeyValueDiffers(factories);
      } else {
        return new KeyValueDiffers(factories);
      }
    };
    KeyValueDiffers.extend = function(factories) {
      return {
        provide: KeyValueDiffers,
        useFactory: function(parent) {
          if (!parent) {
            throw new Error('Cannot extend KeyValueDiffers without a parent injector');
          }
          return KeyValueDiffers.create(factories, parent);
        },
        deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]
      };
    };
    KeyValueDiffers.prototype.find = function(kv) {
      var factory = this.factories.find(function(f) {
        return f.supports(kv);
      });
      if (isPresent(factory)) {
        return factory;
      } else {
        throw new Error("Cannot find a differ supporting object '" + kv + "'");
      }
    };
    return KeyValueDiffers;
  }());
  var UNINITIALIZED = {toString: function() {
      return 'CD_INIT_VALUE';
    }};
  function devModeEqual(a, b) {
    if (isListLikeIterable(a) && isListLikeIterable(b)) {
      return areIterablesEqual(a, b, devModeEqual);
    } else if (!isListLikeIterable(a) && !isPrimitive(a) && !isListLikeIterable(b) && !isPrimitive(b)) {
      return true;
    } else {
      return looseIdentical(a, b);
    }
  }
  var WrappedValue = (function() {
    function WrappedValue(wrapped) {
      this.wrapped = wrapped;
    }
    WrappedValue.wrap = function(value) {
      return new WrappedValue(value);
    };
    return WrappedValue;
  }());
  var ValueUnwrapper = (function() {
    function ValueUnwrapper() {
      this.hasWrappedValue = false;
    }
    ValueUnwrapper.prototype.unwrap = function(value) {
      if (value instanceof WrappedValue) {
        this.hasWrappedValue = true;
        return value.wrapped;
      }
      return value;
    };
    ValueUnwrapper.prototype.reset = function() {
      this.hasWrappedValue = false;
    };
    return ValueUnwrapper;
  }());
  var SimpleChange = (function() {
    function SimpleChange(previousValue, currentValue) {
      this.previousValue = previousValue;
      this.currentValue = currentValue;
    }
    SimpleChange.prototype.isFirstChange = function() {
      return this.previousValue === UNINITIALIZED;
    };
    return SimpleChange;
  }());
  var ChangeDetectorRef = (function() {
    function ChangeDetectorRef() {}
    ChangeDetectorRef.prototype.markForCheck = function() {};
    ChangeDetectorRef.prototype.detach = function() {};
    ChangeDetectorRef.prototype.detectChanges = function() {};
    ChangeDetectorRef.prototype.checkNoChanges = function() {};
    ChangeDetectorRef.prototype.reattach = function() {};
    return ChangeDetectorRef;
  }());
  var keyValDiff = [new DefaultKeyValueDifferFactory()];
  var iterableDiff = [new DefaultIterableDifferFactory()];
  var defaultIterableDiffers = new IterableDiffers(iterableDiff);
  var defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);
  var RenderComponentType = (function() {
    function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {
      this.id = id;
      this.templateUrl = templateUrl;
      this.slotCount = slotCount;
      this.encapsulation = encapsulation;
      this.styles = styles;
      this.animations = animations;
    }
    return RenderComponentType;
  }());
  var RenderDebugInfo = (function() {
    function RenderDebugInfo() {}
    Object.defineProperty(RenderDebugInfo.prototype, "injector", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(RenderDebugInfo.prototype, "component", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(RenderDebugInfo.prototype, "providerTokens", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(RenderDebugInfo.prototype, "references", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(RenderDebugInfo.prototype, "context", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(RenderDebugInfo.prototype, "source", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    return RenderDebugInfo;
  }());
  var Renderer = (function() {
    function Renderer() {}
    Renderer.prototype.selectRootElement = function(selectorOrNode, debugInfo) {};
    Renderer.prototype.createElement = function(parentElement, name, debugInfo) {};
    Renderer.prototype.createViewRoot = function(hostElement) {};
    Renderer.prototype.createTemplateAnchor = function(parentElement, debugInfo) {};
    Renderer.prototype.createText = function(parentElement, value, debugInfo) {};
    Renderer.prototype.projectNodes = function(parentElement, nodes) {};
    Renderer.prototype.attachViewAfter = function(node, viewRootNodes) {};
    Renderer.prototype.detachView = function(viewRootNodes) {};
    Renderer.prototype.destroyView = function(hostElement, viewAllNodes) {};
    Renderer.prototype.listen = function(renderElement, name, callback) {};
    Renderer.prototype.listenGlobal = function(target, name, callback) {};
    Renderer.prototype.setElementProperty = function(renderElement, propertyName, propertyValue) {};
    Renderer.prototype.setElementAttribute = function(renderElement, attributeName, attributeValue) {};
    Renderer.prototype.setBindingDebugInfo = function(renderElement, propertyName, propertyValue) {};
    Renderer.prototype.setElementClass = function(renderElement, className, isAdd) {};
    Renderer.prototype.setElementStyle = function(renderElement, styleName, styleValue) {};
    Renderer.prototype.invokeElementMethod = function(renderElement, methodName, args) {};
    Renderer.prototype.setText = function(renderNode, text) {};
    Renderer.prototype.animate = function(element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {};
    return Renderer;
  }());
  var RootRenderer = (function() {
    function RootRenderer() {}
    RootRenderer.prototype.renderComponent = function(componentType) {};
    return RootRenderer;
  }());
  var SecurityContext = {};
  SecurityContext.NONE = 0;
  SecurityContext.HTML = 1;
  SecurityContext.STYLE = 2;
  SecurityContext.SCRIPT = 3;
  SecurityContext.URL = 4;
  SecurityContext.RESOURCE_URL = 5;
  SecurityContext[SecurityContext.NONE] = "NONE";
  SecurityContext[SecurityContext.HTML] = "HTML";
  SecurityContext[SecurityContext.STYLE] = "STYLE";
  SecurityContext[SecurityContext.SCRIPT] = "SCRIPT";
  SecurityContext[SecurityContext.URL] = "URL";
  SecurityContext[SecurityContext.RESOURCE_URL] = "RESOURCE_URL";
  var Sanitizer = (function() {
    function Sanitizer() {}
    Sanitizer.prototype.sanitize = function(context, value) {};
    return Sanitizer;
  }());
  var __extends$7 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var ExpressionChangedAfterItHasBeenCheckedError = (function(_super) {
    __extends$7(ExpressionChangedAfterItHasBeenCheckedError, _super);
    function ExpressionChangedAfterItHasBeenCheckedError(oldValue, currValue) {
      var msg = "Expression has changed after it was checked. Previous value: '" + oldValue + "'. Current value: '" + currValue + "'.";
      if (oldValue === UNINITIALIZED) {
        msg += " It seems like the view has been created after its parent and its children have been dirty checked." + " Has it been created in a change detection hook ?";
      }
      _super.call(this, msg);
    }
    return ExpressionChangedAfterItHasBeenCheckedError;
  }(BaseError));
  var ViewWrappedError = (function(_super) {
    __extends$7(ViewWrappedError, _super);
    function ViewWrappedError(originalError, context) {
      _super.call(this, "Error in " + context.source, originalError);
      this.context = context;
    }
    return ViewWrappedError;
  }(WrappedError));
  var ViewDestroyedError = (function(_super) {
    __extends$7(ViewDestroyedError, _super);
    function ViewDestroyedError(details) {
      _super.call(this, "Attempt to use a destroyed view: " + details);
    }
    return ViewDestroyedError;
  }(BaseError));
  var ViewUtils = (function() {
    function ViewUtils(_renderer, sanitizer, animationQueue) {
      this._renderer = _renderer;
      this.animationQueue = animationQueue;
      this._nextCompTypeId = 0;
      this.sanitizer = sanitizer;
    }
    ViewUtils.prototype.renderComponent = function(renderComponentType) {
      return this._renderer.renderComponent(renderComponentType);
    };
    ViewUtils.decorators = [{type: Injectable}];
    ViewUtils.ctorParameters = function() {
      return [{type: RootRenderer}, {type: Sanitizer}, {type: AnimationQueue}];
    };
    return ViewUtils;
  }());
  var nextRenderComponentTypeId = 0;
  function createRenderComponentType(templateUrl, slotCount, encapsulation, styles, animations) {
    return new RenderComponentType("" + nextRenderComponentTypeId++, templateUrl, slotCount, encapsulation, styles, animations);
  }
  function addToArray(e, array) {
    array.push(e);
  }
  function interpolate(valueCount, constAndInterp) {
    var result = '';
    for (var i = 0; i < valueCount * 2; i = i + 2) {
      result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);
    }
    return result + constAndInterp[valueCount * 2];
  }
  function inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {
    switch (valueCount) {
      case 1:
        return c0 + _toStringWithNull(a1) + c1;
      case 2:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;
      case 3:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3;
      case 4:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4;
      case 5:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;
      case 6:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;
      case 7:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7;
      case 8:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;
      case 9:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;
      default:
        throw new Error("Does not support more than 9 expressions");
    }
  }
  function _toStringWithNull(v) {
    return v != null ? v.toString() : '';
  }
  function checkBinding(throwOnChange, oldValue, newValue) {
    if (throwOnChange) {
      if (!devModeEqual(oldValue, newValue)) {
        throw new ExpressionChangedAfterItHasBeenCheckedError(oldValue, newValue);
      }
      return false;
    } else {
      return !looseIdentical(oldValue, newValue);
    }
  }
  function castByValue(input, value) {
    return (input);
  }
  var EMPTY_ARRAY = [];
  var EMPTY_MAP = {};
  function pureProxy1(fn) {
    var result;
    var v0 = UNINITIALIZED;
    return function(p0) {
      if (!looseIdentical(v0, p0)) {
        v0 = p0;
        result = fn(p0);
      }
      return result;
    };
  }
  function pureProxy2(fn) {
    var result;
    var v0 = UNINITIALIZED;
    var v1 = UNINITIALIZED;
    return function(p0, p1) {
      if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1)) {
        v0 = p0;
        v1 = p1;
        result = fn(p0, p1);
      }
      return result;
    };
  }
  function pureProxy3(fn) {
    var result;
    var v0 = UNINITIALIZED;
    var v1 = UNINITIALIZED;
    var v2 = UNINITIALIZED;
    return function(p0, p1, p2) {
      if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2)) {
        v0 = p0;
        v1 = p1;
        v2 = p2;
        result = fn(p0, p1, p2);
      }
      return result;
    };
  }
  function pureProxy4(fn) {
    var result;
    var v0,
        v1,
        v2,
        v3;
    v0 = v1 = v2 = v3 = UNINITIALIZED;
    return function(p0, p1, p2, p3) {
      if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3)) {
        v0 = p0;
        v1 = p1;
        v2 = p2;
        v3 = p3;
        result = fn(p0, p1, p2, p3);
      }
      return result;
    };
  }
  function pureProxy5(fn) {
    var result;
    var v0,
        v1,
        v2,
        v3,
        v4;
    v0 = v1 = v2 = v3 = v4 = UNINITIALIZED;
    return function(p0, p1, p2, p3, p4) {
      if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4)) {
        v0 = p0;
        v1 = p1;
        v2 = p2;
        v3 = p3;
        v4 = p4;
        result = fn(p0, p1, p2, p3, p4);
      }
      return result;
    };
  }
  function pureProxy6(fn) {
    var result;
    var v0,
        v1,
        v2,
        v3,
        v4,
        v5;
    v0 = v1 = v2 = v3 = v4 = v5 = UNINITIALIZED;
    return function(p0, p1, p2, p3, p4, p5) {
      if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5)) {
        v0 = p0;
        v1 = p1;
        v2 = p2;
        v3 = p3;
        v4 = p4;
        v5 = p5;
        result = fn(p0, p1, p2, p3, p4, p5);
      }
      return result;
    };
  }
  function pureProxy7(fn) {
    var result;
    var v0,
        v1,
        v2,
        v3,
        v4,
        v5,
        v6;
    v0 = v1 = v2 = v3 = v4 = v5 = v6 = UNINITIALIZED;
    return function(p0, p1, p2, p3, p4, p5, p6) {
      if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) || !looseIdentical(v6, p6)) {
        v0 = p0;
        v1 = p1;
        v2 = p2;
        v3 = p3;
        v4 = p4;
        v5 = p5;
        v6 = p6;
        result = fn(p0, p1, p2, p3, p4, p5, p6);
      }
      return result;
    };
  }
  function pureProxy8(fn) {
    var result;
    var v0,
        v1,
        v2,
        v3,
        v4,
        v5,
        v6,
        v7;
    v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = UNINITIALIZED;
    return function(p0, p1, p2, p3, p4, p5, p6, p7) {
      if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) || !looseIdentical(v6, p6) || !looseIdentical(v7, p7)) {
        v0 = p0;
        v1 = p1;
        v2 = p2;
        v3 = p3;
        v4 = p4;
        v5 = p5;
        v6 = p6;
        v7 = p7;
        result = fn(p0, p1, p2, p3, p4, p5, p6, p7);
      }
      return result;
    };
  }
  function pureProxy9(fn) {
    var result;
    var v0,
        v1,
        v2,
        v3,
        v4,
        v5,
        v6,
        v7,
        v8;
    v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = UNINITIALIZED;
    return function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
      if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) || !looseIdentical(v6, p6) || !looseIdentical(v7, p7) || !looseIdentical(v8, p8)) {
        v0 = p0;
        v1 = p1;
        v2 = p2;
        v3 = p3;
        v4 = p4;
        v5 = p5;
        v6 = p6;
        v7 = p7;
        v8 = p8;
        result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8);
      }
      return result;
    };
  }
  function pureProxy10(fn) {
    var result;
    var v0,
        v1,
        v2,
        v3,
        v4,
        v5,
        v6,
        v7,
        v8,
        v9;
    v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = v9 = UNINITIALIZED;
    return function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
      if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) || !looseIdentical(v6, p6) || !looseIdentical(v7, p7) || !looseIdentical(v8, p8) || !looseIdentical(v9, p9)) {
        v0 = p0;
        v1 = p1;
        v2 = p2;
        v3 = p3;
        v4 = p4;
        v5 = p5;
        v6 = p6;
        v7 = p7;
        v8 = p8;
        v9 = p9;
        result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
      }
      return result;
    };
  }
  function setBindingDebugInfoForChanges(renderer, el, changes) {
    Object.keys(changes).forEach(function(propName) {
      setBindingDebugInfo(renderer, el, propName, changes[propName].currentValue);
    });
  }
  function setBindingDebugInfo(renderer, el, propName, value) {
    try {
      renderer.setBindingDebugInfo(el, "ng-reflect-" + camelCaseToDashCase(propName), value ? value.toString() : null);
    } catch (e) {
      renderer.setBindingDebugInfo(el, "ng-reflect-" + camelCaseToDashCase(propName), '[ERROR] Exception while trying to serialize the value');
    }
  }
  var CAMEL_CASE_REGEXP = /([A-Z])/g;
  function camelCaseToDashCase(input) {
    return input.replace(CAMEL_CASE_REGEXP, function() {
      var m = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        m[_i - 0] = arguments[_i];
      }
      return '-' + m[1].toLowerCase();
    });
  }
  function createRenderElement(renderer, parentElement, name, attrs, debugInfo) {
    var el = renderer.createElement(parentElement, name, debugInfo);
    for (var i = 0; i < attrs.length; i += 2) {
      renderer.setElementAttribute(el, attrs.get(i), attrs.get(i + 1));
    }
    return el;
  }
  function selectOrCreateRenderHostElement(renderer, elementName, attrs, rootSelectorOrNode, debugInfo) {
    var hostElement;
    if (isPresent(rootSelectorOrNode)) {
      hostElement = renderer.selectRootElement(rootSelectorOrNode, debugInfo);
      for (var i = 0; i < attrs.length; i += 2) {
        renderer.setElementAttribute(hostElement, attrs.get(i), attrs.get(i + 1));
      }
      renderer.setElementAttribute(hostElement, 'ng-version', VERSION.full);
    } else {
      hostElement = createRenderElement(renderer, null, elementName, attrs, debugInfo);
    }
    return hostElement;
  }
  function subscribeToRenderElement(view, element, eventNamesAndTargets, listener) {
    var disposables = createEmptyInlineArray(eventNamesAndTargets.length / 2);
    for (var i = 0; i < eventNamesAndTargets.length; i += 2) {
      var eventName = eventNamesAndTargets.get(i);
      var eventTarget = eventNamesAndTargets.get(i + 1);
      var disposable = void 0;
      if (eventTarget) {
        disposable = view.renderer.listenGlobal(eventTarget, eventName, listener.bind(view, eventTarget + ":" + eventName));
      } else {
        disposable = view.renderer.listen(element, eventName, listener.bind(view, eventName));
      }
      disposables.set(i / 2, disposable);
    }
    return disposeInlineArray.bind(null, disposables);
  }
  function disposeInlineArray(disposables) {
    for (var i = 0; i < disposables.length; i++) {
      disposables.get(i)();
    }
  }
  function noop() {}
  function createEmptyInlineArray(length) {
    var ctor;
    if (length <= 2) {
      ctor = InlineArray2;
    } else if (length <= 4) {
      ctor = InlineArray4;
    } else if (length <= 8) {
      ctor = InlineArray8;
    } else if (length <= 16) {
      ctor = InlineArray16;
    } else {
      ctor = InlineArrayDynamic;
    }
    return new ctor(length);
  }
  var InlineArray0 = (function() {
    function InlineArray0() {
      this.length = 0;
    }
    InlineArray0.prototype.get = function(index) {
      return undefined;
    };
    InlineArray0.prototype.set = function(index, value) {};
    return InlineArray0;
  }());
  var InlineArray2 = (function() {
    function InlineArray2(length, _v0, _v1) {
      this.length = length;
      this._v0 = _v0;
      this._v1 = _v1;
    }
    InlineArray2.prototype.get = function(index) {
      switch (index) {
        case 0:
          return this._v0;
        case 1:
          return this._v1;
        default:
          return undefined;
      }
    };
    InlineArray2.prototype.set = function(index, value) {
      switch (index) {
        case 0:
          this._v0 = value;
          break;
        case 1:
          this._v1 = value;
          break;
      }
    };
    return InlineArray2;
  }());
  var InlineArray4 = (function() {
    function InlineArray4(length, _v0, _v1, _v2, _v3) {
      this.length = length;
      this._v0 = _v0;
      this._v1 = _v1;
      this._v2 = _v2;
      this._v3 = _v3;
    }
    InlineArray4.prototype.get = function(index) {
      switch (index) {
        case 0:
          return this._v0;
        case 1:
          return this._v1;
        case 2:
          return this._v2;
        case 3:
          return this._v3;
        default:
          return undefined;
      }
    };
    InlineArray4.prototype.set = function(index, value) {
      switch (index) {
        case 0:
          this._v0 = value;
          break;
        case 1:
          this._v1 = value;
          break;
        case 2:
          this._v2 = value;
          break;
        case 3:
          this._v3 = value;
          break;
      }
    };
    return InlineArray4;
  }());
  var InlineArray8 = (function() {
    function InlineArray8(length, _v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7) {
      this.length = length;
      this._v0 = _v0;
      this._v1 = _v1;
      this._v2 = _v2;
      this._v3 = _v3;
      this._v4 = _v4;
      this._v5 = _v5;
      this._v6 = _v6;
      this._v7 = _v7;
    }
    InlineArray8.prototype.get = function(index) {
      switch (index) {
        case 0:
          return this._v0;
        case 1:
          return this._v1;
        case 2:
          return this._v2;
        case 3:
          return this._v3;
        case 4:
          return this._v4;
        case 5:
          return this._v5;
        case 6:
          return this._v6;
        case 7:
          return this._v7;
        default:
          return undefined;
      }
    };
    InlineArray8.prototype.set = function(index, value) {
      switch (index) {
        case 0:
          this._v0 = value;
          break;
        case 1:
          this._v1 = value;
          break;
        case 2:
          this._v2 = value;
          break;
        case 3:
          this._v3 = value;
          break;
        case 4:
          this._v4 = value;
          break;
        case 5:
          this._v5 = value;
          break;
        case 6:
          this._v6 = value;
          break;
        case 7:
          this._v7 = value;
          break;
      }
    };
    return InlineArray8;
  }());
  var InlineArray16 = (function() {
    function InlineArray16(length, _v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7, _v8, _v9, _v10, _v11, _v12, _v13, _v14, _v15) {
      this.length = length;
      this._v0 = _v0;
      this._v1 = _v1;
      this._v2 = _v2;
      this._v3 = _v3;
      this._v4 = _v4;
      this._v5 = _v5;
      this._v6 = _v6;
      this._v7 = _v7;
      this._v8 = _v8;
      this._v9 = _v9;
      this._v10 = _v10;
      this._v11 = _v11;
      this._v12 = _v12;
      this._v13 = _v13;
      this._v14 = _v14;
      this._v15 = _v15;
    }
    InlineArray16.prototype.get = function(index) {
      switch (index) {
        case 0:
          return this._v0;
        case 1:
          return this._v1;
        case 2:
          return this._v2;
        case 3:
          return this._v3;
        case 4:
          return this._v4;
        case 5:
          return this._v5;
        case 6:
          return this._v6;
        case 7:
          return this._v7;
        case 8:
          return this._v8;
        case 9:
          return this._v9;
        case 10:
          return this._v10;
        case 11:
          return this._v11;
        case 12:
          return this._v12;
        case 13:
          return this._v13;
        case 14:
          return this._v14;
        case 15:
          return this._v15;
        default:
          return undefined;
      }
    };
    InlineArray16.prototype.set = function(index, value) {
      switch (index) {
        case 0:
          this._v0 = value;
          break;
        case 1:
          this._v1 = value;
          break;
        case 2:
          this._v2 = value;
          break;
        case 3:
          this._v3 = value;
          break;
        case 4:
          this._v4 = value;
          break;
        case 5:
          this._v5 = value;
          break;
        case 6:
          this._v6 = value;
          break;
        case 7:
          this._v7 = value;
          break;
        case 8:
          this._v8 = value;
          break;
        case 9:
          this._v9 = value;
          break;
        case 10:
          this._v10 = value;
          break;
        case 11:
          this._v11 = value;
          break;
        case 12:
          this._v12 = value;
          break;
        case 13:
          this._v13 = value;
          break;
        case 14:
          this._v14 = value;
          break;
        case 15:
          this._v15 = value;
          break;
      }
    };
    return InlineArray16;
  }());
  var InlineArrayDynamic = (function() {
    function InlineArrayDynamic(length) {
      var values = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        values[_i - 1] = arguments[_i];
      }
      this.length = length;
      this._values = values;
    }
    InlineArrayDynamic.prototype.get = function(index) {
      return this._values[index];
    };
    InlineArrayDynamic.prototype.set = function(index, value) {
      this._values[index] = value;
    };
    return InlineArrayDynamic;
  }());
  var EMPTY_INLINE_ARRAY = new InlineArray0();
  var view_utils = Object.freeze({
    ViewUtils: ViewUtils,
    createRenderComponentType: createRenderComponentType,
    addToArray: addToArray,
    interpolate: interpolate,
    inlineInterpolate: inlineInterpolate,
    checkBinding: checkBinding,
    castByValue: castByValue,
    EMPTY_ARRAY: EMPTY_ARRAY,
    EMPTY_MAP: EMPTY_MAP,
    pureProxy1: pureProxy1,
    pureProxy2: pureProxy2,
    pureProxy3: pureProxy3,
    pureProxy4: pureProxy4,
    pureProxy5: pureProxy5,
    pureProxy6: pureProxy6,
    pureProxy7: pureProxy7,
    pureProxy8: pureProxy8,
    pureProxy9: pureProxy9,
    pureProxy10: pureProxy10,
    setBindingDebugInfoForChanges: setBindingDebugInfoForChanges,
    setBindingDebugInfo: setBindingDebugInfo,
    createRenderElement: createRenderElement,
    selectOrCreateRenderHostElement: selectOrCreateRenderHostElement,
    subscribeToRenderElement: subscribeToRenderElement,
    noop: noop,
    InlineArray2: InlineArray2,
    InlineArray4: InlineArray4,
    InlineArray8: InlineArray8,
    InlineArray16: InlineArray16,
    InlineArrayDynamic: InlineArrayDynamic,
    EMPTY_INLINE_ARRAY: EMPTY_INLINE_ARRAY
  });
  var __extends$5 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var ComponentRef = (function() {
    function ComponentRef() {}
    Object.defineProperty(ComponentRef.prototype, "location", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ComponentRef.prototype, "injector", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ComponentRef.prototype, "instance", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    ;
    Object.defineProperty(ComponentRef.prototype, "hostView", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    ;
    Object.defineProperty(ComponentRef.prototype, "changeDetectorRef", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ComponentRef.prototype, "componentType", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    ComponentRef.prototype.destroy = function() {};
    ComponentRef.prototype.onDestroy = function(callback) {};
    return ComponentRef;
  }());
  var ComponentRef_ = (function(_super) {
    __extends$5(ComponentRef_, _super);
    function ComponentRef_(_index, _parentView, _nativeElement, _component) {
      _super.call(this);
      this._index = _index;
      this._parentView = _parentView;
      this._nativeElement = _nativeElement;
      this._component = _component;
    }
    Object.defineProperty(ComponentRef_.prototype, "location", {
      get: function() {
        return new ElementRef(this._nativeElement);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ComponentRef_.prototype, "injector", {
      get: function() {
        return this._parentView.injector(this._index);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ComponentRef_.prototype, "instance", {
      get: function() {
        return this._component;
      },
      enumerable: true,
      configurable: true
    });
    ;
    Object.defineProperty(ComponentRef_.prototype, "hostView", {
      get: function() {
        return this._parentView.ref;
      },
      enumerable: true,
      configurable: true
    });
    ;
    Object.defineProperty(ComponentRef_.prototype, "changeDetectorRef", {
      get: function() {
        return this._parentView.ref;
      },
      enumerable: true,
      configurable: true
    });
    ;
    Object.defineProperty(ComponentRef_.prototype, "componentType", {
      get: function() {
        return (this._component.constructor);
      },
      enumerable: true,
      configurable: true
    });
    ComponentRef_.prototype.destroy = function() {
      this._parentView.detachAndDestroy();
    };
    ComponentRef_.prototype.onDestroy = function(callback) {
      this.hostView.onDestroy(callback);
    };
    return ComponentRef_;
  }(ComponentRef));
  var ComponentFactory = (function() {
    function ComponentFactory(selector, _viewClass, _componentType) {
      this.selector = selector;
      this._viewClass = _viewClass;
      this._componentType = _componentType;
    }
    Object.defineProperty(ComponentFactory.prototype, "componentType", {
      get: function() {
        return this._componentType;
      },
      enumerable: true,
      configurable: true
    });
    ComponentFactory.prototype.create = function(injector, projectableNodes, rootSelectorOrNode) {
      if (projectableNodes === void 0) {
        projectableNodes = null;
      }
      if (rootSelectorOrNode === void 0) {
        rootSelectorOrNode = null;
      }
      var vu = injector.get(ViewUtils);
      if (!projectableNodes) {
        projectableNodes = [];
      }
      var hostView = new this._viewClass(vu, null, null, null);
      return hostView.createHostView(rootSelectorOrNode, injector, projectableNodes);
    };
    return ComponentFactory;
  }());
  var __extends$8 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var NoComponentFactoryError = (function(_super) {
    __extends$8(NoComponentFactoryError, _super);
    function NoComponentFactoryError(component) {
      _super.call(this, "No component factory found for " + stringify(component) + ". Did you add it to @NgModule.entryComponents?");
      this.component = component;
    }
    return NoComponentFactoryError;
  }(BaseError));
  var _NullComponentFactoryResolver = (function() {
    function _NullComponentFactoryResolver() {}
    _NullComponentFactoryResolver.prototype.resolveComponentFactory = function(component) {
      throw new NoComponentFactoryError(component);
    };
    return _NullComponentFactoryResolver;
  }());
  var ComponentFactoryResolver = (function() {
    function ComponentFactoryResolver() {}
    ComponentFactoryResolver.prototype.resolveComponentFactory = function(component) {};
    ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();
    return ComponentFactoryResolver;
  }());
  var CodegenComponentFactoryResolver = (function() {
    function CodegenComponentFactoryResolver(factories, _parent) {
      this._parent = _parent;
      this._factories = new Map();
      for (var i = 0; i < factories.length; i++) {
        var factory = factories[i];
        this._factories.set(factory.componentType, factory);
      }
    }
    CodegenComponentFactoryResolver.prototype.resolveComponentFactory = function(component) {
      var result = this._factories.get(component);
      if (!result) {
        result = this._parent.resolveComponentFactory(component);
      }
      return result;
    };
    return CodegenComponentFactoryResolver;
  }());
  var trace;
  var events;
  function detectWTF() {
    var wtf = ((global$1))['wtf'];
    if (wtf) {
      trace = wtf['trace'];
      if (trace) {
        events = trace['events'];
        return true;
      }
    }
    return false;
  }
  function createScope(signature, flags) {
    if (flags === void 0) {
      flags = null;
    }
    return events.createScope(signature, flags);
  }
  function leave(scope, returnValue) {
    trace.leaveScope(scope, returnValue);
    return returnValue;
  }
  function startTimeRange(rangeType, action) {
    return trace.beginTimeRange(rangeType, action);
  }
  function endTimeRange(range) {
    trace.endTimeRange(range);
  }
  var wtfEnabled = detectWTF();
  function noopScope(arg0, arg1) {
    return null;
  }
  var wtfCreateScope = wtfEnabled ? createScope : function(signature, flags) {
    return noopScope;
  };
  var wtfLeave = wtfEnabled ? leave : function(s, r) {
    return r;
  };
  var wtfStartTimeRange = wtfEnabled ? startTimeRange : function(rangeType, action) {
    return null;
  };
  var wtfEndTimeRange = wtfEnabled ? endTimeRange : function(r) {
    return null;
  };
  var Testability = (function() {
    function Testability(_ngZone) {
      this._ngZone = _ngZone;
      this._pendingCount = 0;
      this._isZoneStable = true;
      this._didWork = false;
      this._callbacks = [];
      this._watchAngularEvents();
    }
    Testability.prototype._watchAngularEvents = function() {
      var _this = this;
      this._ngZone.onUnstable.subscribe({next: function() {
          _this._didWork = true;
          _this._isZoneStable = false;
        }});
      this._ngZone.runOutsideAngular(function() {
        _this._ngZone.onStable.subscribe({next: function() {
            NgZone.assertNotInAngularZone();
            scheduleMicroTask(function() {
              _this._isZoneStable = true;
              _this._runCallbacksIfReady();
            });
          }});
      });
    };
    Testability.prototype.increasePendingRequestCount = function() {
      this._pendingCount += 1;
      this._didWork = true;
      return this._pendingCount;
    };
    Testability.prototype.decreasePendingRequestCount = function() {
      this._pendingCount -= 1;
      if (this._pendingCount < 0) {
        throw new Error('pending async requests below zero');
      }
      this._runCallbacksIfReady();
      return this._pendingCount;
    };
    Testability.prototype.isStable = function() {
      return this._isZoneStable && this._pendingCount == 0 && !this._ngZone.hasPendingMacrotasks;
    };
    Testability.prototype._runCallbacksIfReady = function() {
      var _this = this;
      if (this.isStable()) {
        scheduleMicroTask(function() {
          while (_this._callbacks.length !== 0) {
            (_this._callbacks.pop())(_this._didWork);
          }
          _this._didWork = false;
        });
      } else {
        this._didWork = true;
      }
    };
    Testability.prototype.whenStable = function(callback) {
      this._callbacks.push(callback);
      this._runCallbacksIfReady();
    };
    Testability.prototype.getPendingRequestCount = function() {
      return this._pendingCount;
    };
    Testability.prototype.findBindings = function(using, provider, exactMatch) {
      return [];
    };
    Testability.prototype.findProviders = function(using, provider, exactMatch) {
      return [];
    };
    Testability.decorators = [{type: Injectable}];
    Testability.ctorParameters = function() {
      return [{type: NgZone}];
    };
    return Testability;
  }());
  var TestabilityRegistry = (function() {
    function TestabilityRegistry() {
      this._applications = new Map();
      _testabilityGetter.addToWindow(this);
    }
    TestabilityRegistry.prototype.registerApplication = function(token, testability) {
      this._applications.set(token, testability);
    };
    TestabilityRegistry.prototype.getTestability = function(elem) {
      return this._applications.get(elem);
    };
    TestabilityRegistry.prototype.getAllTestabilities = function() {
      return Array.from(this._applications.values());
    };
    TestabilityRegistry.prototype.getAllRootElements = function() {
      return Array.from(this._applications.keys());
    };
    TestabilityRegistry.prototype.findTestabilityInTree = function(elem, findInAncestors) {
      if (findInAncestors === void 0) {
        findInAncestors = true;
      }
      return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);
    };
    TestabilityRegistry.decorators = [{type: Injectable}];
    TestabilityRegistry.ctorParameters = function() {
      return [];
    };
    return TestabilityRegistry;
  }());
  var _NoopGetTestability = (function() {
    function _NoopGetTestability() {}
    _NoopGetTestability.prototype.addToWindow = function(registry) {};
    _NoopGetTestability.prototype.findTestabilityInTree = function(registry, elem, findInAncestors) {
      return null;
    };
    return _NoopGetTestability;
  }());
  function setTestabilityGetter(getter) {
    _testabilityGetter = getter;
  }
  var _testabilityGetter = new _NoopGetTestability();
  var __extends$3 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var _devMode = true;
  var _runModeLocked = false;
  var _platform;
  function enableProdMode() {
    if (_runModeLocked) {
      throw new Error('Cannot enable prod mode after platform setup.');
    }
    _devMode = false;
  }
  function isDevMode() {
    _runModeLocked = true;
    return _devMode;
  }
  var NgProbeToken = (function() {
    function NgProbeToken(name, token) {
      this.name = name;
      this.token = token;
    }
    return NgProbeToken;
  }());
  function createPlatform(injector) {
    if (_platform && !_platform.destroyed) {
      throw new Error('There can be only one platform. Destroy the previous one to create a new one.');
    }
    _platform = injector.get(PlatformRef);
    var inits = (injector.get(PLATFORM_INITIALIZER, null));
    if (inits)
      inits.forEach(function(init) {
        return init();
      });
    return _platform;
  }
  function createPlatformFactory(parentPlatformFactory, name, providers) {
    if (providers === void 0) {
      providers = [];
    }
    var marker = new OpaqueToken("Platform: " + name);
    return function(extraProviders) {
      if (extraProviders === void 0) {
        extraProviders = [];
      }
      if (!getPlatform()) {
        if (parentPlatformFactory) {
          parentPlatformFactory(providers.concat(extraProviders).concat({
            provide: marker,
            useValue: true
          }));
        } else {
          createPlatform(ReflectiveInjector.resolveAndCreate(providers.concat(extraProviders).concat({
            provide: marker,
            useValue: true
          })));
        }
      }
      return assertPlatform(marker);
    };
  }
  function assertPlatform(requiredToken) {
    var platform = getPlatform();
    if (!platform) {
      throw new Error('No platform exists!');
    }
    if (!platform.injector.get(requiredToken, null)) {
      throw new Error('A platform with a different configuration has been created. Please destroy it first.');
    }
    return platform;
  }
  function destroyPlatform() {
    if (_platform && !_platform.destroyed) {
      _platform.destroy();
    }
  }
  function getPlatform() {
    return _platform && !_platform.destroyed ? _platform : null;
  }
  var PlatformRef = (function() {
    function PlatformRef() {}
    PlatformRef.prototype.bootstrapModuleFactory = function(moduleFactory) {
      throw unimplemented();
    };
    PlatformRef.prototype.bootstrapModule = function(moduleType, compilerOptions) {
      if (compilerOptions === void 0) {
        compilerOptions = [];
      }
      throw unimplemented();
    };
    PlatformRef.prototype.onDestroy = function(callback) {};
    Object.defineProperty(PlatformRef.prototype, "injector", {
      get: function() {
        throw unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    ;
    PlatformRef.prototype.destroy = function() {};
    Object.defineProperty(PlatformRef.prototype, "destroyed", {
      get: function() {
        throw unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    return PlatformRef;
  }());
  function _callAndReportToErrorHandler(errorHandler, callback) {
    try {
      var result = callback();
      if (isPromise(result)) {
        return result.catch(function(e) {
          errorHandler.handleError(e);
          throw e;
        });
      }
      return result;
    } catch (e) {
      errorHandler.handleError(e);
      throw e;
    }
  }
  var PlatformRef_ = (function(_super) {
    __extends$3(PlatformRef_, _super);
    function PlatformRef_(_injector) {
      _super.call(this);
      this._injector = _injector;
      this._modules = [];
      this._destroyListeners = [];
      this._destroyed = false;
    }
    PlatformRef_.prototype.onDestroy = function(callback) {
      this._destroyListeners.push(callback);
    };
    Object.defineProperty(PlatformRef_.prototype, "injector", {
      get: function() {
        return this._injector;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PlatformRef_.prototype, "destroyed", {
      get: function() {
        return this._destroyed;
      },
      enumerable: true,
      configurable: true
    });
    PlatformRef_.prototype.destroy = function() {
      if (this._destroyed) {
        throw new Error('The platform has already been destroyed!');
      }
      this._modules.slice().forEach(function(module) {
        return module.destroy();
      });
      this._destroyListeners.forEach(function(listener) {
        return listener();
      });
      this._destroyed = true;
    };
    PlatformRef_.prototype.bootstrapModuleFactory = function(moduleFactory) {
      return this._bootstrapModuleFactoryWithZone(moduleFactory, null);
    };
    PlatformRef_.prototype._bootstrapModuleFactoryWithZone = function(moduleFactory, ngZone) {
      var _this = this;
      if (!ngZone)
        ngZone = new NgZone({enableLongStackTrace: isDevMode()});
      return ngZone.run(function() {
        var ngZoneInjector = ReflectiveInjector.resolveAndCreate([{
          provide: NgZone,
          useValue: ngZone
        }], _this.injector);
        var moduleRef = (moduleFactory.create(ngZoneInjector));
        var exceptionHandler = moduleRef.injector.get(ErrorHandler, null);
        if (!exceptionHandler) {
          throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');
        }
        moduleRef.onDestroy(function() {
          return ListWrapper.remove(_this._modules, moduleRef);
        });
        ngZone.onError.subscribe({next: function(error) {
            exceptionHandler.handleError(error);
          }});
        return _callAndReportToErrorHandler(exceptionHandler, function() {
          var initStatus = moduleRef.injector.get(ApplicationInitStatus);
          return initStatus.donePromise.then(function() {
            _this._moduleDoBootstrap(moduleRef);
            return moduleRef;
          });
        });
      });
    };
    PlatformRef_.prototype.bootstrapModule = function(moduleType, compilerOptions) {
      if (compilerOptions === void 0) {
        compilerOptions = [];
      }
      return this._bootstrapModuleWithZone(moduleType, compilerOptions, null);
    };
    PlatformRef_.prototype._bootstrapModuleWithZone = function(moduleType, compilerOptions, ngZone, componentFactoryCallback) {
      var _this = this;
      if (compilerOptions === void 0) {
        compilerOptions = [];
      }
      var compilerFactory = this.injector.get(CompilerFactory);
      var compiler = compilerFactory.createCompiler(Array.isArray(compilerOptions) ? compilerOptions : [compilerOptions]);
      if (componentFactoryCallback) {
        return compiler.compileModuleAndAllComponentsAsync(moduleType).then(function(_a) {
          var ngModuleFactory = _a.ngModuleFactory,
              componentFactories = _a.componentFactories;
          componentFactoryCallback(componentFactories);
          return _this._bootstrapModuleFactoryWithZone(ngModuleFactory, ngZone);
        });
      }
      return compiler.compileModuleAsync(moduleType).then(function(moduleFactory) {
        return _this._bootstrapModuleFactoryWithZone(moduleFactory, ngZone);
      });
    };
    PlatformRef_.prototype._moduleDoBootstrap = function(moduleRef) {
      var appRef = moduleRef.injector.get(ApplicationRef);
      if (moduleRef.bootstrapFactories.length > 0) {
        moduleRef.bootstrapFactories.forEach(function(compFactory) {
          return appRef.bootstrap(compFactory);
        });
      } else if (moduleRef.instance.ngDoBootstrap) {
        moduleRef.instance.ngDoBootstrap(appRef);
      } else {
        throw new Error(("The module " + stringify(moduleRef.instance.constructor) + " was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. ") + "Please define one of these.");
      }
    };
    PlatformRef_.decorators = [{type: Injectable}];
    PlatformRef_.ctorParameters = function() {
      return [{type: Injector}];
    };
    return PlatformRef_;
  }(PlatformRef));
  var ApplicationRef = (function() {
    function ApplicationRef() {}
    ApplicationRef.prototype.bootstrap = function(componentFactory) {};
    ApplicationRef.prototype.tick = function() {};
    Object.defineProperty(ApplicationRef.prototype, "componentTypes", {
      get: function() {
        return (unimplemented());
      },
      enumerable: true,
      configurable: true
    });
    ;
    Object.defineProperty(ApplicationRef.prototype, "components", {
      get: function() {
        return (unimplemented());
      },
      enumerable: true,
      configurable: true
    });
    ;
    ApplicationRef.prototype.attachView = function(view) {
      unimplemented();
    };
    ApplicationRef.prototype.detachView = function(view) {
      unimplemented();
    };
    Object.defineProperty(ApplicationRef.prototype, "viewCount", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    return ApplicationRef;
  }());
  var ApplicationRef_ = (function(_super) {
    __extends$3(ApplicationRef_, _super);
    function ApplicationRef_(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus, _testabilityRegistry, _testability) {
      var _this = this;
      _super.call(this);
      this._zone = _zone;
      this._console = _console;
      this._injector = _injector;
      this._exceptionHandler = _exceptionHandler;
      this._componentFactoryResolver = _componentFactoryResolver;
      this._initStatus = _initStatus;
      this._testabilityRegistry = _testabilityRegistry;
      this._testability = _testability;
      this._bootstrapListeners = [];
      this._rootComponents = [];
      this._rootComponentTypes = [];
      this._views = [];
      this._runningTick = false;
      this._enforceNoNewChanges = false;
      this._enforceNoNewChanges = isDevMode();
      this._zone.onMicrotaskEmpty.subscribe({next: function() {
          _this._zone.run(function() {
            _this.tick();
          });
        }});
    }
    ApplicationRef_.prototype.attachView = function(viewRef) {
      var view = ((viewRef)).internalView;
      this._views.push(view);
      view.attachToAppRef(this);
    };
    ApplicationRef_.prototype.detachView = function(viewRef) {
      var view = ((viewRef)).internalView;
      ListWrapper.remove(this._views, view);
      view.detach();
    };
    ApplicationRef_.prototype.bootstrap = function(componentOrFactory) {
      var _this = this;
      if (!this._initStatus.done) {
        throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');
      }
      var componentFactory;
      if (componentOrFactory instanceof ComponentFactory) {
        componentFactory = componentOrFactory;
      } else {
        componentFactory = this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);
      }
      this._rootComponentTypes.push(componentFactory.componentType);
      var compRef = componentFactory.create(this._injector, [], componentFactory.selector);
      compRef.onDestroy(function() {
        _this._unloadComponent(compRef);
      });
      var testability = compRef.injector.get(Testability, null);
      if (testability) {
        compRef.injector.get(TestabilityRegistry).registerApplication(compRef.location.nativeElement, testability);
      }
      this._loadComponent(compRef);
      if (isDevMode()) {
        this._console.log("Angular is running in the development mode. Call enableProdMode() to enable the production mode.");
      }
      return compRef;
    };
    ApplicationRef_.prototype._loadComponent = function(componentRef) {
      this.attachView(componentRef.hostView);
      this.tick();
      this._rootComponents.push(componentRef);
      var listeners = (this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners));
      listeners.forEach(function(listener) {
        return listener(componentRef);
      });
    };
    ApplicationRef_.prototype._unloadComponent = function(componentRef) {
      this.detachView(componentRef.hostView);
      ListWrapper.remove(this._rootComponents, componentRef);
    };
    ApplicationRef_.prototype.tick = function() {
      if (this._runningTick) {
        throw new Error('ApplicationRef.tick is called recursively');
      }
      var scope = ApplicationRef_._tickScope();
      try {
        this._runningTick = true;
        this._views.forEach(function(view) {
          return view.ref.detectChanges();
        });
        if (this._enforceNoNewChanges) {
          this._views.forEach(function(view) {
            return view.ref.checkNoChanges();
          });
        }
      } finally {
        this._runningTick = false;
        wtfLeave(scope);
      }
    };
    ApplicationRef_.prototype.ngOnDestroy = function() {
      this._views.slice().forEach(function(view) {
        return view.destroy();
      });
    };
    Object.defineProperty(ApplicationRef_.prototype, "viewCount", {
      get: function() {
        return this._views.length;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ApplicationRef_.prototype, "componentTypes", {
      get: function() {
        return this._rootComponentTypes;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ApplicationRef_.prototype, "components", {
      get: function() {
        return this._rootComponents;
      },
      enumerable: true,
      configurable: true
    });
    ApplicationRef_._tickScope = wtfCreateScope('ApplicationRef#tick()');
    ApplicationRef_.decorators = [{type: Injectable}];
    ApplicationRef_.ctorParameters = function() {
      return [{type: NgZone}, {type: Console}, {type: Injector}, {type: ErrorHandler}, {type: ComponentFactoryResolver}, {type: ApplicationInitStatus}, {
        type: TestabilityRegistry,
        decorators: [{type: Optional}]
      }, {
        type: Testability,
        decorators: [{type: Optional}]
      }];
    };
    return ApplicationRef_;
  }(ApplicationRef));
  var __extends$9 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var NgModuleRef = (function() {
    function NgModuleRef() {}
    Object.defineProperty(NgModuleRef.prototype, "injector", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgModuleRef.prototype, "componentFactoryResolver", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgModuleRef.prototype, "instance", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    NgModuleRef.prototype.destroy = function() {};
    NgModuleRef.prototype.onDestroy = function(callback) {};
    return NgModuleRef;
  }());
  var NgModuleFactory = (function() {
    function NgModuleFactory(_injectorClass, _moduleType) {
      this._injectorClass = _injectorClass;
      this._moduleType = _moduleType;
    }
    Object.defineProperty(NgModuleFactory.prototype, "moduleType", {
      get: function() {
        return this._moduleType;
      },
      enumerable: true,
      configurable: true
    });
    NgModuleFactory.prototype.create = function(parentInjector) {
      if (!parentInjector) {
        parentInjector = Injector.NULL;
      }
      var instance = new this._injectorClass(parentInjector);
      instance.create();
      return instance;
    };
    return NgModuleFactory;
  }());
  var _UNDEFINED = new Object();
  var NgModuleInjector = (function(_super) {
    __extends$9(NgModuleInjector, _super);
    function NgModuleInjector(parent, factories, bootstrapFactories) {
      _super.call(this, factories, parent.get(ComponentFactoryResolver, ComponentFactoryResolver.NULL));
      this.parent = parent;
      this.bootstrapFactories = bootstrapFactories;
      this._destroyListeners = [];
      this._destroyed = false;
    }
    NgModuleInjector.prototype.create = function() {
      this.instance = this.createInternal();
    };
    NgModuleInjector.prototype.createInternal = function() {};
    NgModuleInjector.prototype.get = function(token, notFoundValue) {
      if (notFoundValue === void 0) {
        notFoundValue = THROW_IF_NOT_FOUND;
      }
      if (token === Injector || token === ComponentFactoryResolver) {
        return this;
      }
      var result = this.getInternal(token, _UNDEFINED);
      return result === _UNDEFINED ? this.parent.get(token, notFoundValue) : result;
    };
    NgModuleInjector.prototype.getInternal = function(token, notFoundValue) {};
    Object.defineProperty(NgModuleInjector.prototype, "injector", {
      get: function() {
        return this;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgModuleInjector.prototype, "componentFactoryResolver", {
      get: function() {
        return this;
      },
      enumerable: true,
      configurable: true
    });
    NgModuleInjector.prototype.destroy = function() {
      if (this._destroyed) {
        throw new Error("The ng module " + stringify(this.instance.constructor) + " has already been destroyed.");
      }
      this._destroyed = true;
      this.destroyInternal();
      this._destroyListeners.forEach(function(listener) {
        return listener();
      });
    };
    NgModuleInjector.prototype.onDestroy = function(callback) {
      this._destroyListeners.push(callback);
    };
    NgModuleInjector.prototype.destroyInternal = function() {};
    return NgModuleInjector;
  }(CodegenComponentFactoryResolver));
  var NgModuleFactoryLoader = (function() {
    function NgModuleFactoryLoader() {}
    NgModuleFactoryLoader.prototype.load = function(path) {};
    return NgModuleFactoryLoader;
  }());
  var moduleFactories = new Map();
  function registerModuleFactory(id, factory) {
    var existing = moduleFactories.get(id);
    if (existing) {
      throw new Error("Duplicate module registered for " + id + " - " + existing.moduleType.name + " vs " + factory.moduleType.name);
    }
    moduleFactories.set(id, factory);
  }
  function getModuleFactory(id) {
    var factory = moduleFactories.get(id);
    if (!factory)
      throw new Error("No module with ID " + id + " loaded");
    return factory;
  }
  var QueryList = (function() {
    function QueryList() {
      this._dirty = true;
      this._results = [];
      this._emitter = new EventEmitter();
    }
    Object.defineProperty(QueryList.prototype, "changes", {
      get: function() {
        return this._emitter;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(QueryList.prototype, "length", {
      get: function() {
        return this._results.length;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(QueryList.prototype, "first", {
      get: function() {
        return this._results[0];
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(QueryList.prototype, "last", {
      get: function() {
        return this._results[this.length - 1];
      },
      enumerable: true,
      configurable: true
    });
    QueryList.prototype.map = function(fn) {
      return this._results.map(fn);
    };
    QueryList.prototype.filter = function(fn) {
      return this._results.filter(fn);
    };
    QueryList.prototype.find = function(fn) {
      return this._results.find(fn);
    };
    QueryList.prototype.reduce = function(fn, init) {
      return this._results.reduce(fn, init);
    };
    QueryList.prototype.forEach = function(fn) {
      this._results.forEach(fn);
    };
    QueryList.prototype.some = function(fn) {
      return this._results.some(fn);
    };
    QueryList.prototype.toArray = function() {
      return this._results.slice();
    };
    QueryList.prototype[getSymbolIterator()] = function() {
      return ((this._results))[getSymbolIterator()]();
    };
    QueryList.prototype.toString = function() {
      return this._results.toString();
    };
    QueryList.prototype.reset = function(res) {
      this._results = ListWrapper.flatten(res);
      this._dirty = false;
    };
    QueryList.prototype.notifyOnChanges = function() {
      this._emitter.emit(this);
    };
    QueryList.prototype.setDirty = function() {
      this._dirty = true;
    };
    Object.defineProperty(QueryList.prototype, "dirty", {
      get: function() {
        return this._dirty;
      },
      enumerable: true,
      configurable: true
    });
    return QueryList;
  }());
  var _SEPARATOR = '#';
  var FACTORY_CLASS_SUFFIX = 'NgFactory';
  var SystemJsNgModuleLoaderConfig = (function() {
    function SystemJsNgModuleLoaderConfig() {}
    return SystemJsNgModuleLoaderConfig;
  }());
  var DEFAULT_CONFIG = {
    factoryPathPrefix: '',
    factoryPathSuffix: '.ngfactory'
  };
  var SystemJsNgModuleLoader = (function() {
    function SystemJsNgModuleLoader(_compiler, config) {
      this._compiler = _compiler;
      this._config = config || DEFAULT_CONFIG;
    }
    SystemJsNgModuleLoader.prototype.load = function(path) {
      var offlineMode = this._compiler instanceof Compiler;
      return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);
    };
    SystemJsNgModuleLoader.prototype.loadAndCompile = function(path) {
      var _this = this;
      var _a = path.split(_SEPARATOR),
          module = _a[0],
          exportName = _a[1];
      if (exportName === undefined) {
        exportName = 'default';
      }
      return System.import(module).then(function(module) {
        return module[exportName];
      }).then(function(type) {
        return checkNotEmpty(type, module, exportName);
      }).then(function(type) {
        return _this._compiler.compileModuleAsync(type);
      });
    };
    SystemJsNgModuleLoader.prototype.loadFactory = function(path) {
      var _a = path.split(_SEPARATOR),
          module = _a[0],
          exportName = _a[1];
      var factoryClassSuffix = FACTORY_CLASS_SUFFIX;
      if (exportName === undefined) {
        exportName = 'default';
        factoryClassSuffix = '';
      }
      return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix).then(function(module) {
        return module[exportName + factoryClassSuffix];
      }).then(function(factory) {
        return checkNotEmpty(factory, module, exportName);
      });
    };
    SystemJsNgModuleLoader.decorators = [{type: Injectable}];
    SystemJsNgModuleLoader.ctorParameters = function() {
      return [{type: Compiler}, {
        type: SystemJsNgModuleLoaderConfig,
        decorators: [{type: Optional}]
      }];
    };
    return SystemJsNgModuleLoader;
  }());
  function checkNotEmpty(value, modulePath, exportName) {
    if (!value) {
      throw new Error("Cannot find '" + exportName + "' in '" + modulePath + "'");
    }
    return value;
  }
  var __extends$10 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var TemplateRef = (function() {
    function TemplateRef() {}
    Object.defineProperty(TemplateRef.prototype, "elementRef", {
      get: function() {
        return null;
      },
      enumerable: true,
      configurable: true
    });
    TemplateRef.prototype.createEmbeddedView = function(context) {};
    return TemplateRef;
  }());
  var TemplateRef_ = (function(_super) {
    __extends$10(TemplateRef_, _super);
    function TemplateRef_(_parentView, _nodeIndex, _nativeElement) {
      _super.call(this);
      this._parentView = _parentView;
      this._nodeIndex = _nodeIndex;
      this._nativeElement = _nativeElement;
    }
    TemplateRef_.prototype.createEmbeddedView = function(context) {
      var view = this._parentView.createEmbeddedViewInternal(this._nodeIndex);
      view.create(context || ({}));
      return view.ref;
    };
    Object.defineProperty(TemplateRef_.prototype, "elementRef", {
      get: function() {
        return new ElementRef(this._nativeElement);
      },
      enumerable: true,
      configurable: true
    });
    return TemplateRef_;
  }(TemplateRef));
  var ViewContainerRef = (function() {
    function ViewContainerRef() {}
    Object.defineProperty(ViewContainerRef.prototype, "element", {
      get: function() {
        return (unimplemented());
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ViewContainerRef.prototype, "injector", {
      get: function() {
        return (unimplemented());
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ViewContainerRef.prototype, "parentInjector", {
      get: function() {
        return (unimplemented());
      },
      enumerable: true,
      configurable: true
    });
    ViewContainerRef.prototype.clear = function() {};
    ViewContainerRef.prototype.get = function(index) {};
    Object.defineProperty(ViewContainerRef.prototype, "length", {
      get: function() {
        return (unimplemented());
      },
      enumerable: true,
      configurable: true
    });
    ;
    ViewContainerRef.prototype.createEmbeddedView = function(templateRef, context, index) {};
    ViewContainerRef.prototype.createComponent = function(componentFactory, index, injector, projectableNodes) {};
    ViewContainerRef.prototype.insert = function(viewRef, index) {};
    ViewContainerRef.prototype.move = function(viewRef, currentIndex) {};
    ViewContainerRef.prototype.indexOf = function(viewRef) {};
    ViewContainerRef.prototype.remove = function(index) {};
    ViewContainerRef.prototype.detach = function(index) {};
    return ViewContainerRef;
  }());
  var ViewContainerRef_ = (function() {
    function ViewContainerRef_(_element) {
      this._element = _element;
      this._createComponentInContainerScope = wtfCreateScope('ViewContainerRef#createComponent()');
      this._insertScope = wtfCreateScope('ViewContainerRef#insert()');
      this._removeScope = wtfCreateScope('ViewContainerRef#remove()');
      this._detachScope = wtfCreateScope('ViewContainerRef#detach()');
    }
    ViewContainerRef_.prototype.get = function(index) {
      return this._element.nestedViews[index].ref;
    };
    Object.defineProperty(ViewContainerRef_.prototype, "length", {
      get: function() {
        var views = this._element.nestedViews;
        return isPresent(views) ? views.length : 0;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ViewContainerRef_.prototype, "element", {
      get: function() {
        return this._element.elementRef;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ViewContainerRef_.prototype, "injector", {
      get: function() {
        return this._element.injector;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ViewContainerRef_.prototype, "parentInjector", {
      get: function() {
        return this._element.parentInjector;
      },
      enumerable: true,
      configurable: true
    });
    ViewContainerRef_.prototype.createEmbeddedView = function(templateRef, context, index) {
      if (context === void 0) {
        context = null;
      }
      if (index === void 0) {
        index = -1;
      }
      var viewRef = templateRef.createEmbeddedView(context);
      this.insert(viewRef, index);
      return viewRef;
    };
    ViewContainerRef_.prototype.createComponent = function(componentFactory, index, injector, projectableNodes) {
      if (index === void 0) {
        index = -1;
      }
      if (injector === void 0) {
        injector = null;
      }
      if (projectableNodes === void 0) {
        projectableNodes = null;
      }
      var s = this._createComponentInContainerScope();
      var contextInjector = injector || this._element.parentInjector;
      var componentRef = componentFactory.create(contextInjector, projectableNodes);
      this.insert(componentRef.hostView, index);
      return wtfLeave(s, componentRef);
    };
    ViewContainerRef_.prototype.insert = function(viewRef, index) {
      if (index === void 0) {
        index = -1;
      }
      var s = this._insertScope();
      if (index == -1)
        index = this.length;
      var viewRef_ = (viewRef);
      this._element.attachView(viewRef_.internalView, index);
      return wtfLeave(s, viewRef_);
    };
    ViewContainerRef_.prototype.move = function(viewRef, currentIndex) {
      var s = this._insertScope();
      if (currentIndex == -1)
        return;
      var viewRef_ = (viewRef);
      this._element.moveView(viewRef_.internalView, currentIndex);
      return wtfLeave(s, viewRef_);
    };
    ViewContainerRef_.prototype.indexOf = function(viewRef) {
      return this._element.nestedViews.indexOf(((viewRef)).internalView);
    };
    ViewContainerRef_.prototype.remove = function(index) {
      if (index === void 0) {
        index = -1;
      }
      var s = this._removeScope();
      if (index == -1)
        index = this.length - 1;
      var view = this._element.detachView(index);
      view.destroy();
      wtfLeave(s);
    };
    ViewContainerRef_.prototype.detach = function(index) {
      if (index === void 0) {
        index = -1;
      }
      var s = this._detachScope();
      if (index == -1)
        index = this.length - 1;
      var view = this._element.detachView(index);
      return wtfLeave(s, view.ref);
    };
    ViewContainerRef_.prototype.clear = function() {
      for (var i = this.length - 1; i >= 0; i--) {
        this.remove(i);
      }
    };
    return ViewContainerRef_;
  }());
  var __extends$11 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var ViewRef = (function(_super) {
    __extends$11(ViewRef, _super);
    function ViewRef() {
      _super.apply(this, arguments);
    }
    ViewRef.prototype.destroy = function() {};
    Object.defineProperty(ViewRef.prototype, "destroyed", {
      get: function() {
        return (unimplemented());
      },
      enumerable: true,
      configurable: true
    });
    ViewRef.prototype.onDestroy = function(callback) {};
    return ViewRef;
  }(ChangeDetectorRef));
  var EmbeddedViewRef = (function(_super) {
    __extends$11(EmbeddedViewRef, _super);
    function EmbeddedViewRef() {
      _super.apply(this, arguments);
    }
    Object.defineProperty(EmbeddedViewRef.prototype, "context", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(EmbeddedViewRef.prototype, "rootNodes", {
      get: function() {
        return (unimplemented());
      },
      enumerable: true,
      configurable: true
    });
    ;
    return EmbeddedViewRef;
  }(ViewRef));
  var ViewRef_ = (function() {
    function ViewRef_(_view, animationQueue) {
      this._view = _view;
      this.animationQueue = animationQueue;
      this._view = _view;
      this._originalMode = this._view.cdMode;
    }
    Object.defineProperty(ViewRef_.prototype, "internalView", {
      get: function() {
        return this._view;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ViewRef_.prototype, "rootNodes", {
      get: function() {
        return this._view.flatRootNodes;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ViewRef_.prototype, "context", {
      get: function() {
        return this._view.context;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ViewRef_.prototype, "destroyed", {
      get: function() {
        return this._view.destroyed;
      },
      enumerable: true,
      configurable: true
    });
    ViewRef_.prototype.markForCheck = function() {
      this._view.markPathToRootAsCheckOnce();
    };
    ViewRef_.prototype.detach = function() {
      this._view.cdMode = ChangeDetectorStatus.Detached;
    };
    ViewRef_.prototype.detectChanges = function() {
      this._view.detectChanges(false);
      this.animationQueue.flush();
    };
    ViewRef_.prototype.checkNoChanges = function() {
      this._view.detectChanges(true);
    };
    ViewRef_.prototype.reattach = function() {
      this._view.cdMode = this._originalMode;
      this.markForCheck();
    };
    ViewRef_.prototype.onDestroy = function(callback) {
      if (!this._view.disposables) {
        this._view.disposables = [];
      }
      this._view.disposables.push(callback);
    };
    ViewRef_.prototype.destroy = function() {
      this._view.detachAndDestroy();
    };
    return ViewRef_;
  }());
  var __extends$12 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var EventListener = (function() {
    function EventListener(name, callback) {
      this.name = name;
      this.callback = callback;
    }
    ;
    return EventListener;
  }());
  var DebugNode = (function() {
    function DebugNode(nativeNode, parent, _debugInfo) {
      this._debugInfo = _debugInfo;
      this.nativeNode = nativeNode;
      if (parent && parent instanceof DebugElement) {
        parent.addChild(this);
      } else {
        this.parent = null;
      }
      this.listeners = [];
    }
    Object.defineProperty(DebugNode.prototype, "injector", {
      get: function() {
        return this._debugInfo ? this._debugInfo.injector : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DebugNode.prototype, "componentInstance", {
      get: function() {
        return this._debugInfo ? this._debugInfo.component : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DebugNode.prototype, "context", {
      get: function() {
        return this._debugInfo ? this._debugInfo.context : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DebugNode.prototype, "references", {
      get: function() {
        return this._debugInfo ? this._debugInfo.references : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DebugNode.prototype, "providerTokens", {
      get: function() {
        return this._debugInfo ? this._debugInfo.providerTokens : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DebugNode.prototype, "source", {
      get: function() {
        return this._debugInfo ? this._debugInfo.source : null;
      },
      enumerable: true,
      configurable: true
    });
    return DebugNode;
  }());
  var DebugElement = (function(_super) {
    __extends$12(DebugElement, _super);
    function DebugElement(nativeNode, parent, _debugInfo) {
      _super.call(this, nativeNode, parent, _debugInfo);
      this.properties = {};
      this.attributes = {};
      this.classes = {};
      this.styles = {};
      this.childNodes = [];
      this.nativeElement = nativeNode;
    }
    DebugElement.prototype.addChild = function(child) {
      if (child) {
        this.childNodes.push(child);
        child.parent = this;
      }
    };
    DebugElement.prototype.removeChild = function(child) {
      var childIndex = this.childNodes.indexOf(child);
      if (childIndex !== -1) {
        child.parent = null;
        this.childNodes.splice(childIndex, 1);
      }
    };
    DebugElement.prototype.insertChildrenAfter = function(child, newChildren) {
      var siblingIndex = this.childNodes.indexOf(child);
      if (siblingIndex !== -1) {
        var previousChildren = this.childNodes.slice(0, siblingIndex + 1);
        var nextChildren = this.childNodes.slice(siblingIndex + 1);
        this.childNodes = previousChildren.concat(newChildren, nextChildren);
        for (var i = 0; i < newChildren.length; ++i) {
          var newChild = newChildren[i];
          if (newChild.parent) {
            newChild.parent.removeChild(newChild);
          }
          newChild.parent = this;
        }
      }
    };
    DebugElement.prototype.query = function(predicate) {
      var results = this.queryAll(predicate);
      return results[0] || null;
    };
    DebugElement.prototype.queryAll = function(predicate) {
      var matches = [];
      _queryElementChildren(this, predicate, matches);
      return matches;
    };
    DebugElement.prototype.queryAllNodes = function(predicate) {
      var matches = [];
      _queryNodeChildren(this, predicate, matches);
      return matches;
    };
    Object.defineProperty(DebugElement.prototype, "children", {
      get: function() {
        return (this.childNodes.filter(function(node) {
          return node instanceof DebugElement;
        }));
      },
      enumerable: true,
      configurable: true
    });
    DebugElement.prototype.triggerEventHandler = function(eventName, eventObj) {
      this.listeners.forEach(function(listener) {
        if (listener.name == eventName) {
          listener.callback(eventObj);
        }
      });
    };
    return DebugElement;
  }(DebugNode));
  function asNativeElements(debugEls) {
    return debugEls.map(function(el) {
      return el.nativeElement;
    });
  }
  function _queryElementChildren(element, predicate, matches) {
    element.childNodes.forEach(function(node) {
      if (node instanceof DebugElement) {
        if (predicate(node)) {
          matches.push(node);
        }
        _queryElementChildren(node, predicate, matches);
      }
    });
  }
  function _queryNodeChildren(parentNode, predicate, matches) {
    if (parentNode instanceof DebugElement) {
      parentNode.childNodes.forEach(function(node) {
        if (predicate(node)) {
          matches.push(node);
        }
        if (node instanceof DebugElement) {
          _queryNodeChildren(node, predicate, matches);
        }
      });
    }
  }
  var _nativeNodeToDebugNode = new Map();
  function getDebugNode(nativeNode) {
    return _nativeNodeToDebugNode.get(nativeNode);
  }
  function indexDebugNode(node) {
    _nativeNodeToDebugNode.set(node.nativeNode, node);
  }
  function removeDebugNodeFromIndex(node) {
    _nativeNodeToDebugNode.delete(node.nativeNode);
  }
  function _reflector() {
    return reflector;
  }
  var _CORE_PLATFORM_PROVIDERS = [PlatformRef_, {
    provide: PlatformRef,
    useExisting: PlatformRef_
  }, {
    provide: Reflector,
    useFactory: _reflector,
    deps: []
  }, {
    provide: ReflectorReader,
    useExisting: Reflector
  }, TestabilityRegistry, Console];
  var platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);
  var LOCALE_ID = new OpaqueToken('LocaleId');
  var TRANSLATIONS = new OpaqueToken('Translations');
  var TRANSLATIONS_FORMAT = new OpaqueToken('TranslationsFormat');
  function _iterableDiffersFactory() {
    return defaultIterableDiffers;
  }
  function _keyValueDiffersFactory() {
    return defaultKeyValueDiffers;
  }
  function _localeFactory(locale) {
    return locale || 'en-US';
  }
  var ApplicationModule = (function() {
    function ApplicationModule() {}
    ApplicationModule.decorators = [{
      type: NgModule,
      args: [{providers: [ApplicationRef_, {
          provide: ApplicationRef,
          useExisting: ApplicationRef_
        }, ApplicationInitStatus, Compiler, APP_ID_RANDOM_PROVIDER, ViewUtils, AnimationQueue, {
          provide: IterableDiffers,
          useFactory: _iterableDiffersFactory
        }, {
          provide: KeyValueDiffers,
          useFactory: _keyValueDiffersFactory
        }, {
          provide: LOCALE_ID,
          useFactory: _localeFactory,
          deps: [[new Inject(LOCALE_ID), new Optional(), new SkipSelf()]]
        }]}]
    }];
    ApplicationModule.ctorParameters = function() {
      return [];
    };
    return ApplicationModule;
  }());
  var FILL_STYLE_FLAG = 'true';
  var ANY_STATE = '*';
  var DEFAULT_STATE = '*';
  var EMPTY_STATE = 'void';
  var AnimationGroupPlayer = (function() {
    function AnimationGroupPlayer(_players) {
      var _this = this;
      this._players = _players;
      this._onDoneFns = [];
      this._onStartFns = [];
      this._finished = false;
      this._started = false;
      this._destroyed = false;
      this.parentPlayer = null;
      var count = 0;
      var total = this._players.length;
      if (total == 0) {
        scheduleMicroTask(function() {
          return _this._onFinish();
        });
      } else {
        this._players.forEach(function(player) {
          player.parentPlayer = _this;
          player.onDone(function() {
            if (++count >= total) {
              _this._onFinish();
            }
          });
        });
      }
    }
    AnimationGroupPlayer.prototype._onFinish = function() {
      if (!this._finished) {
        this._finished = true;
        this._onDoneFns.forEach(function(fn) {
          return fn();
        });
        this._onDoneFns = [];
      }
    };
    AnimationGroupPlayer.prototype.init = function() {
      this._players.forEach(function(player) {
        return player.init();
      });
    };
    AnimationGroupPlayer.prototype.onStart = function(fn) {
      this._onStartFns.push(fn);
    };
    AnimationGroupPlayer.prototype.onDone = function(fn) {
      this._onDoneFns.push(fn);
    };
    AnimationGroupPlayer.prototype.hasStarted = function() {
      return this._started;
    };
    AnimationGroupPlayer.prototype.play = function() {
      if (!isPresent(this.parentPlayer)) {
        this.init();
      }
      if (!this.hasStarted()) {
        this._onStartFns.forEach(function(fn) {
          return fn();
        });
        this._onStartFns = [];
        this._started = true;
      }
      this._players.forEach(function(player) {
        return player.play();
      });
    };
    AnimationGroupPlayer.prototype.pause = function() {
      this._players.forEach(function(player) {
        return player.pause();
      });
    };
    AnimationGroupPlayer.prototype.restart = function() {
      this._players.forEach(function(player) {
        return player.restart();
      });
    };
    AnimationGroupPlayer.prototype.finish = function() {
      this._onFinish();
      this._players.forEach(function(player) {
        return player.finish();
      });
    };
    AnimationGroupPlayer.prototype.destroy = function() {
      if (!this._destroyed) {
        this._onFinish();
        this._players.forEach(function(player) {
          return player.destroy();
        });
        this._destroyed = true;
      }
    };
    AnimationGroupPlayer.prototype.reset = function() {
      this._players.forEach(function(player) {
        return player.reset();
      });
      this._destroyed = false;
      this._finished = false;
      this._started = false;
    };
    AnimationGroupPlayer.prototype.setPosition = function(p) {
      this._players.forEach(function(player) {
        player.setPosition(p);
      });
    };
    AnimationGroupPlayer.prototype.getPosition = function() {
      var min = 0;
      this._players.forEach(function(player) {
        var p = player.getPosition();
        min = Math.min(p, min);
      });
      return min;
    };
    Object.defineProperty(AnimationGroupPlayer.prototype, "players", {
      get: function() {
        return this._players;
      },
      enumerable: true,
      configurable: true
    });
    return AnimationGroupPlayer;
  }());
  var AnimationKeyframe = (function() {
    function AnimationKeyframe(offset, styles) {
      this.offset = offset;
      this.styles = styles;
    }
    return AnimationKeyframe;
  }());
  var AnimationPlayer = (function() {
    function AnimationPlayer() {}
    AnimationPlayer.prototype.onDone = function(fn) {};
    AnimationPlayer.prototype.onStart = function(fn) {};
    AnimationPlayer.prototype.init = function() {};
    AnimationPlayer.prototype.hasStarted = function() {};
    AnimationPlayer.prototype.play = function() {};
    AnimationPlayer.prototype.pause = function() {};
    AnimationPlayer.prototype.restart = function() {};
    AnimationPlayer.prototype.finish = function() {};
    AnimationPlayer.prototype.destroy = function() {};
    AnimationPlayer.prototype.reset = function() {};
    AnimationPlayer.prototype.setPosition = function(p) {};
    AnimationPlayer.prototype.getPosition = function() {};
    Object.defineProperty(AnimationPlayer.prototype, "parentPlayer", {
      get: function() {
        throw new Error('NOT IMPLEMENTED: Base Class');
      },
      set: function(player) {
        throw new Error('NOT IMPLEMENTED: Base Class');
      },
      enumerable: true,
      configurable: true
    });
    return AnimationPlayer;
  }());
  var NoOpAnimationPlayer = (function() {
    function NoOpAnimationPlayer() {
      var _this = this;
      this._onDoneFns = [];
      this._onStartFns = [];
      this._started = false;
      this.parentPlayer = null;
      scheduleMicroTask(function() {
        return _this._onFinish();
      });
    }
    NoOpAnimationPlayer.prototype._onFinish = function() {
      this._onDoneFns.forEach(function(fn) {
        return fn();
      });
      this._onDoneFns = [];
    };
    NoOpAnimationPlayer.prototype.onStart = function(fn) {
      this._onStartFns.push(fn);
    };
    NoOpAnimationPlayer.prototype.onDone = function(fn) {
      this._onDoneFns.push(fn);
    };
    NoOpAnimationPlayer.prototype.hasStarted = function() {
      return this._started;
    };
    NoOpAnimationPlayer.prototype.init = function() {};
    NoOpAnimationPlayer.prototype.play = function() {
      if (!this.hasStarted()) {
        this._onStartFns.forEach(function(fn) {
          return fn();
        });
        this._onStartFns = [];
      }
      this._started = true;
    };
    NoOpAnimationPlayer.prototype.pause = function() {};
    NoOpAnimationPlayer.prototype.restart = function() {};
    NoOpAnimationPlayer.prototype.finish = function() {
      this._onFinish();
    };
    NoOpAnimationPlayer.prototype.destroy = function() {};
    NoOpAnimationPlayer.prototype.reset = function() {};
    NoOpAnimationPlayer.prototype.setPosition = function(p) {};
    NoOpAnimationPlayer.prototype.getPosition = function() {
      return 0;
    };
    return NoOpAnimationPlayer;
  }());
  var AnimationSequencePlayer = (function() {
    function AnimationSequencePlayer(_players) {
      var _this = this;
      this._players = _players;
      this._currentIndex = 0;
      this._onDoneFns = [];
      this._onStartFns = [];
      this._finished = false;
      this._started = false;
      this._destroyed = false;
      this.parentPlayer = null;
      this._players.forEach(function(player) {
        player.parentPlayer = _this;
      });
      this._onNext(false);
    }
    AnimationSequencePlayer.prototype._onNext = function(start) {
      var _this = this;
      if (this._finished)
        return;
      if (this._players.length == 0) {
        this._activePlayer = new NoOpAnimationPlayer();
        scheduleMicroTask(function() {
          return _this._onFinish();
        });
      } else if (this._currentIndex >= this._players.length) {
        this._activePlayer = new NoOpAnimationPlayer();
        this._onFinish();
      } else {
        var player = this._players[this._currentIndex++];
        player.onDone(function() {
          return _this._onNext(true);
        });
        this._activePlayer = player;
        if (start) {
          player.play();
        }
      }
    };
    AnimationSequencePlayer.prototype._onFinish = function() {
      if (!this._finished) {
        this._finished = true;
        this._onDoneFns.forEach(function(fn) {
          return fn();
        });
        this._onDoneFns = [];
      }
    };
    AnimationSequencePlayer.prototype.init = function() {
      this._players.forEach(function(player) {
        return player.init();
      });
    };
    AnimationSequencePlayer.prototype.onStart = function(fn) {
      this._onStartFns.push(fn);
    };
    AnimationSequencePlayer.prototype.onDone = function(fn) {
      this._onDoneFns.push(fn);
    };
    AnimationSequencePlayer.prototype.hasStarted = function() {
      return this._started;
    };
    AnimationSequencePlayer.prototype.play = function() {
      if (!isPresent(this.parentPlayer)) {
        this.init();
      }
      if (!this.hasStarted()) {
        this._onStartFns.forEach(function(fn) {
          return fn();
        });
        this._onStartFns = [];
        this._started = true;
      }
      this._activePlayer.play();
    };
    AnimationSequencePlayer.prototype.pause = function() {
      this._activePlayer.pause();
    };
    AnimationSequencePlayer.prototype.restart = function() {
      this.reset();
      if (this._players.length > 0) {
        this._players[0].restart();
      }
    };
    AnimationSequencePlayer.prototype.reset = function() {
      this._players.forEach(function(player) {
        return player.reset();
      });
      this._destroyed = false;
      this._finished = false;
      this._started = false;
    };
    AnimationSequencePlayer.prototype.finish = function() {
      this._onFinish();
      this._players.forEach(function(player) {
        return player.finish();
      });
    };
    AnimationSequencePlayer.prototype.destroy = function() {
      if (!this._destroyed) {
        this._onFinish();
        this._players.forEach(function(player) {
          return player.destroy();
        });
        this._destroyed = true;
        this._activePlayer = new NoOpAnimationPlayer();
      }
    };
    AnimationSequencePlayer.prototype.setPosition = function(p) {
      this._players[0].setPosition(p);
    };
    AnimationSequencePlayer.prototype.getPosition = function() {
      return this._players[0].getPosition();
    };
    Object.defineProperty(AnimationSequencePlayer.prototype, "players", {
      get: function() {
        return this._players;
      },
      enumerable: true,
      configurable: true
    });
    return AnimationSequencePlayer;
  }());
  var __extends$13 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var AUTO_STYLE = '*';
  var AnimationEntryMetadata = (function() {
    function AnimationEntryMetadata(name, definitions) {
      this.name = name;
      this.definitions = definitions;
    }
    return AnimationEntryMetadata;
  }());
  var AnimationStateMetadata = (function() {
    function AnimationStateMetadata() {}
    return AnimationStateMetadata;
  }());
  var AnimationStateDeclarationMetadata = (function(_super) {
    __extends$13(AnimationStateDeclarationMetadata, _super);
    function AnimationStateDeclarationMetadata(stateNameExpr, styles) {
      _super.call(this);
      this.stateNameExpr = stateNameExpr;
      this.styles = styles;
    }
    return AnimationStateDeclarationMetadata;
  }(AnimationStateMetadata));
  var AnimationStateTransitionMetadata = (function(_super) {
    __extends$13(AnimationStateTransitionMetadata, _super);
    function AnimationStateTransitionMetadata(stateChangeExpr, steps) {
      _super.call(this);
      this.stateChangeExpr = stateChangeExpr;
      this.steps = steps;
    }
    return AnimationStateTransitionMetadata;
  }(AnimationStateMetadata));
  var AnimationMetadata = (function() {
    function AnimationMetadata() {}
    return AnimationMetadata;
  }());
  var AnimationKeyframesSequenceMetadata = (function(_super) {
    __extends$13(AnimationKeyframesSequenceMetadata, _super);
    function AnimationKeyframesSequenceMetadata(steps) {
      _super.call(this);
      this.steps = steps;
    }
    return AnimationKeyframesSequenceMetadata;
  }(AnimationMetadata));
  var AnimationStyleMetadata = (function(_super) {
    __extends$13(AnimationStyleMetadata, _super);
    function AnimationStyleMetadata(styles, offset) {
      if (offset === void 0) {
        offset = null;
      }
      _super.call(this);
      this.styles = styles;
      this.offset = offset;
    }
    return AnimationStyleMetadata;
  }(AnimationMetadata));
  var AnimationAnimateMetadata = (function(_super) {
    __extends$13(AnimationAnimateMetadata, _super);
    function AnimationAnimateMetadata(timings, styles) {
      _super.call(this);
      this.timings = timings;
      this.styles = styles;
    }
    return AnimationAnimateMetadata;
  }(AnimationMetadata));
  var AnimationWithStepsMetadata = (function(_super) {
    __extends$13(AnimationWithStepsMetadata, _super);
    function AnimationWithStepsMetadata() {
      _super.call(this);
    }
    Object.defineProperty(AnimationWithStepsMetadata.prototype, "steps", {
      get: function() {
        throw new Error('NOT IMPLEMENTED: Base Class');
      },
      enumerable: true,
      configurable: true
    });
    return AnimationWithStepsMetadata;
  }(AnimationMetadata));
  var AnimationSequenceMetadata = (function(_super) {
    __extends$13(AnimationSequenceMetadata, _super);
    function AnimationSequenceMetadata(_steps) {
      _super.call(this);
      this._steps = _steps;
    }
    Object.defineProperty(AnimationSequenceMetadata.prototype, "steps", {
      get: function() {
        return this._steps;
      },
      enumerable: true,
      configurable: true
    });
    return AnimationSequenceMetadata;
  }(AnimationWithStepsMetadata));
  var AnimationGroupMetadata = (function(_super) {
    __extends$13(AnimationGroupMetadata, _super);
    function AnimationGroupMetadata(_steps) {
      _super.call(this);
      this._steps = _steps;
    }
    Object.defineProperty(AnimationGroupMetadata.prototype, "steps", {
      get: function() {
        return this._steps;
      },
      enumerable: true,
      configurable: true
    });
    return AnimationGroupMetadata;
  }(AnimationWithStepsMetadata));
  function animate(timing, styles) {
    if (styles === void 0) {
      styles = null;
    }
    var stylesEntry = styles;
    if (!isPresent(stylesEntry)) {
      var EMPTY_STYLE = {};
      stylesEntry = new AnimationStyleMetadata([EMPTY_STYLE], 1);
    }
    return new AnimationAnimateMetadata(timing, stylesEntry);
  }
  function group(steps) {
    return new AnimationGroupMetadata(steps);
  }
  function sequence(steps) {
    return new AnimationSequenceMetadata(steps);
  }
  function style(tokens) {
    var input;
    var offset = null;
    if (typeof tokens === 'string') {
      input = [(tokens)];
    } else {
      if (Array.isArray(tokens)) {
        input = (tokens);
      } else {
        input = [(tokens)];
      }
      input.forEach(function(entry) {
        var entryOffset = ((entry))['offset'];
        if (isPresent(entryOffset)) {
          offset = offset == null ? parseFloat(entryOffset) : offset;
        }
      });
    }
    return new AnimationStyleMetadata(input, offset);
  }
  function state(stateNameExpr, styles) {
    return new AnimationStateDeclarationMetadata(stateNameExpr, styles);
  }
  function keyframes(steps) {
    return new AnimationKeyframesSequenceMetadata(steps);
  }
  function transition(stateChangeExpr, steps) {
    var animationData = Array.isArray(steps) ? new AnimationSequenceMetadata(steps) : steps;
    return new AnimationStateTransitionMetadata(stateChangeExpr, animationData);
  }
  function trigger(name, animation) {
    return new AnimationEntryMetadata(name, animation);
  }
  function prepareFinalAnimationStyles(previousStyles, newStyles, nullValue) {
    if (nullValue === void 0) {
      nullValue = null;
    }
    var finalStyles = {};
    Object.keys(newStyles).forEach(function(prop) {
      var value = newStyles[prop];
      finalStyles[prop] = value == AUTO_STYLE ? nullValue : value.toString();
    });
    Object.keys(previousStyles).forEach(function(prop) {
      if (!isPresent(finalStyles[prop])) {
        finalStyles[prop] = nullValue;
      }
    });
    return finalStyles;
  }
  function balanceAnimationKeyframes(collectedStyles, finalStateStyles, keyframes) {
    var limit = keyframes.length - 1;
    var firstKeyframe = keyframes[0];
    var flatenedFirstKeyframeStyles = flattenStyles(firstKeyframe.styles.styles);
    var extraFirstKeyframeStyles = {};
    var hasExtraFirstStyles = false;
    Object.keys(collectedStyles).forEach(function(prop) {
      var value = (collectedStyles[prop]);
      if (!flatenedFirstKeyframeStyles[prop]) {
        flatenedFirstKeyframeStyles[prop] = value;
        extraFirstKeyframeStyles[prop] = value;
        hasExtraFirstStyles = true;
      }
    });
    var keyframeCollectedStyles = StringMapWrapper.merge({}, flatenedFirstKeyframeStyles);
    var finalKeyframe = keyframes[limit];
    finalKeyframe.styles.styles.unshift(finalStateStyles);
    var flatenedFinalKeyframeStyles = flattenStyles(finalKeyframe.styles.styles);
    var extraFinalKeyframeStyles = {};
    var hasExtraFinalStyles = false;
    Object.keys(keyframeCollectedStyles).forEach(function(prop) {
      if (!isPresent(flatenedFinalKeyframeStyles[prop])) {
        extraFinalKeyframeStyles[prop] = AUTO_STYLE;
        hasExtraFinalStyles = true;
      }
    });
    if (hasExtraFinalStyles) {
      finalKeyframe.styles.styles.push(extraFinalKeyframeStyles);
    }
    Object.keys(flatenedFinalKeyframeStyles).forEach(function(prop) {
      if (!isPresent(flatenedFirstKeyframeStyles[prop])) {
        extraFirstKeyframeStyles[prop] = AUTO_STYLE;
        hasExtraFirstStyles = true;
      }
    });
    if (hasExtraFirstStyles) {
      firstKeyframe.styles.styles.push(extraFirstKeyframeStyles);
    }
    collectAndResolveStyles(collectedStyles, [finalStateStyles]);
    return keyframes;
  }
  function clearStyles(styles) {
    var finalStyles = {};
    Object.keys(styles).forEach(function(key) {
      finalStyles[key] = null;
    });
    return finalStyles;
  }
  function collectAndResolveStyles(collection, styles) {
    return styles.map(function(entry) {
      var stylesObj = {};
      Object.keys(entry).forEach(function(prop) {
        var value = entry[prop];
        if (value == FILL_STYLE_FLAG) {
          value = collection[prop];
          if (!isPresent(value)) {
            value = AUTO_STYLE;
          }
        }
        collection[prop] = value;
        stylesObj[prop] = value;
      });
      return stylesObj;
    });
  }
  function renderStyles(element, renderer, styles) {
    Object.keys(styles).forEach(function(prop) {
      renderer.setElementStyle(element, prop, styles[prop]);
    });
  }
  function flattenStyles(styles) {
    var finalStyles = {};
    styles.forEach(function(entry) {
      Object.keys(entry).forEach(function(prop) {
        finalStyles[prop] = (entry[prop]);
      });
    });
    return finalStyles;
  }
  var AnimationStyles = (function() {
    function AnimationStyles(styles) {
      this.styles = styles;
    }
    return AnimationStyles;
  }());
  var AnimationTransitionEvent = (function() {
    function AnimationTransitionEvent(_a) {
      var fromState = _a.fromState,
          toState = _a.toState,
          totalTime = _a.totalTime,
          phaseName = _a.phaseName;
      this.fromState = fromState;
      this.toState = toState;
      this.totalTime = totalTime;
      this.phaseName = phaseName;
    }
    return AnimationTransitionEvent;
  }());
  var AnimationTransition = (function() {
    function AnimationTransition(_player, _fromState, _toState, _totalTime) {
      this._player = _player;
      this._fromState = _fromState;
      this._toState = _toState;
      this._totalTime = _totalTime;
    }
    AnimationTransition.prototype._createEvent = function(phaseName) {
      return new AnimationTransitionEvent({
        fromState: this._fromState,
        toState: this._toState,
        totalTime: this._totalTime,
        phaseName: phaseName
      });
    };
    AnimationTransition.prototype.onStart = function(callback) {
      var _this = this;
      var fn = (Zone.current.wrap(function() {
        return callback(_this._createEvent('start'));
      }, 'player.onStart'));
      this._player.onStart(fn);
    };
    AnimationTransition.prototype.onDone = function(callback) {
      var _this = this;
      var fn = (Zone.current.wrap(function() {
        return callback(_this._createEvent('done'));
      }, 'player.onDone'));
      this._player.onDone(fn);
    };
    return AnimationTransition;
  }());
  var DebugDomRootRenderer = (function() {
    function DebugDomRootRenderer(_delegate) {
      this._delegate = _delegate;
    }
    DebugDomRootRenderer.prototype.renderComponent = function(componentProto) {
      return new DebugDomRenderer(this._delegate.renderComponent(componentProto));
    };
    return DebugDomRootRenderer;
  }());
  var DebugDomRenderer = (function() {
    function DebugDomRenderer(_delegate) {
      this._delegate = _delegate;
    }
    DebugDomRenderer.prototype.selectRootElement = function(selectorOrNode, debugInfo) {
      var nativeEl = this._delegate.selectRootElement(selectorOrNode, debugInfo);
      var debugEl = new DebugElement(nativeEl, null, debugInfo);
      indexDebugNode(debugEl);
      return nativeEl;
    };
    DebugDomRenderer.prototype.createElement = function(parentElement, name, debugInfo) {
      var nativeEl = this._delegate.createElement(parentElement, name, debugInfo);
      var debugEl = new DebugElement(nativeEl, getDebugNode(parentElement), debugInfo);
      debugEl.name = name;
      indexDebugNode(debugEl);
      return nativeEl;
    };
    DebugDomRenderer.prototype.createViewRoot = function(hostElement) {
      return this._delegate.createViewRoot(hostElement);
    };
    DebugDomRenderer.prototype.createTemplateAnchor = function(parentElement, debugInfo) {
      var comment = this._delegate.createTemplateAnchor(parentElement, debugInfo);
      var debugEl = new DebugNode(comment, getDebugNode(parentElement), debugInfo);
      indexDebugNode(debugEl);
      return comment;
    };
    DebugDomRenderer.prototype.createText = function(parentElement, value, debugInfo) {
      var text = this._delegate.createText(parentElement, value, debugInfo);
      var debugEl = new DebugNode(text, getDebugNode(parentElement), debugInfo);
      indexDebugNode(debugEl);
      return text;
    };
    DebugDomRenderer.prototype.projectNodes = function(parentElement, nodes) {
      var debugParent = getDebugNode(parentElement);
      if (isPresent(debugParent) && debugParent instanceof DebugElement) {
        var debugElement_1 = debugParent;
        nodes.forEach(function(node) {
          debugElement_1.addChild(getDebugNode(node));
        });
      }
      this._delegate.projectNodes(parentElement, nodes);
    };
    DebugDomRenderer.prototype.attachViewAfter = function(node, viewRootNodes) {
      var debugNode = getDebugNode(node);
      if (isPresent(debugNode)) {
        var debugParent = debugNode.parent;
        if (viewRootNodes.length > 0 && isPresent(debugParent)) {
          var debugViewRootNodes_1 = [];
          viewRootNodes.forEach(function(rootNode) {
            return debugViewRootNodes_1.push(getDebugNode(rootNode));
          });
          debugParent.insertChildrenAfter(debugNode, debugViewRootNodes_1);
        }
      }
      this._delegate.attachViewAfter(node, viewRootNodes);
    };
    DebugDomRenderer.prototype.detachView = function(viewRootNodes) {
      viewRootNodes.forEach(function(node) {
        var debugNode = getDebugNode(node);
        if (isPresent(debugNode) && isPresent(debugNode.parent)) {
          debugNode.parent.removeChild(debugNode);
        }
      });
      this._delegate.detachView(viewRootNodes);
    };
    DebugDomRenderer.prototype.destroyView = function(hostElement, viewAllNodes) {
      viewAllNodes = viewAllNodes || [];
      viewAllNodes.forEach(function(node) {
        removeDebugNodeFromIndex(getDebugNode(node));
      });
      this._delegate.destroyView(hostElement, viewAllNodes);
    };
    DebugDomRenderer.prototype.listen = function(renderElement, name, callback) {
      var debugEl = getDebugNode(renderElement);
      if (isPresent(debugEl)) {
        debugEl.listeners.push(new EventListener(name, callback));
      }
      return this._delegate.listen(renderElement, name, callback);
    };
    DebugDomRenderer.prototype.listenGlobal = function(target, name, callback) {
      return this._delegate.listenGlobal(target, name, callback);
    };
    DebugDomRenderer.prototype.setElementProperty = function(renderElement, propertyName, propertyValue) {
      var debugEl = getDebugNode(renderElement);
      if (isPresent(debugEl) && debugEl instanceof DebugElement) {
        debugEl.properties[propertyName] = propertyValue;
      }
      this._delegate.setElementProperty(renderElement, propertyName, propertyValue);
    };
    DebugDomRenderer.prototype.setElementAttribute = function(renderElement, attributeName, attributeValue) {
      var debugEl = getDebugNode(renderElement);
      if (isPresent(debugEl) && debugEl instanceof DebugElement) {
        debugEl.attributes[attributeName] = attributeValue;
      }
      this._delegate.setElementAttribute(renderElement, attributeName, attributeValue);
    };
    DebugDomRenderer.prototype.setBindingDebugInfo = function(renderElement, propertyName, propertyValue) {
      this._delegate.setBindingDebugInfo(renderElement, propertyName, propertyValue);
    };
    DebugDomRenderer.prototype.setElementClass = function(renderElement, className, isAdd) {
      var debugEl = getDebugNode(renderElement);
      if (isPresent(debugEl) && debugEl instanceof DebugElement) {
        debugEl.classes[className] = isAdd;
      }
      this._delegate.setElementClass(renderElement, className, isAdd);
    };
    DebugDomRenderer.prototype.setElementStyle = function(renderElement, styleName, styleValue) {
      var debugEl = getDebugNode(renderElement);
      if (isPresent(debugEl) && debugEl instanceof DebugElement) {
        debugEl.styles[styleName] = styleValue;
      }
      this._delegate.setElementStyle(renderElement, styleName, styleValue);
    };
    DebugDomRenderer.prototype.invokeElementMethod = function(renderElement, methodName, args) {
      this._delegate.invokeElementMethod(renderElement, methodName, args);
    };
    DebugDomRenderer.prototype.setText = function(renderNode, text) {
      this._delegate.setText(renderNode, text);
    };
    DebugDomRenderer.prototype.animate = function(element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {
      if (previousPlayers === void 0) {
        previousPlayers = [];
      }
      return this._delegate.animate(element, startingStyles, keyframes, duration, delay, easing, previousPlayers);
    };
    return DebugDomRenderer;
  }());
  var ViewType = {};
  ViewType.HOST = 0;
  ViewType.COMPONENT = 1;
  ViewType.EMBEDDED = 2;
  ViewType[ViewType.HOST] = "HOST";
  ViewType[ViewType.COMPONENT] = "COMPONENT";
  ViewType[ViewType.EMBEDDED] = "EMBEDDED";
  var StaticNodeDebugInfo = (function() {
    function StaticNodeDebugInfo(providerTokens, componentToken, refTokens) {
      this.providerTokens = providerTokens;
      this.componentToken = componentToken;
      this.refTokens = refTokens;
    }
    return StaticNodeDebugInfo;
  }());
  var DebugContext = (function() {
    function DebugContext(_view, _nodeIndex, _tplRow, _tplCol) {
      this._view = _view;
      this._nodeIndex = _nodeIndex;
      this._tplRow = _tplRow;
      this._tplCol = _tplCol;
    }
    Object.defineProperty(DebugContext.prototype, "_staticNodeInfo", {
      get: function() {
        return isPresent(this._nodeIndex) ? this._view.staticNodeDebugInfos[this._nodeIndex] : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "context", {
      get: function() {
        return this._view.context;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "component", {
      get: function() {
        var staticNodeInfo = this._staticNodeInfo;
        if (isPresent(staticNodeInfo) && isPresent(staticNodeInfo.componentToken)) {
          return this.injector.get(staticNodeInfo.componentToken);
        }
        return null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "componentRenderElement", {
      get: function() {
        var componentView = this._view;
        while (isPresent(componentView.parentView) && componentView.type !== ViewType.COMPONENT) {
          componentView = (componentView.parentView);
        }
        return componentView.parentElement;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "injector", {
      get: function() {
        return this._view.injector(this._nodeIndex);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "renderNode", {
      get: function() {
        if (isPresent(this._nodeIndex) && this._view.allNodes) {
          return this._view.allNodes[this._nodeIndex];
        } else {
          return null;
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "providerTokens", {
      get: function() {
        var staticNodeInfo = this._staticNodeInfo;
        return isPresent(staticNodeInfo) ? staticNodeInfo.providerTokens : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "source", {
      get: function() {
        return this._view.componentType.templateUrl + ":" + this._tplRow + ":" + this._tplCol;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "references", {
      get: function() {
        var _this = this;
        var varValues = {};
        var staticNodeInfo = this._staticNodeInfo;
        if (isPresent(staticNodeInfo)) {
          var refs_1 = staticNodeInfo.refTokens;
          Object.keys(refs_1).forEach(function(refName) {
            var refToken = refs_1[refName];
            var varValue;
            if (isBlank(refToken)) {
              varValue = _this._view.allNodes ? _this._view.allNodes[_this._nodeIndex] : null;
            } else {
              varValue = _this._view.injectorGet(refToken, _this._nodeIndex, null);
            }
            varValues[refName] = varValue;
          });
        }
        return varValues;
      },
      enumerable: true,
      configurable: true
    });
    return DebugContext;
  }());
  var ViewAnimationMap = (function() {
    function ViewAnimationMap() {
      this._map = new Map();
      this._allPlayers = [];
    }
    ViewAnimationMap.prototype.find = function(element, animationName) {
      var playersByAnimation = this._map.get(element);
      if (isPresent(playersByAnimation)) {
        return playersByAnimation[animationName];
      }
    };
    ViewAnimationMap.prototype.findAllPlayersByElement = function(element) {
      var el = this._map.get(element);
      return el ? Object.keys(el).map(function(k) {
        return el[k];
      }) : [];
    };
    ViewAnimationMap.prototype.set = function(element, animationName, player) {
      var playersByAnimation = this._map.get(element);
      if (!isPresent(playersByAnimation)) {
        playersByAnimation = {};
      }
      var existingEntry = playersByAnimation[animationName];
      if (isPresent(existingEntry)) {
        this.remove(element, animationName);
      }
      playersByAnimation[animationName] = player;
      this._allPlayers.push(player);
      this._map.set(element, playersByAnimation);
    };
    ViewAnimationMap.prototype.getAllPlayers = function() {
      return this._allPlayers;
    };
    ViewAnimationMap.prototype.remove = function(element, animationName, targetPlayer) {
      if (targetPlayer === void 0) {
        targetPlayer = null;
      }
      var playersByAnimation = this._map.get(element);
      if (playersByAnimation) {
        var player = playersByAnimation[animationName];
        if (!targetPlayer || player === targetPlayer) {
          delete playersByAnimation[animationName];
          var index = this._allPlayers.indexOf(player);
          this._allPlayers.splice(index, 1);
          if (Object.keys(playersByAnimation).length === 0) {
            this._map.delete(element);
          }
        }
      }
    };
    return ViewAnimationMap;
  }());
  var AnimationViewContext = (function() {
    function AnimationViewContext(_animationQueue) {
      this._animationQueue = _animationQueue;
      this._players = new ViewAnimationMap();
    }
    AnimationViewContext.prototype.onAllActiveAnimationsDone = function(callback) {
      var activeAnimationPlayers = this._players.getAllPlayers();
      if (activeAnimationPlayers.length) {
        new AnimationGroupPlayer(activeAnimationPlayers).onDone(function() {
          return callback();
        });
      } else {
        callback();
      }
    };
    AnimationViewContext.prototype.queueAnimation = function(element, animationName, player) {
      var _this = this;
      this._animationQueue.enqueue(player);
      this._players.set(element, animationName, player);
      player.onDone(function() {
        return _this._players.remove(element, animationName, player);
      });
    };
    AnimationViewContext.prototype.getAnimationPlayers = function(element, animationName) {
      if (animationName === void 0) {
        animationName = null;
      }
      var players = [];
      if (animationName) {
        var currentPlayer = this._players.find(element, animationName);
        if (currentPlayer) {
          _recursePlayers(currentPlayer, players);
        }
      } else {
        this._players.findAllPlayersByElement(element).forEach(function(player) {
          return _recursePlayers(player, players);
        });
      }
      return players;
    };
    return AnimationViewContext;
  }());
  function _recursePlayers(player, collectedPlayers) {
    if ((player instanceof AnimationGroupPlayer) || (player instanceof AnimationSequencePlayer)) {
      player.players.forEach(function(player) {
        return _recursePlayers(player, collectedPlayers);
      });
    } else {
      collectedPlayers.push(player);
    }
  }
  var __extends$15 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var ElementInjector = (function(_super) {
    __extends$15(ElementInjector, _super);
    function ElementInjector(_view, _nodeIndex) {
      _super.call(this);
      this._view = _view;
      this._nodeIndex = _nodeIndex;
    }
    ElementInjector.prototype.get = function(token, notFoundValue) {
      if (notFoundValue === void 0) {
        notFoundValue = THROW_IF_NOT_FOUND;
      }
      return this._view.injectorGet(token, this._nodeIndex, notFoundValue);
    };
    return ElementInjector;
  }(Injector));
  var __extends$14 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var _scope_check = wtfCreateScope("AppView#check(ascii id)");
  var EMPTY_CONTEXT$1 = new Object();
  var UNDEFINED$1 = new Object();
  var AppView = (function() {
    function AppView(clazz, componentType, type, viewUtils, parentView, parentIndex, parentElement, cdMode, declaredViewContainer) {
      if (declaredViewContainer === void 0) {
        declaredViewContainer = null;
      }
      this.clazz = clazz;
      this.componentType = componentType;
      this.type = type;
      this.viewUtils = viewUtils;
      this.parentView = parentView;
      this.parentIndex = parentIndex;
      this.parentElement = parentElement;
      this.cdMode = cdMode;
      this.declaredViewContainer = declaredViewContainer;
      this.numberOfChecks = 0;
      this.ref = new ViewRef_(this, viewUtils.animationQueue);
      if (type === ViewType.COMPONENT || type === ViewType.HOST) {
        this.renderer = viewUtils.renderComponent(componentType);
      } else {
        this.renderer = parentView.renderer;
      }
      this._directRenderer = this.renderer.directRenderer;
    }
    Object.defineProperty(AppView.prototype, "animationContext", {
      get: function() {
        if (!this._animationContext) {
          this._animationContext = new AnimationViewContext(this.viewUtils.animationQueue);
        }
        return this._animationContext;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AppView.prototype, "destroyed", {
      get: function() {
        return this.cdMode === ChangeDetectorStatus.Destroyed;
      },
      enumerable: true,
      configurable: true
    });
    AppView.prototype.create = function(context) {
      this.context = context;
      return this.createInternal(null);
    };
    AppView.prototype.createHostView = function(rootSelectorOrNode, hostInjector, projectableNodes) {
      this.context = (EMPTY_CONTEXT$1);
      this._hasExternalHostElement = isPresent(rootSelectorOrNode);
      this._hostInjector = hostInjector;
      this._hostProjectableNodes = projectableNodes;
      return this.createInternal(rootSelectorOrNode);
    };
    AppView.prototype.createInternal = function(rootSelectorOrNode) {
      return null;
    };
    AppView.prototype.createEmbeddedViewInternal = function(templateNodeIndex) {
      return null;
    };
    AppView.prototype.init = function(lastRootNode, allNodes, disposables) {
      this.lastRootNode = lastRootNode;
      this.allNodes = allNodes;
      this.disposables = disposables;
      if (this.type === ViewType.COMPONENT) {
        this.dirtyParentQueriesInternal();
      }
    };
    AppView.prototype.injectorGet = function(token, nodeIndex, notFoundValue) {
      if (notFoundValue === void 0) {
        notFoundValue = THROW_IF_NOT_FOUND;
      }
      var result = UNDEFINED$1;
      var view = this;
      while (result === UNDEFINED$1) {
        if (isPresent(nodeIndex)) {
          result = view.injectorGetInternal(token, nodeIndex, UNDEFINED$1);
        }
        if (result === UNDEFINED$1 && view.type === ViewType.HOST) {
          result = view._hostInjector.get(token, notFoundValue);
        }
        nodeIndex = view.parentIndex;
        view = view.parentView;
      }
      return result;
    };
    AppView.prototype.injectorGetInternal = function(token, nodeIndex, notFoundResult) {
      return notFoundResult;
    };
    AppView.prototype.injector = function(nodeIndex) {
      return new ElementInjector(this, nodeIndex);
    };
    AppView.prototype.detachAndDestroy = function() {
      if (this.viewContainer) {
        this.viewContainer.detachView(this.viewContainer.nestedViews.indexOf(this));
      } else if (this.appRef) {
        this.appRef.detachView(this.ref);
      } else if (this._hasExternalHostElement) {
        this.detach();
      }
      this.destroy();
    };
    AppView.prototype.destroy = function() {
      var _this = this;
      if (this.cdMode === ChangeDetectorStatus.Destroyed) {
        return;
      }
      var hostElement = this.type === ViewType.COMPONENT ? this.parentElement : null;
      if (this.disposables) {
        for (var i = 0; i < this.disposables.length; i++) {
          this.disposables[i]();
        }
      }
      this.destroyInternal();
      this.dirtyParentQueriesInternal();
      if (this._animationContext) {
        this._animationContext.onAllActiveAnimationsDone(function() {
          return _this.renderer.destroyView(hostElement, _this.allNodes);
        });
      } else {
        this.renderer.destroyView(hostElement, this.allNodes);
      }
      this.cdMode = ChangeDetectorStatus.Destroyed;
    };
    AppView.prototype.destroyInternal = function() {};
    AppView.prototype.detachInternal = function() {};
    AppView.prototype.detach = function() {
      var _this = this;
      this.detachInternal();
      if (this._animationContext) {
        this._animationContext.onAllActiveAnimationsDone(function() {
          return _this._renderDetach();
        });
      } else {
        this._renderDetach();
      }
      if (this.declaredViewContainer && this.declaredViewContainer !== this.viewContainer && this.declaredViewContainer.projectedViews) {
        var projectedViews = this.declaredViewContainer.projectedViews;
        var index = projectedViews.indexOf(this);
        if (index >= projectedViews.length - 1) {
          projectedViews.pop();
        } else {
          projectedViews.splice(index, 1);
        }
      }
      this.appRef = null;
      this.viewContainer = null;
      this.dirtyParentQueriesInternal();
    };
    AppView.prototype._renderDetach = function() {
      if (this._directRenderer) {
        this.visitRootNodesInternal(this._directRenderer.remove, null);
      } else {
        this.renderer.detachView(this.flatRootNodes);
      }
    };
    AppView.prototype.attachToAppRef = function(appRef) {
      if (this.viewContainer) {
        throw new Error('This view is already attached to a ViewContainer!');
      }
      this.appRef = appRef;
      this.dirtyParentQueriesInternal();
    };
    AppView.prototype.attachAfter = function(viewContainer, prevView) {
      if (this.appRef) {
        throw new Error('This view is already attached directly to the ApplicationRef!');
      }
      this._renderAttach(viewContainer, prevView);
      this.viewContainer = viewContainer;
      if (this.declaredViewContainer && this.declaredViewContainer !== viewContainer) {
        if (!this.declaredViewContainer.projectedViews) {
          this.declaredViewContainer.projectedViews = [];
        }
        this.declaredViewContainer.projectedViews.push(this);
      }
      this.dirtyParentQueriesInternal();
    };
    AppView.prototype.moveAfter = function(viewContainer, prevView) {
      this._renderAttach(viewContainer, prevView);
      this.dirtyParentQueriesInternal();
    };
    AppView.prototype._renderAttach = function(viewContainer, prevView) {
      var prevNode = prevView ? prevView.lastRootNode : viewContainer.nativeElement;
      if (this._directRenderer) {
        var nextSibling = this._directRenderer.nextSibling(prevNode);
        if (nextSibling) {
          this.visitRootNodesInternal(this._directRenderer.insertBefore, nextSibling);
        } else {
          var parentElement = this._directRenderer.parentElement(prevNode);
          if (parentElement) {
            this.visitRootNodesInternal(this._directRenderer.appendChild, parentElement);
          }
        }
      } else {
        this.renderer.attachViewAfter(prevNode, this.flatRootNodes);
      }
    };
    Object.defineProperty(AppView.prototype, "changeDetectorRef", {
      get: function() {
        return this.ref;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AppView.prototype, "flatRootNodes", {
      get: function() {
        var nodes = [];
        this.visitRootNodesInternal(addToArray, nodes);
        return nodes;
      },
      enumerable: true,
      configurable: true
    });
    AppView.prototype.projectNodes = function(parentElement, ngContentIndex) {
      if (this._directRenderer) {
        this.visitProjectedNodes(ngContentIndex, this._directRenderer.appendChild, parentElement);
      } else {
        var nodes = [];
        this.visitProjectedNodes(ngContentIndex, addToArray, nodes);
        this.renderer.projectNodes(parentElement, nodes);
      }
    };
    AppView.prototype.visitProjectedNodes = function(ngContentIndex, cb, c) {
      switch (this.type) {
        case ViewType.EMBEDDED:
          this.parentView.visitProjectedNodes(ngContentIndex, cb, c);
          break;
        case ViewType.COMPONENT:
          if (this.parentView.type === ViewType.HOST) {
            var nodes = this.parentView._hostProjectableNodes[ngContentIndex] || [];
            for (var i = 0; i < nodes.length; i++) {
              cb(nodes[i], c);
            }
          } else {
            this.parentView.visitProjectableNodesInternal(this.parentIndex, ngContentIndex, cb, c);
          }
          break;
      }
    };
    AppView.prototype.visitRootNodesInternal = function(cb, c) {};
    AppView.prototype.visitProjectableNodesInternal = function(nodeIndex, ngContentIndex, cb, c) {};
    AppView.prototype.dirtyParentQueriesInternal = function() {};
    AppView.prototype.internalDetectChanges = function(throwOnChange) {
      if (this.cdMode !== ChangeDetectorStatus.Detached) {
        this.detectChanges(throwOnChange);
      }
    };
    AppView.prototype.detectChanges = function(throwOnChange) {
      var s = _scope_check(this.clazz);
      if (this.cdMode === ChangeDetectorStatus.Checked || this.cdMode === ChangeDetectorStatus.Errored)
        return;
      if (this.cdMode === ChangeDetectorStatus.Destroyed) {
        this.throwDestroyedError('detectChanges');
      }
      this.detectChangesInternal(throwOnChange);
      if (this.cdMode === ChangeDetectorStatus.CheckOnce)
        this.cdMode = ChangeDetectorStatus.Checked;
      this.numberOfChecks++;
      wtfLeave(s);
    };
    AppView.prototype.detectChangesInternal = function(throwOnChange) {};
    AppView.prototype.markAsCheckOnce = function() {
      this.cdMode = ChangeDetectorStatus.CheckOnce;
    };
    AppView.prototype.markPathToRootAsCheckOnce = function() {
      var c = this;
      while (isPresent(c) && c.cdMode !== ChangeDetectorStatus.Detached) {
        if (c.cdMode === ChangeDetectorStatus.Checked) {
          c.cdMode = ChangeDetectorStatus.CheckOnce;
        }
        if (c.type === ViewType.COMPONENT) {
          c = c.parentView;
        } else {
          c = c.viewContainer ? c.viewContainer.parentView : null;
        }
      }
    };
    AppView.prototype.eventHandler = function(cb) {
      return cb;
    };
    AppView.prototype.throwDestroyedError = function(details) {
      throw new ViewDestroyedError(details);
    };
    return AppView;
  }());
  var DebugAppView = (function(_super) {
    __extends$14(DebugAppView, _super);
    function DebugAppView(clazz, componentType, type, viewUtils, parentView, parentIndex, parentNode, cdMode, staticNodeDebugInfos, declaredViewContainer) {
      if (declaredViewContainer === void 0) {
        declaredViewContainer = null;
      }
      _super.call(this, clazz, componentType, type, viewUtils, parentView, parentIndex, parentNode, cdMode, declaredViewContainer);
      this.staticNodeDebugInfos = staticNodeDebugInfos;
      this._currentDebugContext = null;
    }
    DebugAppView.prototype.create = function(context) {
      this._resetDebug();
      try {
        return _super.prototype.create.call(this, context);
      } catch (e) {
        this._rethrowWithContext(e);
        throw e;
      }
    };
    DebugAppView.prototype.createHostView = function(rootSelectorOrNode, injector, projectableNodes) {
      if (projectableNodes === void 0) {
        projectableNodes = null;
      }
      this._resetDebug();
      try {
        return _super.prototype.createHostView.call(this, rootSelectorOrNode, injector, projectableNodes);
      } catch (e) {
        this._rethrowWithContext(e);
        throw e;
      }
    };
    DebugAppView.prototype.injectorGet = function(token, nodeIndex, notFoundResult) {
      this._resetDebug();
      try {
        return _super.prototype.injectorGet.call(this, token, nodeIndex, notFoundResult);
      } catch (e) {
        this._rethrowWithContext(e);
        throw e;
      }
    };
    DebugAppView.prototype.detach = function() {
      this._resetDebug();
      try {
        _super.prototype.detach.call(this);
      } catch (e) {
        this._rethrowWithContext(e);
        throw e;
      }
    };
    DebugAppView.prototype.destroy = function() {
      this._resetDebug();
      try {
        _super.prototype.destroy.call(this);
      } catch (e) {
        this._rethrowWithContext(e);
        throw e;
      }
    };
    DebugAppView.prototype.detectChanges = function(throwOnChange) {
      this._resetDebug();
      try {
        _super.prototype.detectChanges.call(this, throwOnChange);
      } catch (e) {
        this._rethrowWithContext(e);
        throw e;
      }
    };
    DebugAppView.prototype._resetDebug = function() {
      this._currentDebugContext = null;
    };
    DebugAppView.prototype.debug = function(nodeIndex, rowNum, colNum) {
      return this._currentDebugContext = new DebugContext(this, nodeIndex, rowNum, colNum);
    };
    DebugAppView.prototype._rethrowWithContext = function(e) {
      if (!(e instanceof ViewWrappedError)) {
        if (!(e instanceof ExpressionChangedAfterItHasBeenCheckedError)) {
          this.cdMode = ChangeDetectorStatus.Errored;
        }
        if (isPresent(this._currentDebugContext)) {
          throw new ViewWrappedError(e, this._currentDebugContext);
        }
      }
    };
    DebugAppView.prototype.eventHandler = function(cb) {
      var _this = this;
      var superHandler = _super.prototype.eventHandler.call(this, cb);
      return function(eventName, event) {
        _this._resetDebug();
        try {
          return superHandler.call(_this, eventName, event);
        } catch (e) {
          _this._rethrowWithContext(e);
          throw e;
        }
      };
    };
    return DebugAppView;
  }(AppView));
  var ViewContainer = (function() {
    function ViewContainer(index, parentIndex, parentView, nativeElement) {
      this.index = index;
      this.parentIndex = parentIndex;
      this.parentView = parentView;
      this.nativeElement = nativeElement;
    }
    Object.defineProperty(ViewContainer.prototype, "elementRef", {
      get: function() {
        return new ElementRef(this.nativeElement);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ViewContainer.prototype, "vcRef", {
      get: function() {
        return new ViewContainerRef_(this);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ViewContainer.prototype, "parentInjector", {
      get: function() {
        return this.parentView.injector(this.parentIndex);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ViewContainer.prototype, "injector", {
      get: function() {
        return this.parentView.injector(this.index);
      },
      enumerable: true,
      configurable: true
    });
    ViewContainer.prototype.detectChangesInNestedViews = function(throwOnChange) {
      if (this.nestedViews) {
        for (var i = 0; i < this.nestedViews.length; i++) {
          this.nestedViews[i].detectChanges(throwOnChange);
        }
      }
    };
    ViewContainer.prototype.destroyNestedViews = function() {
      if (this.nestedViews) {
        for (var i = 0; i < this.nestedViews.length; i++) {
          this.nestedViews[i].destroy();
        }
      }
    };
    ViewContainer.prototype.visitNestedViewRootNodes = function(cb, c) {
      if (this.nestedViews) {
        for (var i = 0; i < this.nestedViews.length; i++) {
          this.nestedViews[i].visitRootNodesInternal(cb, c);
        }
      }
    };
    ViewContainer.prototype.mapNestedViews = function(nestedViewClass, callback) {
      var result = [];
      if (this.nestedViews) {
        for (var i = 0; i < this.nestedViews.length; i++) {
          var nestedView = this.nestedViews[i];
          if (nestedView.clazz === nestedViewClass) {
            result.push(callback(nestedView));
          }
        }
      }
      if (this.projectedViews) {
        for (var i = 0; i < this.projectedViews.length; i++) {
          var projectedView = this.projectedViews[i];
          if (projectedView.clazz === nestedViewClass) {
            result.push(callback(projectedView));
          }
        }
      }
      return result;
    };
    ViewContainer.prototype.moveView = function(view, currentIndex) {
      var previousIndex = this.nestedViews.indexOf(view);
      if (view.type === ViewType.COMPONENT) {
        throw new Error("Component views can't be moved!");
      }
      var nestedViews = this.nestedViews;
      if (nestedViews == null) {
        nestedViews = [];
        this.nestedViews = nestedViews;
      }
      nestedViews.splice(previousIndex, 1);
      nestedViews.splice(currentIndex, 0, view);
      var prevView = currentIndex > 0 ? nestedViews[currentIndex - 1] : null;
      view.moveAfter(this, prevView);
    };
    ViewContainer.prototype.attachView = function(view, viewIndex) {
      if (view.type === ViewType.COMPONENT) {
        throw new Error("Component views can't be moved!");
      }
      var nestedViews = this.nestedViews;
      if (nestedViews == null) {
        nestedViews = [];
        this.nestedViews = nestedViews;
      }
      if (viewIndex >= nestedViews.length) {
        nestedViews.push(view);
      } else {
        nestedViews.splice(viewIndex, 0, view);
      }
      var prevView = viewIndex > 0 ? nestedViews[viewIndex - 1] : null;
      view.attachAfter(this, prevView);
    };
    ViewContainer.prototype.detachView = function(viewIndex) {
      var view = this.nestedViews[viewIndex];
      if (viewIndex >= this.nestedViews.length - 1) {
        this.nestedViews.pop();
      } else {
        this.nestedViews.splice(viewIndex, 1);
      }
      if (view.type === ViewType.COMPONENT) {
        throw new Error("Component views can't be moved!");
      }
      view.detach();
      return view;
    };
    return ViewContainer;
  }());
  var __core_private__ = {
    isDefaultChangeDetectionStrategy: isDefaultChangeDetectionStrategy,
    ChangeDetectorStatus: ChangeDetectorStatus,
    constructDependencies: constructDependencies,
    LifecycleHooks: LifecycleHooks,
    LIFECYCLE_HOOKS_VALUES: LIFECYCLE_HOOKS_VALUES,
    ReflectorReader: ReflectorReader,
    CodegenComponentFactoryResolver: CodegenComponentFactoryResolver,
    ComponentRef_: ComponentRef_,
    ViewContainer: ViewContainer,
    AppView: AppView,
    DebugAppView: DebugAppView,
    NgModuleInjector: NgModuleInjector,
    registerModuleFactory: registerModuleFactory,
    ViewType: ViewType,
    view_utils: view_utils,
    ViewMetadata: ViewMetadata,
    DebugContext: DebugContext,
    StaticNodeDebugInfo: StaticNodeDebugInfo,
    devModeEqual: devModeEqual,
    UNINITIALIZED: UNINITIALIZED,
    ValueUnwrapper: ValueUnwrapper,
    RenderDebugInfo: RenderDebugInfo,
    TemplateRef_: TemplateRef_,
    ReflectionCapabilities: ReflectionCapabilities,
    makeDecorator: makeDecorator,
    DebugDomRootRenderer: DebugDomRootRenderer,
    Console: Console,
    reflector: reflector,
    Reflector: Reflector,
    NoOpAnimationPlayer: NoOpAnimationPlayer,
    AnimationPlayer: AnimationPlayer,
    AnimationSequencePlayer: AnimationSequencePlayer,
    AnimationGroupPlayer: AnimationGroupPlayer,
    AnimationKeyframe: AnimationKeyframe,
    prepareFinalAnimationStyles: prepareFinalAnimationStyles,
    balanceAnimationKeyframes: balanceAnimationKeyframes,
    flattenStyles: flattenStyles,
    clearStyles: clearStyles,
    renderStyles: renderStyles,
    collectAndResolveStyles: collectAndResolveStyles,
    APP_ID_RANDOM_PROVIDER: APP_ID_RANDOM_PROVIDER,
    AnimationStyles: AnimationStyles,
    ANY_STATE: ANY_STATE,
    DEFAULT_STATE: DEFAULT_STATE,
    EMPTY_STATE: EMPTY_STATE,
    FILL_STYLE_FLAG: FILL_STYLE_FLAG,
    ComponentStillLoadingError: ComponentStillLoadingError,
    isPromise: isPromise,
    AnimationTransition: AnimationTransition
  };
  exports.createPlatform = createPlatform;
  exports.assertPlatform = assertPlatform;
  exports.destroyPlatform = destroyPlatform;
  exports.getPlatform = getPlatform;
  exports.PlatformRef = PlatformRef;
  exports.ApplicationRef = ApplicationRef;
  exports.enableProdMode = enableProdMode;
  exports.isDevMode = isDevMode;
  exports.createPlatformFactory = createPlatformFactory;
  exports.NgProbeToken = NgProbeToken;
  exports.APP_ID = APP_ID;
  exports.PACKAGE_ROOT_URL = PACKAGE_ROOT_URL;
  exports.PLATFORM_INITIALIZER = PLATFORM_INITIALIZER;
  exports.APP_BOOTSTRAP_LISTENER = APP_BOOTSTRAP_LISTENER;
  exports.APP_INITIALIZER = APP_INITIALIZER;
  exports.ApplicationInitStatus = ApplicationInitStatus;
  exports.DebugElement = DebugElement;
  exports.DebugNode = DebugNode;
  exports.asNativeElements = asNativeElements;
  exports.getDebugNode = getDebugNode;
  exports.Testability = Testability;
  exports.TestabilityRegistry = TestabilityRegistry;
  exports.setTestabilityGetter = setTestabilityGetter;
  exports.TRANSLATIONS = TRANSLATIONS;
  exports.TRANSLATIONS_FORMAT = TRANSLATIONS_FORMAT;
  exports.LOCALE_ID = LOCALE_ID;
  exports.ApplicationModule = ApplicationModule;
  exports.wtfCreateScope = wtfCreateScope;
  exports.wtfLeave = wtfLeave;
  exports.wtfStartTimeRange = wtfStartTimeRange;
  exports.wtfEndTimeRange = wtfEndTimeRange;
  exports.Type = Type;
  exports.EventEmitter = EventEmitter;
  exports.ErrorHandler = ErrorHandler;
  exports.AnimationTransitionEvent = AnimationTransitionEvent;
  exports.AnimationPlayer = AnimationPlayer;
  exports.Sanitizer = Sanitizer;
  exports.SecurityContext = SecurityContext;
  exports.ANALYZE_FOR_ENTRY_COMPONENTS = ANALYZE_FOR_ENTRY_COMPONENTS;
  exports.Attribute = Attribute;
  exports.ContentChild = ContentChild;
  exports.ContentChildren = ContentChildren;
  exports.Query = Query;
  exports.ViewChild = ViewChild;
  exports.ViewChildren = ViewChildren;
  exports.Component = Component;
  exports.Directive = Directive;
  exports.HostBinding = HostBinding;
  exports.HostListener = HostListener;
  exports.Input = Input;
  exports.Output = Output;
  exports.Pipe = Pipe;
  exports.AfterContentChecked = AfterContentChecked;
  exports.AfterContentInit = AfterContentInit;
  exports.AfterViewChecked = AfterViewChecked;
  exports.AfterViewInit = AfterViewInit;
  exports.DoCheck = DoCheck;
  exports.OnChanges = OnChanges;
  exports.OnDestroy = OnDestroy;
  exports.OnInit = OnInit;
  exports.CUSTOM_ELEMENTS_SCHEMA = CUSTOM_ELEMENTS_SCHEMA;
  exports.NO_ERRORS_SCHEMA = NO_ERRORS_SCHEMA;
  exports.NgModule = NgModule;
  exports.ViewEncapsulation = ViewEncapsulation;
  exports.Version = Version;
  exports.VERSION = VERSION;
  exports.Class = Class;
  exports.forwardRef = forwardRef;
  exports.resolveForwardRef = resolveForwardRef;
  exports.Injector = Injector;
  exports.ReflectiveInjector = ReflectiveInjector;
  exports.ResolvedReflectiveFactory = ResolvedReflectiveFactory;
  exports.ReflectiveKey = ReflectiveKey;
  exports.OpaqueToken = OpaqueToken;
  exports.Inject = Inject;
  exports.Optional = Optional;
  exports.Injectable = Injectable;
  exports.Self = Self;
  exports.SkipSelf = SkipSelf;
  exports.Host = Host;
  exports.NgZone = NgZone;
  exports.RenderComponentType = RenderComponentType;
  exports.Renderer = Renderer;
  exports.RootRenderer = RootRenderer;
  exports.COMPILER_OPTIONS = COMPILER_OPTIONS;
  exports.Compiler = Compiler;
  exports.CompilerFactory = CompilerFactory;
  exports.ModuleWithComponentFactories = ModuleWithComponentFactories;
  exports.ComponentFactory = ComponentFactory;
  exports.ComponentRef = ComponentRef;
  exports.ComponentFactoryResolver = ComponentFactoryResolver;
  exports.ElementRef = ElementRef;
  exports.NgModuleFactory = NgModuleFactory;
  exports.NgModuleRef = NgModuleRef;
  exports.NgModuleFactoryLoader = NgModuleFactoryLoader;
  exports.getModuleFactory = getModuleFactory;
  exports.QueryList = QueryList;
  exports.SystemJsNgModuleLoader = SystemJsNgModuleLoader;
  exports.SystemJsNgModuleLoaderConfig = SystemJsNgModuleLoaderConfig;
  exports.TemplateRef = TemplateRef;
  exports.ViewContainerRef = ViewContainerRef;
  exports.EmbeddedViewRef = EmbeddedViewRef;
  exports.ViewRef = ViewRef;
  exports.ChangeDetectionStrategy = ChangeDetectionStrategy;
  exports.ChangeDetectorRef = ChangeDetectorRef;
  exports.CollectionChangeRecord = CollectionChangeRecord;
  exports.DefaultIterableDiffer = DefaultIterableDiffer;
  exports.IterableDiffers = IterableDiffers;
  exports.KeyValueChangeRecord = KeyValueChangeRecord;
  exports.KeyValueDiffers = KeyValueDiffers;
  exports.SimpleChange = SimpleChange;
  exports.WrappedValue = WrappedValue;
  exports.platformCore = platformCore;
  exports.__core_private__ = __core_private__;
  exports.AUTO_STYLE = AUTO_STYLE;
  exports.AnimationEntryMetadata = AnimationEntryMetadata;
  exports.AnimationStateMetadata = AnimationStateMetadata;
  exports.AnimationStateDeclarationMetadata = AnimationStateDeclarationMetadata;
  exports.AnimationStateTransitionMetadata = AnimationStateTransitionMetadata;
  exports.AnimationMetadata = AnimationMetadata;
  exports.AnimationKeyframesSequenceMetadata = AnimationKeyframesSequenceMetadata;
  exports.AnimationStyleMetadata = AnimationStyleMetadata;
  exports.AnimationAnimateMetadata = AnimationAnimateMetadata;
  exports.AnimationWithStepsMetadata = AnimationWithStepsMetadata;
  exports.AnimationSequenceMetadata = AnimationSequenceMetadata;
  exports.AnimationGroupMetadata = AnimationGroupMetadata;
  exports.animate = animate;
  exports.group = group;
  exports.sequence = sequence;
  exports.style = style;
  exports.state = state;
  exports.keyframes = keyframes;
  exports.transition = transition;
  exports.trigger = trigger;
}));

})();
$__System.registerDynamic('npm:rxjs/Subject.js', ['npm:rxjs/Observable.js', 'npm:rxjs/Subscriber.js', 'npm:rxjs/Subscription.js', 'npm:rxjs/util/ObjectUnsubscribedError.js', 'npm:rxjs/SubjectSubscription.js', 'npm:rxjs/symbol/rxSubscriber.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require('npm:rxjs/Observable.js');
    var Subscriber_1 = $__require('npm:rxjs/Subscriber.js');
    var Subscription_1 = $__require('npm:rxjs/Subscription.js');
    var ObjectUnsubscribedError_1 = $__require('npm:rxjs/util/ObjectUnsubscribedError.js');
    var SubjectSubscription_1 = $__require('npm:rxjs/SubjectSubscription.js');
    var rxSubscriber_1 = $__require('npm:rxjs/symbol/rxSubscriber.js');
    /**
     * @class SubjectSubscriber<T>
     */
    var SubjectSubscriber = function (_super) {
        __extends(SubjectSubscriber, _super);
        function SubjectSubscriber(destination) {
            _super.call(this, destination);
            this.destination = destination;
        }
        return SubjectSubscriber;
    }(Subscriber_1.Subscriber);
    exports.SubjectSubscriber = SubjectSubscriber;
    /**
     * @class Subject<T>
     */
    var Subject = function (_super) {
        __extends(Subject, _super);
        function Subject() {
            _super.call(this);
            this.observers = [];
            this.closed = false;
            this.isStopped = false;
            this.hasError = false;
            this.thrownError = null;
        }
        Subject.prototype[rxSubscriber_1.$$rxSubscriber] = function () {
            return new SubjectSubscriber(this);
        };
        Subject.prototype.lift = function (operator) {
            var subject = new AnonymousSubject(this, this);
            subject.operator = operator;
            return subject;
        };
        Subject.prototype.next = function (value) {
            if (this.closed) {
                throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
            }
            if (!this.isStopped) {
                var observers = this.observers;
                var len = observers.length;
                var copy = observers.slice();
                for (var i = 0; i < len; i++) {
                    copy[i].next(value);
                }
            }
        };
        Subject.prototype.error = function (err) {
            if (this.closed) {
                throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
            }
            this.hasError = true;
            this.thrownError = err;
            this.isStopped = true;
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) {
                copy[i].error(err);
            }
            this.observers.length = 0;
        };
        Subject.prototype.complete = function () {
            if (this.closed) {
                throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
            }
            this.isStopped = true;
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) {
                copy[i].complete();
            }
            this.observers.length = 0;
        };
        Subject.prototype.unsubscribe = function () {
            this.isStopped = true;
            this.closed = true;
            this.observers = null;
        };
        Subject.prototype._subscribe = function (subscriber) {
            if (this.closed) {
                throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
            } else if (this.hasError) {
                subscriber.error(this.thrownError);
                return Subscription_1.Subscription.EMPTY;
            } else if (this.isStopped) {
                subscriber.complete();
                return Subscription_1.Subscription.EMPTY;
            } else {
                this.observers.push(subscriber);
                return new SubjectSubscription_1.SubjectSubscription(this, subscriber);
            }
        };
        Subject.prototype.asObservable = function () {
            var observable = new Observable_1.Observable();
            observable.source = this;
            return observable;
        };
        Subject.create = function (destination, source) {
            return new AnonymousSubject(destination, source);
        };
        return Subject;
    }(Observable_1.Observable);
    exports.Subject = Subject;
    /**
     * @class AnonymousSubject<T>
     */
    var AnonymousSubject = function (_super) {
        __extends(AnonymousSubject, _super);
        function AnonymousSubject(destination, source) {
            _super.call(this);
            this.destination = destination;
            this.source = source;
        }
        AnonymousSubject.prototype.next = function (value) {
            var destination = this.destination;
            if (destination && destination.next) {
                destination.next(value);
            }
        };
        AnonymousSubject.prototype.error = function (err) {
            var destination = this.destination;
            if (destination && destination.error) {
                this.destination.error(err);
            }
        };
        AnonymousSubject.prototype.complete = function () {
            var destination = this.destination;
            if (destination && destination.complete) {
                this.destination.complete();
            }
        };
        AnonymousSubject.prototype._subscribe = function (subscriber) {
            var source = this.source;
            if (source) {
                return this.source.subscribe(subscriber);
            } else {
                return Subscription_1.Subscription.EMPTY;
            }
        };
        return AnonymousSubject;
    }(Subject);
    exports.AnonymousSubject = AnonymousSubject;
    

    return module.exports;
});
$__System.registerDynamic("npm:rxjs/scheduler/Action.js", ["npm:rxjs/Subscription.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscription_1 = $__require("npm:rxjs/Subscription.js");
    /**
     * A unit of work to be executed in a {@link Scheduler}. An action is typically
     * created from within a Scheduler and an RxJS user does not need to concern
     * themselves about creating and manipulating an Action.
     *
     * ```ts
     * class Action<T> extends Subscription {
     *   new (scheduler: Scheduler, work: (state?: T) => void);
     *   schedule(state?: T, delay: number = 0): Subscription;
     * }
     * ```
     *
     * @class Action<T>
     */
    var Action = function (_super) {
        __extends(Action, _super);
        function Action(scheduler, work) {
            _super.call(this);
        }
        /**
         * Schedules this action on its parent Scheduler for execution. May be passed
         * some context object, `state`. May happen at some point in the future,
         * according to the `delay` parameter, if specified.
         * @param {T} [state] Some contextual data that the `work` function uses when
         * called by the Scheduler.
         * @param {number} [delay] Time to wait before executing the work, where the
         * time unit is implicit and defined by the Scheduler.
         * @return {void}
         */
        Action.prototype.schedule = function (state, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            return this;
        };
        return Action;
    }(Subscription_1.Subscription);
    exports.Action = Action;
    

    return module.exports;
});
$__System.registerDynamic('npm:rxjs/scheduler/AsyncAction.js', ['npm:rxjs/util/root.js', 'npm:rxjs/scheduler/Action.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var root_1 = $__require('npm:rxjs/util/root.js');
    var Action_1 = $__require('npm:rxjs/scheduler/Action.js');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var AsyncAction = function (_super) {
        __extends(AsyncAction, _super);
        function AsyncAction(scheduler, work) {
            _super.call(this, scheduler, work);
            this.scheduler = scheduler;
            this.work = work;
            this.pending = false;
        }
        AsyncAction.prototype.schedule = function (state, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            if (this.closed) {
                return this;
            }
            // Always replace the current state with the new state.
            this.state = state;
            // Set the pending flag indicating that this action has been scheduled, or
            // has recursively rescheduled itself.
            this.pending = true;
            var id = this.id;
            var scheduler = this.scheduler;
            //
            // Important implementation note:
            //
            // Actions only execute once by default, unless rescheduled from within the
            // scheduled callback. This allows us to implement single and repeat
            // actions via the same code path, without adding API surface area, as well
            // as mimic traditional recursion but across asynchronous boundaries.
            //
            // However, JS runtimes and timers distinguish between intervals achieved by
            // serial `setTimeout` calls vs. a single `setInterval` call. An interval of
            // serial `setTimeout` calls can be individually delayed, which delays
            // scheduling the next `setTimeout`, and so on. `setInterval` attempts to
            // guarantee the interval callback will be invoked more precisely to the
            // interval period, regardless of load.
            //
            // Therefore, we use `setInterval` to schedule single and repeat actions.
            // If the action reschedules itself with the same delay, the interval is not
            // canceled. If the action doesn't reschedule, or reschedules with a
            // different delay, the interval will be canceled after scheduled callback
            // execution.
            //
            if (id != null) {
                this.id = this.recycleAsyncId(scheduler, id, delay);
            }
            this.delay = delay;
            // If this action has already an async Id, don't request a new one.
            this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
            return this;
        };
        AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            return root_1.root.setInterval(scheduler.flush.bind(scheduler, this), delay);
        };
        AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            // If this action is rescheduled with the same delay time, don't clear the interval id.
            if (delay !== null && this.delay === delay) {
                return id;
            }
            // Otherwise, if the action's delay time is different from the current delay,
            // clear the interval id
            return root_1.root.clearInterval(id) && undefined || undefined;
        };
        /**
         * Immediately executes this action and the `work` it contains.
         * @return {any}
         */
        AsyncAction.prototype.execute = function (state, delay) {
            if (this.closed) {
                return new Error('executing a cancelled action');
            }
            this.pending = false;
            var error = this._execute(state, delay);
            if (error) {
                return error;
            } else if (this.pending === false && this.id != null) {
                // Dequeue if the action didn't reschedule itself. Don't call
                // unsubscribe(), because the action could reschedule later.
                // For example:
                // ```
                // scheduler.schedule(function doWork(counter) {
                //   /* ... I'm a busy worker bee ... */
                //   var originalAction = this;
                //   /* wait 100ms before rescheduling the action */
                //   setTimeout(function () {
                //     originalAction.schedule(counter + 1);
                //   }, 100);
                // }, 1000);
                // ```
                this.id = this.recycleAsyncId(this.scheduler, this.id, null);
            }
        };
        AsyncAction.prototype._execute = function (state, delay) {
            var errored = false;
            var errorValue = undefined;
            try {
                this.work(state);
            } catch (e) {
                errored = true;
                errorValue = !!e && e || new Error(e);
            }
            if (errored) {
                this.unsubscribe();
                return errorValue;
            }
        };
        AsyncAction.prototype._unsubscribe = function () {
            var id = this.id;
            var scheduler = this.scheduler;
            var actions = scheduler.actions;
            var index = actions.indexOf(this);
            this.work = null;
            this.delay = null;
            this.state = null;
            this.pending = false;
            this.scheduler = null;
            if (index !== -1) {
                actions.splice(index, 1);
            }
            if (id != null) {
                this.id = this.recycleAsyncId(scheduler, id, null);
            }
        };
        return AsyncAction;
    }(Action_1.Action);
    exports.AsyncAction = AsyncAction;
    

    return module.exports;
});
$__System.registerDynamic("npm:rxjs/scheduler/QueueAction.js", ["npm:rxjs/scheduler/AsyncAction.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var AsyncAction_1 = $__require("npm:rxjs/scheduler/AsyncAction.js");
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var QueueAction = function (_super) {
        __extends(QueueAction, _super);
        function QueueAction(scheduler, work) {
            _super.call(this, scheduler, work);
            this.scheduler = scheduler;
            this.work = work;
        }
        QueueAction.prototype.schedule = function (state, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            if (delay > 0) {
                return _super.prototype.schedule.call(this, state, delay);
            }
            this.delay = delay;
            this.state = state;
            this.scheduler.flush(this);
            return this;
        };
        QueueAction.prototype.execute = function (state, delay) {
            return delay > 0 || this.closed ? _super.prototype.execute.call(this, state, delay) : this._execute(state, delay);
        };
        QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            // If delay exists and is greater than 0, or if the delay is null (the
            // action wasn't rescheduled) but was originally scheduled as an async
            // action, then recycle as an async action.
            if (delay !== null && delay > 0 || delay === null && this.delay > 0) {
                return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
            }
            // Otherwise flush the scheduler starting with this action.
            return scheduler.flush(this);
        };
        return QueueAction;
    }(AsyncAction_1.AsyncAction);
    exports.QueueAction = QueueAction;
    

    return module.exports;
});
$__System.registerDynamic("npm:rxjs/Scheduler.js", [], true, function ($__require, exports, module) {
    "use strict";
    /**
     * An execution context and a data structure to order tasks and schedule their
     * execution. Provides a notion of (potentially virtual) time, through the
     * `now()` getter method.
     *
     * Each unit of work in a Scheduler is called an {@link Action}.
     *
     * ```ts
     * class Scheduler {
     *   now(): number;
     *   schedule(work, delay?, state?): Subscription;
     * }
     * ```
     *
     * @class Scheduler
     */

    var define,
        global = this || self,
        GLOBAL = global;
    var Scheduler = function () {
        function Scheduler(SchedulerAction, now) {
            if (now === void 0) {
                now = Scheduler.now;
            }
            this.SchedulerAction = SchedulerAction;
            this.now = now;
        }
        /**
         * Schedules a function, `work`, for execution. May happen at some point in
         * the future, according to the `delay` parameter, if specified. May be passed
         * some context object, `state`, which will be passed to the `work` function.
         *
         * The given arguments will be processed an stored as an Action object in a
         * queue of actions.
         *
         * @param {function(state: ?T): ?Subscription} work A function representing a
         * task, or some unit of work to be executed by the Scheduler.
         * @param {number} [delay] Time to wait before executing the work, where the
         * time unit is implicit and defined by the Scheduler itself.
         * @param {T} [state] Some contextual data that the `work` function uses when
         * called by the Scheduler.
         * @return {Subscription} A subscription in order to be able to unsubscribe
         * the scheduled work.
         */
        Scheduler.prototype.schedule = function (work, delay, state) {
            if (delay === void 0) {
                delay = 0;
            }
            return new this.SchedulerAction(this, work).schedule(state, delay);
        };
        Scheduler.now = Date.now ? Date.now : function () {
            return +new Date();
        };
        return Scheduler;
    }();
    exports.Scheduler = Scheduler;
    

    return module.exports;
});
$__System.registerDynamic("npm:rxjs/scheduler/AsyncScheduler.js", ["npm:rxjs/Scheduler.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Scheduler_1 = $__require("npm:rxjs/Scheduler.js");
    var AsyncScheduler = function (_super) {
        __extends(AsyncScheduler, _super);
        function AsyncScheduler() {
            _super.apply(this, arguments);
            this.actions = [];
            /**
             * A flag to indicate whether the Scheduler is currently executing a batch of
             * queued actions.
             * @type {boolean}
             */
            this.active = false;
            /**
             * An internal ID used to track the latest asynchronous task such as those
             * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and
             * others.
             * @type {any}
             */
            this.scheduled = undefined;
        }
        AsyncScheduler.prototype.flush = function (action) {
            var actions = this.actions;
            if (this.active) {
                actions.push(action);
                return;
            }
            var error;
            this.active = true;
            do {
                if (error = action.execute(action.state, action.delay)) {
                    break;
                }
            } while (action = actions.shift()); // exhaust the scheduler queue
            this.active = false;
            if (error) {
                while (action = actions.shift()) {
                    action.unsubscribe();
                }
                throw error;
            }
        };
        return AsyncScheduler;
    }(Scheduler_1.Scheduler);
    exports.AsyncScheduler = AsyncScheduler;
    

    return module.exports;
});
$__System.registerDynamic("npm:rxjs/scheduler/QueueScheduler.js", ["npm:rxjs/scheduler/AsyncScheduler.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var AsyncScheduler_1 = $__require("npm:rxjs/scheduler/AsyncScheduler.js");
    var QueueScheduler = function (_super) {
        __extends(QueueScheduler, _super);
        function QueueScheduler() {
            _super.apply(this, arguments);
        }
        return QueueScheduler;
    }(AsyncScheduler_1.AsyncScheduler);
    exports.QueueScheduler = QueueScheduler;
    

    return module.exports;
});
$__System.registerDynamic('npm:rxjs/scheduler/queue.js', ['npm:rxjs/scheduler/QueueAction.js', 'npm:rxjs/scheduler/QueueScheduler.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var QueueAction_1 = $__require('npm:rxjs/scheduler/QueueAction.js');
  var QueueScheduler_1 = $__require('npm:rxjs/scheduler/QueueScheduler.js');
  exports.queue = new QueueScheduler_1.QueueScheduler(QueueAction_1.QueueAction);
  

  return module.exports;
});
$__System.registerDynamic('npm:rxjs/Notification.js', ['npm:rxjs/Observable.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var Observable_1 = $__require('npm:rxjs/Observable.js');
    /**
     * Represents a push-based event or value that an {@link Observable} can emit.
     * This class is particularly useful for operators that manage notifications,
     * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and
     * others. Besides wrapping the actual delivered value, it also annotates it
     * with metadata of, for instance, what type of push message it is (`next`,
     * `error`, or `complete`).
     *
     * @see {@link materialize}
     * @see {@link dematerialize}
     * @see {@link observeOn}
     *
     * @class Notification<T>
     */
    var Notification = function () {
        function Notification(kind, value, error) {
            this.kind = kind;
            this.value = value;
            this.error = error;
            this.hasValue = kind === 'N';
        }
        /**
         * Delivers to the given `observer` the value wrapped by this Notification.
         * @param {Observer} observer
         * @return
         */
        Notification.prototype.observe = function (observer) {
            switch (this.kind) {
                case 'N':
                    return observer.next && observer.next(this.value);
                case 'E':
                    return observer.error && observer.error(this.error);
                case 'C':
                    return observer.complete && observer.complete();
            }
        };
        /**
         * Given some {@link Observer} callbacks, deliver the value represented by the
         * current Notification to the correctly corresponding callback.
         * @param {function(value: T): void} next An Observer `next` callback.
         * @param {function(err: any): void} [error] An Observer `error` callback.
         * @param {function(): void} [complete] An Observer `complete` callback.
         * @return {any}
         */
        Notification.prototype.do = function (next, error, complete) {
            var kind = this.kind;
            switch (kind) {
                case 'N':
                    return next && next(this.value);
                case 'E':
                    return error && error(this.error);
                case 'C':
                    return complete && complete();
            }
        };
        /**
         * Takes an Observer or its individual callback functions, and calls `observe`
         * or `do` methods accordingly.
         * @param {Observer|function(value: T): void} nextOrObserver An Observer or
         * the `next` callback.
         * @param {function(err: any): void} [error] An Observer `error` callback.
         * @param {function(): void} [complete] An Observer `complete` callback.
         * @return {any}
         */
        Notification.prototype.accept = function (nextOrObserver, error, complete) {
            if (nextOrObserver && typeof nextOrObserver.next === 'function') {
                return this.observe(nextOrObserver);
            } else {
                return this.do(nextOrObserver, error, complete);
            }
        };
        /**
         * Returns a simple Observable that just delivers the notification represented
         * by this Notification instance.
         * @return {any}
         */
        Notification.prototype.toObservable = function () {
            var kind = this.kind;
            switch (kind) {
                case 'N':
                    return Observable_1.Observable.of(this.value);
                case 'E':
                    return Observable_1.Observable.throw(this.error);
                case 'C':
                    return Observable_1.Observable.empty();
            }
            throw new Error('unexpected notification kind value');
        };
        /**
         * A shortcut to create a Notification instance of the type `next` from a
         * given value.
         * @param {T} value The `next` value.
         * @return {Notification<T>} The "next" Notification representing the
         * argument.
         */
        Notification.createNext = function (value) {
            if (typeof value !== 'undefined') {
                return new Notification('N', value);
            }
            return this.undefinedValueNotification;
        };
        /**
         * A shortcut to create a Notification instance of the type `error` from a
         * given error.
         * @param {any} [err] The `error` error.
         * @return {Notification<T>} The "error" Notification representing the
         * argument.
         */
        Notification.createError = function (err) {
            return new Notification('E', undefined, err);
        };
        /**
         * A shortcut to create a Notification instance of the type `complete`.
         * @return {Notification<any>} The valueless "complete" Notification.
         */
        Notification.createComplete = function () {
            return this.completeNotification;
        };
        Notification.completeNotification = new Notification('C');
        Notification.undefinedValueNotification = new Notification('N', undefined);
        return Notification;
    }();
    exports.Notification = Notification;
    

    return module.exports;
});
$__System.registerDynamic('npm:rxjs/operator/observeOn.js', ['npm:rxjs/Subscriber.js', 'npm:rxjs/Notification.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('npm:rxjs/Subscriber.js');
    var Notification_1 = $__require('npm:rxjs/Notification.js');
    /**
     * @see {@link Notification}
     *
     * @param scheduler
     * @param delay
     * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}
     * @method observeOn
     * @owner Observable
     */
    function observeOn(scheduler, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        return this.lift(new ObserveOnOperator(scheduler, delay));
    }
    exports.observeOn = observeOn;
    var ObserveOnOperator = function () {
        function ObserveOnOperator(scheduler, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            this.scheduler = scheduler;
            this.delay = delay;
        }
        ObserveOnOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
        };
        return ObserveOnOperator;
    }();
    exports.ObserveOnOperator = ObserveOnOperator;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var ObserveOnSubscriber = function (_super) {
        __extends(ObserveOnSubscriber, _super);
        function ObserveOnSubscriber(destination, scheduler, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            _super.call(this, destination);
            this.scheduler = scheduler;
            this.delay = delay;
        }
        ObserveOnSubscriber.dispatch = function (arg) {
            var notification = arg.notification,
                destination = arg.destination,
                subscription = arg.subscription;
            notification.observe(destination);
            if (subscription) {
                subscription.unsubscribe();
            }
        };
        ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {
            var message = new ObserveOnMessage(notification, this.destination);
            message.subscription = this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, message));
        };
        ObserveOnSubscriber.prototype._next = function (value) {
            this.scheduleMessage(Notification_1.Notification.createNext(value));
        };
        ObserveOnSubscriber.prototype._error = function (err) {
            this.scheduleMessage(Notification_1.Notification.createError(err));
        };
        ObserveOnSubscriber.prototype._complete = function () {
            this.scheduleMessage(Notification_1.Notification.createComplete());
        };
        return ObserveOnSubscriber;
    }(Subscriber_1.Subscriber);
    exports.ObserveOnSubscriber = ObserveOnSubscriber;
    var ObserveOnMessage = function () {
        function ObserveOnMessage(notification, destination) {
            this.notification = notification;
            this.destination = destination;
        }
        return ObserveOnMessage;
    }();
    exports.ObserveOnMessage = ObserveOnMessage;
    

    return module.exports;
});
$__System.registerDynamic('npm:rxjs/util/ObjectUnsubscribedError.js', [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * An error thrown when an action is invalid because the object has been
     * unsubscribed.
     *
     * @see {@link Subject}
     * @see {@link BehaviorSubject}
     *
     * @class ObjectUnsubscribedError
     */
    var ObjectUnsubscribedError = function (_super) {
        __extends(ObjectUnsubscribedError, _super);
        function ObjectUnsubscribedError() {
            var err = _super.call(this, 'object unsubscribed');
            this.name = err.name = 'ObjectUnsubscribedError';
            this.stack = err.stack;
            this.message = err.message;
        }
        return ObjectUnsubscribedError;
    }(Error);
    exports.ObjectUnsubscribedError = ObjectUnsubscribedError;
    

    return module.exports;
});
$__System.registerDynamic("npm:rxjs/SubjectSubscription.js", ["npm:rxjs/Subscription.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscription_1 = $__require("npm:rxjs/Subscription.js");
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SubjectSubscription = function (_super) {
        __extends(SubjectSubscription, _super);
        function SubjectSubscription(subject, subscriber) {
            _super.call(this);
            this.subject = subject;
            this.subscriber = subscriber;
            this.closed = false;
        }
        SubjectSubscription.prototype.unsubscribe = function () {
            if (this.closed) {
                return;
            }
            this.closed = true;
            var subject = this.subject;
            var observers = subject.observers;
            this.subject = null;
            if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
                return;
            }
            var subscriberIndex = observers.indexOf(this.subscriber);
            if (subscriberIndex !== -1) {
                observers.splice(subscriberIndex, 1);
            }
        };
        return SubjectSubscription;
    }(Subscription_1.Subscription);
    exports.SubjectSubscription = SubjectSubscription;
    

    return module.exports;
});
$__System.registerDynamic('npm:rxjs/ReplaySubject.js', ['npm:rxjs/Subject.js', 'npm:rxjs/scheduler/queue.js', 'npm:rxjs/Subscription.js', 'npm:rxjs/operator/observeOn.js', 'npm:rxjs/util/ObjectUnsubscribedError.js', 'npm:rxjs/SubjectSubscription.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subject_1 = $__require('npm:rxjs/Subject.js');
    var queue_1 = $__require('npm:rxjs/scheduler/queue.js');
    var Subscription_1 = $__require('npm:rxjs/Subscription.js');
    var observeOn_1 = $__require('npm:rxjs/operator/observeOn.js');
    var ObjectUnsubscribedError_1 = $__require('npm:rxjs/util/ObjectUnsubscribedError.js');
    var SubjectSubscription_1 = $__require('npm:rxjs/SubjectSubscription.js');
    /**
     * @class ReplaySubject<T>
     */
    var ReplaySubject = function (_super) {
        __extends(ReplaySubject, _super);
        function ReplaySubject(bufferSize, windowTime, scheduler) {
            if (bufferSize === void 0) {
                bufferSize = Number.POSITIVE_INFINITY;
            }
            if (windowTime === void 0) {
                windowTime = Number.POSITIVE_INFINITY;
            }
            _super.call(this);
            this.scheduler = scheduler;
            this._events = [];
            this._bufferSize = bufferSize < 1 ? 1 : bufferSize;
            this._windowTime = windowTime < 1 ? 1 : windowTime;
        }
        ReplaySubject.prototype.next = function (value) {
            var now = this._getNow();
            this._events.push(new ReplayEvent(now, value));
            this._trimBufferThenGetEvents();
            _super.prototype.next.call(this, value);
        };
        ReplaySubject.prototype._subscribe = function (subscriber) {
            var _events = this._trimBufferThenGetEvents();
            var scheduler = this.scheduler;
            var subscription;
            if (this.closed) {
                throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
            } else if (this.hasError) {
                subscription = Subscription_1.Subscription.EMPTY;
            } else if (this.isStopped) {
                subscription = Subscription_1.Subscription.EMPTY;
            } else {
                this.observers.push(subscriber);
                subscription = new SubjectSubscription_1.SubjectSubscription(this, subscriber);
            }
            if (scheduler) {
                subscriber.add(subscriber = new observeOn_1.ObserveOnSubscriber(subscriber, scheduler));
            }
            var len = _events.length;
            for (var i = 0; i < len && !subscriber.closed; i++) {
                subscriber.next(_events[i].value);
            }
            if (this.hasError) {
                subscriber.error(this.thrownError);
            } else if (this.isStopped) {
                subscriber.complete();
            }
            return subscription;
        };
        ReplaySubject.prototype._getNow = function () {
            return (this.scheduler || queue_1.queue).now();
        };
        ReplaySubject.prototype._trimBufferThenGetEvents = function () {
            var now = this._getNow();
            var _bufferSize = this._bufferSize;
            var _windowTime = this._windowTime;
            var _events = this._events;
            var eventsCount = _events.length;
            var spliceCount = 0;
            // Trim events that fall out of the time window.
            // Start at the front of the list. Break early once
            // we encounter an event that falls within the window.
            while (spliceCount < eventsCount) {
                if (now - _events[spliceCount].time < _windowTime) {
                    break;
                }
                spliceCount++;
            }
            if (eventsCount > _bufferSize) {
                spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);
            }
            if (spliceCount > 0) {
                _events.splice(0, spliceCount);
            }
            return _events;
        };
        return ReplaySubject;
    }(Subject_1.Subject);
    exports.ReplaySubject = ReplaySubject;
    var ReplayEvent = function () {
        function ReplayEvent(time, value) {
            this.time = time;
            this.value = value;
        }
        return ReplayEvent;
    }();
    

    return module.exports;
});
$__System.registerDynamic("npm:rxjs/util/isArray.js", [], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  exports.isArray = Array.isArray || function (x) {
    return x && typeof x.length === 'number';
  };
  

  return module.exports;
});
$__System.registerDynamic("npm:rxjs/util/isObject.js", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function isObject(x) {
        return x != null && typeof x === 'object';
    }
    exports.isObject = isObject;
    

    return module.exports;
});
$__System.registerDynamic("npm:rxjs/util/isFunction.js", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function isFunction(x) {
        return typeof x === 'function';
    }
    exports.isFunction = isFunction;
    

    return module.exports;
});
$__System.registerDynamic("npm:rxjs/util/tryCatch.js", ["npm:rxjs/util/errorObject.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var errorObject_1 = $__require("npm:rxjs/util/errorObject.js");
    var tryCatchTarget;
    function tryCatcher() {
        try {
            return tryCatchTarget.apply(this, arguments);
        } catch (e) {
            errorObject_1.errorObject.e = e;
            return errorObject_1.errorObject;
        }
    }
    function tryCatch(fn) {
        tryCatchTarget = fn;
        return tryCatcher;
    }
    exports.tryCatch = tryCatch;
    ;
    

    return module.exports;
});
$__System.registerDynamic("npm:rxjs/util/errorObject.js", [], true, function ($__require, exports, module) {
  "use strict";
  // typeof any so that it we don't have to cast when comparing a result to the error object

  var define,
      global = this || self,
      GLOBAL = global;
  exports.errorObject = { e: {} };
  

  return module.exports;
});
$__System.registerDynamic("npm:rxjs/util/UnsubscriptionError.js", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * An error thrown when one or more errors have occurred during the
     * `unsubscribe` of a {@link Subscription}.
     */
    var UnsubscriptionError = function (_super) {
        __extends(UnsubscriptionError, _super);
        function UnsubscriptionError(errors) {
            _super.call(this);
            this.errors = errors;
            var err = Error.call(this, errors ? errors.length + " errors occurred during unsubscription:\n  " + errors.map(function (err, i) {
                return i + 1 + ") " + err.toString();
            }).join('\n  ') : '');
            this.name = err.name = 'UnsubscriptionError';
            this.stack = err.stack;
            this.message = err.message;
        }
        return UnsubscriptionError;
    }(Error);
    exports.UnsubscriptionError = UnsubscriptionError;
    

    return module.exports;
});
$__System.registerDynamic('npm:rxjs/Subscription.js', ['npm:rxjs/util/isArray.js', 'npm:rxjs/util/isObject.js', 'npm:rxjs/util/isFunction.js', 'npm:rxjs/util/tryCatch.js', 'npm:rxjs/util/errorObject.js', 'npm:rxjs/util/UnsubscriptionError.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var isArray_1 = $__require('npm:rxjs/util/isArray.js');
    var isObject_1 = $__require('npm:rxjs/util/isObject.js');
    var isFunction_1 = $__require('npm:rxjs/util/isFunction.js');
    var tryCatch_1 = $__require('npm:rxjs/util/tryCatch.js');
    var errorObject_1 = $__require('npm:rxjs/util/errorObject.js');
    var UnsubscriptionError_1 = $__require('npm:rxjs/util/UnsubscriptionError.js');
    /**
     * Represents a disposable resource, such as the execution of an Observable. A
     * Subscription has one important method, `unsubscribe`, that takes no argument
     * and just disposes the resource held by the subscription.
     *
     * Additionally, subscriptions may be grouped together through the `add()`
     * method, which will attach a child Subscription to the current Subscription.
     * When a Subscription is unsubscribed, all its children (and its grandchildren)
     * will be unsubscribed as well.
     *
     * @class Subscription
     */
    var Subscription = function () {
        /**
         * @param {function(): void} [unsubscribe] A function describing how to
         * perform the disposal of resources when the `unsubscribe` method is called.
         */
        function Subscription(unsubscribe) {
            /**
             * A flag to indicate whether this Subscription has already been unsubscribed.
             * @type {boolean}
             */
            this.closed = false;
            if (unsubscribe) {
                this._unsubscribe = unsubscribe;
            }
        }
        /**
         * Disposes the resources held by the subscription. May, for instance, cancel
         * an ongoing Observable execution or cancel any other type of work that
         * started when the Subscription was created.
         * @return {void}
         */
        Subscription.prototype.unsubscribe = function () {
            var hasErrors = false;
            var errors;
            if (this.closed) {
                return;
            }
            this.closed = true;
            var _a = this,
                _unsubscribe = _a._unsubscribe,
                _subscriptions = _a._subscriptions;
            this._subscriptions = null;
            if (isFunction_1.isFunction(_unsubscribe)) {
                var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);
                if (trial === errorObject_1.errorObject) {
                    hasErrors = true;
                    errors = errors || (errorObject_1.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ? flattenUnsubscriptionErrors(errorObject_1.errorObject.e.errors) : [errorObject_1.errorObject.e]);
                }
            }
            if (isArray_1.isArray(_subscriptions)) {
                var index = -1;
                var len = _subscriptions.length;
                while (++index < len) {
                    var sub = _subscriptions[index];
                    if (isObject_1.isObject(sub)) {
                        var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);
                        if (trial === errorObject_1.errorObject) {
                            hasErrors = true;
                            errors = errors || [];
                            var err = errorObject_1.errorObject.e;
                            if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {
                                errors = errors.concat(flattenUnsubscriptionErrors(err.errors));
                            } else {
                                errors.push(err);
                            }
                        }
                    }
                }
            }
            if (hasErrors) {
                throw new UnsubscriptionError_1.UnsubscriptionError(errors);
            }
        };
        /**
         * Adds a tear down to be called during the unsubscribe() of this
         * Subscription.
         *
         * If the tear down being added is a subscription that is already
         * unsubscribed, is the same reference `add` is being called on, or is
         * `Subscription.EMPTY`, it will not be added.
         *
         * If this subscription is already in an `closed` state, the passed
         * tear down logic will be executed immediately.
         *
         * @param {TeardownLogic} teardown The additional logic to execute on
         * teardown.
         * @return {Subscription} Returns the Subscription used or created to be
         * added to the inner subscriptions list. This Subscription can be used with
         * `remove()` to remove the passed teardown logic from the inner subscriptions
         * list.
         */
        Subscription.prototype.add = function (teardown) {
            if (!teardown || teardown === Subscription.EMPTY) {
                return Subscription.EMPTY;
            }
            if (teardown === this) {
                return this;
            }
            var sub = teardown;
            switch (typeof teardown) {
                case 'function':
                    sub = new Subscription(teardown);
                case 'object':
                    if (sub.closed || typeof sub.unsubscribe !== 'function') {
                        return sub;
                    } else if (this.closed) {
                        sub.unsubscribe();
                        return sub;
                    }
                    break;
                default:
                    throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
            }
            var childSub = new ChildSubscription(sub, this);
            this._subscriptions = this._subscriptions || [];
            this._subscriptions.push(childSub);
            return childSub;
        };
        /**
         * Removes a Subscription from the internal list of subscriptions that will
         * unsubscribe during the unsubscribe process of this Subscription.
         * @param {Subscription} subscription The subscription to remove.
         * @return {void}
         */
        Subscription.prototype.remove = function (subscription) {
            // HACK: This might be redundant because of the logic in `add()`
            if (subscription == null || subscription === this || subscription === Subscription.EMPTY) {
                return;
            }
            var subscriptions = this._subscriptions;
            if (subscriptions) {
                var subscriptionIndex = subscriptions.indexOf(subscription);
                if (subscriptionIndex !== -1) {
                    subscriptions.splice(subscriptionIndex, 1);
                }
            }
        };
        Subscription.EMPTY = function (empty) {
            empty.closed = true;
            return empty;
        }(new Subscription());
        return Subscription;
    }();
    exports.Subscription = Subscription;
    var ChildSubscription = function (_super) {
        __extends(ChildSubscription, _super);
        function ChildSubscription(_innerSub, _parent) {
            _super.call(this);
            this._innerSub = _innerSub;
            this._parent = _parent;
        }
        ChildSubscription.prototype._unsubscribe = function () {
            var _a = this,
                _innerSub = _a._innerSub,
                _parent = _a._parent;
            _parent.remove(this);
            _innerSub.unsubscribe();
        };
        return ChildSubscription;
    }(Subscription);
    exports.ChildSubscription = ChildSubscription;
    function flattenUnsubscriptionErrors(errors) {
        return errors.reduce(function (errs, err) {
            return errs.concat(err instanceof UnsubscriptionError_1.UnsubscriptionError ? err.errors : err);
        }, []);
    }
    

    return module.exports;
});
$__System.registerDynamic('npm:rxjs/Subscriber.js', ['npm:rxjs/util/isFunction.js', 'npm:rxjs/Subscription.js', 'npm:rxjs/Observer.js', 'npm:rxjs/symbol/rxSubscriber.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var isFunction_1 = $__require('npm:rxjs/util/isFunction.js');
    var Subscription_1 = $__require('npm:rxjs/Subscription.js');
    var Observer_1 = $__require('npm:rxjs/Observer.js');
    var rxSubscriber_1 = $__require('npm:rxjs/symbol/rxSubscriber.js');
    /**
     * Implements the {@link Observer} interface and extends the
     * {@link Subscription} class. While the {@link Observer} is the public API for
     * consuming the values of an {@link Observable}, all Observers get converted to
     * a Subscriber, in order to provide Subscription-like capabilities such as
     * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for
     * implementing operators, but it is rarely used as a public API.
     *
     * @class Subscriber<T>
     */
    var Subscriber = function (_super) {
        __extends(Subscriber, _super);
        /**
         * @param {Observer|function(value: T): void} [destinationOrNext] A partially
         * defined Observer or a `next` callback function.
         * @param {function(e: ?any): void} [error] The `error` callback of an
         * Observer.
         * @param {function(): void} [complete] The `complete` callback of an
         * Observer.
         */
        function Subscriber(destinationOrNext, error, complete) {
            _super.call(this);
            this.syncErrorValue = null;
            this.syncErrorThrown = false;
            this.syncErrorThrowable = false;
            this.isStopped = false;
            switch (arguments.length) {
                case 0:
                    this.destination = Observer_1.empty;
                    break;
                case 1:
                    if (!destinationOrNext) {
                        this.destination = Observer_1.empty;
                        break;
                    }
                    if (typeof destinationOrNext === 'object') {
                        if (destinationOrNext instanceof Subscriber) {
                            this.destination = destinationOrNext;
                            this.destination.add(this);
                        } else {
                            this.syncErrorThrowable = true;
                            this.destination = new SafeSubscriber(this, destinationOrNext);
                        }
                        break;
                    }
                default:
                    this.syncErrorThrowable = true;
                    this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);
                    break;
            }
        }
        Subscriber.prototype[rxSubscriber_1.$$rxSubscriber] = function () {
            return this;
        };
        /**
         * A static factory for a Subscriber, given a (potentially partial) definition
         * of an Observer.
         * @param {function(x: ?T): void} [next] The `next` callback of an Observer.
         * @param {function(e: ?any): void} [error] The `error` callback of an
         * Observer.
         * @param {function(): void} [complete] The `complete` callback of an
         * Observer.
         * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)
         * Observer represented by the given arguments.
         */
        Subscriber.create = function (next, error, complete) {
            var subscriber = new Subscriber(next, error, complete);
            subscriber.syncErrorThrowable = false;
            return subscriber;
        };
        /**
         * The {@link Observer} callback to receive notifications of type `next` from
         * the Observable, with a value. The Observable may call this method 0 or more
         * times.
         * @param {T} [value] The `next` value.
         * @return {void}
         */
        Subscriber.prototype.next = function (value) {
            if (!this.isStopped) {
                this._next(value);
            }
        };
        /**
         * The {@link Observer} callback to receive notifications of type `error` from
         * the Observable, with an attached {@link Error}. Notifies the Observer that
         * the Observable has experienced an error condition.
         * @param {any} [err] The `error` exception.
         * @return {void}
         */
        Subscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                this.isStopped = true;
                this._error(err);
            }
        };
        /**
         * The {@link Observer} callback to receive a valueless notification of type
         * `complete` from the Observable. Notifies the Observer that the Observable
         * has finished sending push-based notifications.
         * @return {void}
         */
        Subscriber.prototype.complete = function () {
            if (!this.isStopped) {
                this.isStopped = true;
                this._complete();
            }
        };
        Subscriber.prototype.unsubscribe = function () {
            if (this.closed) {
                return;
            }
            this.isStopped = true;
            _super.prototype.unsubscribe.call(this);
        };
        Subscriber.prototype._next = function (value) {
            this.destination.next(value);
        };
        Subscriber.prototype._error = function (err) {
            this.destination.error(err);
            this.unsubscribe();
        };
        Subscriber.prototype._complete = function () {
            this.destination.complete();
            this.unsubscribe();
        };
        return Subscriber;
    }(Subscription_1.Subscription);
    exports.Subscriber = Subscriber;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SafeSubscriber = function (_super) {
        __extends(SafeSubscriber, _super);
        function SafeSubscriber(_parent, observerOrNext, error, complete) {
            _super.call(this);
            this._parent = _parent;
            var next;
            var context = this;
            if (isFunction_1.isFunction(observerOrNext)) {
                next = observerOrNext;
            } else if (observerOrNext) {
                context = observerOrNext;
                next = observerOrNext.next;
                error = observerOrNext.error;
                complete = observerOrNext.complete;
                if (isFunction_1.isFunction(context.unsubscribe)) {
                    this.add(context.unsubscribe.bind(context));
                }
                context.unsubscribe = this.unsubscribe.bind(this);
            }
            this._context = context;
            this._next = next;
            this._error = error;
            this._complete = complete;
        }
        SafeSubscriber.prototype.next = function (value) {
            if (!this.isStopped && this._next) {
                var _parent = this._parent;
                if (!_parent.syncErrorThrowable) {
                    this.__tryOrUnsub(this._next, value);
                } else if (this.__tryOrSetError(_parent, this._next, value)) {
                    this.unsubscribe();
                }
            }
        };
        SafeSubscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                var _parent = this._parent;
                if (this._error) {
                    if (!_parent.syncErrorThrowable) {
                        this.__tryOrUnsub(this._error, err);
                        this.unsubscribe();
                    } else {
                        this.__tryOrSetError(_parent, this._error, err);
                        this.unsubscribe();
                    }
                } else if (!_parent.syncErrorThrowable) {
                    this.unsubscribe();
                    throw err;
                } else {
                    _parent.syncErrorValue = err;
                    _parent.syncErrorThrown = true;
                    this.unsubscribe();
                }
            }
        };
        SafeSubscriber.prototype.complete = function () {
            if (!this.isStopped) {
                var _parent = this._parent;
                if (this._complete) {
                    if (!_parent.syncErrorThrowable) {
                        this.__tryOrUnsub(this._complete);
                        this.unsubscribe();
                    } else {
                        this.__tryOrSetError(_parent, this._complete);
                        this.unsubscribe();
                    }
                } else {
                    this.unsubscribe();
                }
            }
        };
        SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
            try {
                fn.call(this._context, value);
            } catch (err) {
                this.unsubscribe();
                throw err;
            }
        };
        SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
            try {
                fn.call(this._context, value);
            } catch (err) {
                parent.syncErrorValue = err;
                parent.syncErrorThrown = true;
                return true;
            }
            return false;
        };
        SafeSubscriber.prototype._unsubscribe = function () {
            var _parent = this._parent;
            this._context = null;
            this._parent = null;
            _parent.unsubscribe();
        };
        return SafeSubscriber;
    }(Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('npm:rxjs/symbol/rxSubscriber.js', ['npm:rxjs/util/root.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var root_1 = $__require('npm:rxjs/util/root.js');
    var Symbol = root_1.root.Symbol;
    exports.$$rxSubscriber = typeof Symbol === 'function' && typeof Symbol.for === 'function' ? Symbol.for('rxSubscriber') : '@@rxSubscriber';
    

    return module.exports;
});
$__System.registerDynamic("npm:rxjs/Observer.js", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    exports.empty = {
        closed: true,
        next: function (value) {},
        error: function (err) {
            throw err;
        },
        complete: function () {}
    };
    

    return module.exports;
});
$__System.registerDynamic('npm:rxjs/util/toSubscriber.js', ['npm:rxjs/Subscriber.js', 'npm:rxjs/symbol/rxSubscriber.js', 'npm:rxjs/Observer.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var Subscriber_1 = $__require('npm:rxjs/Subscriber.js');
    var rxSubscriber_1 = $__require('npm:rxjs/symbol/rxSubscriber.js');
    var Observer_1 = $__require('npm:rxjs/Observer.js');
    function toSubscriber(nextOrObserver, error, complete) {
        if (nextOrObserver) {
            if (nextOrObserver instanceof Subscriber_1.Subscriber) {
                return nextOrObserver;
            }
            if (nextOrObserver[rxSubscriber_1.$$rxSubscriber]) {
                return nextOrObserver[rxSubscriber_1.$$rxSubscriber]();
            }
        }
        if (!nextOrObserver && !error && !complete) {
            return new Subscriber_1.Subscriber(Observer_1.empty);
        }
        return new Subscriber_1.Subscriber(nextOrObserver, error, complete);
    }
    exports.toSubscriber = toSubscriber;
    

    return module.exports;
});
$__System.registerDynamic('npm:rxjs/symbol/observable.js', ['npm:rxjs/util/root.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var root_1 = $__require('npm:rxjs/util/root.js');
    function getSymbolObservable(context) {
        var $$observable;
        var Symbol = context.Symbol;
        if (typeof Symbol === 'function') {
            if (Symbol.observable) {
                $$observable = Symbol.observable;
            } else {
                $$observable = Symbol('observable');
                Symbol.observable = $$observable;
            }
        } else {
            $$observable = '@@observable';
        }
        return $$observable;
    }
    exports.getSymbolObservable = getSymbolObservable;
    exports.$$observable = getSymbolObservable(root_1.root);
    

    return module.exports;
});
$__System.registerDynamic('npm:rxjs/Observable.js', ['npm:rxjs/util/root.js', 'npm:rxjs/util/toSubscriber.js', 'npm:rxjs/symbol/observable.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var root_1 = $__require('npm:rxjs/util/root.js');
    var toSubscriber_1 = $__require('npm:rxjs/util/toSubscriber.js');
    var observable_1 = $__require('npm:rxjs/symbol/observable.js');
    /**
     * A representation of any set of values over any amount of time. This the most basic building block
     * of RxJS.
     *
     * @class Observable<T>
     */
    var Observable = function () {
        /**
         * @constructor
         * @param {Function} subscribe the function that is  called when the Observable is
         * initially subscribed to. This function is given a Subscriber, to which new values
         * can be `next`ed, or an `error` method can be called to raise an error, or
         * `complete` can be called to notify of a successful completion.
         */
        function Observable(subscribe) {
            this._isScalar = false;
            if (subscribe) {
                this._subscribe = subscribe;
            }
        }
        /**
         * Creates a new Observable, with this Observable as the source, and the passed
         * operator defined as the new observable's operator.
         * @method lift
         * @param {Operator} operator the operator defining the operation to take on the observable
         * @return {Observable} a new observable with the Operator applied
         */
        Observable.prototype.lift = function (operator) {
            var observable = new Observable();
            observable.source = this;
            observable.operator = operator;
            return observable;
        };
        Observable.prototype.subscribe = function (observerOrNext, error, complete) {
            var operator = this.operator;
            var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);
            if (operator) {
                operator.call(sink, this.source);
            } else {
                sink.add(this._subscribe(sink));
            }
            if (sink.syncErrorThrowable) {
                sink.syncErrorThrowable = false;
                if (sink.syncErrorThrown) {
                    throw sink.syncErrorValue;
                }
            }
            return sink;
        };
        /**
         * @method forEach
         * @param {Function} next a handler for each value emitted by the observable
         * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise
         * @return {Promise} a promise that either resolves on observable completion or
         *  rejects with the handled error
         */
        Observable.prototype.forEach = function (next, PromiseCtor) {
            var _this = this;
            if (!PromiseCtor) {
                if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
                    PromiseCtor = root_1.root.Rx.config.Promise;
                } else if (root_1.root.Promise) {
                    PromiseCtor = root_1.root.Promise;
                }
            }
            if (!PromiseCtor) {
                throw new Error('no Promise impl found');
            }
            return new PromiseCtor(function (resolve, reject) {
                var subscription = _this.subscribe(function (value) {
                    if (subscription) {
                        // if there is a subscription, then we can surmise
                        // the next handling is asynchronous. Any errors thrown
                        // need to be rejected explicitly and unsubscribe must be
                        // called manually
                        try {
                            next(value);
                        } catch (err) {
                            reject(err);
                            subscription.unsubscribe();
                        }
                    } else {
                        // if there is NO subscription, then we're getting a nexted
                        // value synchronously during subscription. We can just call it.
                        // If it errors, Observable's `subscribe` will ensure the
                        // unsubscription logic is called, then synchronously rethrow the error.
                        // After that, Promise will trap the error and send it
                        // down the rejection path.
                        next(value);
                    }
                }, reject, resolve);
            });
        };
        Observable.prototype._subscribe = function (subscriber) {
            return this.source.subscribe(subscriber);
        };
        /**
         * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable
         * @method Symbol.observable
         * @return {Observable} this instance of the observable
         */
        Observable.prototype[observable_1.$$observable] = function () {
            return this;
        };
        // HACK: Since TypeScript inherits static properties too, we have to
        // fight against TypeScript here so Subject can have a different static create signature
        /**
         * Creates a new cold Observable by calling the Observable constructor
         * @static true
         * @owner Observable
         * @method create
         * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor
         * @return {Observable} a new cold observable
         */
        Observable.create = function (subscribe) {
            return new Observable(subscribe);
        };
        return Observable;
    }();
    exports.Observable = Observable;
    

    return module.exports;
});
$__System.registerDynamic('npm:rxjs/util/root.js', [], true, function ($__require, exports, module) {
    "use strict";
    /**
     * window: browser in DOM main thread
     * self: browser in WebWorker
     * global: Node.js/other
     */

    var define,
        global = this || self,
        GLOBAL = global;
    exports.root = typeof window == 'object' && window.window === window && window || typeof self == 'object' && self.self === self && self || typeof global == 'object' && global.global === global && global;
    if (!exports.root) {
        throw new Error('RxJS could not find any global context (window, self, global)');
    }
    

    return module.exports;
});
$__System.registerDynamic('npm:rxjs/operator/toPromise.js', ['npm:rxjs/util/root.js'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var root_1 = $__require('npm:rxjs/util/root.js');
    /* tslint:disable:max-line-length */
    /**
     * @param PromiseCtor
     * @return {Promise<T>}
     * @method toPromise
     * @owner Observable
     */
    function toPromise(PromiseCtor) {
        var _this = this;
        if (!PromiseCtor) {
            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
                PromiseCtor = root_1.root.Rx.config.Promise;
            } else if (root_1.root.Promise) {
                PromiseCtor = root_1.root.Promise;
            }
        }
        if (!PromiseCtor) {
            throw new Error('no Promise impl found');
        }
        return new PromiseCtor(function (resolve, reject) {
            var value;
            _this.subscribe(function (x) {
                return value = x;
            }, function (err) {
                return reject(err);
            }, function () {
                return resolve(value);
            });
        });
    }
    exports.toPromise = toPromise;
    

    return module.exports;
});
$__System.registerDynamic('npm:rxjs/add/operator/toPromise.js', ['npm:rxjs/Observable.js', 'npm:rxjs/operator/toPromise.js'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('npm:rxjs/Observable.js');
  var toPromise_1 = $__require('npm:rxjs/operator/toPromise.js');
  Observable_1.Observable.prototype.toPromise = toPromise_1.toPromise;
  

  return module.exports;
});
$__System.registerDynamic("App/services/mediator.service.js", ["npm:@angular/core/bundles/core.umd.js", "npm:rxjs/Subject.js", "npm:rxjs/ReplaySubject.js", "npm:rxjs/add/operator/toPromise.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var Subject_1 = $__require("npm:rxjs/Subject.js");
    var ReplaySubject_1 = $__require("npm:rxjs/ReplaySubject.js");
    $__require("npm:rxjs/add/operator/toPromise.js");
    var MediatorService = function () {
        function MediatorService() {
            // Sources
            this.surveillanceRemoved = new Subject_1.Subject();
            this.surveillanceAdded = new Subject_1.Subject();
            this.filterChange = new Subject_1.Subject();
            this.searching = new Subject_1.Subject();
            this._changeMainView = new Subject_1.Subject();
            this._userInfo = new ReplaySubject_1.ReplaySubject(1);
            this._performeSearch = new Subject_1.Subject();
            this._clearSearchTerm = new Subject_1.Subject();
            this._searchTerm = new ReplaySubject_1.ReplaySubject(1);
            this._errorMessage = new ReplaySubject_1.ReplaySubject(1);
            this.surveillancerRemoved$ = this.surveillanceRemoved.asObservable();
            this.surveillanceAdded$ = this.surveillanceAdded.asObservable();
            this.searching$ = this.searching.asObservable();
            this.changeMainView$ = this._changeMainView.asObservable();
            this.userInfo$ = this._userInfo.asObservable();
            this.filterChange$ = this.filterChange.asObservable();
            this.performeSearch$ = this._performeSearch.asObservable();
            this.clearSearchTerm$ = this._clearSearchTerm.asObservable();
            this.searchTerm$ = this._searchTerm.asObservable();
            this.errorMessage$ = this._errorMessage.asObservable();
        }
        MediatorService.prototype.notifyAboutDeletedSurveillance = function (person) {
            this.surveillanceRemoved.next(person);
        };
        MediatorService.prototype.notifyAboutAddedSurveillance = function (person) {
            this.surveillanceAdded.next(person);
        };
        MediatorService.prototype.filterChanged = function (change) {
            this.filterChange.next(change);
        };
        MediatorService.prototype.isSearching = function (value) {
            this.searching.next(value);
        };
        MediatorService.prototype.changeMainView = function (view) {
            this._changeMainView.next(view);
        };
        MediatorService.prototype.pushUserInfo = function (user) {
            this._userInfo.next(user);
        };
        MediatorService.prototype.performeSearch = function () {
            this._performeSearch.next();
        };
        MediatorService.prototype.clearSearchTerm = function () {
            this._clearSearchTerm.next();
        };
        MediatorService.prototype.searchTerm = function (term) {
            this._searchTerm.next(term);
        };
        MediatorService.prototype.setErrorMessage = function (message) {
            this._errorMessage.next(message);
        };
        return MediatorService;
    }();
    MediatorService = __decorate([core_1.Injectable(), __metadata("design:paramtypes", [])], MediatorService);
    exports.MediatorService = MediatorService;
    return module.exports;
});
$__System.registerDynamic("App/services/api.service.js", ["npm:@angular/core/bundles/core.umd.js", "npm:@angular/http/bundles/http.umd.js", "npm:rxjs/Observable.js", "npm:ng2-toastr/ng2-toastr.js", "npm:rxjs/add/operator/toPromise.js", "npm:rxjs/add/operator/map.js", "npm:rxjs/add/operator/catch.js", "npm:rxjs/observable/of.js", "App/resources/app-settings.js", "App/models/UtilityModels.js", "App/services/mediator.service.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var http_1 = $__require("npm:@angular/http/bundles/http.umd.js");
    var Observable_1 = $__require("npm:rxjs/Observable.js");
    var ng2_toastr_1 = $__require("npm:ng2-toastr/ng2-toastr.js");
    $__require("npm:rxjs/add/operator/toPromise.js");
    $__require("npm:rxjs/add/operator/map.js");
    $__require("npm:rxjs/add/operator/catch.js");
    var of_1 = $__require("npm:rxjs/observable/of.js");
    var endpoints = $__require("App/resources/app-settings.js");
    var UtilityModels_1 = $__require("App/models/UtilityModels.js");
    var mediator_service_1 = $__require("App/services/mediator.service.js");
    var ApiService = function () {
        function ApiService(http, toastr, mediator) {
            this.http = http;
            this.toastr = toastr;
            this.mediator = mediator;
            this.getOptions = new http_1.RequestOptions({ headers: new http_1.Headers({ "Accept": "application/json" }) });
            this.postOptions = new http_1.RequestOptions({ headers: new http_1.Headers({ "Content-Type": "application/json", "Accept": "application/json" }) });
        }
        ApiService.prototype.search = function (query) {
            var _this = this;
            var endpoint = endpoints.apiPersonSearch;
            return this.http.post(endpoint, query, this.postOptions).map(function (res) {
                return _this.extractData(res);
            });
        };
        ApiService.prototype.getDetails = function (person) {
            var _this = this;
            return this.http.post(endpoints.apiPersonDetail, person, this.postOptions).map(function (res) {
                return _this.extractData(res);
            });
        };
        ApiService.prototype.getSurveillanceForProject = function () {
            var _this = this;
            return this.http.get(endpoints.apiProjectSurveillance, this.getOptions).map(function (res) {
                return _this.extractData(res);
            });
        };
        ApiService.prototype.getNextCheckTime = function () {
            return this.http.get(endpoints.apiNextCheck, this.getOptions).toPromise().then(function (response) {
                return response.json();
            }).catch(this.handleError);
        };
        ApiService.prototype.getPervousCheckTime = function () {
            return this.http.get(endpoints.apiPreviousCheck, this.getOptions).toPromise().then(function (response) {
                return response.json();
            }).catch(this.handleError);
        };
        ApiService.prototype.postSurveillance = function (url, body) {
            return this.http.post("" + url, JSON.stringify(body), this.postOptions).toPromise().then(function (response) {
                return response.json();
            }).catch(this.handleError);
        };
        ApiService.prototype.deleteSurveillance = function (url) {
            return this.http.delete("" + url, this.getOptions).toPromise().then(function (response) {
                return response.json();
            }).catch(this.handleError);
        };
        ApiService.prototype.acceptChanges = function (url, body) {
            return this.http.put(url, JSON.stringify(body), this.postOptions).toPromise().then(function (response) {
                return response.json();
            }).catch(this.handleError);
        };
        ApiService.prototype.getFamily = function (nin) {
            var url = endpoints.apiGetFamily.concat(nin);
            return this.http.get("" + url, this.getOptions).toPromise().then(function (response) {
                return response.json();
            }).catch(this.handleError);
        };
        ApiService.prototype.getFilters = function () {
            var _this = this;
            return this.http.get(endpoints.apiGetFilters, this.getOptions).map(function (res) {
                return _this.extractData(res);
            });
        };
        ApiService.prototype.getUser = function () {
            var _this = this;
            return this.http.get(endpoints.apiGetUser, this.getOptions).map(function (res) {
                return _this.extractData(res);
            });
        };
        ApiService.prototype.isLoggedIn = function () {
            return this.http.get(endpoints.apiIsLoggedIn, this.getOptions);
        };
        ApiService.prototype.logIn = function (data) {
            return this.http.post(endpoints.apiLogIn, data, this.postOptions).toPromise();
        };
        ApiService.prototype.logOut = function () {
            return this.http.get(endpoints.apiLogOut, this.getOptions).map(function (res) {
                return res;
            });
        };
        ApiService.prototype.createUser = function (user) {
            return this.http.post(endpoints.apiCreateUser, user, this.postOptions).map(function (res) {
                return res.json();
            });
        };
        ApiService.prototype.updateUser = function (user) {
            return this.http.put(endpoints.apiUpdateUser, user, this.postOptions).map(function (res) {
                return res.json();
            });
        };
        ApiService.prototype.updateRegisterUser = function (form) {
            return this.http.post(endpoints.apiUpdateRegisterUser, form, this.postOptions).map(function (res) {
                return res.json();
            });
        };
        ApiService.prototype.hasValidRegisterUser = function () {
            var _this = this;
            return this.http.get(endpoints.apiHasValidRegisterUser, this.getOptions).map(function (res) {
                return res.json();
            }).catch(function (error) {
                console.log("Got error in api service");
                _this.customeErrorHandling(new UtilityModels_1.ErrorMessage("Kunne ikke oppnå kontakt med RegisterPlattformen"));
                return of_1.of(false);
            });
        };
        ApiService.prototype.checkRegisterUser = function (form) {
            return this.http.post(endpoints.apiCheckRegisterUser, form, this.postOptions).map(function (res) {
                return res.json();
            });
        };
        ApiService.prototype.getIndexedProjectSurveillances = function (projectid) {
            // return this.http.get(endpoints.apiIndexedProjectSurveillance.concat(String(projectid)), this.getOptions)
            //    .map((res: Response) => res.json());
            return this.simpleGetRequest(endpoints.apiIndexedProjectSurveillance.concat(String(projectid)));
        };
        ApiService.prototype.validUserInformation = function () {
            return this.http.get(endpoints.apiValidUserInformation, this.getOptions).map(function (res) {
                return res.json();
            });
        };
        ApiService.prototype.generateNewPassword = function (username) {
            return this.http.get(endpoints.apiGenerateNewPassword.concat(username), this.getOptions).map(function (res) {
                return res.json();
            });
        };
        ApiService.prototype.getTags = function () {
            return this.simpleGetRequest(endpoints.apiGetTags);
        };
        ApiService.prototype.addTag = function (id, tag) {
            return this.http.put(endpoints.apiUpdateTag.concat("?commonIdentifier=" + id + "&tag=" + tag), this.getOptions).map(function (res) {
                return res.json();
            });
        };
        ApiService.prototype.removeTag = function (id, tag) {
            return this.http.delete(endpoints.apiUpdateTag.concat("?commonIdentifier=" + id + "&tag=" + tag), this.getOptions).map(function (res) {
                return res.json();
            });
        };
        ApiService.prototype.saveSearch = function (search) {
            return this.http.post(endpoints.apiSavedSearches, search, this.postOptions).map(function (res) {
                return res.json();
            }).catch(this.handleHttpError);
        };
        ApiService.prototype.deleteSearch = function (search) {
            return this.http.delete(endpoints.apiSavedSearches.concat("?dbname=" + search.dbName), this.postOptions).map(function (res) {
                return res.json();
            }).catch(this.handleHttpError);
        };
        ApiService.prototype.getSavedSearches = function () {
            return this.simpleGetRequest(endpoints.apiSavedSearches);
        };
        ApiService.prototype.addComment = function (comment) {
            return this.http.post(endpoints.apiComments, comment, this.postOptions).map(function (res) {
                return res.json();
            }).catch(this.handleHttpError);
        };
        ApiService.prototype.removeComment = function (comment) {
            return this.http.delete(endpoints.apiComments.concat("?key=" + comment.key + "&commonIdentifier=" + comment.commonIdentifier), this.postOptions).map(function (res) {
                return res.json();
            }).catch(this.handleHttpError);
        };
        ApiService.prototype.getAllComments = function () {
            return this.simpleGetRequest(endpoints.apiComments);
        };
        ApiService.prototype.latestSynchronization = function () {
            return this.simpleGetRequest(endpoints.apiLastestSync);
        };
        ApiService.prototype.simpleGetRequest = function (url) {
            return this.http.get(url).map(function (res) {
                return res.json();
            }).catch(this.handleHttpError);
        };
        ApiService.prototype.extractData = function (res) {
            var body = res.json();
            return body;
        };
        ApiService.prototype.handleHttpError = function (error) {
            var errMsg;
            if (error instanceof http_1.Response) {
                var body = error.json() || "";
                var err = body.error || JSON.stringify(body);
                errMsg = error.status + " - " + (error.statusText || "") + " " + err;
            } else {
                errMsg = error.message ? error.message : error.toString();
            }
            console.error(errMsg);
            this.toastr.error(errMsg);
            return Observable_1.Observable.throw(errMsg);
        };
        ApiService.prototype.customeErrorHandling = function (error) {
            this.mediator.setErrorMessage(error);
        };
        ApiService.prototype.handleError = function (error) {
            var friendlyMessage = "";
            //if error.status is not set it's an error from angular http
            if (!error.status) {
                console.log("Got error when doing http server call in api.service.ts: ");
                console.log(error.message || error);
                return Promise.reject("Noe gikk galt da websiden prøvde å kommunisere med server");
            }
            if (error.status === 404) friendlyMessage = "Oppnår ikke kontakt med tjener. Prøv igjen senere";
            return Promise.reject(friendlyMessage || error.status + " " + error.statusText);
        };
        return ApiService;
    }();
    ApiService = __decorate([core_1.Injectable(), __metadata("design:paramtypes", [http_1.Http, ng2_toastr_1.ToastsManager, mediator_service_1.MediatorService])], ApiService);
    exports.ApiService = ApiService;
    return module.exports;
});
$__System.registerDynamic("App/person/dashboard/comments-tile/comments-tile.component.js", ["npm:@angular/core/bundles/core.umd.js", "App/services/api.service.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var api_service_1 = $__require("App/services/api.service.js");
    var CommentsTileComponent = function () {
        function CommentsTileComponent(apiService) {
            this.apiService = apiService;
        }
        CommentsTileComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.loading = true;
            this.apiService.getAllComments().subscribe(function (res) {
                _this.commentList = res;
                _this.loading = false;
                $('.ui.accordion').accordion('refresh');
            });
        };
        CommentsTileComponent.prototype.ngAfterViewInit = function () {
            $('.ui.accordion').accordion();
        };
        return CommentsTileComponent;
    }();
    CommentsTileComponent = __decorate([core_1.Component({
        moduleId: module.id,
        selector: "comments-tile",
        templateUrl: "comments-tile.component.html",
        styleUrls: ["../dashboard.component.css"]
    }), __metadata("design:paramtypes", [api_service_1.ApiService])], CommentsTileComponent);
    exports.CommentsTileComponent = CommentsTileComponent;
    return module.exports;
});
$__System.registerDynamic("App/app.module.js", ["npm:@angular/core/bundles/core.umd.js", "npm:@angular/platform-browser/bundles/platform-browser.umd.js", "npm:@angular/http/bundles/http.umd.js", "npm:ng-semantic/ng-semantic.js", "npm:@angular/forms/bundles/forms.umd.js", "npm:ng2-toastr/ng2-toastr.js", "npm:rxjs/add/operator/map.js", "App/app.routing.js", "App/app.component.js", "App/person/search/person-search/person-search.component.js", "App/person/person-detail/person-detail.component.js", "App/person/surveillance/surveillance-overview/surveillance-overview.component.js", "App/person/surveillance/surveillance-status/surveillance-status.component.js", "App/person/hit/hit-overview/hit-overview.component.js", "App/person/detailedWindow/json-detail/json-detail.component.js", "App/person/detailedWindow/json-diff/json-diff.component.js", "App/person/detailedWindow/family/family.component.js", "App/person/filter/filter-container.component.js", "App/person/filter/filter-group.component.js", "App/person/hit/hit-notifications/hit-notifications.component.js", "App/person/filter/filtertypes/agebox/agebox.component.js", "App/person/search/search-list/search-list.component.js", "App/person/search/search-detail/search-detail.component.js", "App/person/surveillance/surveillance-list/surveillance-list.component.js", "App/person/surveillance/sureveillance-detail/surveillance-detail.component.js", "App/person/detailedWindow/simple-json-detail/simple-json-detail.component.js", "App/person/detailedWindow/simple-json-diff/simple-json-diff.component.js", "App/services/api.service.js", "App/services/mediator.service.js", "App/services/data-manager.service.js", "App/person/hit/hit-information/hit-information.component.js", "App/person/hit/hit-personal/hit-personal.component.js", "App/services/user-manager.service.js", "App/person/hit/hit-professional/hit-professional.component.js", "App/custom-pipes/registerfullname.pipe.js", "App/custom-pipes/simpledate.pipe.js", "App/custom-pipes/projectname.pipe.js", "App/custom-pipes/registeridentifiername.js", "App/user/user.component.js", "App/login/login.component.js", "App/user/terms.component.js", "App/user/loggedInUser.component.js", "App/user/register-user/register-user.component.js", "App/user/create-user/create-user.component.js", "App/user/invalid-register-user/invalid-register-user.component.js", "App/user/user-details/user-details.component.js", "App/user/update-user/update-user.component.js", "App/user/forgotten-password/forgotten-password.component.js", "App/user/create-user/create-user-success.component.js", "App/custom-pipes/rolename.pipe.js", "App/services/default-request-options.js", "App/services/filter-manager.service.js", "App/custom-pipes/filtergroup.pipe.js", "App/person/filter/filtertypes/tagfilter/tagfilter.component.js", "App/custom-pipes/teamsurveillance.pipe.js", "App/person/search/active-filters/active-filters.component.js", "App/services/search-manager.service.js", "App/person/filter/filtertypes/children/children-filter.component.js", "App/error/error-message.component.js", "App/person/search/saved-search/saved-search.component.js", "App/person/filter/filtertypes/parent/parent-filter.component.js", "App/custom-pipes/saved-search.pipe.js", "App/person/comments/comments.component.js", "App/person/comments/create-comment.component.js", "App/person/index/index.component.js", "App/person/dashboard/saved-search-tile/saved-search-tile.component.js", "App/person/dashboard/dashboard.component.js", "App/person/dashboard/tag-tile/tag-tile.component.js", "App/custom-pipes/tag.pipe.js", "App/person/dashboard/links-tile/links-tile.component.js", "App/person/dashboard/latest-checks-tiles/latest-checks-tile.component.js", "App/person/dashboard/comments-tile/comments-tile.component.js"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("npm:@angular/core/bundles/core.umd.js");
    var platform_browser_1 = $__require("npm:@angular/platform-browser/bundles/platform-browser.umd.js");
    var http_1 = $__require("npm:@angular/http/bundles/http.umd.js");
    var ng_semantic_1 = $__require("npm:ng-semantic/ng-semantic.js");
    var forms_1 = $__require("npm:@angular/forms/bundles/forms.umd.js");
    var forms_2 = $__require("npm:@angular/forms/bundles/forms.umd.js");
    var ng2_toastr_1 = $__require("npm:ng2-toastr/ng2-toastr.js");
    $__require("npm:rxjs/add/operator/map.js");
    var app_routing_1 = $__require("App/app.routing.js");
    var app_component_1 = $__require("App/app.component.js");
    var person_search_component_1 = $__require("App/person/search/person-search/person-search.component.js");
    var person_detail_component_1 = $__require("App/person/person-detail/person-detail.component.js");
    var surveillance_overview_component_1 = $__require("App/person/surveillance/surveillance-overview/surveillance-overview.component.js");
    var surveillance_status_component_1 = $__require("App/person/surveillance/surveillance-status/surveillance-status.component.js");
    var hit_overview_component_1 = $__require("App/person/hit/hit-overview/hit-overview.component.js");
    var json_detail_component_1 = $__require("App/person/detailedWindow/json-detail/json-detail.component.js");
    var json_diff_component_1 = $__require("App/person/detailedWindow/json-diff/json-diff.component.js");
    var family_component_1 = $__require("App/person/detailedWindow/family/family.component.js");
    var filter_container_component_1 = $__require("App/person/filter/filter-container.component.js");
    var filter_group_component_1 = $__require("App/person/filter/filter-group.component.js");
    var hit_notifications_component_1 = $__require("App/person/hit/hit-notifications/hit-notifications.component.js");
    var agebox_component_1 = $__require("App/person/filter/filtertypes/agebox/agebox.component.js");
    var search_list_component_1 = $__require("App/person/search/search-list/search-list.component.js");
    var search_detail_component_1 = $__require("App/person/search/search-detail/search-detail.component.js");
    var surveillance_list_component_1 = $__require("App/person/surveillance/surveillance-list/surveillance-list.component.js");
    var surveillance_detail_component_1 = $__require("App/person/surveillance/sureveillance-detail/surveillance-detail.component.js");
    var simple_json_detail_component_1 = $__require("App/person/detailedWindow/simple-json-detail/simple-json-detail.component.js");
    var simple_json_diff_component_1 = $__require("App/person/detailedWindow/simple-json-diff/simple-json-diff.component.js");
    var api_service_1 = $__require("App/services/api.service.js");
    var mediator_service_1 = $__require("App/services/mediator.service.js");
    var data_manager_service_1 = $__require("App/services/data-manager.service.js");
    var hit_information_component_1 = $__require("App/person/hit/hit-information/hit-information.component.js");
    var hit_personal_component_1 = $__require("App/person/hit/hit-personal/hit-personal.component.js");
    var user_manager_service_1 = $__require("App/services/user-manager.service.js");
    var hit_professional_component_1 = $__require("App/person/hit/hit-professional/hit-professional.component.js");
    var registerfullname_pipe_1 = $__require("App/custom-pipes/registerfullname.pipe.js");
    var simpledate_pipe_1 = $__require("App/custom-pipes/simpledate.pipe.js");
    var projectname_pipe_1 = $__require("App/custom-pipes/projectname.pipe.js");
    var registeridentifiername_1 = $__require("App/custom-pipes/registeridentifiername.js");
    var user_component_1 = $__require("App/user/user.component.js");
    var login_component_1 = $__require("App/login/login.component.js");
    var terms_component_1 = $__require("App/user/terms.component.js");
    var loggedInUser_component_1 = $__require("App/user/loggedInUser.component.js");
    var register_user_component_1 = $__require("App/user/register-user/register-user.component.js");
    var create_user_component_1 = $__require("App/user/create-user/create-user.component.js");
    var invalid_register_user_component_1 = $__require("App/user/invalid-register-user/invalid-register-user.component.js");
    var user_details_component_1 = $__require("App/user/user-details/user-details.component.js");
    var update_user_component_1 = $__require("App/user/update-user/update-user.component.js");
    var forgotten_password_component_1 = $__require("App/user/forgotten-password/forgotten-password.component.js");
    var create_user_success_component_1 = $__require("App/user/create-user/create-user-success.component.js");
    var rolename_pipe_1 = $__require("App/custom-pipes/rolename.pipe.js");
    var default_request_options_1 = $__require("App/services/default-request-options.js");
    var filter_manager_service_1 = $__require("App/services/filter-manager.service.js");
    var filtergroup_pipe_1 = $__require("App/custom-pipes/filtergroup.pipe.js");
    var tagfilter_component_1 = $__require("App/person/filter/filtertypes/tagfilter/tagfilter.component.js");
    var teamsurveillance_pipe_1 = $__require("App/custom-pipes/teamsurveillance.pipe.js");
    var active_filters_component_1 = $__require("App/person/search/active-filters/active-filters.component.js");
    var search_manager_service_1 = $__require("App/services/search-manager.service.js");
    var children_filter_component_1 = $__require("App/person/filter/filtertypes/children/children-filter.component.js");
    var error_message_component_1 = $__require("App/error/error-message.component.js");
    var saved_search_component_1 = $__require("App/person/search/saved-search/saved-search.component.js");
    var parent_filter_component_1 = $__require("App/person/filter/filtertypes/parent/parent-filter.component.js");
    var saved_search_pipe_1 = $__require("App/custom-pipes/saved-search.pipe.js");
    var comments_component_1 = $__require("App/person/comments/comments.component.js");
    var create_comment_component_1 = $__require("App/person/comments/create-comment.component.js");
    var index_component_1 = $__require("App/person/index/index.component.js");
    var saved_search_tile_component_1 = $__require("App/person/dashboard/saved-search-tile/saved-search-tile.component.js");
    var dashboard_component_1 = $__require("App/person/dashboard/dashboard.component.js");
    var tag_tile_component_1 = $__require("App/person/dashboard/tag-tile/tag-tile.component.js");
    var tag_pipe_1 = $__require("App/custom-pipes/tag.pipe.js");
    var links_tile_component_1 = $__require("App/person/dashboard/links-tile/links-tile.component.js");
    var latest_checks_tile_component_1 = $__require("App/person/dashboard/latest-checks-tiles/latest-checks-tile.component.js");
    var comments_tile_component_1 = $__require("App/person/dashboard/comments-tile/comments-tile.component.js");
    var AppModule = function () {
        function AppModule() {}
        return AppModule;
    }();
    AppModule = __decorate([core_1.NgModule({
        imports: [platform_browser_1.BrowserModule, app_routing_1.routing, http_1.HttpModule, forms_1.ReactiveFormsModule, forms_2.FormsModule, http_1.JsonpModule, ng_semantic_1.NgSemanticModule, ng2_toastr_1.ToastModule],
        declarations: [app_component_1.AppComponent, index_component_1.IndexComponent, person_search_component_1.PersonSearchComponent, rolename_pipe_1.RoleNamePipe, tagfilter_component_1.TagFilterComponent, person_detail_component_1.PersonDetailComponent, surveillance_list_component_1.SurveillanceListComponent, surveillance_overview_component_1.SurveillanceOverview, filtergroup_pipe_1.FiltergroupPipe, surveillance_status_component_1.SurveillanceStatusComponent, registerfullname_pipe_1.RegisterFullNamePipe, hit_overview_component_1.HitOverviewComponent, teamsurveillance_pipe_1.TeamFilterPipe, json_detail_component_1.JsonDetailComponent, json_diff_component_1.JsonDiffComponent, hit_notifications_component_1.HitNotificationsComponent, registerfullname_pipe_1.RegisterFilterFullNamePipe, family_component_1.FamilyComponent, simpledate_pipe_1.SimpleDatePipe, filter_container_component_1.FilterContainerComponent, create_user_success_component_1.CreateUserSuccessComponent, tag_pipe_1.TagPipe, filter_group_component_1.FilterGroupComponent, projectname_pipe_1.ProjectNamePipe, registeridentifiername_1.RegisterIdentifierNamePipe, agebox_component_1.AgeBoxComponent, active_filters_component_1.ActiveFiltersComponent, search_list_component_1.SearchListComponent, search_detail_component_1.SearchDetailComponent, surveillance_detail_component_1.SurveillanceDetailComponent, simple_json_detail_component_1.SimpleJsonDetailComponent, simple_json_diff_component_1.SimpleJsonDiffComponent, hit_information_component_1.HitInformationComponent, hit_personal_component_1.HitPersonalComponent, hit_professional_component_1.HitProfessionalComponent, login_component_1.LoginComponent, terms_component_1.TermsComponent, user_component_1.UserComponent, loggedInUser_component_1.LoggedInUserComponent, register_user_component_1.RegisterUserComponent, create_user_component_1.CreateUserComponent, invalid_register_user_component_1.InvalidRegisterUserComponent, user_details_component_1.UserDetailsComponent, update_user_component_1.UpdateUserComponent, forgotten_password_component_1.ForgottenPasswordComponent, children_filter_component_1.ChildrenFilterComponent, error_message_component_1.ErrorMessageComponent, saved_search_component_1.SavedSearchComponent, parent_filter_component_1.ParentFilterComponent, saved_search_pipe_1.SavedSearchPipe, comments_component_1.CommentsComponent, create_comment_component_1.CreateCommentComponent, saved_search_tile_component_1.SavedSearchTileComponent, dashboard_component_1.DashboardComponent, tag_tile_component_1.TagTileComponent, links_tile_component_1.LinksTileComponent, latest_checks_tile_component_1.LatestCheckTileComponent, comments_tile_component_1.CommentsTileComponent],
        providers: [app_routing_1.appRoutingProviders, default_request_options_1.requestOptionsProvider, api_service_1.ApiService, mediator_service_1.MediatorService, data_manager_service_1.DataManagerService, user_manager_service_1.UserManagerService, filter_manager_service_1.FilterManagerService, search_manager_service_1.SearchManagerService],
        bootstrap: [app_component_1.AppComponent]
    }), __metadata("design:paramtypes", [])], AppModule);
    exports.AppModule = AppModule;
    return module.exports;
});
$__System.registerDynamic("App/main.js", ["npm:@angular/platform-browser-dynamic/bundles/platform-browser-dynamic.umd.js", "App/app.module.js"], true, function ($__require, exports, module) {
  "use strict";
  ///<reference path="../node_modules/@types/node/index.d.ts"/>
  ///<reference path="../node_modules/@types/core-js/index.d.ts"/>

  var define,
      global = this || self,
      GLOBAL = global;
  var platform_browser_dynamic_1 = $__require("npm:@angular/platform-browser-dynamic/bundles/platform-browser-dynamic.umd.js");
  var app_module_1 = $__require("App/app.module.js");
  platform_browser_dynamic_1.platformBrowserDynamic().bootstrapModule(app_module_1.AppModule);
  return module.exports;
});
})
(function(factory) {
  if (typeof define == 'function' && define.amd)
    define([], factory);
  else if (typeof module == 'object' && module.exports && typeof require == 'function')
    module.exports = factory();
  else
    factory();
});
//# sourceMappingURL=app.js.map